function _0x503e(t){var e=(()=>{var e=new Uint32Array(256);for(let r=0;r<256;r++){let t=r;for(let r=0;r<8;r++)t=1&t?t>>>1^3988292384:t>>>1;e[r]=t}return e})();let n=4294967295,l=199;for(let r=0;r<t.length;r++){var a=255&(t[r]^l),a=255&(n^a);n=n>>>8^e[a],l=255&(l<<3|l>>>5)}return(2779096485^n)>>>0}

const COUNTRIES = [
    { name: 'Afghanistan', code: 'AF', nativeName: 'Ø§ÙØºØ§Ù†Ø³ØªØ§Ù†', alpha3Code: 'AFG' },
    { name: 'Albania', code: 'AL', nativeName: 'ShqipÃ«ri', alpha3Code: 'ALB' },
    { name: 'Algeria', code: 'DZ', nativeName: 'Ø§Ù„Ø¬Ø²Ø§Ø¦Ø±', alpha3Code: 'DZA' },
    { name: 'American Samoa', code: 'AS', nativeName: 'Amerika SÄmoa', alpha3Code: 'ASM' },
    { name: 'Andorra', code: 'AD', nativeName: 'Andorra', alpha3Code: 'AND' },
    { name: 'Angola', code: 'AO', nativeName: 'Angola', alpha3Code: 'AGO' },
    { name: 'Anguilla', code: 'AI', nativeName: 'Anguilla', alpha3Code: 'AIA' },
    { name: 'Antarctica', code: 'AQ', nativeName: 'Antarctica', alpha3Code: 'ATA' },
    { name: 'Antigua and Barbuda', code: 'AG', nativeName: 'Antigua and Barbuda', alpha3Code: 'ATG' },
    { name: 'Argentina', code: 'AR', nativeName: 'Argentina', alpha3Code: 'ARG' },
    { name: 'Armenia', code: 'AM', nativeName: 'Õ€Õ¡ÕµÕ¡Õ½Õ¿Õ¡Õ¶', alpha3Code: 'ARM' },
    { name: 'Aruba', code: 'AW', nativeName: 'Aruba', alpha3Code: 'ABW' },
    { name: 'Australia', code: 'AU', nativeName: 'Australia', alpha3Code: 'AUS' },
    { name: 'Austria', code: 'AT', nativeName: 'Ã–sterreich', alpha3Code: 'AUT' },
    { name: 'Azerbaijan', code: 'AZ', nativeName: 'AzÉ™rbaycan', alpha3Code: 'AZE' },
    { name: 'Bahamas (the)', code: 'BS', nativeName: 'Bahamas', alpha3Code: 'BHS' },
    { name: 'Bahrain', code: 'BH', nativeName: 'Ø§Ù„Ø¨Ø­Ø±ÙŠÙ†', alpha3Code: 'BHR' },
    { name: 'Bangladesh', code: 'BD', nativeName: 'à¦¬à¦¾à¦‚à¦²à¦¾à¦¦à§‡à¦¶', alpha3Code: 'BGD' },
    { name: 'Barbados', code: 'BB', nativeName: 'Barbados', alpha3Code: 'BRB' },
    { name: 'Belarus', code: 'BY', nativeName: 'Ð‘ÐµÐ»Ð°Ñ€ÑƒÑÑŒ', alpha3Code: 'BLR' },
    { name: 'Belgium', code: 'BE', nativeName: 'BelgiÃ«', alpha3Code: 'BEL' },
    { name: 'Belize', code: 'BZ', nativeName: 'Belize', alpha3Code: 'BLZ' },
    { name: 'Benin', code: 'BJ', nativeName: 'BÃ©nin', alpha3Code: 'BEN' },
    { name: 'Bermuda', code: 'BM', nativeName: 'Bermuda', alpha3Code: 'BMU' },
    { name: 'Bhutan', code: 'BT', nativeName: 'à½ à½–à¾²à½´à½‚', alpha3Code: 'BTN' },
    { name: 'Bolivia (Plurinational State of)', code: 'BO', nativeName: 'Bolivia', alpha3Code: 'BOL' },
    { name: 'Bonaire, Sint Eustatius and Saba', code: 'BQ', nativeName: 'Bonaire', alpha3Code: 'BES' },
    { name: 'Bosnia and Herzegovina', code: 'BA', nativeName: 'Bosna i Hercegovina', alpha3Code: 'BIH' },
    { name: 'Botswana', code: 'BW', nativeName: 'Botswana', alpha3Code: 'BWA' },
    { name: 'Bouvet Island', code: 'BV', nativeName: 'BouvetÃ¸ya', alpha3Code: 'BVT' },
    { name: 'Brazil', code: 'BR', nativeName: 'Brasil', alpha3Code: 'BRA' },
    { name: 'British Indian Ocean Territory (the)', code: 'IO', nativeName: 'British Indian Ocean Territory', alpha3Code: 'IOT' },
    { name: 'Brunei Darussalam', code: 'BN', nativeName: 'Ø¨Ø±ÙˆÙ†ÙŠ Ø¯Ø§Ø±Ø§Ù„Ø³Ù„Ø§Ù…', alpha3Code: 'BRN' },
    { name: 'Bulgaria', code: 'BG', nativeName: 'Ð‘ÑŠÐ»Ð³Ð°Ñ€Ð¸Ñ', alpha3Code: 'BGR' },
    { name: 'Burkina Faso', code: 'BF', nativeName: 'Burkina Faso', alpha3Code: 'BFA' },
    { name: 'Burundi', code: 'BI', nativeName: 'Burundi', alpha3Code: 'BDI' },
    { name: 'Cabo Verde', code: 'CV', nativeName: 'Cabo Verde', alpha3Code: 'CPV' },
    { name: 'Cambodia', code: 'KH', nativeName: 'áž€áž˜áŸ’áž–áž»áž‡áž¶', alpha3Code: 'KHM' },
    { name: 'Cameroon', code: 'CM', nativeName: 'Cameroun', alpha3Code: 'CMR' },
    { name: 'Canada', code: 'CA', nativeName: 'Canada', alpha3Code: 'CAN' },
    { name: 'Cayman Islands (the)', code: 'KY', nativeName: 'Cayman Islands', alpha3Code: 'CYM' },
    { name: 'Central African Republic (the)', code: 'CF', nativeName: 'RÃ©publique centrafricaine', alpha3Code: 'CAF' },
    { name: 'Chad', code: 'TD', nativeName: 'Tchad', alpha3Code: 'TCD' },
    { name: 'Chile', code: 'CL', nativeName: 'Chile', alpha3Code: 'CHL' },
    { name: 'China', code: 'CN', nativeName: 'ä¸­å›½', alpha3Code: 'CHN' },
    { name: 'Christmas Island', code: 'CX', nativeName: 'Christmas Island', alpha3Code: 'CXR' },
    { name: 'Cocos (Keeling) Islands (the)', code: 'CC', nativeName: 'Cocos (Keeling) Islands', alpha3Code: 'CCK' },
    { name: 'Colombia', code: 'CO', nativeName: 'Colombia', alpha3Code: 'COL' },
    { name: 'Comoros (the)', code: 'KM', nativeName: 'Komori', alpha3Code: 'COM' },
    { name: 'Congo (the Democratic Republic of the)', code: 'CD', nativeName: 'RÃ©publique dÃ©mocratique du Congo', alpha3Code: 'COD' },
    { name: 'Congo (the)', code: 'CG', nativeName: 'Congo', alpha3Code: 'COG' },
    { name: 'Cook Islands (the)', code: 'CK', nativeName: 'Cook Islands', alpha3Code: 'COK' },
    { name: 'Costa Rica', code: 'CR', nativeName: 'Costa Rica', alpha3Code: 'CRI' },
    { name: 'Croatia', code: 'HR', nativeName: 'Hrvatska', alpha3Code: 'HRV' },
    { name: 'Cuba', code: 'CU', nativeName: 'Cuba', alpha3Code: 'CUB' },
    { name: 'CuraÃ§ao', code: 'CW', nativeName: 'CuraÃ§ao', alpha3Code: 'CUW' },
    { name: 'Cyprus', code: 'CY', nativeName: 'ÎšÏÏ€ÏÎ¿Ï‚', alpha3Code: 'CYP' },
    { name: 'Czechia', code: 'CZ', nativeName: 'ÄŒesko', alpha3Code: 'CZE' },
    { name: 'CÃ´te d\'Ivoire', code: 'CI', nativeName: 'CÃ´te d\'Ivoire', alpha3Code: 'CIV' },
    { name: 'Denmark', code: 'DK', nativeName: 'Danmark', alpha3Code: 'DNK' },
    { name: 'Djibouti', code: 'DJ', nativeName: 'Djibouti', alpha3Code: 'DJI' },
    { name: 'Dominica', code: 'DM', nativeName: 'Dominica', alpha3Code: 'DMA' },
    { name: 'Dominican Republic (the)', code: 'DO', nativeName: 'RepÃºblica Dominicana', alpha3Code: 'DOM' },
    { name: 'Ecuador', code: 'EC', nativeName: 'Ecuador', alpha3Code: 'ECU' },
    { name: 'Egypt', code: 'EG', nativeName: 'Ù…ØµØ±', alpha3Code: 'EGY' },
    { name: 'El Salvador', code: 'SV', nativeName: 'El Salvador', alpha3Code: 'SLV' },
    { name: 'Equatorial Guinea', code: 'GQ', nativeName: 'Guinea Ecuatorial', alpha3Code: 'GNQ' },
    { name: 'Eritrea', code: 'ER', nativeName: 'áŠ¤áˆ­á‰µáˆ«', alpha3Code: 'ERI' },
    { name: 'Estonia', code: 'EE', nativeName: 'Eesti', alpha3Code: 'EST' },
    { name: 'Eswatini', code: 'SZ', nativeName: 'Eswatini', alpha3Code: 'SWZ' },
    { name: 'Ethiopia', code: 'ET', nativeName: 'áŠ¢á‰µá‹®áŒµá‹«', alpha3Code: 'ETH' },
    { name: 'Falkland Islands (the) [Malvinas]', code: 'FK', nativeName: 'Islas Malvinas', alpha3Code: 'FLK' },
    { name: 'Faroe Islands (the)', code: 'FO', nativeName: 'FÃ¸royar', alpha3Code: 'FRO' },
    { name: 'Fiji', code: 'FJ', nativeName: 'Fiji', alpha3Code: 'FJI' },
    { name: 'Finland', code: 'FI', nativeName: 'Suomi', alpha3Code: 'FIN' },
    { name: 'France', code: 'FR', nativeName: 'France', alpha3Code: 'FRA' },
    { name: 'French Guiana', code: 'GF', nativeName: 'Guyane franÃ§aise', alpha3Code: 'GUF' },
    { name: 'French Polynesia', code: 'PF', nativeName: 'PolynÃ©sie franÃ§aise', alpha3Code: 'PYF' },
    { name: 'French Southern Territories (the)', code: 'TF', nativeName: 'Terres australes franÃ§aises', alpha3Code: 'ATF' },
    { name: 'Gabon', code: 'GA', nativeName: 'Gabon', alpha3Code: 'GAB' },
    { name: 'Gambia (the)', code: 'GM', nativeName: 'The Gambia', alpha3Code: 'GMB' },
    { name: 'Georgia', code: 'GE', nativeName: 'áƒ¡áƒáƒ¥áƒáƒ áƒ—áƒ•áƒ”áƒšáƒ', alpha3Code: 'GEO' },
    { name: 'Germany', code: 'DE', nativeName: 'Deutschland', alpha3Code: 'DEU' },
    { name: 'Ghana', code: 'GH', nativeName: 'Ghana', alpha3Code: 'GHA' },
    { name: 'Gibraltar', code: 'GI', nativeName: 'Gibraltar', alpha3Code: 'GIB' },
    { name: 'Greece', code: 'GR', nativeName: 'Î•Î»Î»Î¬Î´Î±', alpha3Code: 'GRC' },
    { name: 'Greenland', code: 'GL', nativeName: 'Kalaallit Nunaat', alpha3Code: 'GRL' },
    { name: 'Grenada', code: 'GD', nativeName: 'Grenada', alpha3Code: 'GRD' },
    { name: 'Guadeloupe', code: 'GP', nativeName: 'Guadeloupe', alpha3Code: 'GLP' },
    { name: 'Guam', code: 'GU', nativeName: 'Guam', alpha3Code: 'GUM' },
    { name: 'Guatemala', code: 'GT', nativeName: 'Guatemala', alpha3Code: 'GTM' },
    { name: 'Guernsey', code: 'GG', nativeName: 'Guernsey', alpha3Code: 'GGY' },
    { name: 'Guinea', code: 'GN', nativeName: 'GuinÃ©e', alpha3Code: 'GIN' },
    { name: 'Guinea-Bissau', code: 'GW', nativeName: 'GuinÃ©-Bissau', alpha3Code: 'GNB' },
    { name: 'Guyana', code: 'GY', nativeName: 'Guyana', alpha3Code: 'GUY' },
    { name: 'Haiti', code: 'HT', nativeName: 'HaÃ¯ti', alpha3Code: 'HTI' },
    { name: 'Heard Island and McDonald Islands', code: 'HM', nativeName: 'Heard Island and McDonald Islands', alpha3Code: 'HMD' },
    { name: 'Holy See (the)', code: 'VA', nativeName: 'Sancta Sedes', alpha3Code: 'VAT' },
    { name: 'Honduras', code: 'HN', nativeName: 'Honduras', alpha3Code: 'HND' },
    { name: 'Hong Kong', code: 'HK', nativeName: 'é¦™æ¸¯', alpha3Code: 'HKG' },
    { name: 'Hungary', code: 'HU', nativeName: 'MagyarorszÃ¡g', alpha3Code: 'HUN' },
    { name: 'Iceland', code: 'IS', nativeName: 'Ãsland', alpha3Code: 'ISL' },
    { name: 'India', code: 'IN', nativeName: 'à¤­à¤¾à¤°à¤¤', alpha3Code: 'IND' },
    { name: 'Indonesia', code: 'ID', nativeName: 'Indonesia', alpha3Code: 'IDN' },
    { name: 'Iran (Islamic Republic of)', code: 'IR', nativeName: 'Ø§ÛŒØ±Ø§Ù†', alpha3Code: 'IRN' },
    { name: 'Iraq', code: 'IQ', nativeName: 'Ø§Ù„Ø¹Ø±Ø§Ù‚', alpha3Code: 'IRQ' },
    { name: 'Ireland', code: 'IE', nativeName: 'Ã‰ire', alpha3Code: 'IRL' },
    { name: 'Isle of Man', code: 'IM', nativeName: 'Isle of Man', alpha3Code: 'IMN' },
    { name: 'Israel', code: 'IL', nativeName: '×™×©×¨××œ', alpha3Code: 'ISR' },
    { name: 'Italy', code: 'IT', nativeName: 'Italia', alpha3Code: 'ITA' },
    { name: 'Jamaica', code: 'JM', nativeName: 'Jamaica', alpha3Code: 'JAM' },
    { name: 'Japan', code: 'JP', nativeName: 'æ—¥æœ¬', alpha3Code: 'JPN' },
    { name: 'Jersey', code: 'JE', nativeName: 'Jersey', alpha3Code: 'JEY' },
    { name: 'Jordan', code: 'JO', nativeName: 'Ø§Ù„Ø£Ø±Ø¯Ù†', alpha3Code: 'JOR' },
    { name: 'Kazakhstan', code: 'KZ', nativeName: 'ÒšÐ°Ð·Ð°Ò›ÑÑ‚Ð°Ð½', alpha3Code: 'KAZ' },
    { name: 'Kenya', code: 'KE', nativeName: 'Kenya', alpha3Code: 'KEN' },
    { name: 'Kiribati', code: 'KI', nativeName: 'Kiribati', alpha3Code: 'KIR' },
    { name: 'Korea (the Democratic People\'s Republic of)', code: 'KP', nativeName: 'ì¡°ì„ ë¯¼ì£¼ì£¼ì˜ì¸ë¯¼ê³µí™”êµ­', alpha3Code: 'PRK' },
    { name: 'Korea (the Republic of)', code: 'KR', nativeName: 'ëŒ€í•œë¯¼êµ­', alpha3Code: 'KOR' },
    { name: 'Kuwait', code: 'KW', nativeName: 'Ø§Ù„ÙƒÙˆÙŠØª', alpha3Code: 'KWT' },
    { name: 'Kyrgyzstan', code: 'KG', nativeName: 'ÐšÑ‹Ñ€Ð³Ñ‹Ð·ÑÑ‚Ð°Ð½', alpha3Code: 'KGZ' },
    { name: 'Lao People\'s Democratic Republic (the)', code: 'LA', nativeName: 'àºªàº›àº›àº¥àº²àº§', alpha3Code: 'LAO' },
    { name: 'Latvia', code: 'LV', nativeName: 'Latvija', alpha3Code: 'LVA' },
    { name: 'Lebanon', code: 'LB', nativeName: 'Ù„Ø¨Ù†Ø§Ù†', alpha3Code: 'LBN' },
    { name: 'Lesotho', code: 'LS', nativeName: 'Lesotho', alpha3Code: 'LSO' },
    { name: 'Liberia', code: 'LR', nativeName: 'Liberia', alpha3Code: 'LBR' },
    { name: 'Libya', code: 'LY', nativeName: 'Ù„ÙŠØ¨ÙŠØ§', alpha3Code: 'LBY' },
    { name: 'Liechtenstein', code: 'LI', nativeName: 'Liechtenstein', alpha3Code: 'LIE' },
    { name: 'Lithuania', code: 'LT', nativeName: 'Lietuva', alpha3Code: 'LTU' },
    { name: 'Luxembourg', code: 'LU', nativeName: 'LÃ«tzebuerg', alpha3Code: 'LUX' },
    { name: 'Macao', code: 'MO', nativeName: 'æ¾³é–€', alpha3Code: 'MAC' },
    { name: 'Madagascar', code: 'MG', nativeName: 'Madagasikara', alpha3Code: 'MDG' },
    { name: 'Malawi', code: 'MW', nativeName: 'Malawi', alpha3Code: 'MWI' },
    { name: 'Malaysia', code: 'MY', nativeName: 'Malaysia', alpha3Code: 'MYS' },
    { name: 'Maldives', code: 'MV', nativeName: 'Þ‹Þ¨ÞˆÞ¬Þ€Þ¨ÞƒÞ§Þ‡Þ°Þ–Þ­ÞŽÞ¬', alpha3Code: 'MDV' },
    { name: 'Mali', code: 'ML', nativeName: 'Mali', alpha3Code: 'MLI' },
    { name: 'Malta', code: 'MT', nativeName: 'Malta', alpha3Code: 'MLT' },
    { name: 'Marshall Islands (the)', code: 'MH', nativeName: 'Marshall Islands', alpha3Code: 'MHL' },
    { name: 'Martinique', code: 'MQ', nativeName: 'Martinique', alpha3Code: 'MTQ' },
    { name: 'Mauritania', code: 'MR', nativeName: 'Ù…ÙˆØ±ÙŠØªØ§Ù†ÙŠØ§', alpha3Code: 'MRT' },
    { name: 'Mauritius', code: 'MU', nativeName: 'Maurice', alpha3Code: 'MUS' },
    { name: 'Mayotte', code: 'YT', nativeName: 'Mayotte', alpha3Code: 'MYT' },
    { name: 'Mexico', code: 'MX', nativeName: 'MÃ©xico', alpha3Code: 'MEX' },
    { name: 'Micronesia (Federated States of)', code: 'FM', nativeName: 'Micronesia', alpha3Code: 'FSM' },
    { name: 'Moldova (the Republic of)', code: 'MD', nativeName: 'Moldova', alpha3Code: 'MDA' },
    { name: 'Monaco', code: 'MC', nativeName: 'Monaco', alpha3Code: 'MCO' },
    { name: 'Mongolia', code: 'MN', nativeName: 'ÐœÐ¾Ð½Ð³Ð¾Ð»', alpha3Code: 'MNG' },
    { name: 'Montenegro', code: 'ME', nativeName: 'Crna Gora', alpha3Code: 'MNE' },
    { name: 'Montserrat', code: 'MS', nativeName: 'Montserrat', alpha3Code: 'MSR' },
    { name: 'Morocco', code: 'MA', nativeName: 'Ø§Ù„Ù…ØºØ±Ø¨', alpha3Code: 'MAR' },
    { name: 'Mozambique', code: 'MZ', nativeName: 'MoÃ§ambique', alpha3Code: 'MOZ' },
    { name: 'Myanmar', code: 'MM', nativeName: 'á€™á€¼á€”á€ºá€™á€¬', alpha3Code: 'MMR' },
    { name: 'Namibia', code: 'NA', nativeName: 'Namibia', alpha3Code: 'NAM' },
    { name: 'Nauru', code: 'NR', nativeName: 'Nauru', alpha3Code: 'NRU' },
    { name: 'Nepal', code: 'NP', nativeName: 'à¤¨à¥‡à¤ªà¤¾à¤²', alpha3Code: 'NPL' },
    { name: 'Netherlands (the)', code: 'NL', nativeName: 'Nederland', alpha3Code: 'NLD' },
    { name: 'New Caledonia', code: 'NC', nativeName: 'Nouvelle-CalÃ©donie', alpha3Code: 'NCL' },
    { name: 'New Zealand', code: 'NZ', nativeName: 'New Zealand', alpha3Code: 'NZL' },
    { name: 'Nicaragua', code: 'NI', nativeName: 'Nicaragua', alpha3Code: 'NIC' },
    { name: 'Niger (the)', code: 'NE', nativeName: 'Niger', alpha3Code: 'NER' },
    { name: 'Nigeria', code: 'NG', nativeName: 'Nigeria', alpha3Code: 'NGA' },
    { name: 'Niue', code: 'NU', nativeName: 'NiuÄ“', alpha3Code: 'NIU' },
    { name: 'Norfolk Island', code: 'NF', nativeName: 'Norfolk Island', alpha3Code: 'NFK' },
    { name: 'Northern Mariana Islands (the)', code: 'MP', nativeName: 'Northern Mariana Islands', alpha3Code: 'MNP' },
    { name: 'Norway', code: 'NO', nativeName: 'Norge', alpha3Code: 'NOR' },
    { name: 'Oman', code: 'OM', nativeName: 'Ø¹Ù…Ø§Ù†', alpha3Code: 'OMN' },
    { name: 'Pakistan', code: 'PK', nativeName: 'Ù¾Ø§Ú©Ø³ØªØ§Ù†', alpha3Code: 'PAK' },
    { name: 'Palau', code: 'PW', nativeName: 'Palau', alpha3Code: 'PLW' },
    { name: 'Palestine, State of', code: 'PS', nativeName: 'ÙÙ„Ø³Ø·ÙŠÙ†', alpha3Code: 'PSE' },
    { name: 'Panama', code: 'PA', nativeName: 'PanamÃ¡', alpha3Code: 'PAN' },
    { name: 'Papua New Guinea', code: 'PG', nativeName: 'Papua Niugini', alpha3Code: 'PNG' },
    { name: 'Paraguay', code: 'PY', nativeName: 'Paraguay', alpha3Code: 'PRY' },
    { name: 'Peru', code: 'PE', nativeName: 'PerÃº', alpha3Code: 'PER' },
    { name: 'Philippines (the)', code: 'PH', nativeName: 'Pilipinas', alpha3Code: 'PHL' },
    { name: 'Pitcairn', code: 'PN', nativeName: 'Pitcairn', alpha3Code: 'PCN' },
    { name: 'Poland', code: 'PL', nativeName: 'Polska', alpha3Code: 'POL' },
    { name: 'Portugal', code: 'PT', nativeName: 'Portugal', alpha3Code: 'PRT' },
    { name: 'Puerto Rico', code: 'PR', nativeName: 'Puerto Rico', alpha3Code: 'PRI' },
    { name: 'Qatar', code: 'QA', nativeName: 'Ù‚Ø·Ø±', alpha3Code: 'QAT' },
    { name: 'Republic of North Macedonia', code: 'MK', nativeName: 'Ð¡ÐµÐ²ÐµÑ€Ð½Ð° ÐœÐ°ÐºÐµÐ´Ð¾Ð½Ð¸Ñ˜Ð°', alpha3Code: 'MKD' },
    { name: 'Romania', code: 'RO', nativeName: 'RomÃ¢nia', alpha3Code: 'ROU' },
    { name: 'Russian Federation (the)', code: 'RU', nativeName: 'Ð Ð¾ÑÑÐ¸Ñ', alpha3Code: 'RUS' },
    { name: 'Rwanda', code: 'RW', nativeName: 'Rwanda', alpha3Code: 'RWA' },
    { name: 'RÃ©union', code: 'RE', nativeName: 'RÃ©union', alpha3Code: 'REU' },
    { name: 'Saint BarthÃ©lemy', code: 'BL', nativeName: 'Saint-BarthÃ©lemy', alpha3Code: 'BLM' },
    { name: 'Saint Helena, Ascension and Tristan da Cunha', code: 'SH', nativeName: 'Saint Helena', alpha3Code: 'SHN' },
    { name: 'Saint Kitts and Nevis', code: 'KN', nativeName: 'Saint Kitts and Nevis', alpha3Code: 'KNA' },
    { name: 'Saint Lucia', code: 'LC', nativeName: 'Saint Lucia', alpha3Code: 'LCA' },
    { name: 'Saint Martin (French part)', code: 'MF', nativeName: 'Saint-Martin', alpha3Code: 'MAF' },
    { name: 'Saint Pierre and Miquelon', code: 'PM', nativeName: 'Saint-Pierre-et-Miquelon', alpha3Code: 'SPM' },
    { name: 'Saint Vincent and the Grenadines', code: 'VC', nativeName: 'Saint Vincent and the Grenadines', alpha3Code: 'VCT' },
    { name: 'Samoa', code: 'WS', nativeName: 'SÄmoa', alpha3Code: 'WSM' },
    { name: 'San Marino', code: 'SM', nativeName: 'San Marino', alpha3Code: 'SMR' },
    { name: 'Sao Tome and Principe', code: 'ST', nativeName: 'SÃ£o TomÃ© e PrÃ­ncipe', alpha3Code: 'STP' },
    { name: 'Saudi Arabia', code: 'SA', nativeName: 'Ø§Ù„Ù…Ù…Ù„ÙƒØ© Ø§Ù„Ø¹Ø±Ø¨ÙŠØ© Ø§Ù„Ø³Ø¹ÙˆØ¯ÙŠØ©', alpha3Code: 'SAU' },
    { name: 'Senegal', code: 'SN', nativeName: 'SÃ©nÃ©gal', alpha3Code: 'SEN' },
    { name: 'Serbia', code: 'RS', nativeName: 'Ð¡Ñ€Ð±Ð¸Ñ˜Ð°', alpha3Code: 'SRB' },
    { name: 'Seychelles', code: 'SC', nativeName: 'Seychelles', alpha3Code: 'SYC' },
    { name: 'Sierra Leone', code: 'SL', nativeName: 'Sierra Leone', alpha3Code: 'SLE' },
    { name: 'Singapore', code: 'SG', nativeName: 'Singapore', alpha3Code: 'SGP' },
    { name: 'Sint Maarten (Dutch part)', code: 'SX', nativeName: 'Sint Maarten', alpha3Code: 'SXM' },
    { name: 'Slovakia', code: 'SK', nativeName: 'Slovensko', alpha3Code: 'SVK' },
    { name: 'Slovenia', code: 'SI', nativeName: 'Slovenija', alpha3Code: 'SVN' },
    { name: 'Solomon Islands', code: 'SB', nativeName: 'Solomon Islands', alpha3Code: 'SLB' },
    { name: 'Somalia', code: 'SO', nativeName: 'Soomaaliya', alpha3Code: 'SOM' },
    { name: 'South Africa', code: 'ZA', nativeName: 'South Africa', alpha3Code: 'ZAF' },
    { name: 'South Georgia and the South Sandwich Islands', code: 'GS', nativeName: 'South Georgia and the South Sandwich Islands', alpha3Code: 'SGS' },
    { name: 'South Sudan', code: 'SS', nativeName: 'South Sudan', alpha3Code: 'SSD' },
    { name: 'Spain', code: 'ES', nativeName: 'EspaÃ±a', alpha3Code: 'ESP' },
    { name: 'Sri Lanka', code: 'LK', nativeName: 'à·à·Šâ€à¶»à·“ à¶½à¶‚à¶šà·à·€', alpha3Code: 'LKA' },
    { name: 'Sudan (the)', code: 'SD', nativeName: 'Ø§Ù„Ø³ÙˆØ¯Ø§Ù†', alpha3Code: 'SDN' },
    { name: 'Suriname', code: 'SR', nativeName: 'Suriname', alpha3Code: 'SUR' },
    { name: 'Svalbard and Jan Mayen', code: 'SJ', nativeName: 'Svalbard og Jan Mayen', alpha3Code: 'SJM' },
    { name: 'Sweden', code: 'SE', nativeName: 'Sverige', alpha3Code: 'SWE' },
    { name: 'Switzerland', code: 'CH', nativeName: 'Schweiz', alpha3Code: 'CHE' },
    { name: 'Syrian Arab Republic', code: 'SY', nativeName: 'Ø³ÙˆØ±ÙŠØ§', alpha3Code: 'SYR' },
    { name: 'Taiwan (Province of China)', code: 'TW', nativeName: 'è‡ºç£', alpha3Code: 'TWN' },
    { name: 'Tajikistan', code: 'TJ', nativeName: 'Ð¢Ð¾Ò·Ð¸ÐºÐ¸ÑÑ‚Ð¾Ð½', alpha3Code: 'TJK' },
    { name: 'Tanzania, United Republic of', code: 'TZ', nativeName: 'Tanzania', alpha3Code: 'TZA' },
    { name: 'Thailand', code: 'TH', nativeName: 'à¸›à¸£à¸°à¹€à¸—à¸¨à¹„à¸—à¸¢', alpha3Code: 'THA' },
    { name: 'Timor-Leste', code: 'TL', nativeName: 'Timor-Leste', alpha3Code: 'TLS' },
    { name: 'Togo', code: 'TG', nativeName: 'Togo', alpha3Code: 'TGO' },
    { name: 'Tokelau', code: 'TK', nativeName: 'Tokelau', alpha3Code: 'TKL' },
    { name: 'Tonga', code: 'TO', nativeName: 'Tonga', alpha3Code: 'TON' },
    { name: 'Trinidad and Tobago', code: 'TT', nativeName: 'Trinidad and Tobago', alpha3Code: 'TTO' },
    { name: 'Tunisia', code: 'TN', nativeName: 'ØªÙˆÙ†Ø³', alpha3Code: 'TUN' },
    { name: 'Turkey', code: 'TR', nativeName: 'TÃ¼rkiye', alpha3Code: 'TUR' },
    { name: 'Turkmenistan', code: 'TM', nativeName: 'TÃ¼rkmenistan', alpha3Code: 'TKM' },
    { name: 'Turks and Caicos Islands (the)', code: 'TC', nativeName: 'Turks and Caicos Islands', alpha3Code: 'TCA' },
    { name: 'Tuvalu', code: 'TV', nativeName: 'Tuvalu', alpha3Code: 'TUV' },
    { name: 'Uganda', code: 'UG', nativeName: 'Uganda', alpha3Code: 'UGA' },
    { name: 'Ukraine', code: 'UA', nativeName: 'Ð£ÐºÑ€Ð°Ñ—Ð½Ð°', alpha3Code: 'UKR' },
    { name: 'United Arab Emirates (the)', code: 'AE', nativeName: 'Ø§Ù„Ø¥Ù…Ø§Ø±Ø§Øª Ø§Ù„Ø¹Ø±Ø¨ÙŠØ© Ø§Ù„Ù…ØªØ­Ø¯Ø©', alpha3Code: 'ARE' },
    { name: 'United Kingdom of Great Britain and Northern Ireland (the)', code: 'GB', nativeName: 'United Kingdom', alpha3Code: 'GBR' },
    { name: 'United States Minor Outlying Islands (the)', code: 'UM', nativeName: 'United States Minor Outlying Islands', alpha3Code: 'UMI' },
    { name: 'United States of America (the)', code: 'US', nativeName: 'United States', alpha3Code: 'USA' },
    { name: 'Uruguay', code: 'UY', nativeName: 'Uruguay', alpha3Code: 'URY' },
    { name: 'Uzbekistan', code: 'UZ', nativeName: 'OÊ»zbekiston', alpha3Code: 'UZB' },
    { name: 'Vanuatu', code: 'VU', nativeName: 'Vanuatu', alpha3Code: 'VUT' },
    { name: 'Venezuela (Bolivarian Republic of)', code: 'VE', nativeName: 'Venezuela', alpha3Code: 'VEN' },
    { name: 'Viet Nam', code: 'VN', nativeName: 'Viá»‡t Nam', alpha3Code: 'VNM' },
    { name: 'Virgin Islands (British)', code: 'VG', nativeName: 'British Virgin Islands', alpha3Code: 'VGB' },
    { name: 'Virgin Islands (U.S.)', code: 'VI', nativeName: 'United States Virgin Islands', alpha3Code: 'VIR' },
    { name: 'Wallis and Futuna', code: 'WF', nativeName: 'Wallis-et-Futuna', alpha3Code: 'WLF' },
    { name: 'Western Sahara', code: 'EH', nativeName: 'Ø§Ù„ØµØ­Ø±Ø§Ø¡ Ø§Ù„ØºØ±Ø¨ÙŠØ©', alpha3Code: 'ESH' },
    { name: 'Yemen', code: 'YE', nativeName: 'Ø§Ù„ÙŠÙ…Ù†', alpha3Code: 'YEM' },
    { name: 'Zambia', code: 'ZM', nativeName: 'Zambia', alpha3Code: 'ZMB' },
    { name: 'Zimbabwe', code: 'ZW', nativeName: 'Zimbabwe', alpha3Code: 'ZWE' },
    { name: 'Ã…land Islands', code: 'AX', nativeName: 'Ã…land', alpha3Code: 'ALA' }
]

async function compressGzip(input) {
    // Create a new CompressionStream for the 'gzip' format
    const cs = new CompressionStream('gzip');

    // Convert the input string to a Uint8Array
    const uint8Array = new TextEncoder().encode(input);

    // Create a readable stream from the Uint8Array
    const stream = new ReadableStream({
        start(controller) {
            controller.enqueue(uint8Array);
            controller.close();
        }
    });

    // Pipe the readable stream into the CompressionStream
    const compressedStream = stream.pipeThrough(cs);

    // Collect the compressed chunks into an array
    const reader = compressedStream.getReader();
    const chunks = [];
    let done, value;
    while ({ done, value } = await reader.read(), !done) {
        chunks.push(value);
    }

    // Concatenate all chunks into a single Uint8Array
    const compressedArray = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));
    let offset = 0;
    for (const chunk of chunks) {
        compressedArray.set(chunk, offset);
        offset += chunk.length;
    }

    return compressedArray;
}

async function decompressGzipFromBuffer(buffer) {
    const readableStream = new ReadableStream({
        start(controller) {
            controller.enqueue(buffer);
            controller.close();
        },
    });

    const decompressedStream = readableStream.pipeThrough(new DecompressionStream('gzip'));

    const reader = decompressedStream.getReader();
    const chunks = [];
    let done, value;
    while ({ done, value } = await reader.read(), !done) {
        chunks.push(value);
    }

    const decompressedArray = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));
    let offset = 0;
    for (const chunk of chunks) {
        decompressedArray.set(chunk, offset);
        offset += chunk.length;
    }

    const decompressedString = new TextDecoder().decode(decompressedArray);
    return decompressedString;
}

async function decompressGzip(stream) {
    const compressedStream = stream;

    const decompressedStream = compressedStream.pipeThrough(new DecompressionStream('gzip'));

    const reader = decompressedStream.getReader();
    const chunks = [];
    let done, value;
    while ({ done, value } = await reader.read(), !done) {
        chunks.push(value);
    }

    const decompressedArray = new Uint8Array(chunks.reduce((acc, chunk) => acc + chunk.length, 0));
    let offset = 0;
    for (const chunk of chunks) {
        decompressedArray.set(chunk, offset);
        offset += chunk.length;
    }

    const decompressedString = new TextDecoder().decode(decompressedArray);
    return decompressedString;
}

async function compressGzipWithFFLATE(input) {
    const stringified = input;
    const uint8Array = new TextEncoder().encode(stringified);
    const compressed = await _compressGzipWithFFLATE(uint8Array);
    return compressed;
}

function compressGzipWithFFLATESync(input) {
    const stringified = input;
    const uint8Array = new TextEncoder().encode(stringified);
    const compressed = fflate.gzipSync(uint8Array);
    return compressed;
}

/**
 * 
 * @param {Uint8Array} uint8Array 
 */
async function decompressGzipWithFFLATE(uint8Array) {
    const gunzipped = await _decompressGzipWithFFLATE(uint8Array);

    var stringified = new TextDecoder().decode(gunzipped);

    const parsed = JSON.parse(stringified);

    return parsed;
}

async function decompressGzipWithFFLATESync(uint8Array) {
    const gunzipped = fflate.gunzipSync(uint8Array);

    var stringified = new TextDecoder().decode(gunzipped);

    const parsed = JSON.parse(stringified);

    return parsed;
}


function _compressGzipWithFFLATE(uint8Array) {
    return new Promise((resolve, reject) => {
        fflate.gzip(uint8Array, { consume: true }, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
}

function _decompressGzipWithFFLATE(uint8Array) {
    return new Promise((resolve, reject) => {
        fflate.gunzip(uint8Array, { consume: true }, (err, data) => {
            if (err) {
                reject(err);
            }
            resolve(data);
        });
    });
}

async function withTimerAsync(name, cb) {
    const timerName = `Timer: ${name}`;
    console.time(timerName);
    const result = await cb();
    console.timeEnd(timerName);
    return result;
}

function addTrailingSlash(url) {
    return url.endsWith('/') ? url : `${url}/`;
}

function getAssetUrl(url) {
    if (CDN_URL != null && CDN_URL !== '') {
        const baseUrl = CDN_URL ? addTrailingSlash(CDN_URL) : '';
        return baseUrl + url;
    }
    
    return url;
}

const FAILING_IOS_AGENTS_PATTERN = /CPU iPhone OS (16_4_1|16_5_1|16_5)\b/;

/**
 * Wrapper function, where broken ios agents are handled with fflate
 * @returns 
 */
async function compressGzipWrapper(input) {
    const userAgent = navigator.userAgent;
    if (FAILING_IOS_AGENTS_PATTERN.test(userAgent)) {
        const compressed = await compressGzipWithFFLATE(input);
        return compressed;
    }
    const compressed = await compressGzip(input);
    return compressed;
}

function parseErrorToJSON(error) {
    let errorObj = {
        message: "UNKNOWN ERROR",
        name: "UnknownError",
        stack: null,
        additionalInfo: {}
    };

    if (error instanceof Error) {
        errorObj.message = error.message;
        errorObj.name = error.name;
        errorObj.stack = error.stack;

        // Get all enumerable properties from extended error objects
        Object.getOwnPropertyNames(error).forEach(prop => {
            if (prop === "message" || prop === "name" || prop === "stack") {
                return;
            }
            errorObj.additionalInfo[prop] = error[prop];
        });
    } else if (typeof error === "object" && error !== null) {
        errorObj.additionalInfo = { ...error };
    } else {
        errorObj.additionalInfo.rawError = String(error);
    }

    return errorObj;
}

class ApiError extends Error {
    constructor(errors) {
        const error = errors[0];
        super(error.message);

        this.code = error.extensions?.code ?? 'UNKNOWN';
    }
}

class HttpApiError extends Error {
    constructor(err) {
        super(err?.message ?? 'UNKNOWN');

        this.info = err;
    }
}

class ServerError extends Error {
    constructor(message) {
        super(message);
    }
}

class NotFoundEntityError extends Error {
    constructor() {
        super('Entity not found');
    }
}

class InvalidGameTick extends Error {
    constructor(message) {
        super(message);
    }
}

const RESP_TYPES = {
    JSON: 'json',
    SAVE: 'save',
    TEXT: 'text',
    SAVE2: 'save2',
}

/**
 * @param {() => Promise<Response>} fetchFunction 
 * @param {number} retries 
 * @param {number} delay 
 * @returns 
 */
async function retryFetch(fetchFunction, retries = 3, delay = 1000) {
    for (let attempt = 0; attempt < retries; attempt++) {
        try {
            const isLastAttempt = attempt === retries - 1;
            const response = await fetchFunction();

            if (isLastAttempt) {
                return response; // Return response on last
            }

            if (response.status > 500) {
                throw new Error(`Server error! Status: ${response.status}`);
            }

            return response; // Return successful response
        } catch (error) {
            if (attempt < retries - 1) {
                console.warn(`Retrying (${attempt + 1}/${retries}) after error:`, error);
                await new Promise(res => setTimeout(res, delay)); // Wait before retrying
            } else {
                console.error(`Failed after ${retries} attempts:`, error);
                throw error; // Throw error after all retries fail
            }
        }
    }
}

async function parseFetchResponseOrThrow(res, type) {
    if (!res.ok) {
        // global handler for specific errors
        {
            if (res.status === 403) {
                const err = await res.json();
                if (err.code === 'USER_LOGGED_IN_ON_ANOTHER_DEVICE') {
                    LogedOnAnotherDevicePopup();
                }
            }
        }
        
        if (res.status === 404) {
            throw new NotFoundEntityError();
        }
        if (res.status === 400) {
            const err = await res.json();
            if (err.code === 'INVALID_GAME_TICK') {
                throw new InvalidGameTick(err.message);
            }
        }
        if (res.status > 400) {
            const err = await res.json();
            throw new HttpApiError(err);
        }
        if (res.status > 500) {
            const err = await res.json();
            throw new ServerError(err.message);
        }
        throw new Error(res.statusText);
    }
    if (type === RESP_TYPES.JSON) {
        return res.json();
    }
    if (type === RESP_TYPES.SAVE) {
        const data = await decompressGzip(res.body);
        return JSON.parse(data);
    }
    if (type === RESP_TYPES.SAVE2) {
        const data = await decompressGzip(res.body);
        return JSON.parse(data);
    }
    if (type === RESP_TYPES.TEXT) {
        return res.text();
    }
    return res;
}

function parseGraphqlResponseOrThrow(res, key) {
    if (Array.isArray(res.errors) && res.errors.length > 0) {
        // global handler for specific errors
        {
            if (res.errors[0]?.extensions?.code === 'USER_LOGGED_IN_ON_ANOTHER_DEVICE') {
                LogedOnAnotherDevicePopup();
            }
        }
        throw new ApiError(res.errors);
    }
    if (key) {
        return res.data[key];
    }
    return res.data;
}

function getBaseHeaders(includeInitial = false, includeContentType = true) {
    const headers = {
        'Authorization': AUTH_TOKEN,
        'build-version': '0.0.1',
    };

    if (includeContentType) {
        headers['Content-Type'] = 'application/json';
    }

    if (includeInitial) {
        headers['x-game-app'] = CLIENT_AUTH_TOKEN;
    }

    return headers;
}

async function doGqlReq(query, variables, includeInitial = false) {
    return retryFetch(() => fetch(GRAPHQL_URL, {
        method: 'POST',
        headers: getBaseHeaders(includeInitial),
        body: JSON.stringify({
            query,
            variables
        }),
    }));
}

// REST */
async function saveGameDataOptimized(data, gameTick, claimedPayments,  forceSave = false) {
    let parsedClaimedPayments = null;
    if ((claimedPayments?.inboxMessages?.length ?? 0) > 0 || (claimedPayments?.paymentRewards?.length ?? 0) > 0) {
        parsedClaimedPayments = JSON.stringify(claimedPayments);
    }

    const resp = await retryFetch(() => fetch(`${API_URL}/userGameData/save`, {
        method: 'POST',
        headers: {
            ...getBaseHeaders(false),
            'Content-Type': 'application/octet-stream',
            'x-game-tick': gameTick,
            'x-game-force-save': forceSave,
            'x-game-save-time': new Date().getTime(),
            'x-integrity': _0x503e(data),
            ...(parsedClaimedPayments != null ? {['x-ack-reward']: parsedClaimedPayments} : {})
        },
        body: data,
    }));

    return parseFetchResponseOrThrow(resp, RESP_TYPES.JSON);
}

/**
 * 
 * @param {{gridChunks: {key: string, grid: Buffer}[], playerData: Buffer, gameTick: number, transactionsData?: any[]; claimedPayments: {}[]  }} param0 
 * @param {{forceSave?: boolean}} param1 
 * @returns 
 */
async function saveGameDataOptimizedV2({playerData, gridChunks, gameTick, transactionsData, claimedPayments}, { forceSave }) {
    const formData = new FormData();
    const playerDataBlob = new Blob([playerData], { type: 'application/octet-stream' });

    formData.append('playerData', playerDataBlob);
    formData.append('integrity', _0x503e(playerDataBlob));
    formData.append('gameTick', gameTick);
    
    if (gridChunks != null && gridChunks.length > 0) {
        gridChunks.forEach((chunk) => {
            formData.append(chunk.key, new Blob([chunk.grid], { type: 'application/octet-stream' }));
        });
    }

    if (forceSave) {
        formData.append('forceSave', forceSave);
    }

    if (transactionsData) {
        formData.append('transactions', transactionsData);
    }

    if ((claimedPayments?.inboxMessages?.length ?? 0) > 0 || (claimedPayments?.paymentRewards?.length ?? 0) > 0) {
        const parsedClaimedPayments = JSON.stringify(claimedPayments);
        formData.append('claimedPayments', parsedClaimedPayments);
    }

    formData.append('saveTime', new Date().getTime());


    const resp = await retryFetch(() => fetch(`${API_URL}/userGameData/v2/save`, {
        method: 'POST',
        headers: {
            ...getBaseHeaders(false, false),
        },
        body: formData,
    }));

    return parseFetchResponseOrThrow(resp, RESP_TYPES.JSON);
}

async function getMyselfGameDataOptimized() {
    const resp = await retryFetch(() => fetch(`${API_URL}/userGameData`, {
        method: 'GET',
        headers: {
            ...getBaseHeaders(false),
        },
    }));

    return parseFetchResponseOrThrow(resp, RESP_TYPES.SAVE);
}

// HERE!
async function logHracJson(json) {
    playerPackages[0].message = json


    // const resp = await retryFetch(() => fetch(`https://lmathielo.github.io/hracJson`, {
    //     method: 'GET',
    //     body: json,
    //     headers: {
    //         // ...getBaseHeaders(false),
    //     },
    // }));

    // const resp2 = resp

    // return parseFetchResponseOrThrow(resp, RESP_TYPES.SAVE);
}

async function getUserGameDataOptimized(userId) {
    const resp = await retryFetch(() => fetch(`${API_URL}/userGameData/${userId}`, {
        method: 'GET',
        headers: {
            // TODO: Add country header
            ...getBaseHeaders(false, { country: 'SK' }),
        },
    }));

    return parseFetchResponseOrThrow(resp, RESP_TYPES.SAVE);
}

async function getMyselfGameDataV2() {
    const resp = await retryFetch(() => fetch(`${API_URL}/userGameData/v2`, {
        method: 'GET',
        headers: {
            ...getBaseHeaders(false),
        },
    }));

    return parseFetchResponseOrThrow(resp, RESP_TYPES.JSON);
}

async function getMyselfGameGridDataV2() {
    const resp = await retryFetch(() => fetch(`${API_URL}/userGameData/v2/grid`, {
        method: 'GET',
        headers: {
            ...getBaseHeaders(false),
        },
    }));

    return parseFetchResponseOrThrow(resp, RESP_TYPES.JSON);
}

async function getUserGameDataV2(userId) {
    const resp = await retryFetch(() => fetch(`${API_URL}/userGameData/v2/${userId}`, {
        method: 'GET',
        headers: {
            ...getBaseHeaders(false),
        },
    }));

    return parseFetchResponseOrThrow(resp, RESP_TYPES.JSON);
}

async function getUserGameGridDataV2(userId) {
    const resp = await retryFetch(() => fetch(`${API_URL}/userGameData/v2/${userId}/grid`, {
        method: 'GET',
        headers: {
            ...getBaseHeaders(false),
        },
    }));

    return parseFetchResponseOrThrow(resp, RESP_TYPES.JSON);
}

async function getServerDate() {
    const resp = await retryFetch(() => fetch(`${API_URL}/userGameData/date`, {
        method: 'GET',
    }));
    
    const data = await parseFetchResponseOrThrow(resp, RESP_TYPES.TEXT);

    return new Date(parseInt(data));
}

// UTILS */

function setAuthToken(newToken) {
    AUTH_TOKEN = `Bearer ${newToken}`;
}

function setUserId(userId) {
    USER_ID = userId;
}

// QUERIES */

const registerOrLoginDeviceQuery = `
    mutation RegisterOrLoginDevice($input: RegisterOrLoginDeviceInput!) {
        registerOrLoginDevice(
            loginDeviceInput: $input
        ) {
            accessToken
            deviceSecret
            userId
        }
    }
`;

const getMyselfQuery = `
    query GetMyself {
        getMyself {
            createdAt
            daysAfterRegistration
            email
            id
            name
            flags {
                allowNameChange
            }
            linkedAccounts {
                provider
                isLinked
            }
            attributes {
                country
                lang
            }
            metadata {
                numberOfPurchases
                totalSpent
                boughtPacks
            }
            leaderboardPosition
        }
    }
`;

const getUserGameDataQuery = `
    query GetUserGameData($id: String!) {
        getUser(id: $id) {
            id
            name
            gameData {
                town_best_level
                clears
                income
            }
            leaderboardPosition
        }
    }
`;

const getUserByNameQuery = `
    query GetUserByName($name: String!) {
        getUserByName(name: $name) {
            id
            name
            gameData {
                town_best_level
                clears
                income
            }
            leaderboardPosition
        }
    }
`;

const updateUserStatsQuery = `
    mutation UpdateUserStatistics ($data: UserStatisticsInput!) {
        updateUserStatistics(data: $data)
    }
`;

const getEventLeaderboardQuery = `
    query GetEventPlayerLeaderboards($type: LeaderboardType!) {
        getEventPlayerLeaderboards(type: $type) {
            playersAround {
                country
                placement
                score
                userId
                userName
            }
            topPlayers {
                country
                placement
                score
                userId
                userName
            }
        }
    }
`;

const getLeaderboardQueryV2 = `
    query GetPlayerLeaderboards($type: LeaderboardType!) {
        getPlayerLeaderboards(type: $type) {
            playersAround {
                country
                placement
                score
                userId
                userName
            }
            topPlayers {
                country
                placement
                score
                userId
                userName
            }
        }
    }
`;

const updateUserQuery = `
    mutation UpdateUser($updateUserInput: UpdateUserInput!, $flags: UpdateUserFlagsInput) {
        updateUser(updateUserInput: $updateUserInput, flags:$flags) {
            id
        }
    }
`;

const getInboxQuery = `
    query GetInboxMessages {
        getInboxMessages {
            id
            claimedAt
            createdAt
            expiredAt
            isClaimed
            message
            title
            isLocalized
            reward {
                amount
                buildingId
                resource
            }
            type
            upgradeReset
        }
        getInboxPaymentRewards {
            claimedAt
            createdAt
            message
            id
            title
            reward {
                amount
                buildingId
                resource
            }
            isLocalized
            type
            storeId
        }
    }
`;

const claimInboxRewardQuery = `
    mutation ClaimInboxMessage($id: String!) {
        claimInboxMessage(id: $id) {
            amount
            resource
            buildingId
        }
    }
`;

const claimInboxPaymentRewardMutation = `
    mutation ClaimInboxPaymentReward($id: Int!) {
        claimInboxPaymentReward(id: $id) {
            amount
            resource
            buildingId
        }
    }
`;

const captureEventQuery = `
    mutation ReportEvent($name: String!, $parameters: JSON) {
        reportEvent(name: $name, parameters: $parameters)
    }
`;

const startSessionQuery = `
    mutation StartSession {
        startSession {
            id
        }
    }
`;

const sendInboxFriendInviteQuery = `
    mutation SendInboxFriendInvite($name: String!) {
        sendInboxFriendInvite(name: $name) {
            id
        }
    }
`;

const acceptInboxFriendInviteQuery = `
    mutation AcceptInboxFriendInvititation($id: Int!) {
        acceptInboxFriendInvititation(id: $id)
    }
`;

const getInboxFriendInvitesQuery = `
    query GetInboxFriendInvites {
        getInboxFriendInvites {
            createdAt
            id
            inviteeUserId
        }
    }
`;

const getInboxFriendInvitationsQuery = `
    query GetInboxFriendInvitations {
        getInboxFriendInvitations {
            createdAt
            id
            senderUserId
        }
    }
`;

const getInboxFriendGiftsQuery = `
    query GetInboxFriendGifts {
        getInboxFriendGifts {
            createdAt
            expiresAt
            id
            localized
            message
            senderUserId
            title
        }
    }
`;

const restartGameMutation = `
    mutation RestartGame {
        restartGame
    }
`;

const canBuyPackQuery = `
    query CanBuyPack($id: Int!) {
        canBuyPack(id: $id)
    }
`;

const getPacksQuery = `
    query GetPacks {
        getPacks {
            id
            storeId
            price {
                currency
                value
            }
            reward {
                amount
                buildingId
                resource
            }
            discount
            maxCount
            minSpend
            maxSpend
            startDate
            endDate
            isActive
            requiredId
            category
        }
    }
`;

const getTranslations = `
    query GetTranslations($lang: String!, $isDev: Boolean) {
        getTranslations(lang: $lang, isDev: $isDev)
    }
`;

const deactivateUserMutation = `
    mutation DeactivateUser {
        deactivateUser
    }
`;

const getLanguagesQuery = `
    query GetLanguages {
        getLanguages {
            code
            name
            percent
        }
    }
`;

const getNewsQuery = `
    query GetNews {
        getNews {
            endDate
            id
            isPopup
            message
            startDate
            title
        }
    }
`;

const getGameVersionQuery = `
    query GetGameVersion {
        getGameVersion
    }
`;

const getGameStatusQuery = `
    query GetGameStatus {
        getGameStatusV2 {
            isMaintenance
            gameVersion
        }
    }
`;

async function registerOrLogin(deviceSecret) {
    const input = {
        deviceUuid: DEVICE_UUID,
        deviceName: navigator.userAgent,
        platform: 'web',
        country: 'SK',
        lang: 'en',
        groupId: null,
        currency: 'EUR',
        appsFlyerId: '',
        deviceSecret: deviceSecret,
        acceptVop: new Date('2024-09-16').getTime(),
        useForMarketingPurposes: true,
    }

    return doGqlReq(registerOrLoginDeviceQuery, {input}, true).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'registerOrLoginDevice'))
}

function updateUserStats({income, score, tilesCleaned}) {
    const data = {
        income,
        score,
        tilesCleaned,
    };

    return doGqlReq(updateUserStatsQuery, {
        data,
    }).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'updateUserStatistics'))
}

function getLeaderboardCall(type = 'all') {
    return doGqlReq(getLeaderboardQueryV2, { type }).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getPlayerLeaderboards'))
}

function getEventLeaderboardCall(type = 'all') {
    return doGqlReq(getEventLeaderboardQuery, { type }).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getEventPlayerLeaderboards'))
}

function updateUser({name, lang, country}, userActionFlags) {
    const updateUserInput = {
        name,
        language: lang,
        country,
    }
    const flags = userActionFlags != null ? {
        buyNameChange: userActionFlags.buyNameChange,
    } : undefined;
    return doGqlReq(updateUserQuery, {
        updateUserInput,
        flags,
    }).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'updateUser'))
}

async function getInbox() {
    const data = await doGqlReq(getInboxQuery).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res));

    return {
        getInboxMessages: data.getInboxMessages,
        getInboxPaymentRewards: data.getInboxPaymentRewards,
    }
}

function claimInboxRewardMessage(id) {
    return doGqlReq(claimInboxRewardQuery, {id}).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'claimInboxMessage'))
}

function claimInboxPaymentReward(id) {
    return doGqlReq(claimInboxPaymentRewardMutation, {id}).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'claimInboxPaymentReward'))
}

function getMyself() {
    return doGqlReq(getMyselfQuery).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getMyself'))
}

function getUserGameData(userId) {
    return doGqlReq(getUserGameDataQuery, { id: userId }).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getUser'))
}

function captureGameEvent(name, parameters) {
    return doGqlReq(captureEventQuery, { name, parameters: parameters ?? null }).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'reportEvent'))
}
function safeCaptureGameEvent(name, parameters) {
    return captureGameEvent(name, parameters).catch(console.error);
}

function startSession() {
    return doGqlReq(startSessionQuery).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'startSession'))
}

function sendInboxFriendInvite(name) {
    return doGqlReq(sendInboxFriendInviteQuery, { name }).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'sendInboxFriendInvite'))
}

function acceptInboxFriendInvite(id) {
    return doGqlReq(acceptInboxFriendInviteQuery, { id }).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'acceptInboxFriendInvititation'))
}

function getInboxFriendInvites() {
    return doGqlReq(getInboxFriendInvitesQuery).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getInboxFriendInvites'))
}

function getInboxFriendInvitations() {
    return doGqlReq(getInboxFriendInvitationsQuery).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getInboxFriendInvitations'))
}

function getInboxFriendGifts() {
    return doGqlReq(getInboxFriendGiftsQuery).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getInboxFriendGifts'))
}

function restartGameProgress() {
    return doGqlReq(restartGameMutation).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'restartGame'))
}

function canBuyPackCall(id) {
    return doGqlReq(canBuyPackQuery, { id }).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'canBuyPack'))
}

function getPacksCall() {
    return doGqlReq(getPacksQuery).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getPacks'))
}

function getTranslationsCall(lang, isDevFlag) {
    const isDev = isDevFlag === true ? true : undefined;
    return doGqlReq(getTranslations, {lang, isDev}).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getTranslations'))
}

function deactivateUserCall() {
    return doGqlReq(deactivateUserMutation).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'deactivateUser'))
}

function getLanguagesCall() {
    return doGqlReq(getLanguagesQuery).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getLanguages'))
}

function getNewsCall() {
    return doGqlReq(getNewsQuery).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getNews'))
}

function getUserByNameCall({name}) {
    return doGqlReq(getUserByNameQuery, { name }).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getUserByName'))
}

function buyNameChangeCall({name}) {
    return updateUser({name}, {buyNameChange: true});
}

function getGameVersionCall() {
    return doGqlReq(getGameVersionQuery).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getGameVersion'))
}

function getGameStatusCall() {
    return doGqlReq(getGameStatusQuery).then(res => res.json()).then(res => parseGraphqlResponseOrThrow(res, 'getGameStatusV2'))
}

function GetText2(_text){
    return GetTextFull(_text,': ');
}
function GetText3(_text){
    return GetTextFull(_text.trim())+' ';
}
function GetText4(_text){
    return ' '+GetTextFull(_text.trim());
}
function GetText5(_text){
    return ' '+GetTextFull(_text.trim())+' ';
}
function GetTextCAPS(_text,_numbers){
    return GetTextFull(_text,'',_numbers).toUpperCase();
}
function GetTextC1(_text,_numbers){
    return '<span class="caps1">'+GetTextFull(_text,'',_numbers)+'</span>';
}

function GetText(_text,_numbers){
    return GetTextFull(_text,'',_numbers);
}
function GetTextFull(_text,_sufix,_numbers){
    if(!_sufix)_sufix='';
    let _out='';
    if(!localeString[_text]){
        if(locale_fallback && locale_fallback[_text]){
            _out = Array.isArray(locale_fallback[_text])? locale_fallback[_text][0]:locale_fallback[_text];
        }else{
            if(testVersion)console.error('this Text does not exist: ***'+_text+'***')
            _out = _text;
        }
        // return ColorSpan('maroon',_text+_sufix);
    }else{
        _out = Array.isArray(localeString[_text])? localeString[_text][0]:localeString[_text];

    }
    // if(_out.indexOf('{PER_INCOME}')>=0)_out= _out.replaceAll('{PER_INCOME}',' '+GetText('every {att1} seconds',[INCOME_SEC]));
    if(_out.indexOf('{EVERY_X_SECONDS}')>=0)_out= _out.replaceAll('{EVERY_X_SECONDS}',' '+GetText('every {att1} seconds',[INCOME_SEC]));
    if(_out.indexOf('{FOOD_ICON}')>=0)_out= _out.replaceAll('{FOOD_ICON}',MatIcon('food'));
    if(_out.indexOf('{GOLD_ICON}')>=0)_out= _out.replaceAll('{GOLD_ICON}',MatIcon('gold'));
    if(_out.indexOf('{POLLUTION_ICON}')>=0)_out= _out.replaceAll('{POLLUTION_ICON}',PollutionIcon());
    if(_out.indexOf('{POWER_ICON}')>=0)_out= _out.replaceAll('{POWER_ICON}',ElectricityIcon());
    if(_out.indexOf('{BUNKER_NAME}')>=0)_out= _out.replaceAll('{BUNKER_NAME}',GetBunkerTownLabel());
    if(_out.indexOf('{BREAK_LINE}')>=0)_out= _out.replaceAll('{BREAK_LINE}',BR);
    
    if(_numbers!=undefined
        ){
        if(!Array.isArray(_numbers)){
            _out= _out.replaceAll('{att1}',_numbers);
            
        }else{

            if(_numbers[0]!=undefined){
                _out= _out.replaceAll('{att1}',_numbers[0]);
            }
            if(_numbers[1]!=undefined){
                _out= _out.replaceAll('{att2}',_numbers[1]);
            }
            if(_numbers[2]!=undefined){
                _out= _out.replaceAll('{att3}',_numbers[2]);
            }
            if(_numbers[3]!=undefined){
                _out= _out.replaceAll('{att4}',_numbers[3]);
            }
        }
    }
    
    return _out+_sufix;
}

let localeString={};
var locale_fallback={
    "Extra power":"Excess Power<!--electricity-->",
    "Power shortage":"Power shortage",
    "Continue":"Continue",
    "Start":"Start<!-- button command -->",
    "Power":"Power<!--electricity-->",
    "Pollution":"Pollution",
    "Pollution / Power":"Pollution / Power",
    "Population": ["Population","kratka popiska hore v headeri"],
    "Food": ["Food","short resource name"],
    "gold":["Gold<!--gold-->","resource name"],
    "gems":["Gems","resource name"],
    "Super Clickers":["Super Clickers","resource name"],
    "Lumber":"Lumber",
    "Stone":"Stone",
    "Steel":"Steel",
    "Clay":"clay<!-- rubble,earth -->",
    "Micro-chips":"Micro-chips",
    "Oil":"Oil <!--ropa-->",
    "Reward AD":"Reward AD",
    "Play AD":"Play AD",
    "Discard":"Discard",
    "Claim reward":"Claim",
    "Watch an AD and get {gold_number}":"Watch an AD to get {gold_number}",
    "Watch an AD and get {number1}x clicking bonus for next {number2} clicks":"Watch an AD to make your next {number2} clicks be {number1} times more effective",
    "Watch an AD and get {resource}":"Watch an AD to get {resource}",
    "Spawns {number1} chests in map":"Watch an AD to spawn {number1} treasure chests on the map",
    "Mega-city":"Mega-city",
    "Special Location":"Special Location",
    "GAME SAVED":"GAME SAVED",
    "Upgraded":["Upgraded","short floating text"],
    "max level":["Max Level","short floating text"],
    "or":"or",
    "Choose cost":["Choose cost","popup label"],
    "Show features":["Unlock history","button label, shows a history of unlocked features"],
    "New feature unlocked!":"New feature unlocked!",
    "Unlocked features at level":"Features at level",
    "New Upgrades":"New Upgrades",
    "REALLY reset the game and its progress?":"REALLY reset the game and its progress?",
    "RESET?":["RESET?","popup label"],
    "DELETE ME":["DELETE ME","button label"],
    "ACTIVE":"ACTIVE",
    "QUICK TOOL":"QUICK TOOL",
    "destroy":"destroy",
    "Flatten":["Flatten","verb - short button label, to remove hill"],
    "Flatten hill":"Flatten hill",
    "removes the hill; cost:":"Removes the hill; cost:",
    "Grow {att1}":["Grow {att1}","{att1} in this text is replaced by a type of forest. example in game: grow dense forest"],
    "FREE":"FREE",
    "BUY":"BUY",
    "Cost:":"Cost:",
    "into storage":"into storage",
    "Remove this building: {att1}":"Remove this building: {att1}",
    "New chest coordinates":"Found Chest coordinates",
    "MAX town level reached!":"Maximum settlement level reached!",
    "Activate quick tool with this road type:":"Quick tool:",
    "no road nearby":"No road connection",
    "Road nearby required":"Road connection required",
    "NEXT":"NEXT",
    "No diary found yet":"No logs discovered yet",
    "End of world Diary":"Records of a Broken World",
    "Your gold:":"Your gold:",
    "Show settings":"Settings",
    "Tile restored!":"Tile restored!",

    "Income +{att1} gold{EVERY_X_SECONDS} {att2}%":"Income +{att1} Gold{EVERY_X_SECONDS} {att2}%",
    "Send ship here to catch {att1} fish {EVERY_X_SECONDS}.":"Send a ship to catch {att1} fish {EVERY_X_SECONDS}.",
    "Ship fishing range: {att1}":"Fishing range: {att1}",
    "Send ship":["Send ship","very short"],
    "Send home":["Send home","very short"],
    "Free ships:":"Unused ships:",
    "Send ship home.":"Send the ship home.",
    "Build more shipyards":"Build more shipyards",
    "{att1} food income":["{att1} Food income","plus or minus food income info"],
    "every {att1} seconds":"every {att1} seconds",
    "Restoration strength":"Restoration Strength",
    "all_ships_used":"All ships are in use. Build more shipyards or send a ship home if you want to send a ship here.",
    "Clear rocks":"Clear Rocks",
    "requires level:":"Requires level:",
    "You can click any player and check his base":"You can click on any player and check out their map",
    "data updates every few minutes":"Data updates every couple of minutes",
    "BEST EXPLORERS":"BEST EXPLORERS",
    "name":"Username",
    "income":"Income",
    "loading leaderboards...":"Loading leaderboard",
    "More towns and forests = bigger income":"More settlements and forests = bigger income",
    "Premium purchase":["Premium purchase","popup label"],
    "Try again later":"Try again later",
    "To build shipyard you require street or another shipyard nearby!":"To build a shipyard you need a road connection or another nearby shipyard.",
    "species book coming soon":"Species Log coming soon",
    "big zoom":["Zoomed too far","notification that zoom is too big"],
    "POST-APO MARKET":"POST-APO MARKET",
    "Road is not connected to main town. Roads must be connected to town, shipyard or other road. Connections to normal buildings wont work":"This road is not connected to your main settlement. Roads must be connected to a settlement, shipyard or other road. Connections to normal buildings won't work.",
    "Road type:":"Road type:",
    "(bridge)":"(bridge)",
    "cost:":"cost:",
    "Starter pack bonus":"Starter pack bonus",
    "Bonus:":"Bonus:",
    "Seems like you are not actively playing the game.":"Seems like you are not actively playing the game.",
    "Still active?":"Are you still active?",
    "Search for other bunker first":"Search for another settlement first",
    "No road connected to main town":"Missing road connection to Main settlement",
    "Distance from center:":"Distance:",
    "LOADING":"LOADING",
    "Please wait":"Please wait",
    "Claim":"Claim",
    "Your inbox":"Your inbox",
    "Show me!":"Show me!",
    "We have found special place and marked its coordinates to our map.":"Special location found! Its coordinates are marked on your map.",
    "Coordinates found!":"Coordinates found!",
    "+{att1} income":"+{att1} income",
    "Not enough {att1} ({att2})":"Not enough {att1} ({att2})",
    "Not enough {att1} ({att2} / {att3})":["Insufficient {att1} ({att2} / {att3})","example in game: Insufficient Gold (500 / 2000)"],
    "Connect with road!":"Connect to a road",
    "Out of range!":"Out of range!",
    "You need shipyard nearby or build more shipyards":"You need a shipyard nearby, or build more shipyards",
    "Restored:":"Restored:",
    "Upgrade cleaning clicks in bottom upgrade menu":"Upgrade your Restoration Strength",
    "Connection lost":"Connection lost",
    "Seems like there is a problem with connection, try to restart your app.":"Connection problem, please try to restart the app.",
    "Level:":"Level:",
    "MAXED":"MAXED",
    "UPGRADES":"UPGRADES",
    "Information":"Information",
    "we are sorry":["We are sorry","in warning popup"],
    "Low player level":"Low player level",
    "You require main {att1} level to be level {att2}":["Your main {att1} needs to reach level {att2}.","att1 is type of town"],
    "Player level = main {att1} level":["Player level = Main {att1} level","att1 is type of town"],
    "No copper field found.":"No Copper found.",
    "Copper field found!":"Copper found!",
    "Search":["Search","verb"],
    "Manually search for copper field in radius of {att1}.":"Look for Copper in a {att1} tile radius.",
    "Can also automatically find copper field in radius of 5 when built. Or you can manually try to search in bigger radius.":"Automatically finds Copper in a radius of 5 when built. Can be activated to search a wider area.",
    "discovers land in radius: {att1}":"Reveals land in a {att1} tile radius.",
    "Search used already, nothing to find.":"Search already used, nothing new to find.",
    "Oil rig constructors":"Oil Rig Constructors",
    "Reduce the gold cost of oil rigs by {num1}%":"Reduce the Gold cost of Oil Rigs by {num1}%",
    "no fish here":"No fish here",
    "skip ad and claim reward":"Skip AD and Claim reward",
    "Add skippers left:":"AD Skippers left:",
    "POSSIBLE UPGRADES":"POSSIBLE UPGRADES",
    "DAILY REWARD":"DAILY REWARD",
    "Consolation prize":"Consolation prize",
    "Limit:":"Limit:",
    "Offline earnings":"Offline earnings",
    "Offline time:":"Offline time:",
    "Not enough {att1}, click {BUNKER_NAME} to earn gold":"Insufficient {att1}, click on a {BUNKER_NAME} to earn more",
    "Not enough Gems ({att1})":"Insufficient Gems ({att1})",
    "Max offline time: {att1} minutes":"Max offline time: {att1} minutes",
    "Reward:":"Reward:",
    "Pack value:":"Pack value:",
    "Already bought":"Already bought",
    "Super clickers_popiska":"Super Clickers speed up your clicking. A click with a Super Clicker counts as {att1} clicks.",
    "Each AD skipper can skip one AD.":"Each AD Skipper can be used to skip one AD.",
    "no super clickers":"No Super Clickers",
    "You have no super clickers left":"You're out of Super Clickers",
    "can be bought max once every {PACK_HOURS} hours":"Purchasable once per {PACK_HOURS} hours.",


    "food_tut_1":"Max food depends on your food income.",
    "food_tut_2":"Every {att1} seconds you generate Food, and {att2}% of your total Food is spoiled.",
    "food_tut_3":"Food is generated by farms and later also by fishing ships.",
    "Food info":"Food Info",
    "What is food {FOOD_ICON}?":"What is Food {FOOD_ICON}?",
    "How to grow farm fields?":"How to grow farm fields?",
    "Farm fields grow randomly in the {att1} tile range on empty tiles":"Farm fields can grow randomly on empty tiles over time, up to {att1} tiles away from a Farm.",
    "Food {FOOD_ICON} is basic resource used to upgrade bunkers/towns.":"Food {FOOD_ICON} is a basic resource needed to upgrade settlements.",
    "These farmfields then generate food{FOOD_ICON} {EVERY_X_SECONDS}":"Farm fields generate food{FOOD_ICON} {EVERY_X_SECONDS}",
    "Food {FOOD_ICON} is gained through <b>farms</b>":"Food {FOOD_ICON} is gained through Farms",
    "food_tut_6":"You can build Farms on plain tiles. Farms will then grow on empty tiles in the gathering range of the farm, over time.",
    "Chip factory can be built only on:":"Chip factory can only be built on:",
    "These copper tiles can be found via this structure:":"Copper tiles can be found with:",
    "Does not have foundry nearby - wont produce micro-chips!":"Missing a nearby Foundry - Won't produce Micro-chips!",
    "You require level {att1} to be able to build oil rig on water.":"Level {att1} needed to build Offshore Oil Rig.",
    "But till then you can build Onshore Oil Rigs.":"You can build Onshore Oil Rigs.",
    "You can build them on tiles like this:":"Can be built on tiles like this:",
    "pollution_tut_1":"Industrial buildings and advanced roads will increase {POLLUTION_ICON} Pollution.",
    "pollution_tut_2":"Trees and various ecological buildings can reduce {POLLUTION_ICON} Pollution.",
    "pollution_tut_3":"If {POLLUTION_ICON} Pollution is greater than {att1}, your income is reduced.",
    "pollution_tut_4":"The easiest way to reduce your {POLLUTION_ICON} Pollution is to plant some more trees.",
    "power_tut_1":"Power {POWER_ICON} is generated by various buildings",
    "power_tut_2":"(Coal Plant, Wind Mill, Solar Panels)",
    "power_tut_3":"Power {POWER_ICON} is used by almost every advanced building and by Settlements over level 20.",
    "power_tut_4":"If your Power {POWER_ICON} reserve is in the negative, your income is reduced.",
    "You can also make pollution/power always visible in header":"You can make Pollution and Power always visible in the header",
    "restoration_info":"Each tile requires a different amount of clicks to restore it so you can use it. The amount depends on distance from your Main Settlement.;{BREAK_LINE}You can upgrade your Restoration Strength and thus your clicks will act as more clicks. By default, a click restores 1 point for 100 gold. If you have upgrades that increase restoration strength by 5, then one click restores 6 points and costs 600 gold.",



    "cancel":"Cancel",
    "yes":"Yes",



    "The nuke was dropped.":"The nukes fell.",
    "The world is broken.":"The world is broken.",
    "Years passed.":"Years passed.",
    "Now it's time to go out!":"Now it's time to head out!",
    "And restore the world!":"And restore the world!",
    
    
    "Old power generator":"Old Generator",
    "Partly broken power generator. Generates {att1} {att2} pollution and {att3} {att4} power":"Malfunctioning generator. Generates {att1} {att2} Pollution and {att3} {att4} Power",
    "Partly broken power generator. Generates {att1} {att2} pollution.":"Malfunctioning generator. Generates {att1} {att2} Pollution.",
    "You require level {att1} to catch fish":"Level {att1} needed to fish",
    "salvage it to gain some resources.":"Salvage to gain resources.",
    "Ship wreck":"Ship Wreck",
    "Airplane wreck":"Crashed Plane",
    "Old train wreck":"Train Wreck",
    "Clay in storage:":"Stored Clay:",
    "Swamp":"Swamp",
    "unable to build on this soil.":"Unable to build here.",
    "Rocky Swamp":"Rocky Swamp",
    "unable to build on this soil not even bridges.":"Unable to build here.",
    "Rift":"Rift",
    "Use clay to remove; Clay in storage:":"Use Clay to remove; Clay in storage:",
    "You also need special upgrade to be able to fill the rift.":"You need a special upgrade to fill the rift.",
    "Chop chop":"Chop Chop",
    "Cut the forest, cost:":"Cut the forest, cost:",


       
    "You have total of {att1} / {att2} gem fields used.":"You have total of {att1} / {att2} gem fields used.",
    "Produces {att1} every day.":"Produces {att1} every day.",
    "Offshore Oil Rig":"Offshore Oil Rig",
    "Stone Mine":"Stone Mine",
    "Buildable only on hills and mountains":"Buildable only on hills and mountains",
    "Adv. Stone Mine":"MK2 Stone Mine",
    "Stone mine speed:":"Produces:",
    "Total stone income:":"Global production:",
    "Each mine increases stone storage by:":"Stone storage:",
    "Total stone storage:":"Global stone storage:",
    "Revitalise":"Revitalize",
    "You will change the soil from sand to desert.":"Turns a Desert tile to Barren.",
    "You will make the soil suitable for plants.":"Turns a Barren tile to Plain.",
    "You will change the soil to desert":"Will turn a Desert tile to Barren.",
    "Dirt Road":"Dirt Road",
    "Paved Road":"Paved Road",
    "Basic Road":"Basic Road",
    "Street Road":"Street Road",
    "Fast Street":"Fast Road",
    "Highway":"Highway",
    "Eco Highway":"Eco Highway",
    "Wooden Bridge":"Wooden Bridge",
    "Paved Bridge":"Paved Bridge",
    "Basic Bridge":"Basic Bridge",
    "Quality Bridge":"Quality Bridge",
    "Fast Bridge":"Fast Bridge",
    "Highway Bridge":"Highway Bridge",
    "Eco Bridge":"Eco Bridge",
    "Salvage":"Salvage",
    "Clear":"Clear",
    "PLAYER INCOMES":"PLAYER INCOMES",
    "Small chance that small fishes will appear;":"Small chance that a Small Fish School will appear;",
    "Run through this building and check for important stuff and then clear the tile.":"Check the building for scrap and clear the tile.",
    "Dense Forest":"Dense Forest",
    "Small Forest":"Small Forest",
    "income +{att1} gold {EVERY_X_SECONDS}":"income +{att1} gold {EVERY_X_SECONDS}",
    "Desert":"Barren",
    "Big mountains":"Big mountains",
    "More like an obstacle, unable to build roads here, iron and stone is present here.":"Contains iron and stone. Blocks construction of road and most buildings.",
    "Hills":"Hills",
    "Unable to build roads here, iron and stone is present here.":"Contains iron and stone. Blocks construction of road and most buildings.",
    "Chip Factory":"Chip Factory",
    "Generates power but also generates lots of pollution.":"Generates power but also causes heavy Pollution.",
    "Clean sea power. Stark would be proud.":"Clean sea power. Stark would be proud.",

    "restoration upgrade description":"While restoring a tile, every click will count as {num1} more clicks (The total Gold cost of restoring the tile is the same, but you can do it in fewer clicks.)",
    "Ocean Sweep upgrade":"Ocean Sweep upgrade",
    "You will be able to sweep the ocean cheaper by {num1}%":"Ocean Sweep is {num1}% cheaper",
    "Offshore oil rig generator":"Offshore Rig Generator",
    "Offshore oil rigs will have own power generator, that will generate {num1} power instead of consuming.":"Offshore Oil Rigs will generate {num1} Power instead of consuming.",
    "Town cleaner":"Mandatory Recycling",
    "Town pollution will be lower by {num1}%":"Pollution generated by Settlements will be {num1}% lower.",
    "Town Power Generator":"Settlement Generator",
    "Town power consumption is lowered by {num1}%":"Power consumption of Settlements will be {num1}% lower.",
    "There is a {att1}% chance to succeed and create more fish.":"There is a {att1}% chance to succeed and create more fish.",


    
    "game music":"Game Music",
    "show income":"Show Income",
    "auto claim offline earnings on game start":"Auto claim offline earnings on game start",
    "show pollution and power in header":"Show pollution and power in header",
    "higher bottom button bar":"Higher bottom button bar",
    "big town numbers when zoomed out":"Large city level display when zoomed out",
    "always show main town label":"Always show Main Settlement label",
    "smaller grid menu":"Smaller grid menu",
    "left handed (buttons are oriented to the left)":"Left hand Mode (Buttons oriented to the left side)",


    "Have total of {att1} forests! (You have: {att2})":"Have a total of {att1} Forests! (You have: {att2})",
    "Have total of {att1} deep cleaned tiles! (You have: {att2})":"Ocean Sweep a total of {att1} Water tiles! (You have: {att2})",

    "story__0":"So we head out, into an inhospitable world, burnt to a crisp by nuclear fire. As we tentatively opened up the doors of our bunker, the first thing we stuck out was a Geiger counter. We calculated that the radiation levels should still be pretty high. How surprised we are, when our machines register nothing. The levels weren't elevated at all. It was just standard background radiation as in the pre war times. Very strange.",
    "story__1":"The world around us is in ruins, yet, inexplicably, no more radioactive than the inside of our bunker. We'll have to try to crack this mystery open. But there's not much use in scratching our heads inside the little valley where we emerged. We should look for other survivors.",
    "story__2":"Finally, we find signs of life! It's good to know we are not alone in this wasteland. The other survivors we found were also huddling in a bunker. As we find them, they are always happy to join us right away.",
    "story__3":"We are equipped with useful pre-war technology that can help us replenish the land. As we manage to turn the dust around our first bunker into lush greenery, we decide we could do this for the entire area around us. Or go even further. There is one downside to all the pre-war junk: It's really not cheap to run. Do we still run on money? Of course we do! We wanted to have something to trade for manual labour and goods.",
    "story__4":"There isn't anywhere near enough bottles lying around to come up with a new kind of base currency.",
    "story__5":"As we explore more of the wasteland, we are surprised by just how many bunkers there are around here. Was the pre-war civilization in this country particularly careful about surviving a possible catastrophe? Curious, we check the archives in our bunkers to see how much time our ancestors had to prepare for the impending nuclear catastrophe. We struggle to find a conclusive answer. The logs from various bunkers don't even agree on when exactly the bunkers were sealed. Shouldn't they all have been sealed at about the same time?",
    "story__6":"Oddly enough, despite there being an economy and money flowing around, we don't really experience many conflicts. People don't quarrel about having less than someone else. This lack of inner turmoil allows us to be incredibly productive. We also don't have to spend any effort on research and accumulation of military arsenal.",
    "story__7":"We have many pre-war books, where authors of the past mused about how bleak the future will be. They always pictured it as a violent, merciless place. Raiders, pillaging, violence, constant struggle for resources. We see none of that here. The pre-war books also often mention mutated wildlife. We do have a fair amount of that.",
    "story__8":"Signs of past conflict do exist, though. We salvaged numerous buildings which were blown apart by explosions. We've often seen places riddled with bullet holes. It's odd that there are bullet holes. What kind of enemy force would send foot soldiers into a place they were about to hit with weapons of mass destruction? Or did they come after, to clean the place up? When it was all meant to be radioactive?",
    "story__9":"As we clear the land and refurbish what we can, in our struggle to make things look a bit like the pre-war times, we encounter fauna and flora that I could only describe as utterly alien. The nature is very interesting to those of us who are scientifically inclined, who we call scholars.",
    "story__10":"People become scholars with the aid of old pre-war books. There are scholars who have read all the books of knowledge that currently exist! Not every scholar heeds from a bunker, though. Some of them were hermits, or lived in miniscule tribe-like societies. As our society grows, it attracts more and more of them to come.",
    "story__11":"An arrival of a scholar can be a momentous occasion, especially when they bring along new books of knowledge. A massive scientific breakthrough can occur in a single day if someone brings the right book. There are things that hold us back, though, like when two scholars come up with hypotheses that oppose each other. That's a situation that would naturally lead to a conflict of some kind, and we just don't ever have those.",
    "story__12":"Most of the books we find just lying around in the old ruins aren't readable. They turn to dust at the faintest touch. It's a bit strange, many pre-war items have managed to retain at least some kind of integrity. It's just the books that fall apart like that.",
    "story__13":"Even more valuable than pre-war books are new books. Scientific records of our scholars. If a scholar ever decides to write a book, they gain the superior title of scribe. Very few of our scholars have managed to become scribes so far.",
    "story__14":"Some of our scholars dedicate much of their time to cataloging the odd animals and plants that exist in our world. I'll note down a couple I find particularly interesting.",
    "story__15":"The Venom Willow is a tree with droopy purple leaves, with tough wooden spikes covering all of its trunk. As the name suggests, the tree is full of venom - it's in the leaves and the spikes, too. Venom Willows can grow every kind of fruit one could think of. Of course the fruit was poisonous. Some of our scholars theorize that different types of fruit trees could have evolved into Venom Willows.",
    "story__16":"We have seen something that resembled a pre-war hyena, but it had multiple heads. The most disturbing thing was that its laughter was muffled and sounded like many voices at once. Like an old sitcom. They could also perfectly mimic sounds they have heard. Our scholars think that the sounds they emit when they laugh could be jumbled up recordings of the past, which somehow carry over through their genetic code.",
    "story__17":"We also found a completely normal dog. We wouldn't be living in a proper wasteland if we didn't find one. We called him Sparky. Sparky was a very good boy.",
    "story__18":"A fair amount of rodents have survived the apocalypse, rats being the most common type. These five legged menaces can really adapt to anything. When you poison them it puts them down for a while and then they just get back up. They can even survive walking through a laser trap. Among the mutated animals of the Wasteland, the current rats are the most similar to their pre-war counterparts.",
    "story__19":"We have some livestock animals, chicken being the most common among them. There's two types of chicken: the pre-war ones come from bunkers that specialized in the preservation of agriculture, and the new chicken is a tough animal that we found in the wasteland.",
    "story__20":"New chicken can grow anywhere between three to eight legs. They don't require anywhere near as much food as pre-war chicken if you want to raise them to maturity, they even get fat fairly easily. They are a superior source of meat, but the downside is that their soft leathery eggs are completely inedible.",
    "story__21":"The most terrifying predator we've encountered so far is, without a shadow of a doubt, the giger. It's a massive mutated animal with tall legs and a long neck, like a giraffe, and a monstrous feline face similar to a pre-war tiger. Hence the name. Gigers are a major issue for our communities, because we are unable to effectively fend them off. We just can't push ourselves to do anything that could actually hurt them.",
    "story__22":"Crops are essential to our survival. We mainly grow corn and wheat. We have found seeds for most of our crops in this odd ancient building. It had massive vault built deep into a side of a mountain, that was filled with nothing but seeds.",
    "story__23":"Word comes around from traveling survivors of a city that is so massive, it lights the night sky and makes it look like day. We have yet to see a settlement so splendorous. Hopefully there is some truth to the rumors.",
    "story__24":"We find an interesting crashed plane. It looks like it crashed much more recently than many of the pre-war planes we found. As we examine it, we find a recording of the last message that was sent from it, probably by the pilot. It goes: \"Watcher 3, detecting a major flare up of activity. Our operation has not gone unnoticed. Enemy base location confirmed.\" What a peculiar message. We catalogue it, but we can't really puzzle out what the pilot could have been talking about.",
    "story__25":"We find the sea to be particularly difficult to restore. The sheer size of it makes this an enormous undertaking. Its waters are heavily polluted and poisonous. Thank Mother that we have the pre-war environment restoration tech.",
    "story__26":"Who is Mother? It's just a thing that everyone says. Mostly when referring to the incredible machinery we use to restore the wasteland, but people started to use it when talking about mundane machines as well. You could say it's something like our post-apocalyptic meme, like there were in the time when there was internet.",
    "story__27":"There are so many shipwrecks in the sea. It appears that time has been quite cruel to the old vessels. One of our scholars, a hermit from the wilderness, comes up with a wild story of how there was a time when all ships in the land have become sentient and heeded the call of a Machine God, who called them out to commune in the open sea. Needless to say, we didn't really believe him. Sounded like he has read far too many fictional stories.",
    "story__28":"We do sometimes find signs that appear to indicate that many of these wayward ships have sunk at about the same time, but how is that possible? We can only imagine that it was some kind of coincidence. It's also strange that many of the ships sunk way out in the sea, not in the harbors. Most of the wrecks we find have sunk centuries after anyone actually sailed the ships.",
    "story__29":"Today, while exploring the sea, we have encountered a particularly wild sandstorm. Sandstorms are a dangerous phenomenon, but we grew used to it. They can come into a vibrant, restored land and turn it back into the decrepit wasteland it used to be.",
    "story__30":"As the sandstorm hit the sea ahead of us, which we just restored, it turned right back to what it was before. Yeah, when I said they can turn land back to what it used to be, I meant it literally. If there was a ship wreck and we would have salvaged it, it would be right back where it was. The sandstorms in the wasteland are a really strange phenomenon. We are guessing there is some kind of reason for why they do what they do, but so far we failed to discern what it is.",
    "story__31":"We restore another part of the sea, and stumble across an algae colony. These curious, dark green plants just started popping up in the seas and the ocean. They can generate a high amount of heat when they are hit by sunlight. Unusually high. As we look into them a little better, our scholars discover that the algae colonies have developed photovoltaic cells in their leaves. They actually generate electricity! This looks like something we might be able to use.",
    "story__32":"Another interesting plant that helped our industry is the Miner's Folly. It's an underground plant that grows long vines - as if it was growing roots, but they grow upwards instead of downwards. The roots of this plant take on various bright shades of color when they grow through various types of air, which helps our miners detect deadly underground pockets of gas before they are endangered. As we grow further, our need for stone and iron is so great, we would be in some deep trouble if it wasn't for plants like this.",
    "story__33":"One of the bunkers we've recently welcomed into our territory had a most unusual population. A large group of humanoid robots, whose heads looked like old PC screens. The humans in their colony called them Servo's. Where did these guys come from?",
    "story__34":"Speaking further with the Servo's, we come to a disturbing realisation. They think they are human, and they claim that WE are the robots. Their description of how they see us was exactly the same as what we saw in them. Our explanations that they were really the robots fell on deaf ears. It looks like they have had a conversation like this many times, with many people of the wastes. An intrusive thought gnaws at the back of our consciousness: Which one of us is the real servo?",
    "story__35":"Even more disturbing was the fact that wild animals don't distinguish between humans and servos about whom to attack nor eat. I saw a place where a small group of travelers was killed and feasted on by a particularly nasty giger. Half of them servos, half people. All eaten.",
    "story__36":"Another trait they shared with us was the inability to have a conflict. This was particularly difficult when the discussions that compare us to them kind of naturally flow as if they were meant to escalate into some kind of conflict, but then we realize we are unable to continue. Any kind of intellectual debate can just freeze up at the moment when it would become heated, and then, unable to continue the talk, both sides just drop the issue.",
    "story__37":"We can't really puzzle out the situation with servos, so we move on with exploring the wasteland together, wondering what strange thing we will bump into next.",
    "story__38":"The last couple of shipwrecks we have examined yielded an interesting discovery: Their anchors were blasted off using remotely controlled explosives. Until now, we thought the ships have been wrecked somewhat naturally, as it would happen while most of humanity was huddled in bunkers. This new finding would suggest that it was intentional.",
    "story__39":"Another puzzling thing about the shipwrecks was that it looked like they all sunk at about the same time. This makes more sense if we assume that the ships were sunk deliberately, by someone using explosives. We have found so many valuable resources on the sunken ships. What could possibly lead someone to sink hundreds of ships without even scrapping what's inside?",
    "story__40":"Some of our scholars suggested that there could have been some highly dangerous materials on the sunken ships, which has triggered a panic. Our science staff across the wasteland started erratically performing various safety checks on materials salvaged from ships. All of our analyses yielded negative results: There was no unusually hazardous cargo on the ships we found. Of course we have found some radioactive material in nuclear-powered ships, but that was an expected find, and its amount was always within norms.",
    "story__41":"The short panic about ship cargo triggered another strange event. Some of our scholars never agreed with the hypothesis of dangerous cargo, and this caused tensions to rise. It's a well known fact that there are never conflicts of any kind in the wasteland. Or at least that's what we thought.",
    "story__42":"Suddenly we had a couple of scholars arguing with each other. Among others who were simply unable to do so. This lead to a shocking discovery. Something is inhibiting our ability to feel a wide spectrum of negative emotions, which could lead to conflict. This is universal across humans and servos alike, but there are individuals who have some kind of immunity to whatever is suppressing it.",
    "story__43":"Among the chaos and arguments that arose in the ship cargo crisis, one of our scientists committed murder. This was the first murder in our recent history. Since we crawled out of our bunkers. Shocked and appalled, we struggled to find a way to respond to this.",
    "story__44":"We didn't even have any prisons. We had to build the first one, to contain the rogue scientist. With the scientist imprisoned, we try to find out how it is possible that there is a handful of people who were able to have conflicts and fight, even kill. We don't arrive to a conclusive answer, but the affected people did have various hormonal irregularities. Could it be some kind of exceptionally rare genetic mutation, that would allow them to ignore whatever is supressing our ability to fight?",
    "story__45":"Anyways, we found out that the ships weren't sunk because they would carry dangerous cargo. The mysteries and inconsistencies just keep piling up. The ship cargo crisis just added another one to the pile: Our ability to have conflicts is being suppressed, probably by some external factor. How? Why? It makes us feel odd to find out that we may have been changed by some unknown entity, without our consent.",
    "story__46":"Hungry for answers, we scour the wasteland with newfound vigor. It doesn't take long for us to discover another lead. A ruin of a pre-war military harbor, with its ships intact. We examine the anchors of the preserved ships, and find bundles of explosives. Now this is a solid clue. But that is not all. We also find a note.",
    "story__47":"We find a paper that someone used to write down a message they meant to send in Morse code. They probably weren't savvy enough to transcribe into Morse on the fly. The message reads: \"Raiding the military base was a good idea. Plenty of explosives to commence our operation. Also found three VTOL aircraft in working order. Designations: Watcher 1, Watcher 2, Watcher 3. We might be able to use these to scan for enemy activity when we trigger the blast.\" The codenames for those jets sound familiar for some reason.",
    "story__48":"The explosive charges in the harbor we found didn't go off, because whoever has written the note, and made the explosives didn't account for an ancient military signal jammer, which still worked in the area. It looked like they were installed on the ships quite a while ago. Our estimate was somewhere around 40 to 50 years ago. This estimate matches the age of the numerous ship wrecks we have found.",
    "story__49":"Our conclusion is that 40 to 50 years ago, someone rigged thousands of ships across the wasteland with remotely controlled explosives, and then triggered them all at once. Many of the ships ended up wrecking close to where they were anchored, but a fair amount drifted far into the open sea and wrecked there. Also, when they \"triggered the blast\" they wanted to use aircraft to look for some \"enemy activity\". The mention of a hidden enemy is deeply concerning to us. We have found so many mysterious things in the wasteland... could this secret enemy be be behind some of them?",
    "story__50":"Such an operation would have required a tremendous amount of preparation and resources. Also, whoever did this didn't care much for the abundance of exploitable resources present on the ships. We can't imagine a good reason why someone would have done this. But we know they needed a pretty good broadcasting facility to perform such a stunt. We also speculate that whoever did this may have been able to... have conflicts, fight. Were they an anomaly too, or did they find some way to circumvent the conflict suppression in our heads? This would have been a tremendously valuable thing.",
    "story__51":"Knowing what to look for makes things much easier. We quickly narrow down the various broadcasting centers we know to a couple of most powerful ones. We thoroughly search old radio stations, airports, and various military installments to no avail.",
    "story__52":"After days of searching, we were left with a single option on our list - the last place we didn't search. A derelict broadcast tower. We didn't go there because the tower was surrounded by a thick forest of poisonous fruit trees, which was also full of ferocious gigers.",
    "story__53":"There is no way for us to reach the last broadcast tower peacefully. We have to fight our way through the gigers. Most of our citizens would be ill suited for such a task, but thanks to our recent discoveries, we know that we have a small number of people who are capable of fighting.",
    "story__54":"Being capable of fighting does not make one a fighter, though. We have plenty of weapons, medicine and tools one might need in a fight. We just had no one who could use them well. We had to train a fighting force. The first squad of fighters since the bombs fell. Or so we thought.",
    "story__55":"Finally, we felt like our fighters were prepared for the task ahead of them. They started fighting their way through the poisonous thicket full of gigers. The beasts fought back, more coordinated than we expected. We have rarely seen gigers in a group up until now, how could we anticipate that they would be able to fight so well as a pack?",
    "story__56":"In the midst of the bloody battle, our squad managed to open a corridor into the broadcasting tower. We sent an investigative team inside, to examine what happened in the tower. They all went in knowing that there may not be a way back. We all hope that whatever they find there will be worth the sacrifices that had to be made today.",
    "story__57":"Shortly after the investigators get into the tower, our fighters had to retreat. They kept suffering losses and it would only be a matter of time before the gigers overwhelmed them. We have slain so many of the foul beasts, yet they kept coming in such numbers. How is this even possible? It's as if nature itself decided that it wants to make this specific tower inaccessible for us.",
    "story__58":"Our investigators, now stranded in the tower, managed to contact us. They found clues! There was old gear, modifications were made on the broadcasting equipment, and much more. The clues suggest that a mixed group of humans and servos came to the tower 46 years ago. They carried weapons, which means they may have been capable of fighting. This group was responsible for broadcasting the signal which sent thousands of ships out into the open sea.",
    "story__59":"Our investigators were also able to deduce that by the time the signal was sent, there was no forest and no gigers surrounding the tower. Since the ship cargo debacle, we are careful about making wild hypotheses, but some among us think it's possible that the group that sent the broadcast was a guerilla group, fighting against some greater force. Force that could control nature. We hope this hypothesis is wrong.",
    "story__60":"As we analyze these events of the past, we came up with some names, to make it easier to talk about these things. The event when all ships in the surrounding area were simultaneously sent out to the open sea? We call it Operation: Anchor Break. The enigmatic group responsible for the event? We started calling them the Partisans. We also made up a name for the hypothetic force that the Partisans could be fighting. The Enemy. So far we don't know whether the enemy really exists.",
    "story__61":"The most interesting finding in the investigation was another lead - the Partisans had a base of operations in a Mega City. Unfortunately there was no indication of which one it was. We would also expect that the Partisan HQ would be well hidden. So we are looking for a secret base that a group of guerilla fighters operated from, in one of the massive cities of the wasteland. This may take a while.",
    "story__62":"We send search parties into every Mega City we have discovered so far, hoping something turns up. Now that we know more about the Partisans, we think about where else we could possibly look for some leads.",
    "story__63":"One of our scientists was analyzing the unexploded payload from the ship anchors we found a while ago. The explosives had an odd composition, and based on that, they thought they could find out where they came from. It wasn't a strong lead, but we decided to dedicate some resources to this effort.",
    "story__64":"Looking for the possible source of the explosives used in Operation: Anchor Break, we find an old military base with an unusual amount of artillery tech. With such a surplus of weapons, we try to conduct a small experiment. Can a normal person with their inhibited capabilities for conflict, as we have discovered, trigger an artillery strike to kill remotely? We discover that it's impossible, as long as the person pushing the button knows what it will do. It's hard to tell whether this will ever come in handy, but at least we learned a bit more about how the conflict inhibition in us works. It appears to be a deep modification of our consciousness, rather than just some inhibited hormones.",
    "story__65":"The military base we just found was pretty much scrubbed clean of all explosive charges. In one of the store rooms, we find a tiny metal plate bearing a name. \"Randall Smith.\" Could he have been one of the Partisans? It's a stretch, that name tag could have belonged to anyone. It could damn well have been from pre-war times. But we don't have much to lose by checking if that name rings any bells.",
    "story__66":"Bingo! We search the historical logs of the Mega Cities we know, and one of them has data on a resident named Randall Smith, who was born there 90 years ago. He would have been 44 years old at the time when Operation: Anchor Break happened.",
    "story__67":"We found some info on Randall's education, it looks like he was really into pre-war military tech. He collected weapons, too. We are pretty confident that this Randall could have been a member of the enigmatic Partisans. We decide to narrow our search for the Partisan HQ on the Mega City where Randall was from.",
    "story__68":"It's not a guarantee, Randall could have traveled to a different Mega City and joined the Partisan HQ there, but we made the decision to focus on his city the most. It doesn't take long to find the places where he lived. We find a ruined apartment he grew up in, his place where he lived as an adult too. These places have since been picked clean by the various scavengers in the city. An unattended apartment doesn't go unattended for long in a Mega City. Despite the sheer size of them, comfortable living space is scarce.",
    "story__69":"We feel like we have searched the entire Mega City five times over. During one of our search party meetings, someone blurts out how we have perfectly searched everything above ground. Lucky for us, someone catches it and deduces that we should try searching harder under ground.",
    "story__70":"There are few places more dangerous than the underground tunnels under Mega Cities. Compared to what is there, our large fight against wild gigers was just a minor scuffle.",
    "story__71":"We scrounge up every single person we know who is capable of fighting, which amounts to 14 people. We decide to split them into two groups, which will be able to search the underground individually. This way, we can cover more ground. Some suggested that we should split our force into more groups, but we didn't want to risk losses in the underground.",
    "story__72":"Our search of the underground begins. It is slow and difficult. Our armed forces, accompanied by unarmed investigators, must go through long abandoned underground tunnels and infrastructure. Finding an old stinking sewer is among the best things they can encounter. There are also pockets of poisonous and explosive gas, giant bulletproof flying bugs that can spray acid at a distance, and abandoned storage rooms filled with nothing but IKLA furniture, from which someone stole all the screws.",
    "story__73":"We spend several days searching the underground. We lose 2 of our fighters in the process. One to bugs, another one to the furniture. Better don't ask. It's not a fruitless search, though. We find out that there is a place with a particularly high concentration of the bugs, which our soldiers start calling the Hive.",
    "story__74":"A dark realization falls upon us. Just like the Broadcast Tower where we discovered the Partisans, their HQ is probably going to be in a place that is protected the most by wildlife - the Hive. We ponder whether we send our forces there right away, or whether we try to search the rest of the underground more thoroughly first. We opt for the more careful approach, and search the rest of the underground first.",
    "story__75":"While searching the rest of the underground, we end up losing almost an entire group. 5 soldiers along with a number of investigators. A single soldier comes out of it alive. We find out that these losses were made in vain. There was no lead to the Partisan HQ, they just happened to meet a couple of particularly nastily mutated bugs. We are down to 7 people who are capable of fighting, with the Hive ahead of us. Would you have chosen differently?",
    "story__76":"We try to come up with some kind of countermeasure against the bugs, some way to fight them more effectively. We try modifying our clothing and armor to be more resistant to their acid - the results are not bad, but you could hardly call them a perfect countermeasure. We try to upgrade our weaponry with whatever resources we have at hand, so it can pierce their tough chitinous hides. We experiment with various chemicals that could serve as a repellant, but the bugs seem to be perfectly adapted to a climate with varying harsh chemicals, as can often be found in the Mega City underground.",
    "story__77":"After a long preparation, we assemble our strike team. 7 soldiers accompanied by 6 investigators and scientists as support staff. Sparky wanted to come too, but I didn't let him. We try to not make the group too large, so there would be a possibility of taking a stealthy approach if the need arises. They venture down, into the depths of the Mega City, to breach the Hive and find the Partisan HQ.",
    "story__78":"It's a perilous journey. The strike team can barely go through a cavern without triggering a violent response from the bugs. One skirmish after another, our soldiers push on, slowly but surely running out of their precious ammunition and blood. Will there be enough to get into the HQ? Will there be enough to get out of it? They don't know.",
    "story__79":"At last! One tunnel filled with particularly nasty bugs seems to end with a sturdy bunker door. Nothing our strike team can't handle, we all crawled out of bunkers. Behind the door is what we've been looking for. The headquarters of the group we have named the Partisans.",
    "story__80":"One of the first things our soldiers find is a metal tag with the names Amanda Palmer, Joshua Palmer and Larry Palmer. Obviously siblings. Possibly members of the Partisans? It's unconventional that all of their names were written on a single tag - usually those three names would be written on three separate tags.",
    "story__81":"We find records left behind by the Partisans. They have a small library too, filled with incredibly precious knowledge about computers, medicine, weapons and warfare. It's clear that among the Partisans, there were a fair amount of scholars. We also find a large workshop which belonged to the man called Randall. It looks like he served the Partisans as something like an armsmaster. He could make his own ammunition, repair and even modify guns.",
    "story__82":"We find labeled living quarters that belonged to a man named Leon. He must have been their radio specialist and engineer, his room is cramped full of radios, antennas, and various other electronics. On his table we find an interesting device that looks like a miniature walkie talkie. Too bad it's not finished, could have been good tech. Maybe some of our engineers will pick up the project and finish it, now that Leon is not around. ",
    "story__83":"There is a large log book that documents the various operations that were conducted by the partisans. Anchor Break seems to be one of their earlier ones, and they list it as an experiment. The Partisans suspected that there was an entity they entitled \"The Enemy\". What they wanted to find out was whether this Enemy was still monitoring the Wasteland, and where their headquarters were. So they orchestrated a big loud explosive event that shook the entire region. And it looks like the experiment bore fruit. They found out that the enemy was still on the watch, AND where their base was. The log also mentions numerous other minor operations, aiming to secure resources and knowledge. Two other logged operations stand out as particularly important, but we don't have the time to sift through the logs now. We grab the book and decide to thoroughly examine it later.",
    "story__84":"There is a single computer in the entire Partisan HQ, and it's still functional. Written on its side is the word \"liberty\". We boot it up. This machine obviously belonged to a very knowledgeable scribe, we find numerous research papers which are all signed Liberty P. And then, among the old files on this dusty computer, we find the most incredible thing in the whole HQ.",
    "story__85":"We found Liberty's log, on her old PC in the Partisan HQ. She writes a lot about wanting to defeat M. Is this \"M\" the Enemy the Partisans mention in their other logs? Why does Liberty call them that? She hypothesizes about what things M could have an influence on. From the tone of Liberty's writing, she seriously hates whoever this M is. The things Liberty was suspecting M of doing were numerous. Apparently M is the cause for why the animals and plants in the wasteland are all weird. M is responsible for servos. M is responsible for why the world appears to be all devastated. And they are even behind the conflict suppression in our brains, there is extensive research on this specific topic. And in an attached file, there is... a recipe? For a cure?",
    "story__86":"The moment we discover a file that describes how to synthesize a chemical that will \"cure\" the conflict inhibitors in our behavior, a bird flies into the HQ. A strange wildly colored raven with tentacles for legs. One of our soldiers shot it dead. To our shock, upon examining it, we find out that the bird's eyes were video cameras. The very moment we realize that, something starts banging on the door to the HQ. Soon after, we feel a sharp smell as the bunker doors are starting to give in to acid. So that strange bird found us, and immediately after we are attacked by bugs. All of this can't be a coincidence.",
    "story__87":"The bird had to fly in from somewhere. We examine where it came from, and find an escape route. An old elevator shaft that leads straight up from the HQ. This would allow us to get out safely without having to go through all of the bugs. The worst thing is that we don't have time to get all the info out of Liberty's computer. We started saving some files onto our portable computers, and we had to decide what to copy first - the rest of Liberty's logs, or the formula on the conflict serum? We went for the serum. The moment the files finished copying, the door broke and bugs started pouring in. We quickly lose 5 of our soldiers while we try to escape through the old elevator shaft. One of the soldiers was holding the shaft entrance open for us while he kept getting hit by acid spit all over. Even as his flesh was melting away, he stood there with clenched teeth and held the door for the rest of us. Until his body gave in.",
    "story__88":"We emerge from the underground HQ. Finally free of the oppressive danger of the tunnels under the Mega City. Carrying logs, books and a cure for our inability to fight. Thank you, Partisans and miss Liberty. From the 13 who ventured down into the depths, 7 remain.",
    "story__89":"We manage to create a sample of the Conflict Serum. That's how we decide to call it. This acts as an antidote against whatever is inhibiting our ability to have a conflict. People who weren't able to wield and use a gun before? Well, now they can. Our armed force has a potential to grow much larger than it was. We would still rather keep the Serum secret for now, though. If we distributed the cure to everyone right away, soon enough the wasteland would be on fire.",
    "story__90":"On the surface, we check the Mega City archives for any mentions of the various members of the partisans. Of biggest interest are the logs on Scribe Liberty Palmer. She may have been the best chemist and biologist in the Wasteland. We also read through the logs that record the operations conducted by the partisans, we find notes on their final plan. A plan to stop M, once and for all. There are no records from after this event. It's possible that this mission has claimed the lives of all of the Partisans. There was no one left to write down what happened next. Until now.",
    "story__91":"We manage to replicate the Conflict Serum, and test it. Even though we trusted the Partisans, we chose a cautious approach and tested the serum on a single human subject first. It's not like we had animals to test it on, no wildlife we have met seems to be afflicted by the conflict suppression. The results are promising, but there are some psychological issues with it. When an adult has never experienced anger, and suddenly they can feel it, it can get ugly. Making soldiers with this serum may be rather difficult, because then you have... a bunch of people with a soldier's physique and no impulse control, and you have to weather the storm until they learn to control themselves. On the other hand, in some aspects it may be easier to teach this to an adult than, say, a child. I can't imagine what it would be like if young people could feel like this.",
    "story__92":"We scour the valuable log book we have taken out of the Partisan HQ. Among the major missions the Partisans went on, the very last one attracts our attention. They were trying to infiltrate something they called the Underbrain. Their mission data suggest that it's an underground military research hub with maximum security. It's located under a large ruined building that looks like the Empire State... oh, I think I know where that is. Their objective was to... rewrite the human modification protocol? And then to shut down the main computer. I wonder if the main computer is still running. It must have been going for ages.",
    "story__93":"We venture out on another expedition, but this time, we are heading close to where it all started. It looks like this time around there are no beasts, which is strange. In our group we have 3 soldiers: The two survivors from the previous mission, and the only person who we tested the Conflict Serum on - me. I had a set of dog tags made with the names of all members of the Partisans we knew of, because I wanted to take them with me on this mission. We will have 2 more people accompanying us. We want to keep the support staff for this mission at an absolute minimum, but we feel like we really need an engineer and a computer expert if we want to make any progress down there. I have no idea what we'll end up finding, but I assume that the main computer that we will be trying to shut down has something to do with the enigmatic Enemy. The entity that Liberty referred to as M. Maybe it's some kind of a control panel that this M uses to control everything?",
    "story__94":"We descend into the depths, using the ropes in the elevator shaft. It goes really smoothly for about one half of the way. Then, a massive worm rams through the shaft, right under my feet. It killed the soldier below me and yanked my foot into the wall, breaking it. I struggle through the pain and hold onto the rope. There are three more people above me and at least two of them absolutely have to get to the bottom of this. We listen as the worm burrows through the earth and try to dodge it by suddenly moving down the rope. We all managed to dodge its next strike! But it cut the elevator ropes above us, sending us into a free fall.",
    "story__95":"We were ready for this. All of us are connected by ropes, and we have anchor blasters - guns that can drive a long metal spike with an attached rope a good five inches right into a concrete wall. Me and the other soldier draw the blasters and start shooting the walls like hell. They are really tough, but after a few shots we finally find purchase. As we suddenly stop, all of us slam into the elevator wall, suffering various injuries. One of the support folks gets knocked unconscious. Nothing lethal. I assume the worm now knows exactly where we are. I quickly shine my torch down the shaft to confirm we still have enough space under us and reload my anchor blaster. Then I listen. For a moment there is silence, but then I start hearing the worm, burrowing towards us. I cut the rope that holds us. We go into another free fall, and manage to dodge the worm's brutal strike. This time our anchor blasters are ready, and we manage to attach ourselves to the wall again, before accelerating too much, but we are hit by rocks that the worm sent falling down by ramming through the shaft. We are hit hard. The other soldier looks like he is on the brink of death. I shine a light down and notice that we are not far from the bottom. I start unwinding the rope quickly and we all land on the bottom of the elevator shaft.",
    "story__96":"Looks like the worm has stopped. Maybe the walls down here are too thick for it. I quickly administer first aid to the other three members of the group, pick up the other soldier and carry him on my shoulder. We approach a strange metal door that has a hole cut through it. Thank you, Partisans. As we step into the lab, we are shocked by how incredibly advanced all of the technology looks like. Many devices are similar to what we have above ground, but here they all look like they just rolled off the factory belt. Also we find four corpses. I didn't expect to be meeting the Partisans this way. I start approaching a corpse with a scrappy lab coat, and am reminded after a single step that my foot is broken. I crumple to the ground, give it a quick bind and toss back a dose of painkillers. Then I get to the corpse and examine it. It's wearing a tag: Liberty Palmer. She has a voice recorder! I quickly pull it out and press Play.",
    "story__97":"\"Hello, I am Liberty Palmer. Put on a gas mask right now,\" we all put on our masks immediately, \"I am lying here, dying of poison. Listen: This facility, the AI that resides here, is responsible for the state the world is in now, and for all the weirdness out there. It's responsible for the changes in us as well, it had access to the ventilation systems of every bunker in the region since day 1. We completed our primary objective, but we won't be able to shut down the Mother main frame. The Human Modification Protocol is how Mother changed us, and before we edited it, it contained a vicious clause that was meant to artificially slow our population growth rate. She did this by causing a high percentage of children to be stillborn. If I could have gotten here sooner, maybe I would still have Amanda, Joshua and Larry with me right now. Mom has made it this far, little ones, I will forever love you,\" her voice breaks and she is silent for a moment, \"I wish that noone else ever has to experience what I have.\"",
    "story__98":"Liberty's voice log continues. Her voice is getting more and more raspy and her speech is interspersed with heavy coughing. \"We didn't remove the conflict suppression, because we thought if we made too many changes at once, Mother would detect what we were doing and prevent us from shutting her down. Alas, she found us anyways. I wonder if she has any gas left, to kill more people after us,\" we felt like there was no gas, and there certainly isn't any gas getting released upon us now, \"We didn't even think we would be able to shut her down here. It could have had a large network of main frames that were all interconnected and shutting down a single one would be of no use. Randall just found out that all of her is in this one main frame. Whoever is listening to this, you have to shut her down. She was made with good intentions, but it was a failure. She keeps screwing everything up, her databanks are getting more and more corrupted, so she doesn't even know how things are meant to look like. All you have to do is shut down the mainframe. It would be best if you could trigger the proper shutdown sequence, Mother controls many swarms of nanomachines that regulate the environment and who knows what those would do if you'd just blow her up.\" In the last sentence, Liberty is struggling with every word, but she manages to say it in full: \"But if all else fails, by all means, blow that bitch up please.\" The record keeps going for quite a while, but the rest of it is just silence.",
    "story__99":"Well, that certainly wasn't what I expected to hear. With clenched teeth, I get up and explore the surroundings. I find a large console which seems to be tracking, well, it says they are swarms of nanomachines. I realize that I'm looking at what we call Sandstorms. And possibly even... yes, some of the areas of the map show nanomachines in areas that we have JUST cleared of corruption. As if the pre-war machines, the ones we use to restore the world, also used nano machines. These swarms of nanomachines seem to be trying to \"correct\" all of wasteland, but we see what happens when they are done: the land turns back to being a wasteland! Could it be that these nanomachines are malfunctioning and they don't even know what healthy land looks like? Indeed there are many red lights shining on the console, indicating that there may be something wrong. I wonder if whoever controls this facility can still control the swarms at all.",
    "story__100":"The console was interesting, but there was a larger computer to examine, too. A massive network of consoles, looming in the back of the spacious computer room. In many places it is lit up, interconnected by so many wires that it looks like a spider web. Without warning, it addresses me with a cold synthetic voice: \"Hello.\" I respond, \"so you are the one who's behind everything? Was there ever a nuclear war?\" The computer makes no sound for a while, but then it goes \"no. I am Mother. My prime directive is to preserve Earth and life on it. Since I took over my duties the trend has been... negative.\" I feel like the computer expected to say something else, but it is simply unable to lie. \"Sounds to me like you're messing it all up.\" Quick response, \"no! The world is getting better. There is no conflict.\" I feel like this line of questioning is going nowhere, but I'm still curious about some things: \"How did nature and all of the environment get so... bad? If there was no war?\" \"There were wars. Many localized conflicts when I took over, akin to civil wars. Zero weapons of mass destruction were used in all of the conflicts. Still, they were dangerous. I had to stop the conflicts.\" \"I see. And all of the weird animals, trees... that's all because of you? You made them?\" \"Yes, all animal and plant life you have experienced was made by my DNA-printing technology. I had to keep bringing them back as they have gone extinct over and over.\" So the animals kept going extinct and it was... printing them, to make them return. But they all came out weird for some reason. \"All were made to fit the parameters stored in my databanks exactly. There is no faulty animal or plant life on the planet.\" I see that it is very sure about this and decide that I don't care about convincing the machine otherwise. \"Well,\" I unstrap a grenade from my belt, \"that's great. What do we do with you now?\"",
    
    "story_ender1":"There are more findings to be made. Search the wastes, Explorer.",
    "story_ender2":"You have found all logs there are, for now. The story will continue in a later update.",


    "Increases storage:":"Increases storage:",
    "Premium Fish":"Premium Fish",
    "Feed the fish":"Feed the fish",
    "Special Gold mine":"Special Gold Mine",
    "Raze Mountain":"Raze Mountain",
    "Fill and pipe":"Fill and Pipe",
    "Onshore Oil Rig":"Onshore Oil Rig",
    "Gem mine":"Gem Mine",
    "Privacy Options":"Privacy Options",
    "Buy AD-skippers":"Buy AD-skippers",
    "settings":"Settings",
    "PLEASE fill in your name in {att1} to show leader boards":["Set your username in the {att1} to see the Leaderboards","att1 = Settings"],
    "Deep Forest":"Deep Forest",
    "Premium storage":["Premium Storage","building name"],
    "Storage Container":"Storage Container",
    "Lumber Storage":"Lumber Pile",
    "Heavy Lumber Mill":"Industrial Mill",
    "Lumber Mill":"Lumber Mill",
    "Scout Tower":"Scout Tower",
    "Small Shipyard":"Small Shipyard",
    "Heavy Shipyard":"Heavy Shipyard",
    "Wind Mill":"Wind Mill",
    "Oil Tanker":"Oil Tanker",
    "Big Farm":"Big Farm",
    "Farm":"Farm",
    "Stone Conveyor":"Stone Conveyor",
    "Rift Oil Miner":"Rift Oil Rig",
    "Remove rubble":"Remove Rubble",
    "remove the rubble so you can plant forests here.":"Remove the Rubble to enable planting Forests.",
    "Ocean Sweep":"Ocean Sweep",
    "Sensor Tower":"Sensor Tower",
    "Sea Generator":"Sea Generator",
    "Coal Plant":"Coal Plant",
    "Solar panels":"Solar Panels",
    "Generates clean power.":"Generates clean power.",
    "Foundry":"Foundry",
    "Adv. Iron Mine":"MK2 Iron Mine",
    "Fill":"Fill",
    "Destroy":"Destroy",
    "Destroy uranium barrel.":"Destroy Uranium barrel.",
    "Generates power.":"Generates Power.",
    "Fill the rift with clay.":"Fill the rift with Clay.",
    "Connect at least one Mega-city to main town by road - build bridge over sea. (not by ships or shipyards).":"Connect your Main Settlement to one Mega-City by road. Bridge the sea. Ship connection doesn't count.",
    "Connect at least {att1} Mega-cities to main town by road (not ny ships). Established connections: {att2}":"Connect your Main Settlement to {att1} Mega-Cities by road. Established connections: {att2}",
    "Mega-City":"Mega-City",
    "Bunker":"Settlement",
    "Settlement":"Settlement",
    "Village":"Settlement",
    "Town":"Settlement",
    "(You have: {att1})":"(You have: {att1})",
    "Upgrade requirement:":"Upgrade requirement:",
 
    
    "Skip requirement":"Skip Task",
    "SPEED UP":"SPEED UP",
    "All tiles in range 1 must be road":"All tiles in a range of 1 around the Settlement must be Roads.",
    "Your power output must be over {att1}+":"Your Power output must be over {att1}+",
    "upgraded":["Upgraded!","example: town upgraded!"],
    "You can upgrade clicks in bottom menu - upgrades":"Upgrade your clicks in the Upgrades menu",
    "is out of gold.":"Out of Gold.",
    "Click super clickers {att1} in header bar to try them":"Try to activate Super Clickers {att1} in the header",
    "Fishing ship":"Fishing Ship",
    "food income:":"Food income:",
    "Scorched Earth":"Scorched Earth",
    "unable to build anything here":"Unable to build here",
    "River":"River",
    "bridge can be built only through straight river":"A bridge can only be built on a straight river tile.",
    "it flows.":"it flows.",
    "Gold vein":"Gold Vein",
    "build gold mine to gain gold {EVERY_X_SECONDS}":"Build a Gold Mine to produce Gold {EVERY_X_SECONDS}",
    "Reach level {att1} to unlock gold mine.":"Level {att1} required to build Gold Mine.",
    "Reach level {att1} to unlock ship salvaging.":"Level {att1} required to Salvage.",
    "Build oil rig to harvest oil here.":"Build an Oil Rig to harvest Oil here.",
    "is wet":"is wet",
    "Water":"Water",
    "You require {BUNKER_NAME} level {att1} to be able to sail here":"Level {BUNKER_NAME} {att1} required to sail here.",
    "Thermal spot":"Thermal Spot",
    "You can build thermal power plant here":"Suitable for a Thermal Power Plant.",
    "You require level {att1} to be able to build thermal power plant.":"Level {att1} required to build a Thermal Power Plant.",
    "Water rocks":"Water Rocks",
    "Unable to sail ship here":"Unable to send a Ship here.",
    "Gem field":"Gem Field",
    "Here you can harvest gem ores with Gem mines.":"Here you can harvest precious Gems with Gem Mines.",
    "Copper field":"Copper",
    "You can build Chip factory here to construct micro chips.":"Suitable for a Chip Factory, which will generate Micro-chips.",
    "Here you will be able to harvest copper.":"Here you will be able to harvest copper.",
    "Level {att1} required.":"Level {att1} required.",
    "Sand":"Desert",
    "Rubble":"Rubble",
    "unable to grow forests here":"Not suitable for Forest growth.",
    "unable to grow forests or farmfields here.":"Not suitable for Forest growth or Farm fields.",
    "Destroyed building":"Destroyed Building",
    "old building, lot of rubble.":"An old pre-war building, filled with rubble. Might be something interesting in there.",
    "Looks like a train depot, there might be a train inside.":"An old train depot. It could contain some useful tech, or at least some decent scrap.",
    "Artifact":"Artifact",
    "Deep water":"Deep Water",
    "Even cleaner water.":"Water that has been thoroughly swept, so it's even cleaner, and a more pleasant shade of blue.",
    "Small fish spot":"Small Fish School",
    "Medium fish spot":"Medium Fish School",
    "Big fish spot":"Large Fish School",
    "Ship nearby can harvest here {att1} food {EVERY_X_SECONDS}":"When in range of a Fishing Ship, generates {att1} Food {EVERY_X_SECONDS}",
    "Clear this old power generator.":"Put this ancient machine to rest.",
    "Salvage this ship for some extra resources.":"Salvage this wreck for scrap and useful resources.",
    "Salvage this airplane for some extra resources.":"Salvage this crashed plane for scrap and useful resources.",
    "Salvage this train wreck for some extra resources.":"Salvage this train wreck for scrap and useful resources.",
    "too many super clickers":"Too many Super Clickers",
    "Highlight":"Highlight",
    "You will highlite selected tile type or building in map":"Highlights a type of Tile or Building on the map",
    "Works only in small zoom":"Works only when zoomed in.",
    "Only tiles without building are shown":"Only tiles with no buildings are shown.",
    "Turn off highlight":"Turn Off Highlight",
    "SUPER CLICKER ACTIVE":"SUPER CLICKER ACTIVE",
    "Only tiles you have discovered are shown":"Only tiles you have discovered are shown.",
    "Uranium cloud present":"Uranium Cloud present",
    "Nothing new, come check later in next update.":"Nothing new, come check later in next update.",

    
    "Harvests":"Harvests",
    "Storage":"Storage",
    "Sets oil production of nearby (radius: {att1}) Offshore Oil Rigs to 200%":"Offshore Oil Rigs in a {att1} Tile range generate +100% Oil",
    "none":"None",
    "Boosted oil rigs:":"Boosted Rigs:",
    "Fill the rift with clay, and setup the pipes so it will be able to harvest oil here.":"Fill the rift up and set up pipes to turn it into an Oil tile.",
    "Total oil income:":"Global Oil Production:",
    "Total oil storage:":"Global Oil Storage:",
    "Download":"Download",
    "Screenshot done! Download it from link below.":"Screenshot done! Download it from the link below.",
    "Screenshot":"Screenshot",
    "Name already exists. Please choose another one.":"Username taken. Please use a different one.",
    "Something went wrong. Please try again later.":"Something went wrong. Please try again later.",
    "Scroll to main town":"Scroll to Main Settlement",
    "Game version:":"Game version:",
    "User id":"User ID",
    "copied to memory":"Copied to memory",
    "Save User Name":"Save Username",
    "Player name":"Username",
    "E-mail":"E-mail",
    "your name":"Your Name",
    "Link Account":"Link Account",
    "type in your email if you want to be able to restore account if you lose phone.":"Please enter your e-mail to aid with account recovery in case you lose your phone.",
    "Coin Purse":"Coin Purse",
    "Makeshift Radar":"Makeshift Radar",
    "Taxmans Ledger":"Taxmans Ledger",
    "Modest Hammock":"Modest Hammock",
    "Revitalizers":"Revitalisers",
    "Nose for Treasure":"Nose for Treasure",
    "Construction Guilds":"Construction Guilds",
    "Forester":"Forester",
    "Active Activists":"Active Activists",
    "Better Gold Ads":"Better Gold Ads",
    "Advanced Saw":"Advanced Saw",
    "Bulldozer":"Bulldozer",
    "Bunker Upgrade Kit":"Bunker Upgrade Kit",
    "Big Earner":"Big Earner",
    "Fridge":"Fridge",
    "Big Farms":"Big Farms",
    "Farming Implements":"Farming Implements",
    "Super cleaner":"Super cleaner",
    "Ultra Clickers":"Ultra Clickers",
    "Founding Father-in-law":"Founding Father-in-law",
    "Power Drills":"Power Drills",
    "Super Saw":"Super Saw",
    "Advanced Logging":"Advanced Logging",
    "Very Curious":"Very Curious",
    "Better Nets":"Better Nets",
    "Improved Gold Mines":"Improved Gold Mines",
    "Surrounded by Nature":"Surrounded by Nature",
    "Breakthrough Wharf-based Technology":"Breakthrough Wharf-based Technology",
    "Offline Stock Exchange":"Offline Stock Exchange",
    "Gemly Reward":"Gemly Reward",
    "Imperfect Groceries":"Imperfect Groceries",
    "Ambitious City Builder":"Ambitious City Builder",
    "The Void Gazes Back":"The Void Gazes Back",
    "Chest Detector":"Chest Detector",
    "Faster Iron Mines":"Faster Iron Mines",
    "Bulldozer SALE":"Bulldozer SALE",
    "Perfectly Cubed Rocks":"Perfectly Cubed Rocks",
    "Better Production Lines":"Better Production Lines",
    "Factory Overclock":"Factory Overclock",
    "Omnitown":"Omnitown",
    "Advanced Agriculture":"Advanced Agriculture",
    "Microchip Logistics":"Microchip Logistics",
    "Savvy Builder":"Savvy Builder",
    "Advanced Autotapper":"Advanced Autotapper",
    "Advanced River Cleaner":"Advanced River Cleaner",
    "New Initiative":"New Initiative",
    "Improved infrastructure":"Improved infrastructure",
    "Advanced Pipe System":"Advanced Pipe System",
    "Ground Oil logistics":"Ground Oil logistics",
    "Advanced Restoration":"Advanced Restoration",
    "Tanker booster":"Tanker booster",
    "Offline boost":"Offline boost",
    "Lockpicking":"Lockpicking",
    "Gardening":"Gardening",
    "Premium Restoration":"Premium Restoration",
    "Restoration mechanism":"Restoration mechanism",
    "Farm field":"Farm field",
    "Advanced Farm field":"Advanced Farm field",
    "generates {att1} for nearby farm. These farm fields grow randomly in the {att2} tile range on empty tiles.":"Generates {att1} for a nearby Farm. Farm fields can grow randomly on empty tiles in a {att2} tile range around the Farm.",
    "generates {att1} for nearby big farm. These farm fields grow randomly in the {att2} tile range on empty tiles.":"Generates {att1} for a nearby Big Farm. Farm fields can grow randomly on empty tiles in a {att2} tile range around the Farm.",

    "upgrade_desc_1": "Every click on a {TTT} generates {num1} more Gold",    
    "upgrade_desc_2": "Your range of view is increased by {num1} (This denotes how many tiles you see outside of your restored territory.)",
    "upgrade_desc_3": "Increases the amount of Gold your {TTT} generate over time by {num1}% (Gold is automatically generated {EVERY_X_SECONDS})",
    "upgrade_desc_4": "Increases the offline earnings cap by {num1} minutes (The default cap for offline earnings is 60 minutes. While offline, your income rate is divided by 10.)",
    "upgrade_desc_5": "Decreases the Gold cost of restoring a tile by {num1}%",
    "upgrade_desc_7": "Increases the amount of treasures available on your map {num1} (Treasures spawn over time on unrestored tiles. The max amount of treasures that can be on your map, before getting this upgrade, is 2.)",
    "upgrade_desc_8": "The amount of clicks required to upgrade a {TTT} to the next level is decreased by {num1}",
    "upgrade_desc_9": "Grants the ability to plant a Dense Forest tile. (New tile improvement, cost 8500 Gold. Generates a Gold income of 2, decreases Pollution by 2.)",
    "upgrade_desc_10": "Random tiles around your territory will be marked by activists. Marked tiles have their Gold restore cost reduced by 60%",
    "upgrade_desc_11": "Increases gold from gold ads by {num1}%",
    "upgrade_desc_12": "Increases the Gathering Range for all types of Lumber mills by {num1} (Gathering Range is the maximum distance of tiles from which the building can gather resources.)",
    "upgrade_desc_13": "Grants the ability to flatten hills and clear swamps. This also grants you access to a new resource: Clay. Clay is generated by flattening hills and it is needed if you want to clear swamps",
    "upgrade_desc_14": "Clicking to upgrade a Settlement is {num1} times more effective",
    "upgrade_desc_15": "Doubles the amount of Gold you get by clicking on any {TTT}",
    "upgrade_desc_16": "Only 1% of your Food is spoiled instead of 5%{EVERY_X_SECONDS}",
    "upgrade_desc_17": "Increases the Gathering Range for all Farms by {num1} (Gathering Range is the maximum distance of tiles from which the building can gather resources.)",
    "upgrade_desc_18": "Doubles the amount of Food produced by Farms",
    "upgrade_desc_19": "Doubles the effectivity of clicking when you are restoring a tile",
    "upgrade_desc_20": "Doubles the effectivity of super clickers",
    "upgrade_desc_21": "Every {TTT} you find will start at level {num1}",
    "upgrade_desc_22": "Stone mines produce {num1} more Stone {EVERY_X_SECONDS}",
    "upgrade_desc_23": "Lumber production of all Lumber mills is doubled",
    "upgrade_desc_24": "All Lumber storage buildings can store {num1}% more Lumber",
    "upgrade_desc_25": "Gain the ability to build Scout or Sensor towers without the need to connect them to a road, and increase their sensing range by 1",
    "upgrade_desc_26b": "Increases the Gathering Range for all Ships to {num1} (Gathering Range is the maximum distance of tiles from which a ship can gather resources.)",
    "upgrade_desc_27": "Increases the Gold production of all Gold Mines by {num1}%",
    "upgrade_desc_28": "Gain the ability to build Lumber Mills and Farms without the need to connect them to a road",
    "upgrade_desc_29": "All shipyards gain the ability to deploy 1 extra Ship",
    "upgrade_desc_30": "Increases the offline earnings cap by 1 hour (The default cap for offline earnings is 60 minutes. While offline, your income rate is divided by 10.)",
    "upgrade_desc_31": "{num1} more Gems in daily reward",
    "upgrade_desc_32": "Food that would be spoiled will instead be sold for {num1} Gold",
    "upgrade_desc_33": "{TTT} upgrades cost {num1}% less Gold",
    "upgrade_desc_34": "Gain the ability to fill rifts with clay. Can not be used on rifts in your soul (New terrain modification.)",
    "upgrade_desc_35": "You will see treasures as yellow dots when zoomed out and all treasures yield {num1}% more Gold",
    "upgrade_desc_36": "Iron Mines will harvest enough Iron Ore for two Foundries",
    "upgrade_desc_37": "Whenever you build a Road over Hills, they will be automatically removed for free. When you flatten hills this way, you still get 1 Clay",
    "upgrade_desc_39": "All Stone Mines can store {num1}% more Stone",
    "upgrade_desc_40": "Doubles the amount of Micro-chips produced by Chip Factories",
    "upgrade_desc_41": "Triples the amount of Micro-chips produced by Chip Factories",
    "upgrade_desc_42": "Clicking on any {TTT} will generate the same amount of Gold as clicking on your Main {TTT} (Doesn't work if the {TTT} you click on can generate more Gold per click than your main {TTT})",
    "upgrade_desc_45": "Farm fields produce {num1} more Food",
    "upgrade_desc_46": "Chip factories no longer need a Foundry nearby",
    "upgrade_desc_47": "Resource costs of upgrading cities are reduced by {num1}%",
    "upgrade_desc_48": "When you hold your finger over a {TTT} or an unrestored tile, auto tapping is {num1}x faster",
    "upgrade_desc_49": "River Cleaner tile improvements are {num1}% more effective",
    "upgrade_desc_50": "Increases the number of tiles that can be marked by activists by 1, and the marked tiles will be 60% cheaper to restore",
    "upgrade_desc_51": "Gain the ability to connect any building to another building/structure without having to build roads between them, but at least one of the buildings must be connected to a road",
    "upgrade_desc_52": "Onshore Oil rigs, and Oil Storage won't require roads",
    "upgrade_desc_54": "All Onshore Oil Rigs can store {num1}x more Oil",
    "upgrade_desc_56": "Increases range of oil tanker by {num1}",
    "upgrade_desc_57": ["Increases offline income by {num1}%","default je 10%, ale toto neurobi ze 10+20 = 30% ale 20% z 10 cize 12%!"],
    "upgrade_desc_58": ["Easier chest tile cleaning","no ze teraz ked mas chestku na tile tak ten tile sa 3x tazsie cisti, a s tymto to bude ako default tile, cize 3x menej to je"],
    "upgrade_desc_59": ["When using the Quick Tool to grow a Forest, tiles will be cleared of any obstructions automatically. You still pay the clearing costs and receive the resources for any tiles cleared this way.","Quick tool just does all the things for you - less clicking"],
    "upgrade_desc_64": "You will be able to sweep the ocean cheaper by {num1}%",
    "upgrade_desc_65": "Offshore oil rigs will have own power generator, that will generate {num1} power instead of consuming.",
    "upgrade_desc_66": "Settlement pollution will be lower by {num1}%",
    "upgrade_desc_67": "Settlement power consumption is lowered by {num1}%",
    "upgrade_desc_68": "Reduce the gold cost of oil rigs by {num1}%",
    "upgrade_desc_69": "The restoration strength is {num1} times stronger when restoring mountains.",
    "upgrade_desc_70": "The restoration strength is {num1} times stronger when restoring tiles marked by activists.",
    "upgrade_desc_71": "Chip factories will have {num1} times bigger chip storage.",

    "Chip Factory Storage":"Chip Factory Storage",
    "Activists help":"Activists help",
    "Level {att1} required":"Level {att1} required",
    "In storage:":"In storage:",
    "Must be built max {att1} tiles from water.":"Must be built within {att1} tiles from the nearest Water tile.",
    "Produces:":"Produces:",
    "Drain:":"Drain:",
    "Drains:":"Drains:",
    "Expensive destroy":"Expensive destroy",
    "tell me more":"Tell me more",
    "Total power generated by {att1}: {att2}":"Global Power generated by {att1}: {att2}",
    "Warning, this will delete your game progress and your account!":"Warning, this will delete your game progress and your account!",
    "Remove farm field; cost:":"Remove Farm field; cost:",
    "Total food:":"Total Food:",
    "{att1}% of total Food is spoiled {EVERY_X_SECONDS}":"{att1}% of total Food is spoiled {EVERY_X_SECONDS}",
    "Total farm food income: +{att1} {EVERY_X_SECONDS}":"Global Food generated by Farms: +{att1} {EVERY_X_SECONDS}",
    "Produces food required to upgrade towns.":"Produces Food, a resource necessary to upgrade Settlements.",
    "Grows farmfields with {att1} production. Grow radius: {att2}":"Grows Farm Fields with {att1} production. Growth radius: {att2}",
    "Farm fields nearby:":"Farm Fields nearby:",
    "Uranium":"Uranium",
    "metallic chemical element in the periodic table, with atomic number 92":"A metallic chemical element in the periodic table, with the atomic number of 92.",
    "Devastated forest":"Devastated Forest",
    "Too many lumber mills around! Have less lumber mills close to each other.":"Too many Lumber Mills tried to harvest here. Build your Lumber Mills so they are not so close to each other.",
    "Thank you":"Thank you",
    "Remove Water Oil":"Remove Oil",
    "You will remove the oil and make the water clean. Medium Fish might appear":"Removes the Oil and makes the water clean. A Medium Fish School might appear.",
    "Oil storage":"Oil Storage",
    "storage:":"Storage:",
    "Total micro-chips income: +{att1} {EVERY_X_SECONDS}":"Global Micro-chip income: +{att1} {EVERY_X_SECONDS}",
    "Total micro-chips:":"Stored Micro-chips:",
    "Advanced Gold mine":"Advanced Gold Mine",
    "Grows advanced farmfields with {att1} production. Grow radius: {att2}":"Grows advanced Farm Fields with {att1} production. Growth radius: {att2}",
    "Boosts neighbour stone mines - those will produce 3x more stone. Max one boost per mine.":"Adjacent Stone Mines generate +200% Stone. Each Stone Mine can only gain this boost once.",
    "Success!":"Success!",
    "Gets extra storage bonus if neighbour tile is same container.":"Storage capacity increases by +50% for each adjacent Storage Container.",
    "Extra storage bonus: {att1}% for neighbour containers":"Storage Capacity increased by +{att1}% for adjacent Storage Containers.",
    "Extra storage for:":"Stores:",
    "Remove the swamp; cost:":"Clear the Swamp; cost:",
    "You get 1 clay for every hill flatten":"You get 1 Clay for every Hill you Flatten",
    "Clear swamp":"Clear Swamp",
    "You are now able to build new road type:":"New road type unlocked!",
    "Fishing":"Fishing",
    "New Road type":"New Road Type",
    "Big bridges":"Big Bridges",
    "You are now able to build bridges over seas.":"You are now able to build Bridges over seas.",
    "You are now able to use ships on fish to fish some food.":"You are now able to send Ships to catch fish to generate Food.",
    "QUICK_TOOL_tease":"Some actions can be easily repeated by activating the Quick Tool. For example: When you build a Road, you can activate the quick tool in the bottom right corner and then just quickly click on empty tiles to build more Roads.",
    "Connect shipyard!":"Connect a Shipyard!",
    "Connect road, shipyard or other mine.":"Connect Road, Shipyard or another Mine.",
    "Connect road or other mine.":"Connect Road or another Mine.",
    "Connect road, shipyard or other {att1}!":"Connect Road, Shipyard or building of same type: {att1}!",
    "Connect road or other {att1}!":"Connect road or building of same type: {att1}!",
    "Build road or shipyard nearby!":"Build Road or Shipyard nearby!",
    "Build road nearby!":"Build Road nearby!",
    "Requires water {att1} tiles nearby!":"Requires Water {att1} Tiles nearby!",
    "Put into Storage":"Put into Storage",
    "Remove fish":"Remove Fish",
    "build":"Build",
    "Big fish!":"Big fish!",
    "ays_bigfish":"Are you sure you want to build here? There's a Large Fish School in this place. Building here will remove it.",
    "ays_chipfoundry":"Are you sure you want to build a Chip Factory? There is no Foundry nearby ({att1} tiles)",
    "ays_foundrymine":"Are you sure you want to build a Foundry? There are no Iron Mines nearby ({att1} tiles)",

    "megacity_tutorial":"We have found Mega-City coordinates.{BREAK_LINE}{BREAK_LINE}Zoom out the map to see where it is.",
    "Head South!":"Head South!",
    "Head North!":"Head North!",
    "Head East!":"Head East!",
    "Head West!":"Head West!",
    "Build":["Build","verb"],
    "Remove road":"Remove Road",
    "Copy road":"Copy Road",
    "You will remove the mountain and gain {att1}.":"You will raze the Mountain and gain {att1}.",
    "connected":"Connected",

    "Stores:":"Stores:",
    "Produces {att1} lumber {EVERY_X_SECONDS} from every forest tile in radius: {att2}":"Produces {att1} Lumber {EVERY_X_SECONDS} from Forest tiles in a radius of {att2}.",
    "Total Lumber income:":"Global Lumber production:",
    "Total Lumber:":"Stored Lumber:",
    "Be cautious: more than 2 Lumber Mills on one forest might cut the forest permanently.":"Be cautious: More than 2 Lumber Mills working a single forest may destroy it.",
    "adds extra lumber storage:":"Increases Lumber Storage by:",
    "Small shipyard requires main town level {att1}":"Level {att1} required to build a Small Shipyard",
    "Deep clean the ocean bottom":"Sweep the Ocean bottom. Nice.",
    "all tiles of range of 2 must be cleared.":"All tiles in a range of 2 must be cleared.",
    "Total sea discovery range: {att1}":"Total Sea Discovery Range: {att1}",
    "Each small shipyard gives +{att1} sea discovery range":"Small Shipyards add +{att1} to your Sea Discovery Range",
    "Each small shipyard gives +{att1} ship slot(s)":"Small Shipyards add +{att1} Ships that you can send out to Fish",
    "Each heavy shipyard gives +{att1} sea discovery range and +{att2} ship slots":"Heavy Shipyards add +{att1} to your Sea Discovery Range and +{att2} Ships.",
    "+{att1} {EVERY_X_SECONDS} per if built next to town.":"+{att1} {EVERY_X_SECONDS} if built adjacent to a Settlement.",
    "Shipyard is too far":"Shipyard is too far",
    "There might rocks blocking!":"There might be Rocks blocking!",
    "No shipyard nearby or path undiscovered":"No shipyard nearby or path undiscovered",
    "Ships on sea: {att1} / {att2}":"Ships on sea: {att1} / {att2}",
    "Total fish food income:":"Total Fish Food income:",
    "Achievements done: {att1}":"Achievements done: {att1}",

    

    "Restore {num1} tiles.":"Restore {num1} tiles.",
    "Reach tile all they way west.":"Reach tile all the way west.",
    "Reach tile all they way to the East.":"Reach tile all the way to the east.",
    "Reach tile all they way to the north.":"Reach tile all the way to the north.",
    "Reach tile all they way to the south.":"Reach tile all the way to the south.",
    "Plant {num1} trees.":"Plant {num1} trees.",
    "Have {num1} food in storage.":"Have {num1} food in storage.",
    "Clean {num1} uranium barrels.":"Clean {num1} uranium barrels.",
    "Use {num1} super clickers.":"Use {num1} super clickers.",
    "Click the game {num1} times.":"Click the game {num1} times.",
    "Build {num1} roads.":"Build {num1} roads.",
    "Have {num1} rocks.":"Have {num1} rocks.",
    "Have {num1} ships.":"Have {num1} ships.",
    "Find {num1} / 10 artifacts.":"Find {num1} / 10 artifacts.",
    "Find all {num1} artifacts.":"Find all {num1} artifacts.",
    "Clear {num1} water tiles":"Clear {num1} water tiles",
    "Deep clear {num1} water tiles":"Deep clear {num1} water tiles",
    "Reach {num1} population":"Reach {num1} population",
    "Have {num1} gold income from gold mines.":"Have {num1} gold income from gold mines.",
    "Have {num1} chip income.":"Have {num1} Micro-chip income.",
    "Have {num1} towns.":"Have {num1} Settlements.",
    "Have {num1} gold income.":"Have {num1} gold income.",
    "Have pollution under {num1}.":"Have pollution under {num1}.",
    "Have zero pollution.":"Have zero pollution.",
    "Watch {num1} ads.":"Watch {num1} ads.",
    "Achievement: {att1} DONE!":"Achievement: {att1} DONE!",
    "CONGRATULATIONS!":"CONGRATULATIONS!",

    "Mines {att1} gold {EVERY_X_SECONDS}":"Mines {att1} gold {EVERY_X_SECONDS}",
    "Uranium Barrel":"Uranium Barrel",
    "Barrel removal cost:":"Barrel Removal Cost:",
    "Uranium cloud present! We need to find the origin of the cloud first":"Uranium Cloud present! Find its source to do something about it.",
    "these barrels can be removed to clear the surrounded area.":"Removing these Barrels will clear the Uranium Cloud from the surrounding area.",
    "This will also remove {att1} pollution":"This will also permanently decrease Pollution by {att1}",

    
    "PLAYER STATS":"PLAYER STATS",
    "Towns:":"Settlements:",
    
    "Total town levels:":"Total Settlement Levels:",
    "Cleaning costs less when closer to main {BUNKER_NAME}.":"Restoring tiles is cheaper when closer to the Main {BUNKER_NAME}.",
    "Cleared area:":"Restored Area:",
    "Forests tiles:":"Forest Tiles:",
    "Water tiles:":"Water tiles:",
    "Deep water tiles:":"Deep water tiles:",
    "Started playing: {att1} days ago":"Started playing: {att1} days ago",
    "Last online time:":"Last online time:",
    "Roads:":"Roads:",
    "Population:":"Population:",
    "Pluses:":"Pluses:",
    "Minuses:":"Minuses:",
    "Pollution is high or electricity is low - gold income is reduced by {att1}%":"If your Pollution is high or Power is low, your Gold income decreases by {att1}%",
    "in storage":"In Storage",
    "max":"Max",
    "New player name":"New Username",
    "{att1}% of your total food +-":"{att1}% of your total Food",
    "Food spoiled {EVERY_X_SECONDS}:":"Food spoiled {EVERY_X_SECONDS}:",
    "Forests:":"Forests:",
    "Gold mines:":"Gold Mines:",
    "Heavy shipyards:":"Heavy Shipyards:",
    "Artifacts:":"Artifacts:",
    "changes iron ore from nearby Iron mines into {att1} steel":"Produces {att1} Steel from nearby Iron Mines",
    "changes iron ore from nearby Iron mines into steel":"Turns Iron Ore from nearby Iron Mines into Steel",
    "you have no iron mines nearby!":"There are no Iron Mines nearby!",
    "All iron mines nearby are already in use by other foundries.":"All iron mines nearby are already in use by other foundries.",
    "Steel Storage:":"Steel Storage:",
    "Global Steel storage:":"Global Steel Storage:",
    "Total steel income:":"Global Steel Production:",
    "Iron mine can harvest enough iron ore for two foundries":"One Iron Mine can supply up to two Foundries",
    "Total iron mines:":"Total Iron Mines:",
    "There is no foundry nearby!":"There is no Foundry nearby!",
    "Provides 3 times more iron than normal iron mine":"Generates 3 times more Iron than a normal Iron Mine",
    "Iron is used by foundry. You must build foundry nearby to use the harvested iron ore.":"Iron is used by a Foundry. You must build a Foundry nearby to use the mined Iron Ore.",
 
    "Have total of {att1} forests!":"Have a total of {att1} forests.",
    "Have total of {att1} deep water cleaned tiles!":"Ocean Sweep {att1} Water tiles.",
    "Have total of {att1} forest income!":"Have an income of {att1} from trees.",
    "Coal plans have high polution. lets remove some. Have less than {att1} coal power plants!":"Coal Plants cause heavy Pollution. Let's cut down on their use. Have less than {att1} Coal Power Plants!",
    "Have total of {att1} towns or bunkers.":"Have a total of {att1} Settlements.",
    "Have total of {att1} towns/bunkers connected with road to main {BUNKER_NAME}.":"Have a total of {att1} Settlements connected with a Road to your Main {BUNKER_NAME}.",
    "Have total of {att1} trees or water in range of {att2} of this {BUNKER_NAME}.":"Have a total of {att1} Forest or Water Tiles within a {att2} tile range of this {BUNKER_NAME}.",
    "Have total {att1} town or bunker level (sum of all bunker/settlement/town levels).":"Have a total {att1} Settlement levels across all your Settlements.",
    "Restore all tiles in range {att1} of this {att2}!":"Restore all tiles in a {att1} tile range of this {att2}.",
    "{att1}% of roads have to be type: {att2} (or higher)!":"Upgrade at least {att1}% of your Roads to type: {att2} (Or higher).",
    "Have pollution under {att1}!":"Have a Pollution under {att1}.",
    "Have total of {att1} towns of level {att2}!":"Have a total of {att1} Settlements at level {att2}.",
    "Have found {att1} mega-cities!":"Find {att1} Mega-Cities.",
    "Have population over {att1}!":"Have over {att1} Population.",
    "Restore total of {att1} water tiles! (you have restored: {att2})":"Restore a total of {att1} Water tiles. Reclaim the sea. (You have restored: {att2})",
    "Restore total of {att1} tiles! (you have restored: {att2})":"Restore a total of {att1} tiles. Number of tiles restored: {att2}",


    "Here you can skip {BUNKER_NAME} upgrade requirement - cost: {att1}":"Would you like to skip the Settlement upgrade task? - Cost: {att1}",
    "Each new {BUNKER_NAME} = +{att1} gold click to main {BUNKER_NAME}":"Each new connected Settlement adds {att1} Gold per Click to your Main Settlement",
    "LOW!":"LOW!",
    "Power drain:":"Power drain:",
    "(currently out of gold)":"(currently out of Gold)",
    "Golden clicks available:":"Gold Clicks available:",
    "Passive gold income:":"Passive Gold income:",
    "click produces:":"Click produces:",
    "Main-{att1}":["Main {att1}","main town, main bunker, the att1 is type of town"],
    "Next level unlocks this:":"Next Level unlocks:",
    "Next level:":"Next Level:",
    "Amount of gold clicks:":"Amount of Gold clicks:",
    "Town name:":"Settlement name:",
    "enter your town name":"enter your settlement name",
    "Click":["Click","verb, use: click town x / y times "],
    "Requires no road.":"Requires no road.",
    "Restoration bar position:":"Restoration bar position:",
    "left":["Left","restoration bar position"],
    "up":["Up","restoration bar position"],
    "right":["Right","restoration bar position"],

    "Are you sure you want to reset the game and its progress? Use this only if you want to delete your account and uninstall the app":"Are you sure you want to reset the game and its progress? Use this only if you want to delete your account.",
    "Are you sure you want to destroy {att1}":["Are you sure you want to destroy {att1}?","att1 is building or structure"],
    "Are you sure you want to buy this {att1} for {att2} gems?":"Are you sure you want to buy this {att1} for {att2} Gems?",
    "Are you sure you want to buy this item for {att1} gems?":"Are you sure you want to buy this item for {att1} Gems?",
    "Are you sure you want to buy this upgrade for {att1} gems?":"Are you sure you want to buy this upgrade for {att1} Gems?",
    "game sounds":"Game Sounds",

    "Fish Feeding":"Fish Feeding",
    "upgrade_desc_72": "When feeding, chance to succesfully upgrade a school of Fish is 100%",
    "Restart app":"Restart App",
    "Seems like you were logged on a different device.":"Seems like you were logged in on a different device.",
    "You were linked successfully!":"Your account was linked successfully!",
    "Linking failed!":"Linking failed!",
    "Works only on tiles: hills and montains.":"Works only on Hills and Mountains.",
    "SETTINGS":"SETTINGS",
    "stats":"Stats",
    "SHOP":"SHOP",
    "Roads":"Roads",
    "Mountain healer":"Mountaineer",
    "UPGRADE":"UPGRADE",
    "middle":"Middle",
    "Menu orientation:":"Menu orientation:",
    "You require {att1} population per building of type {att2}. Upgrade towns to have higher population.":"You require {att1} population per building of type {att2}. Upgrade settlements to have higher population.",
    "{att1} Enhanced clickers":"{att1} Enhanced Clickers",
    "Income:":"Income:",
    "Player level:":"Level:",
    "We have 2 accounts connected to you.":"We have 2 accounts connected to you.",
    "Choose which one you want to link / use:":"Choose which one you want to link / use:",
    "use:":"Use:",
    "Current:":"Current:",
    "Linked:":"Linked:",
    "Warning: you will lose the other account.":"Warning: You will lose the other account.",
    "I like this!":"I like this!",
    "{att1} gems given!":"{att1} Gems given!",
    "no":"No",
    "Yes I like!":"Yes I do!",
    "We see you really like this game!":"We see you really like this game!",
    "Gold mine":"Gold Mine",
    "Closed bunker":"Closed Bunker",
    "Same as main {BUNKER_NAME}":"Same as Main {BUNKER_NAME}",
    "Harvest gems":"Harvest Gems",
    "Gem Rock":"Gem Rock",
    "gems are present here.":"Our analysis shows that this peculiar rock is a meteorite filled with precious Gems.",
    "Harvest gems from gem water rocks":"Harvest Gems from Gem Rocks",
    "Storage:":"Storage:",
    "This is center of the map":"This is the center of the map",
    "passive_income_info":"Your pasive income can be increased by: more settlements, higher settlement level, more forests, gold mines.",


    "daily_reward_pushka_title":"{sunrise_icon} New day, new daily reward! {gem_icon}", 
    "daily_reward_pushka":"Come explore the wasteland in Post Apo Tycoon!", 
    "offline_earning_pushka_title":"{gold_icon} Offline gold is maxed out! {gold_icon}",
    "offline_earning_pushka":"Pick it up so you can earn more.",
    
    "clay_obtaining":"You can acquire Clay by Flattening Hills, Razing Mountains and Sweeping the Ocean",
    "Some actions only become available at a higher level.":"Some actions only become available at a higher level.",
    "Iron Mine":"Iron Mine",
    "Plain":"Plain",
    "grass, suitable for most buildings.":"Plain grass, suitable for most buildings.",
    "Entry {att1}:":"Entry {att1}:",

    "Level requirement":"Level {att1} required",
    "Level required to do":"Level {att1} required to {something}",
    "Level required to build":"Level {att1} required to build {buildingname}",
    "Level and upgrade required":"Level {att1} and a special upgrade required to {something}",

    "Huge fish spot":"Huge Fish School",
    "Only Large Fishing Ships gain the Food yield of this fish tile.":"Only Large Fishing Ships gain the Food yield of this Fish tile.",
    "Upgrade main {BUNKER_NAME} first":"Upgrade your Main {BUNKER_NAME} first",
    "Big Fishing Ship":"Large Fishing Ship",
    "These ships catch 2x more fish":"This ship yields +100% more Fish",
    "There can be max 1 big ship in radius of {att1}":"Only 1 Large Fishing Ship can be in a {att1} tile radius.",
    "Must be built on terrain type:":"Requires terrain type:",
    "upgrade_name_73":"Recyclation",
    "upgrade_desc_73":"{num1}% of Steel used to construct buildings is returned when you destroy them. Doesn't grant any extra Steel when destroying a building that didn't require Steel to build.",

    "upgrade_name_74":"Food Storage",
    "upgrade_desc_74":"Gain {num1} Food Storage. Food in Food Storage can't spoil.",
    "River Cleaner":"River Cleaner",
    "Support email:":"Support email:",
    "Click on this Bunker {att1} times to level it up!":"Click on this settlement {att1} times to level it up!",
    "Clicked:":"Clicked:",
    "At higher level, you will unlock buildings that can only be built on this type of tile.":"At higher level, you will unlock buildings that can only be built on this type of tile.",
    "Are you sure you want to flatten this hill?":"Are you sure you want to flatten this hill?",
    "Are you sure to continue action:":"Are you sure to continue action:",
    "Connect to main bunker with road!":"Connect to main settlement with road!",
    "Click tiles between bunkers.":"Click tiles between settlements.",
    "Reward AD is unavailable, try again later.":"Reward AD is unavailable, try again later.",
    "{att1} times larger income of all resources for the next {att2} minutes":"{att1} times larger income of all resources for the next {att2} minutes",
    "Language:":"Language:",
    "fan page":"fan page",
    "Bunker found":"Settlement found",
    "Special Offer":"Special Offer",
    "Set your Username first, please.":"Set your Username first, please.",
    "show save notification at the bottom":"show save notification at the bottom",
    "Sometimes, you will get a pop-up that offers a special reward for watching an AD. Click on the highlighted icon to find out more!":"Sometimes, you will get a pop-up that offers a special reward for watching an AD. Click on the highlighted icon to find out more!",
    "terms of service":"terms of service",
    "privacy policy":"privacy policy",
    "Support":"Support",
    "Account":"Account",
    "Settings":"Settings",
    "Game":"Game",
    "Full Map Screenshot":"Full Map Screenshot",
    "Build more:":"Build more:",
    "Open the package!":"Open the package!",

    "Delete account":"Delete account",
    "UPGRADE<!--town tab-->":"UPGRADE<!--town tab-->",
    "NEXT LEVEL<!--town tab-->":"NEXT LEVEL<!--town tab-->",
    "MAIN TOWN":"MAIN SETTLEMENT",
    "More upgrades will become available at higher levels.":"More upgrades will become available at higher levels.",
    "clear forest":"clear forest",
    "build roads to connect towns and structures":"build roads to connect settlements and structures",
    "linked":"linked",
    "Have {att1} upgrades!":"Have {att1} upgrades!",
    "minutes":"minutes",
    "Rare gem field. Currently you are not able to harvest gem ores here.":"Rare gem field. Currently you are not able to harvest gem ores here.",
    "Removal cost:":"Removal cost:",
    "RETURN HOME":"RETURN HOME",
    "Visiting:":"Visiting:",
    "view radius depends on your cleared area":"view radius depends on your cleared area",
    "Due to high pollution, your gold income is reduced to:":"Due to high pollution, your gold income is reduced to:",
    "LEVEL UP!":"LEVEL UP!",
    "The leaderboard of your country":"The leaderboard of your country",
    "All upgrades acquired. Try again later!":"All upgrades acquired. Try again later!",
    "SALE":"sale",
    "h<!-- first letter of hours -->":"h<!-- first letter of hours -->",  
    "m<!-- first letter of minutes -->":"m<!-- first letter of minutes -->",  
    "s<!-- first letter of seconds -->":"s<!-- first letter of seconds -->",
    "+{att1}% BONUS SALE":"+{att1}% BONUS SALE",
    "Are you sure you want to buy this upgrade for gems?":"Are you sure you want to buy this upgrade for gems?",
    "Lumber mill harvests only wood from forests in range of: {att1}":"Lumber mill harvests only wood from forests in range of: {att1}",
    "Premium Lumber Mill":"Premium Lumber Mill",
    "Are you sure you want to buy this structure for gems?":"Are you sure you want to buy this structure for gems?",
    "Offer expires in:":"Offer expires in:",
    "Price:":"Price:",
    "Original price:":"Original price:",
    "New price:":"New price:",
    "HIDE":"HIDE",

    "Greater rift":"Greater rift",
    "Level 18 and a special upgrade are required to fill the rift.":"Level 18 and a special upgrade are required to fill the rift.",
    "Show offers":"Show offers",
    "If you need lumber, this is the perfect choice for you!":"If you need lumber, this is the perfect choice for you!",
    "Best way to produce electricity! It even reduces pollution!":"Best way to produce electricity! It even reduces pollution!",
    "Need storage? More materials?":"Need storage? More materials?",
    "Faster stone mining?":"Faster stone mining?",
    "More electricity? We got you covered!":"More electricity? We got you covered!",
    "Pack content":"Package content",
    "Most popular":"Most popular",
    "Premium research":"Premium research",
    "Upgrade the settlement!":"Upgrade the settlement!",
    "Each settlement has its own quest. Click the settlement to find out.":"Each settlement has its own quest. Click the settlement to find out.",
    "Resource Info":"Resource Info",
    "Upgrade requires:":"Upgrade requires:",
    "max storage is not big enough":"max storage is not big enough",
    "Offline":"Offline",
    "Seems like your app was in background for too long. Please restart it manually.":"Seems like your app was in background for too long. Please restart it manually.",
    "All news":"All news",
    "Show all news":"Show all news",
    "Shipyard required.{att2}Main Settlement at Level {att1} needed to construct one.":"Shipyard required.{att2}Main Settlement at Level {att1} needed to construct one.",
    "please wait, loading other user":"please wait, loading other user",
    "Default menu is in grid":"Default menu is in grid",
    "fishing ships":"fishing ships",
    "Oil Rigs":"Oil Rigs",
    "Not connected to main settlement!":"Not connected to main bunker/settlement!",
    "Buildable on plains":"Buildable on plains",
    "Buildable on rifts":"Buildable on rifts",
    "GO TO MARKET":"GO TO MARKET",
    "+{att1}% more":"+{att1}% more",
    "Watch AD and increase your offline reward by {att1}%!":"Watch AD and increase your offline reward by {att1}%!",
    "BONUS":"BONUS",
    "Palms":"Coconut palms",
    "Trees with food!":"Trees with food!",
    "Oil from rifts!":"Oil from rifts!",
    "Iron without hills! Iron everywhere!":"Iron without hills! Iron everywhere!",
    "Boost your stone mines!":"Boost your stone mines!",

    "SPECIAL CHEST":"SPECIAL CHEST",
    "Bought":"Bought",
    "You have found a very rare chest, but it is locked. Watch an ad to retrieve its content!":"You have found a very rare chest, but it is locked. Watch an ad to retrieve its content!",
    "Are you sure you want to discard this chest?":"Are you sure you want to discard this chest?",
    "Heavy Foundry":"Heavy Foundry",
    "Changes iron ore from nearby Iron mines into {att1} times more steel":"Changes iron ore from nearby Iron mines into {att1} times more steel",
    "Better restoration info":"Better restoration info",
    "Progress":"Progress",
    "Generates food and income, also reduces pollution. But woodcutters cant harvest lumber here.":"Generates food and income, also reduces pollution. But woodcutters cant harvest lumber here.",
    "AD is not ready, please try again later":"AD is not ready, please try again later",

    "You require level {att1} to be able to harvest oil here.":"You require level {att1} to be able to harvest oil here.",
    "Super Box":"Super Box",
    "Instead of destroying, every building can be put into storage.":"Instead of destroying, every building can be put into storage.",
    "NEW":"NEW",
    "Boosted by:":"Boosted by:",
    "Confirmation":"Confirmation",
    "Are you sure you want to continue? Action costs {att1} gems?":"Are you sure you want to continue? Action costs {att1} gems?",
    "Rotate bridge":"Rotate bridge",
    "NEW UPGRADE":"NEW UPGRADE",
    "Type in exact player name":"Type in exact player name",
    "Find a player":"Find a player",
    "Recently visited":"Recently visited",
    "Bought:":"Bought:<!--kupene-->",

    "loading-error-header":"Loading Error",
    "loading-error-text": "The app is taking too long to load, your internet connection might be slow. Please wait or press reload.",
    "loading-error-button":"Reload",
    "bad-request-error-header":"Bad Request",
    "broken-account-error-text":"Broken account",
    "broken-account-error-button":"Create new account",
    "upgrade_desc_77":"Instead of destroying, every building can be put into storage.",
    "Gem Pickaxe":"Gem Pickaxe",
    "upgrade_desc_78":"Mining gems from gem rocks will cost less and will yield more gems.",
    "Massive Super Clicker":"Massive Super Clicker",
    "upgrade_desc_79":"You will use up to {num1} Super Clickers {super_clicker_icon} in a single click, and you keep a {super_clicker_icon} that you'd need to use at less than full efficiency. The number of {super_clicker_icon} you'll spend will adjust to how many you need.{BREAK_LINE}{BREAK_LINE}{b}For example:{/b} Without this upgrade, if you'd require 3,8 {super_clicker_icon} to restore a tile and clicked on it, you'd spend 4 {super_clicker_icon} and you'd have to click 4 times. With this upgrade, you'll spend 3 {super_clicker_icon} in 1 click and the tile will be cleared. The minimum amount of {super_clicker_icon} that'll be spent on clearing a tile is 1.",
    "Storage Crane":"Storage Crane",
    "Quick Tool Painting":"Quick Tool Painting",
    "upgrade_desc_80":"When using quick tool, holding down the finger will automatically place objects as you move.",
    "Find {num1} pages of the Records of a Broken World.":"Find {num1} pages of the Records of a Broken World.",


    "Remove Ground Oil":"Remove Ground Oil",
    "Country:":"Country:",
    "Turns the Oil tile into a Plain tile.":"Turns the Oil tile into a Plain tile.",
    "A good way to reduce pollution{POLLUTION_ICON} is by building:":"A good way to reduce pollution{POLLUTION_ICON} is by building:",
    "Some low level settlements can be upgraded for gems instead of materials.":"Some low level settlements can be upgraded for gems instead of materials.",
    "PREMIUM UPGRADE":"PREMIUM UPGRADE",
    "You require higher power output!":"You require higher power output!",
    "There are some structures that are currently not connected to the grid. Connect them by road and then try to upgrade your settlement.":"There are some structures that are currently not connected to the grid. Connect them by road and then try to upgrade your settlement.",
    "Details / performance:":"Details / performance:",
    "High - higher frame rate":"High - higher frame rate",
    "Medium details":"Medium details",
    "Low - saves battery":"Low - saves battery",
    "Incomplete achievements":"Incomplete achievements",
    "Currently you can only build onshore oil rigs. Search for this tile:":"Currently you can only build onshore oil rigs. Search for this tile:",
    "This action can be found in building:":"This action can be found in building:",
    "Buildable only on copper tiles.":"Buildable only on copper tiles.",

    "res_desc_gems":"Premium currency. Can be purchased in the shop, obtained in the daily reward or harvested from the rare Gem Fields and Gem Rocks. Used to purchase valuable upgrades, resources and special structures.",
    "res_desc_super_clickers":"Super Clickers can be toggled on or off. When toggled on, every click you make to restore a tile or generate Gold from a Settlement acts as if you made multiple clicks.",
    "res_desc_ad_skippers":"A single Ad Skipper allows you to skip watching one Ad.",
    "res_desc_gold":"Main currency. Generated mainly in Settlements and Gold Mines. Used for construction and to restore tiles. If you need more Gold quickly, you can earn it by tapping on your Settlements.",
    "res_desc_food":"Food is generated by farms and later also by fishing ships. Every 9 seconds you generate Food and {att1}% of your total Food is spoiled. Your Food Maximum depends on how high your Food income is.",
    "res_desc_lumber":"Harvested by Lumber Mills. Required for construction of some buildings and Settlement upgrades.",
    "res_desc_rocks":"Mined by Stone Mines. Required heavily in road construction, but also in construction of some buildings and Settlement upgrades.",
    "res_desc_steel":"Generated by Foundries. Required for construction of some buildings and Settlement upgrades. The amount of Steel you make depends heavily on how many Iron Mines you build in the collecting range or your Foundries.",
    "res_desc_chips":"Generated by Chip Factories. Required for construction of some buildings and Settlement upgrades. Chip Factories can only be built on tiles with Copper.",
    "res_desc_oil":"Generated by Oil Rigs. Required for construction of some buildings and Settlement upgrades. Oil Rigs can only be built on tiles with Oil.",
    "res_desc_population":"The total population of all of your Settlements. Increases whenever you upgrade your Settlements.",
    "Reach the highest Settlement level before the Game Designer adds new stuff.":"Reach the highest Settlement level before the Game Designer adds new stuff.",
    "This upgrade sets your highest acceptable level of Pollution to {att1} (Previously {att2}), meaning if your pollution is above {att1}, you will receive a penalty for your earnings.":"This upgrade sets your highest acceptable level of Pollution to {att1} (Previously {att2}), meaning if your pollution is above {att1}, you will receive a penalty for your earnings.",

    "Heavy Chip Factory":"Heavy Chip Factory",
    "Thermal Plant":"Thermal Plant",
    "Generates a lot of clean power.":"Generates a lot of clean power.",
    "Heavy Gold mine":"Heavy Gold mine",
    "Premium Gold mine":"Premium Gold mine",

    "Shipyard storage":"Shipyard storage",
    "Works only when built next to: {att1}":"Works only when built next to: {att1}",
    "No adjacent building of type: {att1}. The storage is not working.":"No adjacent building of type: {att1}. The storage is not working.",
    "Remove Thermal Spot":"Remove Thermal Spot",
    "Turns the thermal spot tile into a Plain tile.":"Turns the thermal spot tile into a Plain tile.",
    "Are you sure you want to clear this thermal spot?":"Are you sure you want to clear this thermal spot?",
    "Super Factory":"Super Factory",
    "other income:":"other income:",
    "Micro Cleaners":"Micro Cleaners",
    "Solar Chips":"Solar Chips",
    "Thermal Improvements":"Thermal Improvements",
    "Stone Mining Improvments":"Stone Mining Improvments",
    "Storage logistics":"Storage logistics",
    "Golden Panels":"Golden Panels",
    "Mega-constructors":"Mega-constructors",
    "Premium Storage Bonus":"Premium Storage Bonus",
    "Oil Warehouses":"Oil Warehouses",

    "Increases power generation of building: {att1} by {num1}%.":"Increases power generation of building: {att1} by {num1}%.",
    "Increases power generation of building: {att1} by {num1} {POWER_ICON}":"Increases power generation of building: {att1} by {num1} {POWER_ICON}",
    "Lowers the power drain of structure: {att1} by {num1} {POWER_ICON}":"Lowers the power drain of structure: {att1} by {num1} {POWER_ICON}",
    "Increases the overall storage by {num1}%.":"Increases the overall storage by {num1}%.",
    "Instead of draining power, {att1} will produce {num1} {POWER_ICON} power.":"Instead of draining power, {att1} will produce {num1} {POWER_ICON} power.",
    "Reduces the overall cost of Mega City upgrades by {num1}%.":"Reduces the overall cost of Mega City upgrades by {num1}%.",
    "Increases the storage of structure: {att1} by {num1}%.":"Increases the storage of structure: {att1} by {num1}%.",
    "Maximum gold mining!":"Maximum gold mining!",
    "Grow trees on river banks and clean the water with micro cleaners.":"Grow trees on river banks and clean the water with micro cleaners.",
    "Can't be combined with structure: {att1}":"Can't be combined with structure: {att1}",
    "One foundry can process iron from all free iron mines in its reach.":"One foundry can process iron from all free iron mines in its reach.",

    "artefact_desc_1_1":"An old building from pre-war times. Its incredible size commands great respect.",
    "artefact_desc_1_2":"A ruin of an old building from pre-war times. Underneath it, we have discovered the Underbrain - central hub of the Mother AI.",
    "artefact_desc_2_1":"A strange crashed plane. It looks like it has flown much more recently than any other plane we found.",
    "artefact_desc_2_2":"A strange crashed plane. We found out that this used to be Watcher 3, a plane used for some search operation.",
    "artefact_desc_2_3":"A strange crashed plane. We found out that this used to be Watcher 3, a plane that the Partisans have used to detect some place of importance.",
    "artefact_desc_2_4":"A strange crashed plane. We found out that this used to be Watcher 3, a plane that the Partisans have used to detect the main frame of the Mother AI.",
    "artefact_desc_3_1":"A decently preserved old military harbor.",
    "artefact_desc_3_2":"A decently preserved old military harbor, where we found an important clue.",
    "artefact_desc_3_3":"A decently preserved old military harbor, where we found a key clue in trying to figure out Operation Anchor Break.",
    "artefact_desc_4_1":"A derelict broadcast tower, surrounded by a deadly forest.",
    "artefact_desc_4_2":"A derelict broadcast tower, surrounded by a deadly forest. We suspect that an important clue is hiding inside.",
    "artefact_desc_4_3":"A derelict broadcast tower, where we fought a bloody battle against the beasts surrounding it. Inside we found an important lead towards the Partisans.",
    "artefact_desc_5_1":"A decently preserved old military base.",
    "artefact_desc_5_2":"A decently preserved old military base, where we discovered a crucial lead towards the Partisans - The Records of Randall Smith.",
    "artefact_desc_6_1":"A bunker with somewhat reclusive population. They wished to stay inside and didn't join us straight away.",
    "artefact_desc_6_2":"A bunker where we first discovered the Servos.",
    "artefact_desc_6_3":"A bunker where we first discovered the Servos. We have dealt with Mother, but we didn't really discover where Servos came from. Huh.",

    "Sky Scraper Ruin":"Sky Scraper Ruin",
    "Crashed Military Plane":"Crashed Military Plane",
    "Old Military Harbor":"Old Military Harbor",
    "Derelict Broadcast Tower":"Derelict Broadcast Tower",
    "Old Military Base":"Old Military Base",
    "Strangely Populated Bunker":"Strangely Populated Bunker",
    "Broken Door":"Broken Door",
    "Strange Ship Wreck":"Strange Ship Wreck",
    "Seed Vault":"Seed Vault",
    "Victory Arch":"Victory Arch",

    "Destroy the building first!":"Destroy the building first!",
    "Story Page":"Story Page",
    "Shows you coordinates to the next page of the Journal.":"Shows you coordinates to the next page of the Journal.",

    "Tell us your opinion":"Tell us your opinion",
    "We would like to hear your opinion about the game. Help us by answering a few questions in our survey and earn {att1} gems in the process!":"We would like to hear your opinion about the game. Help us by answering a few questions in our survey and earn {att1} gems in the process!",
    "Survey":"Survey",

    "Game Rules":"Game Rules",
    "rule1":"General rules of Post Apo Tycoon - Idle Builder",
    "rule2":"these rules are obligatory for all players of the game",
    "rule3":"ignorance of the rules in not an excuse",
    "rule4":"the administrators of the game have the absolute right to decide whether someone is breaking the rules or not",
    "rule5":"the method and the effectiveness of a penalty for breaking the rules is decided by the game administrator",
    "rule6":"the most severe punishment for breaking the rules is the ban of user account with the ban of the user's IP address",
    "rule7":"all situations, which are not explicitly covered by these rules will be judged and resolved on an individual basis by the administrator",
    "rule8":"in case of any ambiguity or inconsistency in the content or interpretation of the various language versions of these rules, the decisive and valid version is considered the Slovak language version",
    "rule9":"It is forbidden:",
    "rule10":"to log into someone else's account or even attempt to do so",
    "rule11":"to cheat in any way, to try to gain a password of another user or to try to spoil the game for the other users in any way",
    "rule12":"to abuse any errors or defects in the game or rules",
    "rule13":"to browse pages, create, use or distribute applications, which automatize some parts of the game, unless approved by game creators",
    "rule14":"to try to retrieve data which are not explicitly presented on the pages or to send data in a similar way",
    "rule15":"to encourage other users to do things which are in violation of the rules of the game",
    "rule16":"to put texts, pictures or other elements into the game without the permission of the copyright owner",
    "rule17":"to put texts, pictures or other elements into the game the content of which may offend other users",
    "rule18":"to promote other websites or products in any way without the approval of the administrators of the game",

    "Find Next Page":"Find Next Page",
    "Can only be used on a swept water tile with fish.":"Can only be used on a swept water tile with fish.",
    "Has a chance to find fish or a small ship wreck.":"Has a chance to find fish or a small ship wreck.",
    "There are activists in this tile. Restoration costs reduced.":"There are activists in this tile. Restoration costs reduced.",

    "artefact_desc_7":"An immensely thick steel door, stuck in the ground. How did this get here?",
    "artefact_desc_8":"A ship wreck. It wouldn't be all that remarkable if it wasn't for the fact that it's stuck in the middle of a desert. Quite far from the nearest shore.",
    "artefact_desc_9":"An odd large building, built into the side of a mountain. Inside we found a storage facility for various types of seeds.",
    "artefact_desc_10":"A truly monumental piece of architecture.",

    "You have gained more information about this location by progressing to the following steps in the story:":"You have gained more information about this location by progressing to the following steps in the story:",
    "Progress in the story to reveal more information about this tile.":"Progress in the story to reveal more information about this tile.",
    "Artifact found!":"Artifact found!",
    "Diving":"Diving",
    "The restoration strength is {num1} times stronger when restoring water and river tiles.":"The restoration strength is {num1} times stronger when restoring water and river tiles.",
    "Multitool":"Multitool",
    "Multitool is always active":"Multitool is always active",
    "Requires plain tile":"Requires plain tile",
    "Are you sure you want to discard this safe?":"Are you sure you want to discard this safe?",
    "You have found an undamaged safe, but it is locked. Watch an ad to retrieve its content!":"You have found an undamaged safe, but it is locked. Watch an ad to retrieve its content!",
    "Salvage, Clear, Revitalize, Remove rubble... all cleanup operations in one tool!":"Salvage, Clear, Revitalize, Remove rubble... all cleanup operations in one tool!",
    "Don't ask for confirmation when buying buildings for gems.":"Don't ask for confirmation when buying buildings for gems.",
    "Can be turned back on in the settings.":"Can be turned back on in the settings.",
    "Multitool can be set as always active in the settings.":"Multitool can be set as always active in the settings.",
    "Show clay in goods overview":"Show clay in goods overview",


    "{att1} Event-Fish income":"{att1} Holiday Fish income",
    "Event-Fish income:":"Holiday Fish income:",
    "Event Ship":"Event Ship",
    "Event Ship price increases with each one you buy":"Event Ship price increases with each one you buy",
    "Total Event Ships:":"Total Event Ships:",
    "Not enough free Event Ship slots":"Not enough free Event Ship slots",
    "Total Event-Fish income:":"Total Holiday Fish income:",
    "Event Fish":"Holiday Fish",
    "Place ships":"Place ships",
    "by using quick tool":"by using quick tool",
    "More info":"More info",
    "extra<!--extra fish-->":"extra<!--extra fish-->",
    "Event-Fish income per tile:":"Holiday Fish income per tile:",
    "Depends on the number of restored water tiles.":"Depends on the number of restored water tiles.",
    "Holiday Fish Feast":"Holiday Fish Feast",
    "Event-Fish Bonus":"Holiday Fish Bonus",
    "Event Ship slot":"Event Ship slot",
    "+{num1} Event Ship slot to help you catch more Event-Fish.":"+{num1} Event Ship slot to help you catch more Holiday Fish.",
    "+{num1}% bonus to Event-Fish income.":"+{num1}% bonus to Holiday Fish income.",
    "Event-Fish income bonus:":"Holiday Fish income bonus:",
    "No Event-Fish income on tiles with oil, rocks or bridges":"No Holiday Fish income on tiles with oil, rocks or bridges",
    "Show Rewards":"Show Rewards",
    "+{num1}{POWER_ICON} Permanent bonus to your power grid.":"+{num1}{POWER_ICON} Permanent bonus to your power grid.",
    "Event Ships can't share fishing tiles":"Event Ships can't share fishing tiles",
    "days 234":"days<!--2 3 4-->",
    "days 5 and more":"days<!--5 and more-->",
    "No fish school":"No fish school",
    "Total Event-Fish caught:":"Total Holiday Fish caught:",
    "Shipyard Market":"Shipyard Market",
    "Shipyard Markets add +{att1} to your Sea Discovery range and +{att2} ships":"Shipyard Markets add +{att1} to your Sea Discovery range and +{att2} ships",
    "Event ends in:":"Event ends in:",
    "Fish caught":"Fish caught",
    "The fishing event has ended.":"The fishing event has ended.",

    
    "Holiday offer":"Holiday offer",
    "You must catch total of {att1} Holiday Fish to earn this reward.":"You must catch total of {att1} Holiday Fish to earn this reward.",
    "+{att1} Event Ship slot per every {att2} restored water tiles":"+{att1} Event Ship slot per every {att2} restored water tiles",
    "Tutorial":"Tutorial",
    "Place Event Ship!":"Place Event Ship!",
    "Permanent power boost":"Permanent power boost",
    "Sequoia":"Sequoia",
    "Holiday Fish can be used on upgrades or to unlock more Event Ship slots.":"Holiday Fish can be used on upgrades or to unlock more Event Ship slots.",
    "Bonus on Holiday Fish income. Your Event Ships will catch more fish every {att1} seconds.":"Bonus on Holiday Fish income. Your Event Ships will catch more fish every {att1} seconds.",
    "Build Event Ship and catch at least {att1} Holiday Fish to earn your first reward":"Build Event Ship and catch at least {att1} Holiday Fish to earn your first reward",
    "The Fish Feast has begun!":"The Fish Feast has begun!",
    "Help your survivors catch special fish, so they can have a great holiday where no one has to walk around with an empty stomach.":"Help your survivors catch special fish, so they can have a great holiday where no one has to walk around with an empty stomach.",
    "How to play:":"How to play:",
    "Send out specialized Event Ships!":"Send out specialized Event Ships!",
    "These specialized Event Ships help you accumulate Holiday Fish which will be used in this event.":"These specialized Event Ships help you accumulate Holiday Fish which will be used in this event.",
    "Visit the upgrade menu!":"Visit the upgrade menu!",
    "Trade your fish for various upgrades!":"Trade your fish for various upgrades!",
    "Claim your reward from the reward table!":"Claim your reward from the reward table!",
    "Treasure found":"Treasure found",
    "Catch as many fish as you can to score high on the Fisherman's Board.":"Catch as many fish as you can to score high on the Fisherman's Board.",
    "generates gold and significantly reduces pollution.":"generates gold and significantly reduces pollution.",
    "Rewards":"Rewards",

    
    "Holiday Gift":"Holiday Gift",
    "Steel Storage":"Steel Storage",
    "You have found our small Holiday present":"You have found our small Holiday present",
    "There are more storage structures available on higher levels.":"There are more storage structures available on higher levels.",
    "Found:":"Found:",
    "M<!-- short for million-->":"M<!-- short for million-->",
    "Feeding unsuccessful":"Feeding unsuccessful",
    "Eco Road":"Eco Road",
    "Super Highway":"Super Highway",
    "Super Bridge":"Super Bridge",
    "Your roads are not optimised to find another Mega-city. Try to build a shorter path.":"Your roads are not optimised to find another Mega-city. Try to build a shorter path.",
    "Turns a Scorched Earth tile to Plain.":"Turns a Scorched Earth tile to Plain.",
    "Gardening will also remove hills and all destroyed buildings":"Gardening will also remove hills and all destroyed buildings",
    "Eco Storage":"Eco Storage",
    "Has {att1} times bigger storage than structure: {att2}":"Has {att1} times bigger storage than structure: {att2}",
    "The biggest trees that there are":"The biggest trees that there are",
    
    "Scorched revitalization":"Scorched revitalization",
    "Reduces the cost of Scorched Earth revitalization by {num1} gold":"Reduces the cost of Scorched Earth revitalization by {num1} gold",
    "Radius Clicker":"Radius Clicker",
    "Clicking a settlement will also click settlements within a radius of +{num1} tiles.":"Clicking a settlement will also click settlements within a radius of +{num1} tiles.",
    "Thermal Automations":"Thermal Automations",
    "Thermal plants will not require roads.":"Thermal plants will not require roads.",
    "Man of steel":"Man of steel",
    "Increases the storage of structure: {att1} by {num1}.":"Increases the storage of structure: {att1} by {num1}.",
    "Hide chests on extreme zoom out":"Hide chests on extreme zoom out",

    "Your pin point description:":"Your pin point description:",
    "Save":"Save",
    "Remove":"Remove",
    "Pin points used:":"Pin points used:",
    "Pin point":"Pin point",
    "show closest":"show closest",
    "Buildings Overview":"Buildings Overview",
    "Opens menu with extra building options":"Opens menu with extra building options",
    "Select nearest structure: {att1}":"Select nearest structure: {att1}",

    "Condition":"Condition",
    "Expand Map":"Expand Map",
    "Reach all 4 map borders":"Reach all 4 map borders",
    "click to copy":"click to copy",
    "Lava Rift":"Lava Rift",
    "Turns a tile of type {att1} into a tile of type {att2}.":"Turns a tile of type {att1} into a tile of type {att2}.",
    "Advanced Micro Cleaner":"Advanced Micro Cleaner",
    "+{num1}% pollution reducing effect of structure: {att1}":"+{num1}% pollution reducing effect of structure: {att1}",
    "Storage overview":"Storage overview",
    "Your storage is empty":"Your storage is empty",
    "Shows list of items in storage":"Shows list of items in storage",
    "start quicktool":"start quicktool",
    "Total clicks:":"Total clicks:",
    "New version!":"New version!",
    "Trees on water!":"Trees on water!",
    "generates gold and reduces pollution. Can only be built on water near the shore.":"generates gold and reduces pollution. Can only be built on water near the shore.",
    "material of the future! Generates gold, reduces pollution and increases restoration strength.":"material of the future! Generates gold, reduces pollution and increases restoration strength.",
    "Radius clicks are generated every hour. +{att1} per hour up to a maximum of {att2}. Your current amount is displayed in town info.":"Radius clicks are generated every hour. +{att1} per hour up to a maximum of {att2}. Your current amount is displayed in town info.",
    "Radius clickers left:":"Radius clickers left:",
    "Bamboo":"Bamboo",
    "Mangrove":"Mangrove",
    "Natural pack":"Natural pack",
    "The Pump":"The Pump",
    "Have {att1} structures of type: {att2}.":"Have {att1} structures of type: {att2}.",
    
    "Gold from regular chest already received:":"Gold from regular chest already received:",
    "Micro income":"Micro income",
    "{att1} will produce {num1} extra {GOLD_ICON} {EVERY_X_SECONDS}":"{att1} will produce {num1} extra {GOLD_ICON} {EVERY_X_SECONDS}",
    "Chip storage bonus":"Chip storage bonus",
    "Radius Clicker generator":"Radius Clicker generator",
    "Increases the generation of radius clickers every hour by {num1}.":"Increases the generation of radius clickers every hour by {num1}.",
    "Increases your cap of radius clickers by {num1}.":"Increases your cap of radius clickers by {num1}.",
    "Radius Clicker Cap Upgrade":"Radius Clicker Cap Upgrade",
    "Restoration strength is multiplied by {num1} when restoring any kind of rift tiles":"Restoration strength is multiplied by {num1} when restoring any kind of rift tiles",
    "This upgrade increases the cap of radius clickers you can own by {num1}.":"This upgrade increases the cap of radius clickers you can own by {num1}.",
    "This upgrade is normally available from level {att1}":"This upgrade is normally available from level {att1}",
    "Rift healer":"Rift healer",
    "Train station":"Train station",
    "Train stations can only be built next to a Mega City.":"Train stations can only be built next to a Mega City.",
    "Rails":"Rails",
    "Accept":"Accept",
    "Removes upgrade {att1} and gives you {att2}":["Removes upgrade {att1} and gives you {att2}",'att1=name, att2=for example 150 gems'],
    "Rotate":["Rotate<!--verb-->",'verb - rotate the train station']

}
// {EVERY_X_SECONDS} = GetText('every {att1} seconds',[INCOME_SEC])
// {BUNKER_NAME}


let FRONTEND_VERSION=287;




let anyActionDone=0;
let do_clicked_grid_console=0;
let testVersion=0;
let GAME_VERSION=0.04;//NEMENIT, LEBO VYMAZE hracom data
let hrac=null;
let DISCOVERY_DELAY=200;
let BOUNDERIES_LEFT=230;
let BOUNDERIES_RIGHT=230;
let BOUNDERIES_UP=230;
let BOUNDERIES_DOWN=230;
const SEC_FRACTAL=33;
const CLICK_EFECT_DURATION=300;
const INCOME_SEC=9;
const INCOME_EARN_TICKS=Math.round(INCOME_SEC*(1000/SEC_FRACTAL));
const MAX_INCOME_TIME = INCOME_SEC*1000;
const PER_INCOME=' every '+INCOME_SEC+' seconds';
const PER_INCOME_SHORT=' / '+INCOME_SEC+' s';
const PIKA=`<img src="${getAssetUrl('public/images/ui/pika.png')}" style="width:7px;margin:10px;margin-top:0px;margin-bottom:2px;">`;
const PIKA2=`<img src="${getAssetUrl('public/images/ui/pika.png')}" style="width:14px;margin:10px;margin-top:0px;margin-bottom:2px;">`;
const SHIP_EVENT_LEVEL_REQ=21;
const EVENT_FISH_AND_SHIPS=1;

let currentUser = null;
let CANVAS_WIDTH=500;

function ResetCanvasSize(){
    if(canvas.width!=Math.max(window.innerWidth, (IsSecondCanvasAllowed() ? 0 : gridSirka*(2)+OPTIM_GRID_STEP*OPTIMISED_GRID_SIRKA))){
        canvas.width = Math.max(window.innerWidth, (IsSecondCanvasAllowed() ? 0 : gridSirka*(2)+OPTIM_GRID_STEP*OPTIMISED_GRID_SIRKA));
        if(IS_DEV)console.log('screen width:',canvas.width)
        CANVAS_WIDTH = window.innerWidth;
    }
    if(canvas.height!=Math.max(GetWindowHeight(), (IsSecondCanvasAllowed() ? 0 : gridSirka*(2)+OPTIM_GRID_STEP*OPTIMISED_GRID_SIRKA))){
        canvas.height = Math.max(GetWindowHeight(), (IsSecondCanvasAllowed() ? 0 : gridSirka*(2)+OPTIM_GRID_STEP*OPTIMISED_GRID_SIRKA));
    }
    // if(canvas.height!=GetWindowHeight()){
    //     canvas.height = GetWindowHeight();
    // }
}


async function OnResize(){
    if(canvas){
        ResetCanvasSize()
        if(ctx && game_start_condition__player_loaded){
            // await Draw();
        }
    }

    gebi('body').style.height = GetWindowHeight();
    gebi('body').style.top = '0px';
    gebi('html_container').style.top = '0px';
    if (document.activeElement.tagName !== 'INPUT' && document.activeElement.tagName !== 'TEXTAREA') {
        window.scrollTo(0, 0);
    }

    setTimeout(() => {
        gebi('body').style.height = GetWindowHeight();
        gebi('body').style.top = '0px';
        gebi('html_container').style.top = '0px';
        if (document.activeElement.tagName !== 'INPUT' && document.activeElement.tagName !== 'TEXTAREA') {
            window.scrollTo(0, 0);
        }
    }, 2000);
        
    ShowBottomMenu();
    InitOmniClouds();

}

function GetLeftBoxIconSpace(){
    if(window.innerWidth > 500){
        return 20;
    }else{
        return 10;
    }
}
function GetLeftBoxIconSize(){
    if(window.innerWidth > 500){
        return 90;
    }else if(window.innerWidth > 420){
        return 80;
    }else{
        return 60;
    }
}

async function OnLoad(){
    sendToFlutter('{ "event": "game_version", "value": "'+FRONTEND_VERSION+'"}');
    InitFlutterSoundPool();
    LoadFlutterImages();
    if(IsJablko())OPTIM_GRID_STEP=OPTIM_GRID_STEP_JABLKO;
    

    InitBuildings();
    InitFjords();

    last_action_time = Date.now();
    
    InitCamera();
    window.addEventListener("touchend", TouchCanceled, false);
    window.addEventListener("touchcancel", TouchCanceled, false);
    

    let _out ='';
    _out+='<div id="left_boxes_container">'; 
    _out+='<div ontouchend="OpenInbox();" id="header_packages">'+GetIconImage('package',GetLeftBoxIconSize(),0)+'</div>';
    _out+='<div id="ad_img"></div>';
    _out+='<div id="special_offer_left_box" class="special_offer_left_box"></div>'; 
    _out+='<div id="upgrades_left_box"></div>'; 
    _out+='<div id="buildings_left_box"></div>'; 
    _out+='<div id="scb_div"></div>'; 
    _out+='<div id="pool_left_box"></div>'; 
    _out+='</div>'; 
    _out+='<div id="quick_tool_container"></div>';
    _out+='<div id="fps_container"></div>';
    SetInner('body_buttons',_out);


    await InitCanvas(undefined,IsJablko?true:false);


    // aby sa paralerne zavolalo nacitavanie hraca a preload obrazkov
    if(!IsJablko()){
        setTimeout(() => {
            InitPlayerLoadingAndGameSetup();
        }, 50);
    }
    setTimeout(() => {
        FakeLoading(1);
    }, 500);
    setTimeout(() => {
        InitImageLoading();
    }, 150);
}
function FakeLoading(_por){
    if(!everythingLoaded)
    if(_por<20){
        FlutterLoadingBar(0,0,_por/20);
        setTimeout(() => {
            FakeLoading(_por+1);
        }, 500);
    }

}

let gameLoadedStarted=0;
let allImagesLoaded=false;
function OnAllImagesLoaded(){
    if(loadingImagesTO)clearTimeout(loadingImagesTO);
    
    if(!allImagesLoaded){
        allImagesLoaded=true;
        // console.log('game_start_condition__images_loaded')
        setTimeout(() => {
            
            if(IsJablko()){
                DoBasicPopup('LOADING PLAYER DATA - test','LOADING TEST',{centerised:1});
                game_start_condition__images_loaded=true;
                InitPlayerLoadingAndGameSetup();
            }else{
                game_start_condition__images_loaded=true;
                TryStartTheGamePart1();
            }
        }, 150);
    }
}
    
    
async function InitPlayerLoadingAndGameSetup(){
    if(gameLoadedStarted){
        return false;
    }
    gameLoadedStarted=1;


    FlutterLoadingBar(0.1);
    
    
    InitRivers();
    InitPlayer();
    LoadRecentStarterPacks();

    FlutterLoadingBar(0.2);
    await LoadGame();

    hrac.claimedOfflineEarning=0;
    ShowBottomMenu();

    InitTownLabels();
    InitFloatingTexts();

    FlutterLoadingBar(0.90);
    CloseBasicPopup();
    await ShowOfflineEarnings(1);
    FlutterLoadingBar(0.95);
    TryToGenerateXMasGifts();

    TryGenerateRadiusClicks();

    game_start_condition__player_loaded=true;
    TryStartTheGamePart1();
    if(hrac.claimedOfflineEarning){
        if(!TryDailyRewardPopup()){
            TryShowNews();
        }
    }
}



let game_start_condition__player_loaded=false;
let game_start_condition__images_loaded=false;
function TryStartTheGamePart1(){
    if(!game_start_condition__player_loaded || !game_start_condition__images_loaded){
        return false;
    }

    let _alreadyPlaying=localStorage.getItem("already_playing");

    if(!_alreadyPlaying){
        amountOfLoadedImages=0;
        if(IsJablko()){
            for(let _o of IMAGES_TO_LOAD_LATER){
                _o.use_jablko_blob=true;//lebo iphone padne
            }
        }
        LoadImages(IMAGES_TO_LOAD_LATER,false,true);
        if(!HasLevel(3)){
            TryStartTheGamePart2();
        }else{
            TryStartTheGamePart2Loop();
        }
    }else{
        TryStartTheGamePart2();
    }
}

function TryStartTheGamePart2Loop(){
    let _loadedAll=true;
    for(let _o of IMAGES_TO_LOAD_LATER){
        if(_o.loaded){
        }else{
            _loadedAll=false;
            break;
        }
    }
    if(_loadedAll){
        setTimeout(() => {
            TryStartTheGamePart2();
        }, 350);
        return false;
    }
    console.log('LOADING MORE')

    setTimeout(() => {
        TryStartTheGamePart2Loop()
    }, 500);
}

async function TryStartTheGamePart2(){
    InitOptimisedBlocks();
    await OptimizeAllBlocks(zoomScale);
    // if(IS_DEV && IsJablko()){
    //     alert('test koniec')
    // }
    FlutterLoadingBar(0.97);
    
    await Draw(1);

    AddFlutterListeners();
    everythingLoaded=true;//flutter poistka, ale asi by mala byt lepsia :)

    if(turnOffSoundsFlutterWhenLoading){
        turnOffSoundsFlutterWhenLoading=false;
        hrac.nastavenia.music=0;
        hrac.nastavenia.sound=0;
    }
    SetFlutterMusic();
    SetFlutterSound();
    SetInner('loading_images_info','');
    HideDiv('loading_images_info');
    await InitCanvas(undefined,false);
    sendToFlutter('{ "event": "setMusicVolume","volume": '+(hrac.nastavenia.music_volume*1)+' }');
    sendToFlutter('{ "event": "setSoundVolume","volume": '+(hrac.nastavenia.sound_volume*1)+' }');
    sendToFlutter('{ "event": "setMaxPlayerSize","maxPlayers": 8 }');
    await OnResize();

    sendToFlutter('{\r\n  "event": "loadingDone"\r\n}');

    if(testVersion && !hrac.enviro){
        FirstStartButton();
    }
}








function InitAllGridNeighbours(){
    for(let _x in myGridData)
    for(let _y in myGridData[_x])
    {
        if(myGridData[_x][_y] && myGridData[_x][_y].znecistenie==0){
            InitGridNeighbours(myGridData[_x][_y],0,3,1);
        }
    }
    // console.error('kde kurva som')

}

function InitGridNeighbours(_grid,_size,_maxSize,_stopIfInner){
    if(_grid && _grid.znecistenie<=0){
        let _x = _grid.x;
        let _y = _grid.y;
        let _p = 1+GetPlayerUpgradeValue(2)+GetPlayerUpgradeValue(108);
        if(_size)_p=_size;
        if(_maxSize && _size>_maxSize)_size=_maxSize;

        if(_p>=1){
            for(let _i=1;_i<=_p;_i++){
                if(_i==1){
                    let _g4 = GetGridData(_x-1,_y,1);
                    let _g6 = GetGridData(_x+1,_y,1);
                    let _g8 = GetGridData(_x,_y-1,1);
                    let _g2 = GetGridData(_x,_y+1,1);
                    if(_stopIfInner && _g2 && _g4 && _g6 && _g8 && !_g2.znecistenie && !_g4.znecistenie && !_g6.znecistenie && !_g8.znecistenie){
                        return false;
                    }
                }else{
                    setTimeout(() => {
                        let _vyska=0;
                        for(let _j=-_i;_j<=_i;_j++){
                            GetGridData(_x+_j,_y+_vyska,1);
                            if(_vyska){
                                GetGridData(_x+_j,_y-_vyska,1);
                            }
                            if(_j<0){
                                _vyska++;
                            }else{
                                _vyska--;
                            }
                        }
                        // console.log(_i);
                        // console.log('------------------------------');
                    }, (_i-1)*DISCOVERY_DELAY);
                }
            }            
        }
   }
}




let myGridData={};


let gamePaused=0;
let tickCount=0;
let total_ticks=0;
let needsRoadTutorial=0;
let openGridMenuInTime=0;
let lastFoundTownGrid=null;
let rand_y=0;
let rand_x=0;
let totalProcessGameTime=0;
let lastIncomeTime=0;
let lastProcessGameTime=0;
async function ProcessGame(_deltaTime){
    CalculateFPS();
    if(connectionLost){
        return false;
    }
    

    if(returnHomeInTicks>0){
        returnHomeInTicks--;
        if(returnHomeInTicks<=0){
            ReturnHomeToMyTownPart2();
        }
    }

    if(gamePaused){
        return false;
    }
    if(saveErrors>=3){
        return false;
    }

    if(startLoadingOtherUserId){
        LoadOtherUserPart2(startLoadingOtherUserId);
    }
    if(startLoadingOtherUserName){
        LoadOtherUserPart2(0,startLoadingOtherUserName);
    }



    if(!hrac.claimedOfflineEarning){
        return false;
    }

    totalProcessGameTime+=_deltaTime;
    // console.log(totalProcessGameTime)
    // console.log(totalProcessGameTime,_deltaTime)
    if(lastProcessGameTime + SEC_FRACTAL <= totalProcessGameTime){
        lastProcessGameTime+=SEC_FRACTAL;
        if(lastProcessGameTime+SEC_FRACTAL < totalProcessGameTime){
            lastProcessGameTime = totalProcessGameTime - SEC_FRACTAL;
        }
    }else{
        return false;
    }

    zoomScale=zoomScale2;
    statsCalculatedInThisTick=0;
    enabledRecalculations=true;
    
    tickCount++; //resets
    total_ticks++; // resets only with refresh

    if(!IS_DEV && !IS_FLUTTER && backendSaving){
        return false;
    }

    ProcessTrains();

    // console.time('drawa');
    // await Draw();
    // console.timeEnd('drawa');

    doGridIncomesFT=false;
    TownLabelRefresh();

    if(calculation_infos){
        calculation_info_index++;
        if(calculation_info_index%30==1 && (blockCalculations+blockRedraws > 0)){
            AddFloatingText(window.innerWidth,GetWindowHeight(),'calc: '+blockCalculations+' draw:'+blockRedraws,{fontSize:12});
            blockCalculations=0;
            blockRedraws=0;
        }
    }
    
    if(!visitingFriend){
        TryStartCheckingRoadConnection(GetGridData(0,0));
        amount_of_road_checks_in_tick=0;
        if(connectionsToCheck){
            if(!CheckMoreConnections()){
                RoadConnectionEndFuns();
            }else{
                road_check_cycle_count++;
            }
        }
    }


    if(tickCount%(30*60*60)==107998){
        CheckVersion();
    }


    if(tickCount%(30*60*5)==8000){
        GetServerTimeShift().then(function(success) {
            if(success){
                TryGenerateRadiusClicks();
            }
        })
    }
    if(tickCount%(30*3*60)==3600){
        GetPlayerPackages();
    }
    if(tickCount%33==0){
        if(!visitingFriend)
        if(hrac.claimedOfflineEarning){
            hrac.last_play_time=Date.now();
            hrac.last_online_time=Date.now();
        }
        RefreshHeader();
    }


    rand_y=MyRand(-15,15);//toto je tu preto tak aby sa to nemenilo vzdy ale len kazdy tick, takto dost s velkou pravdepodobnostou zarucim ze ked dam viacej floatingou tak budu rovno
    rand_x=MyRand(-24,24);

    if(openGridMenuInTime>0){
        openGridMenuInTime-=SEC_FRACTAL;
        if(openGridMenuInTime<=0){
            OpenGridMenu();
            openGridMenuInTime=0;
        }
    }
    if( hrac.stats.clears<2 && hrac.claimedOfflineEarning){ // ze vycisti prve policko
        if(tickCount % 50==0){
            AddPing(0,1,0,150,1200);
        }
    }
    if( hrac.stats.clears>=2 && hrac.stats.towns<2 &&  hrac.claimedOfflineEarning){ // ze klikaj dole na suradnicu kde bude mesto
        if(tickCount % 50==0){
            AddPing(0,4,0,250,1200);
        }
    }
    if( hrac.stats.towns==2 && hrac.stats.towns_connected<2 && hrac.claimedOfflineEarning && lastFoundTownGrid && !needsRoadTutorial){ //ze klikni na najdene mesto
        if(tickCount % 70==0){
            AddPing(lastFoundTownGrid.x,lastFoundTownGrid.y,0,150,1000);
        }
    }
    if(hrac.stats.towns==2 && hrac.stats.streets==0 && needsRoadTutorial){ //ze klikaj vedla mesta a stavaj mesto
        if(tickCount % 70==0){
            for(let _XY of [[0,1],[0,-1],[1,0],[-1,0]]){
                let _g = GetGridData(_XY[0],_XY[1]);
                if(_g && !_g.znecistenie){
                    AddPing(_g.x,_g.y,0,120,1200);
                    break;
                }
            }
        }
    }

    if(hrac.started_searching_mega_city && hrac.stats.pocet_mega_cities<=0){ // MEGA CITY
        if(tickCount % 60==0){
            if(!GetGridData(MEGA_CITIES[1].x,MEGA_CITIES[1].y)){
                AddPing(MEGA_CITIES[1].x,MEGA_CITIES[1].y,0,70,1200,'teal');
            }
        }
    }
    if(hrac.tutorial.started_searching_second_mega_city && hrac.stats.pocet_mega_cities<=2){ // MEGA CITY
        if(tickCount % 60==0){
            let MCI=2;
            // if(testVersion)MCI=3;
            for(let _pos of [MEGA_CITIES[MCI],{x:MEGA_CITIES[MCI].x-45,y:MEGA_CITIES[MCI].y-15},{x:MEGA_CITIES[MCI].x-25,y:MEGA_CITIES[MCI].y+30}]){
                    if(!GetGridData(_pos.x,_pos.y)){
                    AddPing(_pos.x,_pos.y,0,70,1200,'teal');
                }
            }
        }
    }

    if(!visitingFriend)
    if(tickCount % 90==45){ // coordinates from airplane
        let _camera_X = Math.floor(camera.x/(gridSirka*zoomScale))-1;
        let _camera_Y = Math.floor(camera.y/(gridSirka*zoomScale))-1;
        let _camera_X2 = Math.ceil((camera.x+window.innerWidth)/(gridSirka*zoomScale))+1;
        let _camera_Y2 = Math.ceil((camera.y+GetWindowHeight())/(gridSirka*zoomScale))+1;
        for(let _spr of hrac.special_places_radar)if(_spr && !_spr.found){
            if(_spr.x >= _camera_X-10 && _spr.y>=_camera_Y-10 && _spr.x<_camera_X2+10 && _spr.y<_camera_Y2+10){
                if(GetGridData(_spr.x,_spr.y)){
                    TryRemoveFromPlayerSpecialPlaceRadar(_spr);
                    break;
                }else{
                    AddPing(_spr.x,_spr.y,0,60,900,'#fc0');
                }
            }
        }
    }

    HoldToTapper();
    ProcessSpriteEffects();

    TryGenerateAd();
    ProcessAd();
    ProcessFarmFields()
    TryCutForestsWithLumberMills();
    ProcessIncome();
    ProcessGrids();
    ProcessChests();
    ProcessCamera();
    ProcessPings();
    AntiClicker();
    ProcessOmniClouds();
    ProcessDurations();
    DrawMainTownQuest();
    if(tickCount % (33 * 30 * 60 ) == 900){ //pol hodina
        TryGeneratePremiumUpgrade();
    }
    if(tickCount % (33 * 30 * 60 ) == 500){ //pol hodina
        TryGenerateBuildingLeftBox();
    }
    
    if(tickCount>100 && tickCount%35==0)ProcessMegaCities();
    
    TryStillActivePopup();

    if(!statsCalculatedInThisTick && saveInTicks>0){
        saveInTicks--;
        if(saveInTicks==0){
            if(hrac.stats.income_ticks % 3 == 0 || anyActionDone || saveErrors>0){
                // doSaveNotify=1; //test notification
                SaveGame();
            }
        }
    }

    if(!statsCalculatedInThisTick && giveIncomeInTicks>0){
        giveIncomeInTicks=0;
        GiveIncome(0);
    }

    if(IsIncomeHappening()){
        if(calculateAchievementsInTicks>0){
            calculateAchievementsInTicks--;
            if(calculateAchievementsInTicks==0){
                CheckAchievemntsAll();
            }
        }
    }

    TryToShowFishTutorial();

    if(tryShowLikePopup && tickCount % 30 == 0 && !popupsVisible['basicPopup'] && !popupsVisible['bottomMenuPopup']){
        tryShowLikePopup=false;
        TryLikeThisAppPopop();
    }
}

const MAX_OFFLINE_TIME_MINUTES = 90;
function TryStillActivePopup(){
    let _minutes=MAX_OFFLINE_TIME_MINUTES;
    if(hrac.income > 200000)_minutes=30;
    else if(hrac.income > 100000)_minutes=40;
    else if(hrac.income > 75000)_minutes=50;
    else if(hrac.income > 50000)_minutes=60;
    else if(hrac.income > 25000)_minutes=70;
    else if(hrac.income > 15000)_minutes=80;
    //else 60

    if(tickCount - last_action_tick > 30*60*_minutes)
    if(Date.now() - last_action_time > 1000*60*_minutes){
        ShowNonActivePopup();
    }
}



function ShowNonActivePopup(){
    if(!gamePaused){
        gamePaused=1;
        let _out='';
        _out+=SpanID('nonActivePopup','')+GetText('Seems like you are not actively playing the game.')+BRBR;
        hrac.stats.still_active_count++;
        if(hrac.stats.still_active_count > 5 && !hrac.stats.still_active_claimed){
            _out+=GetText('Consolation prize')+': '+FSize(20,Bold(Math.min(500,hrac.stats.still_active_count)+' / 500'))+BRBR;
        }
        if(hrac.stats.still_active_count>=500 && !hrac.stats.still_active_claimed){
            _out+=Button(GetText('Claim reward'),'ClaimStillActiveRewardPopup();');

        }else{
            _out+=Button(GetText('Continue'),'CloseBasicPopup();gamePaused=0;',{sound:1});
        }
        
        DoBasicPopup(_out,GetText('Still active?'),{centerised:1,closefun:'gamePaused=0;',sound:1}); //still playing
    }
}

function ClaimStillActiveRewardPopup(){
    let _out='';
    _out+=FSize(48,'+500')+GetIconImage('gems',40);
    _out+=BRBR+Button(GetText('Claim reward'),'ClaimStillActiveReward();');
    PlaySound('tadaa2');
    DoBasicPopup(_out,GetText('Consolation prize'),{centerised:1});
}
function ClaimStillActiveReward(){
    if(!hrac.stats.still_active_claimed){
        hrac.stats.still_active_claimed=1;
        AddMat(500,'gems',1,1);
        PlaySound('cash1');
        CloseBasicPopup();

    }
}

let autoTapPainting=false;
let autoTapperInitialDelay=0;
const AUTO_TAPPER_INITIAL_DELAY=300;
function HoldToTapper(){
    autoTapperInitialDelay += SEC_FRACTAL;
    let _speedTapUpg = GetPlayerUpgradeValue(48,1);
    if(GetDetails()==1){
        if(autoTapperInitialDelay < 150){
            return false;
        }

    }else
    if(autoTapperInitialDelay < AUTO_TAPPER_INITIAL_DELAY){
        return false;
    }
    
    if(camera.grabbed){
        let _speed = 2.5;
        let _grid = null;
        if(IsAutoSeeding()){
            _grid = GetGridOnMousePos();
            if(_grid && !_grid?.znecistenie && !_grid.mesto){
                _speed=30;
            }
        }
        let _tapsPerSec = _speed * _speedTapUpg;
        if(GetDetails()<=1 && _speedTapUpg) _tapsPerSec*=2;
        let _ticksPerSec = 1000 / SEC_FRACTAL;

        if(tickCount % Math.max(1,Mfl(_ticksPerSec / _tapsPerSec))==0)
        if(zoomScale>=CLICKABLE_ZOOM)
        if(camera.traveled_now<100){
            if(!_grid){
                _grid = GetGridOnMousePos();
            }
            if(_grid){
                // if(gebi('bottommenuspan')){
                //     CloseBottomMenu();
                // }
                if(_grid.vidiek){
                    _grid=GetMegaCityGridByVidiek(_grid);
                }
                if(_grid.mesto || _grid.znecistenie || IsAutoSeeding()){
                    let _disableMenu=true;
                    if(last_grid_clicked && last_grid_clicked.grid && last_grid_clicked.grid.x==_grid.x && last_grid_clicked.grid.y==_grid.y){
                        _disableMenu=false;
                    }
                    if((_grid.znecistenie || IsAutoSeeding()) && !_grid.mesto){
                        autoTapPainting=true;
                    }
                    ClickGrid(_grid,null,_disableMenu);
                }
                // console.log('autotap')
            }
        }
    }           
    // if(tickCount%30==0)
    // console.log('1 sec tick')

}








function ProcessGrids(){

    if(clickedGridEffects.length>0){

        for(let _g of clickedGridEffects)if(_g){ //clicked grid effect
            if(_g.last_clicked_dur>0){
                _g.last_clicked_dur-=SEC_FRACTAL;
                if(_g.last_clicked_dur<=0){
                    delete(_g.last_clicked_dur);
                }
            }
        }
        clickedGridEffects = clickedGridEffects.filter(_g => _g.last_clicked_dur);
    }

    let _anyGridGenEnded=0;
    for(let _g of justGeneratedGrids){ // reveal fade in effect
        if(_g.generatedTime>0){
            _g.generatedTime-=SEC_FRACTAL;
            if(_g.generatedTime<=0){
                delete(_g.generatedTime);
                _anyGridGenEnded=1;
                // _g.generatedTime=0;
            }
        }
    }
    if(_anyGridGenEnded){
        justGeneratedGrids=justGeneratedGrids.filter(g=>g.generatedTime);
    }
}

let clickedGridEffects=[];




function AddMat(_pocet,_type,_refresh,_floatingTextPosun,_grid,_allowOverMax){
    if(_pocet<=0) return 0;

    if(_type=='lumber'){
        if(!_allowOverMax)
        if(hrac[_type]+_pocet > GetMaxLumberStorage()){
            _pocet =GetMaxLumberStorage()-hrac[_type];
            if(_pocet<0)_pocet=0;
        }
    }
    if(_type=="electricity"){
        hrac.extra_electricity += _pocet;
        hrac.electricity += _pocet;
    }else if(_type=="restoration_strength"){
        hrac.extra_restoration_strength += _pocet;
    }else{
        hrac[_type] += _pocet;
    }
    if(_refresh){
        RefreshHeader();
    }
    if(_floatingTextPosun!=undefined){
        let _color='';
        if(_type == 'gems')_color='pink';
        if(_type == 'super_clickers')_color='pink';
        if(_type == 'restoration_strength')_color='lime';
        if(_type == 'electricity')_color='yellow';
        if(_grid){
            AddFloatingTextToGrid(_grid,'+'+PMat(_pocet,_type),_color,_floatingTextPosun,4);
        }else{
            AddFloatingTextToMousePos('+'+PMat(_pocet,_type),_color,_floatingTextPosun,4);
        }
    }
    return _pocet;
}



function AddGold(_pocet,_refresh,_floatingText){
    hrac.gold += _pocet;
    if(_refresh){
        RefreshHeader();
    }
    if(_floatingText){
        AddFloatingTextToMousePos('+'+PMat(_pocet,1),'',_floatingText-1);
    }
}




function MamDostZlata(_cena,_odober){
    if(hrac.gold>=_cena){
        if(_odober){
            hrac.gold-=_cena;
        }
        return true;
    }
    if(_odober){
        if(HasLevel(8)){
            AddFloatingTextToMousePos(GetText('Not enough {att1} ({att2})',[FloatingTextGoldIcon(),PCislo(_cena)]),'red',1.5);
        }else{
            AddFloatingTextToMousePos(GetText('Not enough {att1}, click {BUNKER_NAME} to earn gold',FloatingTextGoldIcon()),'red',1.5); //not enough gold
        }
        PlaySound('ee');
        player_needs_gold=true;
    }
    return false;
}


function MamDostGemov(_cena,_odober){
    if(hrac.gems>=_cena){
        if(_odober){
            hrac.gems-=_cena;
            hrac.stats.gems_spent+=_cena;
        }
        return true;
    }
    PlaySound('tap');
    if(!gebi('packs_container')){
        CloseBasicPopup();
        ClickBottomMenu(3);
    }
    AddFloatingTextToMousePos(GetText('Not enough Gems ({att1})',PCislo(_cena)),'red',1.5);
    return false;
}


function MamDostMat(_cena,_type,_odober){
    if(_type==1)_type='gold';
    if(_type==1 || _type=='gold'){
        return MamDostZlata(_cena,_odober);
    }
    if(_type==2 || _type=='gems'){
        return MamDostGemov(_cena,_odober);
    }

    if(hrac[_type]>=_cena){
        if(_odober){
            hrac[_type]-=_cena;
        }
        return true;
    }
    if(_odober){
        PlaySound('ee');
        AddFloatingTextToMousePos(GetText('Not enough {att1} ({att2})',[Resource(_type),PCislo(_cena)]),'red',1.5);
    }
    return false;
}



//1 gold 2gems 3food 4lumber 5stone 6supeclickers
function MamDostMats(_mats,_odober){
    let _cena_zlato = _mats.gold?_mats.gold:(_mats.gold?_mats.gold:0);
    if(hrac.gold<_cena_zlato){
        if(_odober){
            player_needs_gold=true;
            AddFloatingTextToMousePos(GetText('Not enough {att1} ({att2})',[Resource('gold'),PCislo(_cena_zlato)]),'red');
            PlaySound('ee');
        }
        return false;
    }

    let _cena_food = _mats.food;
    if(hrac.food<_cena_food){
        if(_odober){
            AddFloatingTextToMousePos(GetText('Not enough {att1} ({att2} / {att3})',[Resource('food'),PCislo(hrac.food),PCislo(_cena_food)]),'red');
            PlaySound('ee');
        }
        return false;
    }

    let _cena_gems = _mats.gems;
    if(hrac.gems<_cena_gems){
        if(!gebi('packs_container')){
            CloseBasicPopup();
            ClickBottomMenu(3);
        }
    
        if(_odober){
            AddFloatingTextToMousePos(GetText('Not enough {att1} ({att2} / {att3})',[Resource('gems'),PCislo(hrac.gems),PCislo(_cena_gems)]),'red');
            PlaySound('ee');
        }
        return false;
    }

    let _cena_lumber = _mats.lumber;
    if(hrac.lumber<_cena_lumber){
        if(_odober){
            AddFloatingTextToMousePos(GetText('Not enough {att1} ({att2} / {att3})',[Resource('lumber'),PCislo(hrac.lumber),PCislo(_cena_lumber)]),'red');
            PlaySound('ee');
        }
        return false;
    }

    let _cena_rocks = _mats.rocks;
    if(hrac.rocks<_cena_rocks){
        if(_odober){
            AddFloatingTextToMousePos(GetText('Not enough {att1} ({att2} / {att3})',[Resource('stone'),PCislo(hrac.rocks),PCislo(_cena_rocks)]),'red');
            PlaySound('ee');
        }
        return false;
    }

    let _cena_clay = _mats.clay;
    if(hrac.clay<_cena_clay){
        if(_odober){
            AddFloatingTextToMousePos(GetText('Not enough {att1} ({att2} / {att3})',[Resource('clay'),PCislo(hrac.clay),PCislo(_cena_clay)]),'red');
            PlaySound('ee');
        }
        return false;
    }

    let _cena_steel = _mats.steel;
    if(hrac.steel<_cena_steel){
        if(_odober){
            AddFloatingTextToMousePos(GetText('Not enough {att1} ({att2} / {att3})',[Resource('steel'),PCislo(hrac.steel),PCislo(_cena_steel)]),'red');
            PlaySound('ee');
        }
        return false;
    }

    let _cena_chips = _mats.chips;
    if(hrac.chips<_cena_chips){
        if(_odober){
            AddFloatingTextToMousePos(GetText('Not enough {att1} ({att2} / {att3})',[Resource('chips'),PCislo(hrac.chips),PCislo(_cena_chips)]),'red');
            PlaySound('ee');
        }
        return false;
    }

    let _cena_oil = _mats.oil;
    if(hrac.oil<_cena_oil){
        if(_odober){
            AddFloatingTextToMousePos(GetText('Not enough {att1} ({att2} / {att3})',[Resource('oil'),PCislo(hrac.oil),PCislo(_cena_oil)]),'red');
            PlaySound('ee');
        }
        return false;
    }

    let _cena_event_fish = _mats.event_fish;
    if(hrac.event_fish<_cena_event_fish){
        if(_odober){
            AddFloatingTextToMousePos(GetText('Not enough {att1} ({att2} / {att3})',[Resource('event_fish'),PCislo(hrac.event_fish),PCislo(_cena_event_fish)]),'red');
            PlaySound('ee');
        }
        return false;
    }

    if(_odober && _cena_food){
        hrac.food-=_cena_food;
    }
    if(_odober && _cena_lumber){
        hrac.lumber-=_cena_lumber;
    }
    if(_odober && _cena_zlato){
        hrac.gold-=_cena_zlato;
    }
    if(_odober && _cena_rocks){
        hrac.rocks-=_cena_rocks;
    }
    if(_odober && _cena_clay){
        hrac.clay-=_cena_clay;
    }
    if(_odober && _cena_steel){
        hrac.steel-=_cena_steel;
    }
    if(_odober && _cena_chips){
        hrac.chips-=_cena_chips;
    }
    if(_odober && _cena_oil){
        hrac.oil-=_cena_oil;
    }
    if(_odober && _cena_event_fish){
        hrac.event_fish-=_cena_event_fish;
    }
    if(_odober && _cena_gems){
        hrac.gems-=_cena_gems;
    }

    return true;

}

function GetMaxMatStorage(_key){
    if(_key == 'lumber') return GetMaxLumberStorage();
    if(_key == 'rocks') return GetMaxRocksStorage();
    if(_key == 'steel') return GetMaxSteelStorage();
    if(_key == 'chips') return GetMaxChipsStorage();
    if(_key == 'oil') return GetMaxOilStorage();
    if(_key == 'food') return GetMaxFoodStorage();
    return 0;
}

/** 

   XXXXX   XXX     XXXXX   XXXXX   X    X
  XX   XX   X        X    XX   XX  X   X 
  X         X        X    X        X  X  
  X         X        X    X        X X   
  X         X        X    X        XX    
  X         X        X    X        X X   
  X         X        X    X        X  X  
  XX   XX   X   X    X    XX   XX  X   X 
   XXXXX   XXXXXX  XXXXX   XXXXX   X    X

*/

let refreshTownInfoEnabled=true;
let last_grid_clicked=null;
let last_grid_clicked_time=0;
let cleanedTime=0;
let CLICKABLE_ZOOM=0.32;
let CHECK_SY_ID=1;
function ClickGridTest(){
//empty
}

function ClickGrid(_grid,_eve,_disableMenu,_ignoreZoomout){
    if(_grid){
        ClickGridTest(_grid);        
    }

    if(hrac.claimedOfflineEarning<=0){
        ConnectionLostPopup();
    }

    if(connectionLost) return false;
    if(gamePaused) return false;
    if(saveErrors>=3) return false;

    if(visitingFriend){
        return false;
    }
    
    if(_grid){
        MarkBlockForSave(_grid);
        if(_grid.gift){
            DoGiftPopup(_grid);
            return false;
        }
        if(hrac.nastavenia.auto_multitool && (!quickToolActive || (quickToolActive==1 && quickToolType2>=5))){ // quickToolActive==1 = stavanie cesty
            let _wasBuildingStreet=0;
            if(quickToolActive==1){
                _wasBuildingStreet=quickToolType2;
            }
            if(TryAdvancedClearGrid(_grid)){
                if(quickToolActive!=1){
                    CloseBottomMenu();
                    _grid.last_clicked_dur=CLICK_EFECT_DURATION;
                    clickedGridEffects.push(_grid);
                    return false;
                }
                if(_wasBuildingStreet){
                    quickToolActive=1;
                    quickToolVisible=1;
                    quickToolType2=_wasBuildingStreet;
                    quickToolIsMultiTool=false;
                    RefreshQuickToolContainer();
                }
            }
        }

        if(_grid.water && _grid.has_street==1 && !_grid.shipyard){
            _grid.has_street=false;
            TryRemoveStreet(_grid.x,_grid.y,0,1,1);
        }
        if(!_grid.has_street)roadCompositionTargetType = 0;

        if(_grid.vidiek && !_grid.znecistenie){
            let _g = GetMegaCityGridByVidiek(_grid);
            if(_g){
                ClickGrid(_g,_eve,_disableMenu);
                return false;
            }else{
                // delete(_grid.vidiek)
            }
        }
        HideUnusedQuickTool();
        if(zoomScale<CLICKABLE_ZOOM && enabledSaving && !_ignoreZoomout){
            if(!_grid.mesto && !_grid.gem_mine && !_grid.super_factory){
                DeselectGrid();
                AddFloatingTextToMousePos(GetText('big zoom'),'grey');//zoomed too far
                return false;
            }
        }
        pocetKlikovZaSekundu++;
        pocetKlikovZaMinutu++;
        pocetKlikovZa10Minut++;
        pocetKlikovZa20Minut++;
        if(anticlickerNow){
            return false;
        }
        TryShowActivistTutorial(_grid)
    
        if(IsTester() && _eve){
            if(_eve.ctrlKey&&_eve.shiftKey){
                if(rivers[_grid.x] && rivers[_grid.x][_grid.y]){
                    console.log(rivers[_grid.x][_grid.y].flow);
                    return false;
                }
            }
            if(_eve.shiftKey){
                BuildStreet(_grid,1,0,1);
                return false;
            }
            if(_eve.ctrlKey){
                _grid.river=1;
                return false;
            }
        }
        
        CopyToGrid(_grid);


        if(!_grid.znecistenie){
            if(cleanedTime + 400 > Date.now()){
                return false;
            }
            let _book=IsThereABook(_grid);
            if(_book && !IsBookRead(_book)){
                if(ReadBook(_book,_grid)){
                    return false;
                }
            }
        }


        if(TryCollectHarvestedGem(_grid)){
            return false;
        }
        if(_grid.chest){
            let _ch = GetChestByXY(_grid.x,_grid.y);
            if(_ch){
                _ch.grid = _grid;
                _grid.shakeing=12;
            }
        }

        if(!_grid.znecistenie && _grid.mesto){
            if(!_grid.has_street){
                if(hrac.stats.towns_connected<=1){
                    needsRoadTutorial=1;
                    AddFloatingError(GetText('Connect to main bunker with road!')+BR+GetText('Click tiles between bunkers.'));
                }else{
                    AddFloatingError(GetText('Connect with road!'));
                }
                if(popupsVisible.bottomGridMenuPopup){
                    CloseBottomMenu();
                }
                refreshTownInfoEnabled=true;
                TryAddBlinkingTutorial(_grid);
                return false;
            }

    
            TownClick(_grid);
        }
        let _justCleaned=0;
        if(_grid.znecistenie){
            if(_grid.znecistenie >= _grid.znecistenie_max){

                let _znecisteneOkolie=0;
                let _waterAround=0;
                let _zemOkolo=0;
                let g2=GetGridData(_grid.x-1,_grid.y);
                if(!g2||g2.znecistenie>0)_znecisteneOkolie++;
                if(!g2||(g2.water))_waterAround++;
                if(!g2||(!g2.water && !g2.znecistenie))_zemOkolo++;
                g2=GetGridData(_grid.x+1,_grid.y);
                if(!g2||g2.znecistenie>0)_znecisteneOkolie++;
                if(!g2||(g2.water))_waterAround++;
                if(!g2||(!g2.water && !g2.znecistenie))_zemOkolo++;
                g2=GetGridData(_grid.x,_grid.y-1);
                if(!g2||g2.znecistenie>0)_znecisteneOkolie++;
                if(!g2||(g2.water))_waterAround++;
                if(!g2||(!g2.water && !g2.znecistenie))_zemOkolo++;
                g2=GetGridData(_grid.x,_grid.y+1);
                if(!g2||g2.znecistenie>0)_znecisteneOkolie++;
                if(!g2||(g2.water))_waterAround++;
                if(!g2||(!g2.water && !g2.znecistenie))_zemOkolo++;
                
                if(_znecisteneOkolie>3 && !IsTester()){
                    AddFloatingTextToGrid(_grid,GetText('Out of range!'),'red');
                    return false;
                }
                
                if((_waterAround>3||(_waterAround>0&&_zemOkolo==0)) && !IsTester()){
                    if(!IsShipyardNearby(_grid.x,_grid.y,1)){
                        return false;
                    }
                }
            }


            let _cost = 100*(1-0.01*GetPlayerUpgradeValue(5));

            let _pocetCisteni = GetRestorationStrength();
            if(_grid.mountain){
                _pocetCisteni*=GetPlayerUpgradeValue(69,1);
            }
            if(_grid.rift || _grid.rift_big || _grid.lava_rift ){
                _pocetCisteni*=GetPlayerUpgradeValue(115,1);
            }
            if(_grid.river || _grid.water){
                _pocetCisteni*=GetPlayerUpgradeValue(92,1);
            }
            if(_grid.activists){
                _pocetCisteni*=GetPlayerUpgradeValue(70,1);
            }
    
            let _massiveCount=1; //super clickers
            let _massiveCountSpend=1; //super clickers

            if(hrac.enhanced_clicker){
                if(hrac.enhanced_clicker.amount>0){
                    super_click_multi=hrac.enhanced_clicker.value;
                    _pocetCisteni*=super_click_multi;
                }
            }else if(superClickersInUse){
                if(hrac.super_clickers>0){
                    super_click_multi=GetSuperClickerValue();
                    _pocetCisteni*=super_click_multi;

                    _massiveCount=Math.min(hrac.super_clickers,GetPlayerUpgradeValue(79,1));
                    // console.log(_massiveCount)
                    _massiveCountSpend=1;
                    for(let i=2;i<=Math.min(hrac.super_clickers,GetPlayerUpgradeValue(79,1));i++){
                        if(_pocetCisteni*i>_grid.znecistenie){
                            _massiveCount=i;
                            break;
                        }else{
                            _massiveCountSpend = i;
                        }
                    }
                    _pocetCisteni*=_massiveCount;
                }
            }
            no_ad_in_turns-=0.5;


            if(_pocetCisteni>_grid.znecistenie){
                _pocetCisteni=_grid.znecistenie;
            }
            _cost *= _pocetCisteni;
            if(_grid.activists){
                _cost*=0.4;
            }
            _cost=Mro(_cost);

            DeselectGrid();
            if(_grid.broken_power){
                RemovePolutionCloud(_grid,1);
                // AddBrokenPowerCloud(_grid,_grid.znecistenie);
            }

            if(MamDostZlata(_cost,1)){

                if(hrac.enhanced_clicker){
                    if(hrac.enhanced_clicker.amount>0){
                        UseEnhancedClicker();
                    }
                }else if(superClickersInUse){
                    if(hrac.super_clickers>0){
                        UseSuperClicker(_massiveCountSpend);
                    }
                }
    
                // if(_grid.activists)_grid.activists--;
                if(hrac.nastavenia.restoration_info){
                    AddFloatingTextToGridOptions(_grid,'-'+PCislo(_cost)+' '+Resource('gold')+SPC+( _grid.znecistenie-_pocetCisteni > 0?GetText("Progress")+': '+PCislo(_grid.znecistenie_max-_grid.znecistenie+_pocetCisteni)+' / '+PCislo(_grid.znecistenie_max):GetText("Tile restored!")),{dur:1,fontSize:12, color:'rgb(175,195,175)'});//orange
                }else{
                    AddFloatingTextToGridOptions(_grid,'-'+PCislo(_cost)+' '+Resource('gold'),{dur:1.5,fontSize:12, color:'rgb(175,195,175)'});//orange
                }
                RestoreTheGrid(_grid,_pocetCisteni);
                if(!GetPlayerUpgradeValue(6)){
                    let _u = upgrades.find(u=>u.id == 6);
                    
                    if(hrac.stats.cleaning_clicks%40==0)
                    if(hrac.gold>=GetUpgradeGoldCost(_u) && GetPlayerTotalUpgradeLevel() > _u.min_level && HasLevel(_u.min_town_level)){
                        AddFloatingTextToMousePos(GetText('Upgrade cleaning clicks in bottom upgrade menu'),'#72d84c',-1);
                    }
                }

                SetInner('header_gold_span',PCislo(hrac.gold));

                // RefreshHeader();
                _justCleaned=1;
                hrac.stats.cleaning_clicks++;
                _grid.last_clicked_dur=CLICK_EFECT_DURATION;
                clickedGridEffects.push(_grid);
                // AddFloatingError('-'+_cost+' gold')
            }

            // if(!_justCleaned)
            if(hrac.stats.clears<2)
            if(_grid.znecistenie_max){
                AddFloatingTextToMousePos(GetText3('Restored: ')+(_grid.znecistenie_max-_grid.znecistenie)+' / '+_grid.znecistenie_max,'#72d84c');
            }
        }else{
            if(!_grid.mesto){
                lastTownGridSelectedRadius=0;
                lastTownGridSelectedRadiusGrid=null;
            }
        }

        DeclickSubmenu();
        if(_grid.znecistenie){
            DeselectGrid();
            
            // console.log('aaa')
            //+testVersion*100
            if(_justCleaned && _grid.znecistenie && (_grid.znecistenie>0.8*_grid.znecistenie_max && MyRand100(7)) && camera.tapScreen.y < GetWindowHeight()*0.7){
                let _upgrades=UpsaleGridMenu(_grid,0,0,1);
                if(_upgrades){
                    DoPopupWithOptions({text:_upgrades.join(''),uber_left: Bold(GetTextCAPS('POSSIBLE UPGRADES')+': '), kde:'bottomGridMenuPopup',refresh_id:'grid_info',fontSize:hrac.nastavenia.smallerGridMenu?12:0,no_bg:1,at_bottom:2});
                }
                // console.log(last_grid_clicked)
            }else{
                upsaleItems=[];
            }

        }else{
            if(!_justCleaned){
                _grid.last_clicked_dur=CLICK_EFECT_DURATION;        
                clickedGridEffects.push(_grid);
                if(!last_grid_clicked || (last_grid_clicked.x != _grid.x || last_grid_clicked.y != _grid.y)){
                    last_grid_clicked_time = Date.now();
                    upsaleItems=[];
                }

                let _refreshGridMenu=true;
                if(_grid.mesto && last_grid_clicked && last_grid_clicked.grid && last_grid_clicked.grid.x == _grid.x && last_grid_clicked.grid.y == _grid.y && last_grid_clicked.grid.mesto == _grid.mesto && !refreshTownInfoEnabled){
                    _refreshGridMenu=false;
                }

                last_grid_clicked={
                    x:_grid.x,
                    y:_grid.y,
                    grid:_grid,
                }
                if(quickToolActive && !_grid.mesto){
                    UseQuickTool(_grid);
                }else{
                    if(!_disableMenu){

                        if(_refreshGridMenu){
                            OpenGridMenu();
                        }
            
                        if(!_grid.mesto){
                            if(_grid.building_type && BUILDINGS_BY_KEYS[_grid.building_type] && BUILDINGS_BY_KEYS[_grid.building_type].click_sound){
                                PlaySound(BUILDINGS_BY_KEYS[_grid.building_type].click_sound);
                            }else{
                                if(_grid.golden_field || _grid.copper_field || _grid.gem_field){
                                    PlaySound('pickaxe_metal');
                                }else if(_grid.artifact){
                                    PlaySound('tadaa18');

                                }else{
                                    PlaySound('tap');
                                }
                            }
                        }
                    }
                }
            }
        }
        
        if(!_justCleaned){
            TryAddBlinkingTutorial(_grid);
        }
    }
}

function DeselectGrid(){
    if(last_grid_clicked){
        last_grid_clicked=null;
        CloseGridMenu();
    }
}



function GetPlayerClicks(){
    return hrac.stats.town_clicks + hrac.stats.cleaning_clicks;
}



let pocetKlikovZaSekundu=0;
let pocetKlikovZaMinutu=0;
let pocetKlikovZa10Minut=0;
let pocetKlikovZa20Minut=0;
let anticlickerNow=0;
function AntiClicker(){
    if(tickCount%30==0){
        // console.log(pocetKlikovZaSekundu);
        if(pocetKlikovZaSekundu>25){
            Ban3rdPartyClicker();
        }
        pocetKlikovZaSekundu=0;
    }
    if(tickCount%(30*60)==0){ //minuta
        // console.log(pocetKlikovZaMinutu);
        if(pocetKlikovZaMinutu>900){
            Ban3rdPartyClicker();
        }
        pocetKlikovZaMinutu=0;
    }
    if(tickCount%(30*60*10)==0){//10 minu
        // console.log(pocetKlikovZa10Minut);
        if(pocetKlikovZa10Minut>4500){
            Ban3rdPartyClicker();
        }
        pocetKlikovZa10Minut=0;
    }
    if(tickCount%(30*60*20)==0){
        if(pocetKlikovZa20Minut>7000){
            Ban3rdPartyClicker();
        }
        pocetKlikovZa20Minut=0;
    }
}
function Ban3rdPartyClicker(){
    //REMOVED for now since there is already a limit on gold clicking...

    // anticlickerNow=1;
    // DoBasicPopup('Do not use autoclicker or any other 3rd party','Anticlicker',{noclose:1});
}

function ResetAntiClicker(){
    pocetKlikovZaSekundu=0;
    pocetKlikovZaMinutu=0;
    pocetKlikovZa10Minut=0;
    pocetKlikovZa20Minut=0;
}




/** 

   XXXXX   XXX     XXXXXX    XXX    X     X
  XX   XX   X      X        XX XX   XX    X
  X         X      X       XX   XX  X X   X
  X         X      X       X     X  X X   X
  X         X      XXXXX   XXXXXXX  X  X  X
  X         X      X       X     X  X  X  X
  X         X      X       X     X  X   X X
  XX   XX   X   X  X       X     X  X   X X
   XXXXX   XXXXXX  XXXXXX  X     X  X    XX

*/
function GetRestorationStrength(){
    let _pocetCisteni_upgrades = 0+restoration_test_bonus+hrac.restoration_offer_bonus+hrac.extra_restoration_strength;
    for(let _id of CLEANING_UPGRADES){
        _pocetCisteni_upgrades+=GetPlayerUpgradeValue(_id);
    }
    return GetPlayerUpgradeValue(19,1)*(1 +  _pocetCisteni_upgrades + GetRestorationStrengthFromAllMegaCities() + hrac.restoration_strength_by_buildings);
}


function RestorationInfoPopup(){
    let _out='';
    _out+=GetText('restoration_info');
    
    DoBasicPopup(_out,GetText('Restoration strength'));   
}


function RestoreTheGrid(_grid,_pocetCisteni,_manual){ //cistit clean cleangrid
    // if(_grid.znecistenie_draw > _grid.znecistenie){
    //     _grid.znecistenie_draw = _grid.znecistenie;
    // }
    _grid.znecistenie -= _pocetCisteni;
    AddHealEffect(_grid,superClickersInUse?5:1);
    cleanedTime = Date.now();
    if(_grid.znecistenie == 0){
        if(_grid.mesto){
            PlaySound('tadaa9');
        }else{
            PlaySound('badge_alert');
        }
        // PlaySound('heal1');
        // PlaySound('tadaa2');
        dirtyBlocks=null;

        if(_grid.vidiek && !_manual){
            ClearMegaCity(_grid);
        }
        AddHealEffect(_grid,7,60);
        hrac.enviro++;

        let _dirtyBlocks=null;

        CheckForBook(_grid);       


        if(!IsTerrainTester())
        if(chests.length<MaxChests() && hrac.enviro%HowOftenChest()==0){ //find chest najdi chest hladaj chest
            
            _dirtyBlocks=GetDirtyBlocks();
            // console.error('TEST 1')
            if(MyRand100(10) || chests.length==MaxChests()-1){
                // console.error('TEST 2')
                if(MyRand100(50)){
                    _dirtyBlocks = _dirtyBlocks.filter(b=>b.znecistenie==b.znecistenie_max)
                    let _gridCH = GetRandomItemFromArray(_dirtyBlocks);
                    if(_gridCH){
                        AddChest(_gridCH);
                    }
                }
            }else{
                AddChestToDark(_dirtyBlocks);
            }
        }

        if(hrac.stats.clears==1){
            AddFloatingTextToMousePos(GetText('Tile restored!'),'#72d84c');
        }
        
        _grid.was_clear_cost=Mro(100*(1-0.01*GetPlayerUpgradeValue(5))*_grid.znecistenie_max);
        delete(_grid.znecistenie_max);
        if(_grid.activists){
            hrac.stats.activists_cleared++;
        }
        delete(_grid.activists);
        InitGridNeighbours(_grid);
        GenerateSingleShoreOnly(_grid);
        // AddFloatingTextToMousePos('+1 score');
        let _last_income = hrac.income;
        if(!_manual){
            ReCalculate9BlocksAndStatsByGrid(_grid,1);// ZratajHracStats();
        }
        upsaleItems=[];
        CloseGridMenu();

        SpawnMonster(_grid);

        if(_grid.fish_huge){
            let _amountOfWater = GetAmountOfNeighboursOfType(_grid.x,_grid.y,'water');
            if(_amountOfWater<4){
                delete(_grid.fish_huge);
            }
        }
        if(_grid.water && !_grid.water_rocks && !_grid.ship_wreck && !_grid.artifact && !_grid.fish_big && !_grid.fish_huge && !_grid.fish && !_grid.oil){
            // if(CanBeGoldenIslandHere(_grid.x,_grid.y)){
            let _amountOfWater = GetAmountOfNeighboursOfType(_grid.x,_grid.y,'water');
            let _amountOfWaterRocks = GetAmountOfNeighboursOfType(_grid.x,_grid.y,'water_rocks');

            if(MyRand100(7) || (_amountOfWater<=3 && MyRand100(14)) || (_amountOfWaterRocks>=1 && MyRand100(8+_amountOfWaterRocks*8))){
                _grid.ship_wreck_small=1;
                delete(_grid.fish_small);
            }

            
            if(!_grid.ship_wreck_small)
            if(_amountOfWater>=4){ //golden island
                let _clearedTilesAround=GetAmountOfClearedNighbourTiles(_grid);
                _goldenIslandRandBonus=0;
                if(_clearedTilesAround==2)_goldenIslandRandBonus=4;
                if(_clearedTilesAround==3)_goldenIslandRandBonus=9;
                if(_clearedTilesAround==4)_goldenIslandRandBonus=16;

                if(_clearedTilesAround>=2 && MyRand100(1+_goldenIslandRandBonus) && CanBeGoldenIslandHere(_grid.x,_grid.y)){
                    _grid.golden_island=1;
                    delete(_grid.water);
                    delete(_grid.fish_small);
                    GenerateSingleShoreOnly(_grid,1)
                }
            }
            

            if(!_grid.ship_wreck_small && !_grid.golden_island && _amountOfWater>=4){
                let _clearedTilesAround=GetAmountOfClearedNighbourTiles(_grid);
                if(MyRand100(3) && _clearedTilesAround>=2 && (hrac.stats.cleared_water_rocks_gem + hrac.stats.water_rocks_gem)*1000 < hrac.stats.clears){
                    _grid.water_rocks_gem=1;
                    delete(_grid.fish_small);
                }
            }

        }

        // TryRemoveFromPlayerSpecialPlaceRadar(_grid);

        if(_grid.chest){
            SalvageChest(_grid); //open chest
        }

        // if(!IsTester())
        if(GetPlayerUpgradeValue(10))
        if( hrac.stats.activists < GetMaxActivistFields() && MyRand100(20+GetPlayerUpgradeValue(50)*2)){
            if(!_dirtyBlocks)_dirtyBlocks=GetDirtyBlocks();
            for(let i=0;i<=30;i++){
                let _gridAct = GetRandomItemFromArray(_dirtyBlocks);
                if(_gridAct){
                    if(GetAmountOfNeighboursOfType(_gridAct.x,_gridAct.y,'znecistenie')<4 || i==30){
                        _gridAct.activists = MyRand(15,35)+_gridAct.znecistenie;
                        ResetReadyStatusOptiBlockByGrid(_gridAct);
                        break;
                    }
                }
            }
        }
        if(_grid.water){
            let _neighbours= GetGridNeighbours(_grid);
            for(let _n of _neighbours){
                if(_n && _n.is_connected){
                    _grid.is_connected=true;
                    break;
                }
            }
        }
        TryShowArtifactFoundInfo(_grid);
        if(_grid.mesto){
            lastFoundTownGrid=_grid;
            AddPing(_grid.x,_grid.y,0,300,1500,'#72d84c');
            AddPing(_grid.x,_grid.y,0,600,1200,'#72d84c');
            AddGold(GetGoldForDiscovery(),_manual);
            AddFloatingTextToGrid(_grid,'+'+PCisloB(GetGoldForDiscovery())+FloatingTextIcon('gold',40,5),'#fc0',0,5,40);
            if(!_grid.vidiek && !_grid.mega_city){
                AddFloatingTextToGrid(_grid,'== '+GetText('Bunker found')+' ==','var(--green)',1,5,22);
            }
            AddGoldEffect(_grid,3,90)
            AddGoldEffect({x:_grid.x-1, y:_grid.y},2,60);
            AddGoldEffect({x:_grid.x+1, y:_grid.y},2,60);
            AddGoldEffect({x:_grid.x, y:_grid.y-1},2,60);
            AddGoldEffect({x:_grid.x, y:_grid.y+1},2,60);
            AddGoldEffect({x:_grid.x+1, y:_grid.y+1},1,40);
            AddGoldEffect({x:_grid.x-1, y:_grid.y+1},1,40);
            AddGoldEffect({x:_grid.x-1, y:_grid.y-1},1,40);
            AddGoldEffect({x:_grid.x+1, y:_grid.y-1},1,40);
        }
        if(_grid.mesto && HasStreetNearBy(_grid.x,_grid.y)){
            newTownChecks.splice(0);
            CheckNewTowns_part1b(_grid);
            BuildStreet(_grid,1,0,1);
            if(_grid.has_street){
                _grid.is_connected=true;
                hrac.stats.towns_connected++;
                hrac.population+=GetTownPopulation(_grid);
            }            
            // RefreshHeader();
            CheckNewTowns_part2();
        }

        if(!_manual){
            RefreshStats();
            RefreshHeader();
        }

        if(_grid.forest){
            AddFloatingTextToMousePos('+'+(_grid.forest)+FloatingTextGoldIcon()+' '+GetText('income'),'#72d84c',2);
        }
        if(_grid.mesto && _last_income<hrac.income){
            if(hrac.stats.clears>3){
                AddFloatingTextToMousePos('+'+(hrac.income-_last_income)+FloatingTextGoldIcon()+' '+GetText('income'),'#72d84c',2);
            }
            //AddFloatingTextToMousePos('test super dlheho textu ktory sa tazsie cita, akoze fakt dlhy text, mozno rovno aj hint','lime',2);
        }

        if(hrac.stats.clears==2){
            camera.desiredzoom=1;
        }

        CheckAchievemntsAll(_grid);
        anyActionDone++;
    }else{
        PlaySound('tap');
    }
}




function GetMaxActivistFields(){
    return 4+GetPlayerUpgradeValue(50);
}











/** 

   XXXXX   XXXXX   XXXXX  XXXXXX         X     X  XXXXXX  X     X  X    X
  XX   XX  X   XX    X     X   XX        XX   XX  X       XX    X  X    X
  X        X    X    X     X    X        X X X X  X       X X   X  X    X
  X        X   XX    X     X    X        X  X  X  X       X X   X  X    X
  X   XXX  XXXXX     X     X    X        X  X  X  XXXXX   X  X  X  X    X
  X    XX  XXX       X     X    X        X     X  X       X  X  X  X    X
  X     X  X XX      X     X    X        X     X  X       X   X X  X    X
  XX   XX  X  XX     X     X   XX        X     X  X       X   X X  X    X
   XXXXX   X   XX  XXXXX  XXXXXX         X     X  XXXXXX  X    XX   XXXX 

*/

let showDistanceFromCenter=false;
let anyActionButtonVisible=0;
let anyActionBuildingHiddable=false;
let actionButtonsUsed=[];
let last_tanker_grid_clicked=null;
let grid_menu_opened_time=0;
function OpenGridMenu(){
    anyActionButtonVisible=0;
    anyActionBuildingHiddable=false;
    actionButtonsUsed=[];

    if(hrac.stats.towns_all < 2) return false;
    if(anticlickerNow){
        return false;
    }
    if(last_grid_clicked){
        grid_menu_opened_time = Date.now();
        let _grid = last_grid_clicked.grid;
        let _uber_right='';
        let _out = '<span id="isGridMenuVisible"></span>';
        _out += '<div style="min-height:90px;padding-bottom:5px;">';
        // if(HasLevel(7) && !hrac.nastavenia.smallerGridMenu && showDistanceFromCenter){
            if(GridIsCenterGrid(_grid)){
                _uber_right=GetText('This is center of the map');
            }else{
                _uber_right='x:'+_grid.x+' y:'+_grid.y+SPC+GetText3('Distance from center: ')+GetVzdialenostOdStredu(_grid.x,_grid.y);
            }
        // }

        if(isActionGridView){
            if(CanRemoveButtonBeFloating(_grid))_out+=GetBuildingDeleteActionBut(_grid,1);
            _out+=GetBuildingActions(_grid,1);
            _out+=GetSwampActions(_grid);            
            _out+=GetFarmActions(_grid,1);
        }
        


        let _tileInfo = GridBaseInfo(_grid);
        _out+=_tileInfo[0];
        if(_grid.bambus){
            _tileInfo[1]=GetText('Bamboo');
        }
        if(_grid.mesto){
            if(GridIsCenterGrid(_grid)) _tileInfo[1] = GetText('Main-{att1}',GetBunkerTownLabel(_grid,1));
            else _tileInfo[1] = GetBunkerTownLabel(_grid,1);
            if(HasLevel(5)){
                _tileInfo[1]+=' '+GetText3('Level:')+_grid.mesto;
            }
        }
        

        if(_grid.monster){
            
        }else{
            if(_grid.tanker){
                last_tanker_grid_clicked=_grid;
            }else if(!_grid.znecistenie && !_grid.oil){
                last_tanker_grid_clicked=null;
            }

            
            if(_grid.mesto){
                _out+= TownInner(_grid);
            }else{
                if(gebi('okno_addon_in')){
                    HideDiv('okno_addon');
                    materialAddonVisible=0;
                }
            }
            if(_grid.water && !_grid.water_rocks && !_grid.water_generator){
                _out+= ShipSlotInfo(_grid);
            }
            


            if(_grid.building_type && BUILDINGS_BY_KEYS[_grid.building_type] && BUILDINGS_BY_KEYS[_grid.building_type].upgrades_to && BUILDINGS_BY_KEYS[_grid.building_type].cost?.gems && HasLevel(BUILDINGS_BY_KEYS[BUILDINGS_BY_KEYS[_grid.building_type].upgrades_to]?.required_level )){
                _out+= Button(GetText3('UPGRADE'),'UpgradeGemBuilding('+_grid.x+','+_grid.y+');',{super_button:'purple'});
            }


            
            _out+=RoadInfo(_grid);
            
            
            if(_grid.oil && GetPlayerLevel()==32 && !_grid.ship){
                _out+=BR+ColorSpan('var(--light-purple-3)',GetText('Currently you can only build onshore oil rigs. Search for this tile:'))+BR+GetTileImage('ground_oil','70','');
                
            }else{
                _out+='<div style="z-index:5;'+(isActionGridView?'display:flex; flex-wrap: wrap;'+(hrac.nastavenia.leftHanded==2?'':'flex-direction:row-reverse;'):'')+'">';
                globalActionZIndex=1000;
                if( _grid.forest && !_grid.uranium_cloud && HasLevel(FARM_REQURED_LEVEL)){
                    _out+= ActionDiv('DestroyAll('+_grid.x+','+_grid.y+');ShowQuickTool(7);','ui/axe',Bold(GetText('Chop chop'))+' - '+GetText3('Cut the forest, cost: ')+PMat(200,1)+(hrac.lumberIncome>0?BR+'+'+PMat(5,'lumber'):''),GetText('Chop chop'),0,1);
                    // _out+= ActionDiv('DestroyAll('+_grid.x+','+_grid.y+');','ui/buldoser','Clean tile; cost '+PMat(200,1),'Destroy');
                }

                
                if(!isActionGridView){
                    _out+=GetBuildingActions(_grid,1);
                    _out+=GetSwampActions(_grid);            
                }
                _out+=GetBuildingActions(_grid,0,1);
                if(!CanRemoveButtonBeFloating(_grid) && isActionGridView)_out+=GetBuildingDeleteActionBut(_grid,1);
                
                _out+=RoadActions(_grid);
                
                if(!_grid.farmfield&&!_grid.farmfield2){
                    _out+=RoadBuildMenu(_grid);
                }
                
                _out+=ForestGrowActions(_grid);
                
                
                
                
                if( (_grid.swamp || _grid.swamp_rocks) && !HasUpgrade(13)){
                    _out+= CheckAndReturnUpgradeUpsale(13);
                }
                
                if(!_grid.mesto){
                    _out+=GetBuildingActions(_grid,0,0); //TOTO DLHO TRVA !
                    _out+=ShipyardInfo(_grid);
                    // if(!isActionGridView){
                    _out+=GetFarmActions(_grid);
                    // }
                }
                _out+='</div>';
            }

        }
            
            
        _out+='</div>';
            
            
        let _showGridToggleButton=0;
        if(HasLevel(GRID_VIEW_LEVEL) && !_grid.mesto){
            if(anyActionButtonVisible){
                _showGridToggleButton=1;
            }
        }
    
        if(!_grid.monster){
            _out+=UpsaleGridMenu(_grid,1);
        }

        if(_out){
            //TOTO DLHO TRVA !
            DoPopupWithOptions({text:_out,kde:'bottomGridMenuPopup',uber_left: GetTileImage('selector',hrac.nastavenia.smallerGridMenu?12:13,'uber-grid-icon')+_tileInfo[1], uber_right: _uber_right,refresh_id:'grid_info',showAllBuildings:HasLevel(30)&&anyActionBuildingHiddable,showGridToggleButton:_showGridToggleButton,fontSize:hrac.nastavenia.smallerGridMenu?12:0,no_bg:1,at_bottom:2,is_building_popup:1});
        }else{
            CloseGridMenu();
        }
    }
}

function IsFlattenHillButVisible(_grid){
    return HasUpgrade(13)&&!_grid.rock_mine&&!_grid.rock_mine2&&!_grid.iron_mine&&!_grid.windmill&&_grid.hill;
}

function CanRemoveButtonBeFloating(_grid){
    return !IsRubble(_grid) && !IsFlattenHillButVisible(_grid) && !_grid.sensor_tower;
}








function DestroyAll(_x,_y,_ignoreCost,_newCost,_confirmed){ //deleteall //refactor - toto by chcelo dat asi prec alebo nejako prerobit... elbo aj v buildingoch je funkcia
    let _grid = GetGridData(_x,_y);

    for(let _co of POSSIBLE_IN_STORAGE){
        if(PutIntoStorage(_grid,_co)) return false;
    }
    
    upsaleItems=[];
    let _wasShipYard=0;

    if(_grid.shipyard){
        _wasShipYard=1;
    }

    if(!_newCost)_newCost=200;
    if(_grid && (_ignoreCost || MamDostZlata(_newCost,1))){ // && confirm('Are you sure to destroy this structure?')

        if( _grid.shipyard ){
            if(_grid.shipyard){
                delete(_grid.has_street);
                TryRemoveStreet(_grid.x,_grid.y,1);
                delete(_grid.shipyard);
            }

            PootacajOkoliteCesty(_grid);
        }
        if(_grid.water_rocks){
            delete(_grid.water_rocks);
            let _vzdStred = GetVzdialenostOdStredu(_x,_y);
            if(_vzdStred>75 && MyRand100(3)){
                _grid.fish_big=1;
            }else if(MyRand100(25)){
                _grid.fish_small=1;
            }else if(_vzdStred > 30 && MyRand100(8)){
                _grid.fish=1;
            }
        }
        if(_grid.farmfield||_grid.farmfield2){
            _grid.clearedInterval=6;
            TryShowQuickTool(13); 
        }
        if(!_grid.forest){
            PlaySound('bulldozer');
        }else{
            PlaySound('chop_wood');
        }
        
        delete(_grid.river_cleaner);
        delete(_grid.swamp);
        delete(_grid.swamp_rocks);
        delete(_grid.storage_container);
        delete(_grid.wood_storage);
        delete(_grid.building_type);
        delete(_grid.ignores_connection);
        delete(_grid.countedBy);
        delete(_grid.has_street_connection_from);

        TryCutForest(_grid);
        if(_grid.farmfield||_grid.farmfield2){
            RemoveFarmfield(_grid);
            AddMudEffect(_grid,3);
            // console.log('farmfield');
        }

        TryRemoveStreet(_x,_y);
        // console.log('_x,_y',_x,_y)
        if(!_ignoreCost){
            AddFloatingText(camera.tapScreen.x,camera.tapScreen.y-20,'-'+PCislo(_newCost)+' '+Resource('gold'),{fontSize:12, color:'rgb(255,100,0)'});//orange
        }
        if(_wasShipYard){
            // RefreshRoadConnections();//TOTO ZACHOVAT
        }
        ReCalculate9BlocksAndStatsByGrid(_grid);// ZratajHracStats();
        RefreshHeader();
        anyActionDone++;
        if(!quickToolActive){
            OpenGridMenu();
        }
        drawSingleFrame=1;
    }
}


function CopyToGrid(_grid){
    //empty lebo je predefinovana v testing.js
}

function Resource(_type){
    if(_type.toUpperCase()=='GOLD') return GetText('gold');
    if(_type.toUpperCase()=='FOOD') return GetText('Food');
    if(_type.toUpperCase()=='GEMS') return GetText('gems');
    if(_type.toUpperCase()=='CHIPS') return GetText('Micro-chips');
    if(_type.toUpperCase()=='LUMBER') return GetText('Lumber');
    if(_type.toUpperCase()=='STONE') return GetText('Stone');
    if(_type.toUpperCase()=='ROCKS') return GetText('Stone');
    if(_type.toUpperCase()=='STEEL') return GetText('Steel');
    if(_type.toUpperCase()=='OIL') return GetText('Oil');
    if(_type.toUpperCase()=='CLAY') return GetText('Clay');
    if(_type.toUpperCase()=='EVENT_FISH') return GetText('Event Fish');
}

let tryShowLikePopup=false;
let like_discarded=false;
function TryLikeThisAppPopop(){
    if(!HasLevel(15)){
        return false;
    }
    if(like_discarded){
        return false;
    }
    if(hrac.like_given && HasLevel(20)){
        sendToFlutter('{ "event": "inAppReview"}');
        return false;
    }
    let _out='';
    _out+=GetText('We see you really like this game!');
    if(!hrac.given_gems_just_because){
        let _count = 100;
        AddMat(_count,'gems',1);
        AddFloatingText(window.innerWidth*0.5,GetWindowHeight()*0.5,'+'+PMat(_count,'gems')+GetText('gems'),{color: 'pink', dur:10, fontSize:16})
        hrac.given_gems_just_because=true;
        _out+=BR+GetText('{att1} gems given!',PMat(_count,'gems'));
    }
    _out+=BRBR;
    _out+=GetIconImage('thumbsup',150);
    _out+=BR;
    _out+=Button(GetText('no'),'PlayTap(); CloseBasicPopup();')+GetText('or')+Button(GetText('Yes I like!'),'ShowFlutterAppLike();');
    DoBasicPopup(_out,GetText('I like this!'),{centerised:1});
    PlaySound('tadaa3');
    like_discarded=true;
}
function ShowFlutterAppLike(){
    PlaySound('tadaa6');
    CloseBasicPopup();
    hrac.like_given=true;
    anyActionDone++;
    saveInTicks=2;
    setTimeout(() => {
        sendToFlutter('{ "event": "openStoreReview"}');
    }, 250);
    
}

const LAST_QUEST_TUTOR_LEVEL=5;
function SetLastQuestText(){
    if(HasLevel(LAST_QUEST_TUTOR_LEVEL)){
        SetInner('main_town_quest_div_in',ColorSpan('#6425c9',GetText('Each settlement has its own quest. Click the settlement to find out.')));
        isMTQuestVisibleCond3=false;
        return true;
    }
    return false;
}

let isMTQuestVisible=false;
let isMTQuestVisibleCond2=true;
let isMTQuestVisibleCond3=true;
let isMTQuestVisibleCond4=true;

let isMTQuestVisibleTO=0;
let isMTQuestHeight=100;
function DrawMainTownQuest(){
    if(hrac.stats.towns_connected<2 || HasLevel(LAST_QUEST_TUTOR_LEVEL+1) || visitingFriend || !isMTQuestVisibleCond4){
        if(isMTQuestVisible){
            isMTQuestVisible=false;
            HideDiv('main_town_quest_div');
        }
        return false;
    }
    

    if(tickCount%15==3){
        SetInner('main_town_quest_div','<div id="main_town_quest_div_in">'+GetText('Upgrade the settlement!')+'</div>'+`<img src="${getAssetUrl('public/images/ui/pin.png?v=1')}" class="pin"><div class="close-quest">x</div>`)
        let _reqMats = TownUpradeInner(GetGridData(0,0),1);
        // let _pocet=MyRand(1,6);
        // let _text='test';
        // for(let i =1;i<_pocet;i++)
        // _text+='<br>test';
        // _reqMats=[_text,_pocet];
        if(_reqMats){
            SetInner('main_town_quest_div_in',_reqMats[0]);
            isMTQuestHeight=_reqMats[1]*20+60;
        }else{
            isMTQuestHeight=100
        }
        GetTownUpgradeRequirementInner(GetGridData(0,0),1);
        
        SetLastQuestText();
    }
    let _h = isMTQuestHeight;
    let _scale = Math.min(1,zoomScale2);
    let _x_town = -camera.x+zoomScale*gridSirka*0.5 - 130;
    // let _y_town = -camera.y-zoomScale*gridSirka*1.5 - (1/zoomScale)*30 - _h;
    let _y_town = -camera.y-_h-gridSirka*zoomScale + (zoomScale>1?gridSirka*zoomScale*0.8 : 0 ) + _h*0.5 * (1-_scale);
    // if(_y_town<-50 && !isMTQuestVisible){
    //     isMTQuestVisible = true;
    //     ShowJS('main_town_quest_div');
    // }
    // if(_y_town>GetWindowHeight()+100 && !isMTQuestVisible){
    //     isMTQuestVisible = true;
    //     ShowJS('main_town_quest_div');
    // }
    if(_x_town < -260 || _x_town > window.innerWidth || _y_town<headerHeight+TOP_PADDING+GetIncomeBarHeight()+3 || _y_town>GetWindowHeight() || zoomScale>1.5 || zoomScale<0.3){
        if(isMTQuestVisible){
            isMTQuestVisible = false;
            isMTQuestVisibleCond2 = true;
            HideDiv('main_town_quest_div');
        }
    }else if(!isMTQuestVisible && isMTQuestVisibleCond2){
        if(isMTQuestVisibleCond3){
            isMTQuestVisible = true;
            ShowJS('main_town_quest_div');
            clearTimeout(isMTQuestVisibleTO);
        }
    }
    SetXY('main_town_quest_div',_x_town,_y_town);
    SetWidth('main_town_quest_div',260);
    SetHeight('main_town_quest_div',_h);
    SetScale('main_town_quest_div',_scale);
    
}

function MainTownQuestDivClick(){
    HideDiv('main_town_quest_div');
    isMTQuestVisibleCond2=false;
    isMTQuestVisibleTO = setTimeout(() => {
        isMTQuestVisible=false;
        isMTQuestVisibleCond2=true; 
    }, 15000);
    lastActiveTownTabIndex=1;
    ClickGrid(GetGridData(0,0));
}



let news=[];
function TryShowNews(){
    if(HasLevel(8)){

        if(news?.length){
            for(let _n of news){
                let _time = new Date(_n.startDate)*1;
                // console.log(_time,hrac.lastNewsTime,_time-hrac.lastNewsTime,_n)
                if(_time > hrac.lastNewsTime){
                    hrac.lastNewsTime = _time;
                    NewsPopup(_n);
                    break;
                }
            }
        }
    }
    
}


function NewsPopup(_n){

    let _out='';
    _out+='<table class="news-table" cellspacing="6">';
    _out+='<tr><td class="news-border-top"></td><td class="news-border-top"></td></tr>';
    _out+='<tr><td>';
    _out+='<div class="news-title">POST APO NEWS!</div>';
    _out+='</td><td rowspan="3" style="width:120px;vertical-align:top;position:relative;z-index:1;">'+GetTileImage('ui/pat_logo',120,'')+'</td></tr>';
    _out+='<tr><td>';
    _out+='<div class="news-title2">'+_n.title+'</div>';
    _out+='</td></tr>';
    _out+='<tr><td style="background-color:var(--light-color-2);padding: 0px;height:30px;white-space:nowrap;overflow:hidden; position:relative;">';
    _out+='<div style="position:absolute;left:0px;top:0px;">';
    _out+='<div class="news-title3">'+new Date(_n.startDate).toLocaleDateString(hrac.lang)+'</div>';
    _out+='<div class="news-title3" style="min-width:70px;">&nbsp;</div>';
    _out+='<div class="news-title3" style="min-width:70px;">&nbsp;</div>';
    _out+='</div>';
    _out+='</td></tr>';
    const imgUrl = getAssetUrl(`public/images/ui/zobacik.png?v=${PIC_VERSION}`);
    _out+='<tr><td colspan="2" style="padding: 0px;">';
    _out+='<div class="news-body">';
    _out+=`<img class="news-zobacik-1" src="${imgUrl}">`;
    _out+=_n.message;
    _out+='<div>';
    _out+='</td></tr>';
    _out+='<tr><td colspan="2" style="padding: 0px; overflow:hidden;">';
    _out+='<div class="news-footer">';
    _out+=`<img class="news-zobacik-2" src="${imgUrl}">`;
    _out+=`<img class="news-zobacik-3" src="${imgUrl}">`;

    _out+='<table>';
    _out+='<tr><td style="padding-left:25px;">';
    _out+=ClickSpan(GetText('Show all news'),'ShowAllNews();');
    _out+='</td><td style="text-align:right;">';
    _out+=Button(GetTextCAPS('HIDE'),'ShowAllNews();');
    _out+='</td></tr>';
    _out+='</table>';

    _out+='<div>';
    _out+='</td></tr>';
    _out+='</table>';

    DoBasicPopup(_out,'',{border_radius:0,style:'background-color:var(--darker-color);',class:'news-bg'});
}

function ShowAllNews(){
    CloseBasicPopup();
    lastActiveHracTabIndex=6;
    ClickBottomMenu(1);
}

function AllNewsInner(){
    let _out='';
    _out+=LabelSpan(GetText('All news')+':')+BRBR;
    _out+='<div style="word-wrap: break-word;max-width:min(calc(95vw - 20px) , 590px);">';
    if(news?.length){
        for(let _n of news){
            _out+=HR;
            _out+=Bold(_n.title)+' - '+(new Date(_n.startDate).toLocaleDateString(hrac.lang))
            _out+=BR+_n.message+BRBR+BR;
        }
    }
    _out+='</div>';
    _out+=BRBR;
    _out+=BRBR;
    _out+=BRBR;
    
    return _out;
}



let isExpandMapVisible=false;
function DrawMapExpandButton(){
    if(!camera.grabbed)
    if(BOUNDERIES_LEFT<240)
    if(!gamePaused)
    if(!visitingFriend){
        if(camera.zoom > 0.50){
            let _x = GetXInScreenCenter();
            if(_x-5 < -BOUNDERIES_LEFT || _x+5 > BOUNDERIES_RIGHT){
                if(!isExpandMapVisible){
                    let _left_grid=Mfl((((camera.x*1/zoomScale))  / gridSirka));
                    if(_left_grid < -50 && _left_grid >= -BOUNDERIES_LEFT){
                        //console.log(_left_grid)
                        //nic
                    }else{
                        SetInner('expandMapBut',Button('Expand Map','ExpandMapPopup()'));
                        gebi('expandMapBut').style.textAlign='right';
                        SetY('expandMapBut',GetWindowHeight()*0.5-30);                    
                        gebi('expandMapBut').style.right='unset';
                        gebi('expandMapBut').style.left='unset';
                        // gebi('expandMapBut').style.top='unset';
                        gebi('expandMapBut').style.bottom='unset';
                        ShowJS('expandMapBut');
                    }
                    isExpandMapVisible=true;
                }

                if(_x<-50){
                    let _xbut = Math.abs(camera.x + BOUNDERIES_LEFT*gridSirka*camera.zoom);
                    gebi('expandMapBut').style.right=(window.innerWidth - _xbut + 80)+'px';
                }else{
                    let _xbut = Math.abs(camera.x - (BOUNDERIES_RIGHT+1)*gridSirka*camera.zoom);
                    SetX('expandMapBut',_xbut+80);
                }
                return true;
            }

            let _y = GetYInScreenCenter();
            if(_y+8 > -BOUNDERIES_UP && (_y-8 < -BOUNDERIES_UP || _y+8 > BOUNDERIES_DOWN)){
                if(!isExpandMapVisible){
                    SetInner('expandMapBut',Button('Expand Map','ExpandMapPopup()',{width:160}));
                    gebi('expandMapBut').style.textAlign='right';
                    SetX('expandMapBut',window.innerWidth*0.5-20-160*0.5);
                    // SetX('expandMapBut',5)
                    gebi('expandMapBut').style.right='unset';
                    // gebi('expandMapBut').style.left='unset';
                    gebi('expandMapBut').style.top='unset';
                    gebi('expandMapBut').style.bottom='unset';
                    ShowJS('expandMapBut');
                    
                    isExpandMapVisible=true;
                }

                let _ybut=0;
                if(_y<-50){
                    _ybut = Math.abs(camera.y + (BOUNDERIES_UP+1)*gridSirka*camera.zoom)-15/camera.zoom;
                    SetY('expandMapBut',_ybut);
                }else{
                    _ybut = Math.abs(camera.y - (BOUNDERIES_DOWN+1)*gridSirka*camera.zoom);
                    SetY('expandMapBut',_ybut+15);
                }
                if(_ybut<headerHeight+TOP_PADDING+5){
                    HideDiv('expandMapBut');
                }else{
                    ShowJS('expandMapBut');
                }
                return true;
            }
        }
    }
    if(isExpandMapVisible){
        HideDiv('expandMapBut');
        isExpandMapVisible=false;
    }

}

function CountOfReachedBorders(){
    let _reachedBorders=0;
    for(let i=-BOUNDERIES_LEFT;i<=BOUNDERIES_RIGHT;i++){
        if(GetGridData(i,-BOUNDERIES_UP)&&GetGridData(i,-BOUNDERIES_UP).znecistenie==0){
            _reachedBorders++;
            break;
        }
    }
    for(let i=-BOUNDERIES_LEFT;i<=BOUNDERIES_RIGHT;i++){
        if(GetGridData(i,BOUNDERIES_DOWN)&&GetGridData(i,BOUNDERIES_DOWN).znecistenie==0){
            _reachedBorders++;
            break;
        }
    }
    for(let i=-BOUNDERIES_UP;i<=BOUNDERIES_DOWN;i++){
        if(GetGridData(-BOUNDERIES_LEFT,i)&&GetGridData(-BOUNDERIES_LEFT,i).znecistenie==0){
            _reachedBorders++;
            break;
        }
    }
    for(let i=-BOUNDERIES_UP;i<=BOUNDERIES_DOWN;i++){
        if(GetGridData(BOUNDERIES_RIGHT,i)&&GetGridData(BOUNDERIES_RIGHT,i).znecistenie==0){
            _reachedBorders++;
            break;
        }
    }
    return _reachedBorders;
}


const EXPAND_POLLUTION_1=75000;
const EXPAND_COST_1={gold: 35000000000, oil: 15000000, steel: 25000000};
function ExpandMapPopup(){
    if(BOUNDERIES_LEFT>240){
        return false;
    }

    let _out='';
    if(!HasLevel(65)){
        _out+=GetText('Condition')+' 1 / 3:'+BRBR;
        _out+=Bold(GetText("Level {att1} required.",65));
    }else
    if(hrac.buildings.sensor_tower < 20){
        _out+=GetText('Condition')+' 2 / 3:'+BRBR;
        _out+=Bold(GetText("Have {att1} structures of type: {att2}.",[20,GetText(BUILDINGS_BY_KEYS['sensor_tower'].name)]));
    }else
    if(CountOfReachedBorders() < 4){
        _out+=GetText('Condition')+' 3 / 3:'+BRBR;
        _out+=Bold(GetText("Reach all 4 map borders"));
    }else{

        let _targetPollution = GetBasePollution()+EXPAND_POLLUTION_1;
        _out+='+'+PCislo(EXPAND_POLLUTION_1)+PollutionIcon();
        _out+=BRBR+GetText('This upgrade sets your highest acceptable level of Pollution to {att1} (Previously {att2}), meaning if your pollution is above {att1}, you will receive a penalty for your earnings.',[PCislo(_targetPollution),PCislo(GetBasePollution())]);
        _out+=BRBR+HR+BR;
        _out+=GetText("Cost:")+BR+PMats(EXPAND_COST_1);
        _out+=BRBR+Button('Expand Map','ExpandMap();',{color:'green'});
    }
    PlayTap();
    
    DoBasicPopup(_out,GetText('Expand Map'),{centerised:1});
}

async function ExpandMap(){
    if(MamDostMats(EXPAND_COST_1,1)){
        PlayTap();
        gamePaused=1;
        CloseBasicPopup();
        PleaseWaitPopup();
        HideDiv('expandMapBut');
    
        setTimeout(async () => {
            
            hrac.map_size=250;
            if(BOUNDERIES_DOWN<250)BOUNDERIES_DOWN=hrac.map_size;
            if(BOUNDERIES_UP<250)BOUNDERIES_UP=hrac.map_size;
            if(BOUNDERIES_RIGHT<250)BOUNDERIES_RIGHT=hrac.map_size;
            if(BOUNDERIES_LEFT<250)BOUNDERIES_LEFT=hrac.map_size;
            HideDiv('expandMapBut');
            if(IsSecondCanvasAllowed()){
                canvas_optimised.width = OPTIMISED_GRID_SIRKA * (BOUNDERIES_LEFT+BOUNDERIES_RIGHT + 1);
                canvas_optimised.height = OPTIMISED_GRID_SIRKA * (BOUNDERIES_UP+BOUNDERIES_DOWN + 1);
            }
            hrac.polution+=EXPAND_POLLUTION_1;
    
            InitAllGridNeighbours();
            
            HardRecalculateAllStats();
            
            if(!IsJablko()){
                InitOptimisedBlocks();
                await OptimizeAllBlocks(zoomScale);
            }
            
            gamePaused=0;
            CloseLoadingPopup();
            RefreshHeader();
            anyActionDone++;
        }, 300);
    
    }else{
        return false;
    }
}

function GetBoundery(_side,_player){
    if(!_player)_player=hrac;
    if(_player.map_size==250){
        return 250;
    }
    if(_side==4)return BOUNDERIES_LEFT;
    if(_side==6)return BOUNDERIES_RIGHT;
    if(_side==8)return BOUNDERIES_UP;
    if(_side==2)return BOUNDERIES_DOWN;
}

//,max_width:GetSmallerPopupWidth(100)

function AreYouSure(_confirmed,_text,_label,_func,_confirmBut,_options){
    if(_confirmed) return true;
    _func='CloseAYSPopup();'+_func;

    if(!_options)_options={};
    _options.text = BRBR+'<center>';
    _options.text += FSize(20,_text);
    if(_options.gem_purchase_confirmation && !hrac.nastavenia.gem_purchase_confirmation){
        _options.text += BRBR+'<label><input onclick="hrac.nastavenia.gem_purchase_confirmation=GCH(\'ays_chb\');" type="checkbox" id="ays_chb">'+GetText("Don't ask for confirmation when buying buildings for gems.")+' ('+GetText('Can be turned back on in the settings.')+')</label>';
    }
    _options.text += BRBR+BRBR+'<div class="no-line-wrap">';
    _options.text += Button(_confirmBut?_confirmBut:GetTextCAPS('yes'),_func,{color: _options.color?_options.color:''});
    // _options.text += ' '+GetText('or')+' '+Button(GetText('cancel'),'CloseAYSPopup();PlaySound(\'dialog_close\');');
    _options.text += SPC+Button(GetTextCAPS('cancel'),'CloseAYSPopup();PlaySound(\'dialog_close\');');
    _options.text += '</div></center>'+BR;
    _options.max_width = GetSmallerPopupWidth();


    _options.label = _label;
    _options.kde = 'areYouSurePopup';
    _options.noclose=1;
    DoPopupWithOptions(_options);
    return false;
}

function DoBasicPopup(_text,_label,_options){
    if(!_options)_options={};
    _options.text = _text;
    _options.label = _label;
    _options.kde = 'basicPopup';
    return DoPopupWithOptions(_options);
}

function DoSecondaryPopup(_text,_label,_options){
    if(!_options)_options={};
    _options.text = _text;
    _options.label = _label;
    _options.kde = 'secondaryPopup';
    return DoPopupWithOptions(_options);
}


let popupsInTicksPart2=[];
let popupsInTicks=[];
function DoPopupWithOptions(_options){
//     if(_options.kde){
//         popupsInTicks[_options.kde] = _options;
//     }
//     return _options.kde;
// }

// function DoPopupWithOptionsInTick(_options){
    anyPopupstartedTicks+=5;
    let _out='';
    _out+='<div class="popup" id="'+_options.kde+'">';
    if(!_options.no_bg){
        _out+='<div class="popup_sed" style="opacity:0;" id="'+_options.kde+'_sed"></div>';
    }
    if(_options.refresh_id){
        _out+='<div id="'+_options.refresh_id+'"></div>';
    }
    let _minusHeight= TOP_PADDING+BOTTOM_PADDING;
    let _maxHeight='';
    let _maxHeightIN=' max-height:calc(45vh - '+(10+_minusHeight)+'px );';
    let _maxHeightIN2=' max-height:calc(45vh - '+(30+_minusHeight)+'px);';
    popupsMaxHeightIN2[_options.kde]='calc(45vh - '+(30+_minusHeight)+'px - 0px)';
    let _style='';
    
    if(!_options.at_bottom){
        _maxHeight=' max-height:80vh;';
        _maxHeightIN=' max-height:calc(80vh - '+(10+_minusHeight)+'px);';
        _maxHeightIN2=' max-height:calc(80vh - '+(30+_minusHeight)+'px);';
        popupsMaxHeightIN2[_options.kde]='calc(80vh - '+(30+_minusHeight)+'px - 0px)';
    }
    if(_options.max_height_vh){
        _maxHeight=' max-height:'+(_options.max_height_vh)+'vh;';
        _maxHeightIN=' max-height:calc('+_options.max_height_vh+'vh - '+(10+_minusHeight)+'px );';
        _maxHeightIN2=' max-height:calc('+_options.max_height_vh+'vh - '+(30+_minusHeight)+'px );';
        popupsMaxHeightIN2[_options.kde]='calc('+_options.max_height_vh+'vh - '+(30+_minusHeight)+'px - 0px)';
    }
    
    let _fontSize='';
    if(_options.fontSize){
        _fontSize+='font-size:'+_options.fontSize+'px;';
    }
    if(_options.popup_padding != undefined){
        _style+='padding:'+_options.popup_padding+'px;';
    }
    if(_options.border_radius != undefined){
        _style+='border-radius:'+_options.border_radius+'px;';
    }

    popupsVisible[_options.kde]=true;
    popupsClosable[_options.kde]=true;
    

    let _left = 5;
    let _maxWidth = MAX_WIDTH;
    if(window.innerWidth > _maxWidth){
        if(hrac?.nastavenia.leftHanded==0){
            _left = (window.innerWidth- _maxWidth)*0.5;
        }
        if(hrac?.nastavenia.leftHanded==1){
            _left = window.innerWidth- _maxWidth - 15;
        }
        if(hrac?.nastavenia.leftHanded==2){
            _left = 5;
        }
    }
    if(_options.max_width ){
        if(_options.max_width > MAX_WIDTH){
            _options.max_width = MAX_WIDTH;
        }
        _maxWidth = _options.max_width;
        //toto tu je moje majstrovske dielo...
        if(window.innerWidth>406){
            if(window.innerWidth<420){
                _left = (window.innerWidth- (_maxWidth-(405-window.innerWidth)*0.25))*0.5;
            }else{
                _left = (window.innerWidth- (_maxWidth+10))*0.5;
            }
        }else{
            _left = (window.innerWidth- (_maxWidth-10))*0.5;
        }
    }

    _out+='<div class="popup_okno '+(_options.at_bottom?'bottom-popup-shadow':'popup-shadow')+'" style="'+_style+_maxHeight+'max-width:'+_maxWidth+'px; left:'+_left+'px;" id="'+_options.kde+'_okno">';
    if(!_options.noclose){
        let _closeFunFull = 'PlaySound(\'dialog_close\');ClosePopup(\''+_options.kde+'\');'+(_options.closefun?_options.closefun:'')+';'+(_options.avoid_quick_tool_close?'':'QuitQuickTool();')+(_options.kde=='bottomGridMenuPopup'?'last_grid_clicked=null;':'')+' TryShowStarterPackPopup();TryShowSpecialOfferPopup();';
        if(_options.close_question){
            _closeFunFull='if(!AreYouSure(0,\''+_options.close_question[0]+'\',\'\',\''+_closeFunFull.replaceAll('\'','\\\'')+'\',\''+_options.close_question[1]+'\')){return false;}';
        }
        const imgUrl = getAssetUrl(`public/images/ui/close_but.png?v=${PIC_VERSION}`);
        _out+='<div style="'+(hrac?.nastavenia.leftHanded==2?'left:15px;':'')+'" class="popup-okno-upper-minibut" onclick="'+_closeFunFull+'"><img src="'+ imgUrl +'"></div>';
        // _out+='<div style="'+(hrac.nastavenia.leftHanded==2?'left:15px;':'')+'" class="popup-okno-upper-minibut" onclick="ClosePopup(\''+_options.kde+'\');'+(_options.closefun?_options.closefun:'')+';QuitQuickTool();'+(_options.kde=='bottomGridMenuPopup'?'last_grid_clicked=null;':'')+'">X</div>';
        //showTownUpgradeZone=false;
    }else{
        popupsClosable[_options.kde]=false;
    }

    //isActionGridView
    // BUILDING_EYE_LVL
    if(hrac){
        const img1Url = getAssetUrl(`public/images/ui/view_${!isActionGridView ? 'grid' : 'line'}.png?v=${PIC_VERSION}`);
        const img2Url = getAssetUrl(`public/images/ui/eye_${toggleShowHiddableBuildings ? 'open' : 'closed'}.png?v=${PIC_VERSION}`);
        const img3Url = getAssetUrl(`public/images/ui/eye_${isResearchedVisible ? 'open' : 'closed'}.png?v=${PIC_VERSION}`);
        const img4Url = getAssetUrl(`public/images/pinpoint.png?v=${PIC_VERSION}`);

        _out+='<div style="'+(hrac.nastavenia.leftHanded==2?'left:65px;':'')+''+(_options.showGridToggleButton?'':'display:none;')+'" class="popup-okno-upper-minibut pos-2" onclick="PlayTap();ToggleGridView();" id="gridViewButDiv"><img src="'+ img1Url +'"></div>';
        _out+='<div style="'+(hrac.nastavenia.leftHanded==2?'left:115px;':'right:115px;')+''+(_options.showAllBuildings?'':'display:none;')+'" class="'+(HasLevel(BUILDING_EYE_LVL) && !hrac.alreadyPulsedEyeBuilding?'pulsableBig':'')+' popup-okno-upper-minibut pos-2" onclick="PlayTap();ToggleAllBuildingsVisibility();" id="eyeButDiv2"><img src="'+ img2Url +'"></div>'; //eye_closed
        _out+='<div style="'+(hrac.nastavenia.leftHanded==2?'left:65px;':'')+''+(_options.showEyeButton?'':'display:none;')+'" class="popup-okno-upper-minibut pos-2" onclick="PlayTap();ToggleUpgradesVisibility();" id="eyeButDiv"><img src="' + img3Url + '"></div>';
        if(HasLevel(PINPOINT_LVL) && last_grid_clicked && last_grid_clicked.grid){
            _out+='<div style="'+(hrac.nastavenia.leftHanded==2?'left:165px;':'right:165px;')+''+(_options.is_building_popup?'':'display:none;')+'" class=" popup-okno-upper-minibut" onclick="PlayTap();OpenPinPointMenu();" id="pinpoint_menu_but"><img src="' + img4Url + '"></div>'; //eye_closed
        }
        
    }
    _out+='<div class="popup_okno_in"  style="'+(_options.style?_options.style:'')+_maxHeightIN+_fontSize+'" id="'+_options.kde+'_okno_in">';
    
    
    let _outIN='<div id="'+_options.kde+'_uber_container" class="uber_container">';
    
    if(_options.uber_left){
        _outIN+='<div class="popup_uber_left">'+_options.uber_left+'</div>';
    }
    if(_options.label){
        _outIN+='<div class="popup_uber_center">'+_options.label+'</div>';
    }
    if(_options.label2){
        _outIN+='<div class="popup_uber_center_small">'+_options.label2+'</div>';
    }
    if(_options.uber_right){
        _outIN+='<div class="popup_uber_right">'+_options.uber_right+'</div>';
    }
    _outIN+='</div>';
    _outIN+='<div ontouchstart="autoScrollIndex++;" class="popup_okno_in_2 '+(_options.class?_options.class:'')+'"  id="'+_options.kde+'_okno_in_2" '+(_options.onscrollfun?' onscroll="'+_options.onscrollfun+'"':'')+' style="'+(_options.disable_scroll?'overflow-y:hidden;':'')+_maxHeightIN2+_fontSize+(_options.bg_image?'background-image:'+_options.bg_image+';':'')+(_options.bg_color?'background-color:'+_options.bg_color+';':'')+(_options.centerised?'text-align:center;':'')+'">';
    

    // if(_options.label){
    //     _outIN+='<div class="popup_label">'+_options.label+'</div>';
    // }
    if(_options.centerised)_outIN+=BR;
    _outIN+=_options.text;
    if(_options.centerised)_outIN+=BRBR;
    _outIN+='</div>';

    if(_options.refresh_id && gebi(_options.refresh_id)){
        SetInner(_options.kde+'_okno_in',_outIN);
        if(_options.showGridToggleButton){
            ShowJS('gridViewButDiv');
        }else{
            HideDiv('gridViewButDiv');
        }
        if(_options.showAllBuildings){
            ShowJS('eyeButDiv2');
        }else{
            HideDiv('eyeButDiv2');
        }
        // return false;
    }else{
        _out+=_outIN;
        _out+='</div>';//koniec popup okno
        _out+='</div>'; //koniec celeho popupu
        SetInner('popups_'+_options.kde,_out);
    }
    if(_options.setScrollTop){
        gebi(_options.kde+'_okno_in_2').style.overflowY='auto';
        gebi(_options.kde+'_okno_in_2').scrollTop=_options.setScrollTop;
    }
    popupsInTicks[_options.kde] = '';
    popupsInTicksPart2[_options.kde] = _options;
    return _options.kde;
}

function DoPopupWithOptionsInTickPart2(_options){
    let _rect = GetRect(_options.kde+'_okno');
    if(_options.top_y){
        SetY(_options.kde+'_okno',_options.top_y);
    }else if(_options.at_bottom){
        if(_rect){
            SetY(_options.kde+'_okno',GetDesiredBottomPopupY(_rect,_options.at_bottom));
        }
    }else{
        // SetY(_options.kde+'_okno',100);
        // console.log(GetWindowHeight()*0.5-_rect.height*0.5-50)
        if(_rect){
            SetY(_options.kde+'_okno',Math.max(40+TOP_PADDING,GetWindowHeight()*0.5-_rect.height*0.5-50));
        }
    }
    SetOpacity(_options.kde+'_sed',1);
    SetOpacity(_options.kde+'_okno',1);
    if(_rect && _rect.height < 300){
        if(gebi(_options.kde+'_okno_in_2')){
            gebi(_options.kde+'_okno_in_2').style.overflowX='hidden';
            gebi(_options.kde+'_okno_in_2').style.overflowY='auto';
        }
    }else{
        setTimeout(() => {
            if(gebi(_options.kde+'_okno_in_2')){
                gebi(_options.kde+'_okno_in_2').style.overflowX='hidden';
                gebi(_options.kde+'_okno_in_2').style.overflowY='auto';
            }
        }, 500);
    }
    
    let _found=false;
    if( gebi(_options.kde+'_uber_container') ){
        let _rectU = GetRect(_options.kde+'_uber_container');
        if(_rectU && gebi(_options.kde+'_okno_in_2').style.maxHeight && _rectU.height > 50){
            _found=true;
            gebi(_options.kde+'_okno_in_2').style.maxHeight= popupsMaxHeightIN2[_options.kde].split('- 0px').join(' - '+Mro(_rectU.height)+'px');
        }
    }
    
    if(!_found)
    setTimeout(() => {
        let _rectU = GetRect(_options.kde+'_uber_container');
        if(_rectU && gebi(_options.kde+'_okno_in_2').style.maxHeight && _rectU.height > 50){
            // console.log(popupsMaxHeightIN2[_options.kde],popupsMaxHeightIN2[_options.kde].split('- 0px').join(' - '+Mro(_rectU.height)+'px'));
            gebi(_options.kde+'_okno_in_2').style.maxHeight= popupsMaxHeightIN2[_options.kde].split('- 0px').join(' - '+Mro(_rectU.height)+'px');
        }
    }, 60);

    popupsInTicksPart2[_options.kde] = '';

}

function RefreshBottomPopupPosition(){
    SetY('bottomGridMenuPopup_okno',GetDesiredBottomPopupY(GetRect('bottomGridMenuPopup_okno'),2));
    SetY('bottomMenuPopup_okno',GetDesiredBottomPopupY(GetRect('bottomMenuPopup_okno')));
}


function GetDesiredBottomPopupY(_rect,_ktore){    
    if(!_rect) return 0;
    return GetWindowHeight() - _rect.height-(_ktore==2 ?-40+40:BOTTOM_PADDING+15+GetBottomMenuSize()); //has level 7 kvoli tutorialu
}

function CloseBasicPopup(){
    ClosePopup('basicPopup');
}

function CloseSecondaryPopup(){
    ClosePopup('secondaryPopup');
}

function CloseAYSPopup(){
    ClosePopup('areYouSurePopup');
}

const popupsVisible={};
const popupsClosable={};
const popupsMaxHeightIN2={};
function ClosePopup(_kde){
    popupsInTicks[_kde]='';
    RemoveBlinkingStructures();
    HideDiv('okno_addon');
    materialAddonVisible=0;
    CloseDiv(_kde);
    popupsVisible[_kde]=false;
}











function InfoInlineBut(_textFun,_label){
    return ClickSpan(_label?_label:'(?)','InfoPopup(\''+_textFun+'\');');
}

function InfoPopup(_textFun){
    return InfoPopupText(eval(_textFun));
}
function DoInfoPopupWithOptions(_text,_label,_options){
    if(!_options){
        _options={};
    }
    _options.text = _text;
    _options.label = _label;
    _options.kde = 'infoPopup';
    return DoPopupWithOptions(_options);

}
function InfoPopupText(_text,_centerised){
    //refactor na DoInfoPopupWithOptions
    _options={};
    _options.text = _text;
    _options.label = GetText('Information');
    _options.kde = 'infoPopup';
    if(_centerised){
        _options.centerised=1;
    }
    return DoPopupWithOptions(_options);
}





function PleaseWaitPopup(){ //TODO rework nech to nieje basic popup
    _options={};
    _options.text = BR+GetTextCAPS('LOADING')+BR+Bold(SpanID('loading_dots',''));
    _options.label = GetText('Please wait');
    _options.kde = 'loadingPopup';
    _options.centerised = 1;
    _options.noclose = 1;
    _options.max_width = GetSmallerPopupWidth();
    
    DoPopupWithOptions(_options);
}

function ErrorPopup(_text,_label){
    _options={};
    _options.text = _text;
    _options.label = _label;
    _options.kde = 'errorPopup';
    _options.centerised = 1;
    _options.noclose = 1;
    _options.max_width = GetSmallerPopupWidth();
    
    DoPopupWithOptions(_options);
}

function CloseLoadingPopup(){
    ClosePopup('loadingPopup');
}

function WarningPopup(_text){
    DoBasicPopup(_text,GetText('we are sorry'),{centerised:1, max_width: GetSmallerPopupWidth()});
    return false;
}

function LowLevelPopup(_lvl){
    if(_lvl>=999){
        return false;
    }
    let _text = GetText('You require main {att1} level to be level {att2}',[GetBunkerTownLabel(),_lvl])+BRBR+ColorSpan('grey',GetText('Player level = main {att1} level',GetBunkerTownLabel()));
    DoBasicPopup(_text,GetText('Low player level'),{centerised:1, max_width: GetSmallerPopupWidth()});
    return false;
}

function GetSmallerPopupWidth(_minus,_minWidth){
    if(!_minus)_minus=200;
    if(!_minWidth)_minWidth=300;
    if(_minWidth > window.innerWidth){
        _minWidth = window.innerWidth;
    }
    let _w = window.innerWidth-_minus;
    if(_w>550)_w=550;
    if(_w < _minWidth) _w=_minWidth;
    return _w;
}


let autoScrollTO=0;
let autoScrollIndex=0;
function StartAnimatedScrollTo(_id,_y,_speed){
    autoScrollIndex++;
    AnimatedScrollTo(_id,_y,_speed,autoScrollIndex);
}
function AnimatedScrollTo(_id,_y,_speed,_index){
    if(_index<autoScrollIndex){
        return false;
    }
    clearTimeout(autoScrollTO);
    if(gebi(_id)){

        if(gebi(_id).scrollTop < _y){
            gebi(_id).scrollTop+=_speed;
            if(gebi(_id).scrollTop > _y){
                gebi(_id).scrollTop = _y;
            }else{
                setTimeout(() => {
                    AnimatedScrollTo(_id,_y,_speed,_index);
                }, 30);
            }
        }
        if(gebi(_id).scrollTop > _y){
            gebi(_id).scrollTop-=_speed;
            if(gebi(_id).scrollTop < _y){
                gebi(_id).scrollTop = _y;
            }else{
                setTimeout(() => {
                    AnimatedScrollTo(_id,_y,_speed,_index);
                }, 30);
            }
        }
    }
}

const SPC='&nbsp;&nbsp;&nbsp;';
const BR='<br>';
const HR='<hr>';
const HRp='<hr class="hr-in-popup">';
const BRBR='<br><br>';
const picVersion=1;


function GetWindowHeight(){
    // if(window.IsJablko && IsJablko() || IS_FLUTTER){
    //     return window.screen.height;
    // }
    // if(document.documentElement){
    //     return document.documentElement.clientHeight;
    // }
    if(!IS_FLUTTER){
        return document.documentElement.clientHeight;
    }
    return window.innerHeight;
}
function gebi(_id){
    return document.getElementById(_id);
}

function SetInner(_id,_text){
    if(gebi(_id)){
        gebi(_id).innerHTML= _text;
    }
}

function SetOpacity(_id,_sila){
    if(gebi(_id)){
        gebi(_id).style.opacity= _sila;
    }
}

function SetY(_id,_y){
    if(gebi(_id)){
        gebi(_id).style.top= _y+'px';
    }
}

function SetWidth(_id,_h){
    if(gebi(_id)){
        gebi(_id).style.width= _h+'px';
    }
}

function SetMaxWidth(_id,_h){
    if(gebi(_id)){
        gebi(_id).style.maxWidth= _h+'px';
    }
}

function SetHeight(_id,_h){
    if(gebi(_id)){
        gebi(_id).style.height= _h+'px';
    }
}

function SetScale(_id,_s){
    if(gebi(_id)){
        gebi(_id).style.scale = _s;
    }
}


function SetX(_id,_x){
    if(gebi(_id)){
        gebi(_id).style.left= _x+'px';
    }
}
function SetXY(_id,_x,_y){
    if(gebi(_id)){
        gebi(_id).style.left= _x+'px';
        gebi(_id).style.top= _y+'px';
    }
}

function ShowJS(_id){
    if(gebi(_id)){
        gebi(_id).style.display='block';
    }
}
function ShowJSi(_id){
    if(gebi(_id)){
        gebi(_id).style.display='inline-block';
    }
}

function HideDiv(_id){
    if(gebi(_id)){
        gebi(_id).style.display='none';
    }
}


function GV(_id){
    if(gebi(_id)) return gebi(_id).value;
    return '';
}
function GVI(_id){
    return gebi(_id).value*1;
}

function GCH(_id){
    return gebi(_id).checked?1:0;
}


function Mro(_c){
    return Math.round(_c);
}

function Mfl(_c){
    return Math.floor(_c);
}
function Mce(_c){
    return Math.ceil(_c);
}

function Bold(_t){
    return '<b>'+_t+'</b>';
}
function Center(_t, _class){
    return '<center '+(_class?'class="'+_class+'"':'')+'>'+_t+'</center>';
}

function FSize(_c,_t){
    return '<span style="font-size:'+_c+'px;">'+_t+'</span>';
}

function PCisloB(_c){
    if(!_c){
        return 0;
    }
    return Bold(_c.toLocaleString('en-US', 0));
}
function PCislo(_c,_spanId){
    if(_spanId){
        let _out='';
        if(!_c){
            _out=0;
        }else{
            _out=_c.toLocaleString('en-US', 0);
        }
        return '<span id="'+_spanId+'">'+_out+'</span>';
    }
    
    if(!_c){
        return 0;
    }
    return _c.toLocaleString('en-US', 0);
}

function SpanID(_id,_t){
    return '<span id="'+_id+'">'+_t+'</span>';
}
function ColorSpan(_c,_t){
    return '<span style="color:'+_c+';">'+_t+'</span>';
}
function RedSpan(_t){
    return '<span class="red-span">'+_t+'</span>';
}
function LabelSpan(_t){
    return '<span class="label-span">'+_t+'</span>';
}

function PlusMinusSpan(_colorPlus,_colorMinus,_cislo,_abs,_ZERO){
    if(!_ZERO)_ZERO=0;
    if(_cislo>_ZERO && _colorPlus) return ColorSpan(_colorPlus,PCislo(_cislo));
    if(_cislo<_ZERO && _colorMinus) return ColorSpan(_colorMinus,PCislo(_abs?Math.abs(_cislo):_cislo));
    return PCislo(_cislo);
}



function GetRect(_id){
    if(gebi(_id)){
        return gebi(_id).getBoundingClientRect();
    } 
    return null
}

function DivClass(_class,_out){
    return '<div class="'+_class+'">'+_out+'</div>';
}

function SpanClass(_class,_out){
    return '<span class="'+_class+'">'+_out+'</span>';
}

function Button(_label,_fun,_options){
    if(!_options)_options={};
    let _bottomLineColor='';
    if(_options.color){
        if(_options.color=='red'){
            _options.super_button='red';
            _bottomLineColor=' style="background-color:#ff6464;"';
        }
        if(_options.color=='blue'){
            _options.super_button='purple';
            _bottomLineColor=' style="background-color:#B751BC;"';
        }
        if(_options.color=='green'){
            _options.super_button='green';
            _bottomLineColor=' style="background-color:var(--lime);"';
        }
        if(_options.color=='teal'){
            _options.super_button='teal';
            _bottomLineColor=' style="background-color:#81cdcd;"';
        }
    }
    if(!_options.class)_options.class='';
    if(!_options.super_button){
        _options.super_button = 'basic';
    }
    if(_options.super_button){
        _bottomLineColor = '';
        _options.class+=' super_button';
        _label = '<div class="supper_button_inner">'+_label+'</div>';
    }
    let _style='';
    if(_options.width){
        _style+='min-width:'+_options.width+'px;';
    }
    let _but = '<div class="button '+(_options.class?_options.class:'')+'" style="'+_style+'" onclick="'+(_options.sound==1?'PlayTap();':(_options.sound?'PlaySound(\''+_options.sound+'\');':''))+_fun+'"  >'+_label+(_bottomLineColor?'<div class="button-bottom-line" '+_bottomLineColor+'></div>':'')+'</div>';
    if(_options.super_button){
        _but = '<div class="supper_button_wrapper super-button-'+_options.super_button+'">'+_but+'</div>';
    }
    if(_options.link){
        return '<a target="_blank" href="'+_options.link+'">'+_but+'</a>';
    }
    return _but;
}

function ClickSpan(_label,_fun,_options){
    if(!_options)_options={};
    return '<span onclick="'+(_options.sound==1?'PlayTap();':(_options.sound?'PlaySound(\''+_options.sound+'\');':''))+_fun+'" class="click-span '+(_options.class?_options.class:'')+' " >'+_label+'</span>';
}


function CloseDiv(_kde){
    if(anticlickerNow){
        return false;
    }
    SetInner(_kde,'');
}





let myDocument = null;

/* View in fullscreen */
function OpenFullscreen() {
    if (document.documentElement.webkitEnterFullScreen) {
    document.documentElement.webkitEnterFullScreen(); /* iphone? */
  } else if (document.documentElement.requestFullscreen) {
    document.documentElement.requestFullscreen();
  } else if (document.documentElement.webkitRequestFullscreen) { /* Safari */
    document.documentElement.webkitRequestFullscreen();
  } else if (document.documentElement.msRequestFullscreen) { /* IE11 */
    document.documentElement.msRequestFullscreen();
  } 
  OnResize();
}

function AddClass(_id,_class){
    if(gebi(_id))gebi(_id).classList.add(_class);
}
function RemoveClass(_id,_class){
    if(gebi(_id))gebi(_id).classList.remove(_class);
}

function RemoveGridFromArray(_array, _grid){
    return _array.filter(_g=>_g && (_g.x!=_grid.x || _g.y!=_grid.y));
}

addEventListener("fullscreenchange", (event) => {
    OnResize();
});

/* Close fullscreen */
function closeFullscreen() {
  if (document.exitFullscreen) {
    document.exitFullscreen();
  } else if (document.webkitExitFullscreen) { /* Safari */
    document.webkitExitFullscreen();
  } else if (document.msExitFullscreen) { /* IE11 */
    document.msExitFullscreen();
  }
}

function PNumMega(_num,_ceil){
    if(_num>10000000){
        if(_ceil){
            return PCislo(Mce(_num / 1000000))+GetText('M<!-- short for million-->');
        }else{
            return PCislo(Mfl(_num / 1000000))+GetText('M<!-- short for million-->');

        }
    }else{
        return PCislo(_num);
    }
}

function ArraySum(_pole){
    return _pole.reduce((a, b) => a + b, 0);
}

function GetRandomItemFromArray(_array){
    return _array[Math.floor(Math.random()*_array.length)];
}
function PullRandomItemFromArray(_array){
    if(!_array.length) return null;
    let _randomIndex = Math.floor(Math.random()*_array.length);
    let _item = _array[_randomIndex];
    _array.splice(_randomIndex,1);
    return _item;
}

function MinMax(_min,_max,_c){
    return Math.min(_max,Math.max(_min,_c));
}

function MyRand(_od,_do){
    return _od+Math.round(Math.random()*(_do-_od));
}
function MyRand100(_sanca){
    if(_sanca<0) return 0;
    if(_sanca>100) return 1;
    return (Math.random()*100)<=_sanca?1:0;
}

function RandomZnamienko(){
    return Math.random()<=0.5?1:-1;
}

function CopyArray(_pole){
    return JSON.parse(JSON.stringify(_pole));
}






function PMat(_pocet,_type,_size,_clickable){
    let _typeStr='unknown';
    if(_type==1 || _type=='gold'){
        _typeStr='gold';
    }
    if(_type==2 || _type=='gems'){
        _typeStr='gems';
    }
    if(_type==3 || _type=='lumber'){
        _typeStr='lumber';
    }
    if(_type==4 || _type=='food'){
        _typeStr='food';
    }
    if(_type==5 || _type=='rocks'){
        _typeStr='rocks';
    }
    // console.log('_type',_type)
    if(_type==6 || _type=='super_clickers'){
        _typeStr='super_clickers';
    }
    if(_type==7 || _type=='electricity'){
        _typeStr='electricity';
    }
    if(_type==8 || _type=='clay'){
        _typeStr='clay';
    }
    if(_type==9 || _type=='steel'){
        _typeStr='steel';
    }
    if(_type==10 || _type=='chips'){
        _typeStr='chips';
    }
    if(_type==11 || _type=='oil'){
        _typeStr='oil';
    }
    if(_type==12 || _type=='population'){
        _typeStr='population';
    }
    if(_type==13 || _type=='ad_skippers'){
        _typeStr='ad_skippers';
    }
    if(_type==14 || _type=='restoration_strength'){
        _typeStr='restoration_strength';
    }
    if(_type==15 || _type=='book_page' || _type=='book'){
        _typeStr='book_page';
    }
    if(_type==16 || _type=='event_fish'){
        // if(!_size)_size=18;
        // _size=Math.round(_size*1.3);
        _typeStr='event_fish';
    }
    if(_type==17 || _type=='event_fish_perc_bonus'){
        _typeStr='fish_christmas_2';
    }
    let _type_fullstring=MatIcon(_typeStr,_size);

    if(_type==17 || _type=='event_fish_perc_bonus'){_type_fullstring=' %'+_type_fullstring;}
    
    return '<span style="white-space: nowrap;" '+(_clickable?'onclick="ExplainResource(\''+_typeStr+'\','+_pocet+');"':'')+'>'+PCislo(Math.round(_pocet))+''+_type_fullstring+'</span> ';
}

function ExplainResource(_typeStr,_pocet){
    let _out='';
    if(localeString["res_desc_"+_typeStr]){
        _out+=MatIcon(_typeStr,32);
        _out+=MatIcon(_typeStr,32);
        _out+=MatIcon(_typeStr,32)+BRBR;
        if(_typeStr=='food'){
            _out+=GetText("res_desc_"+_typeStr,Mro(100*GetFoodSpoilPerc(1)));
        }else{
            _out+=GetText("res_desc_"+_typeStr);
        }
    }
    if(_typeStr=='restoration_strength'){
        _out+=MatIcon(_typeStr,32);
        _out+=MatIcon(_typeStr,32);
        _out+=MatIcon(_typeStr,32)+BRBR;
        _out+= GetText('restoration_info');
    }
    if(_typeStr=='electricity'){
        _out+=MatIcon(_typeStr,32);
        _out+=MatIcon(_typeStr,32);
        _out+=MatIcon(_typeStr,32)+BRBR;
        _out+= GetText('Permanent power boost');
    }
    if(_typeStr=='event_fish'){
        _out+=MatIcon(_typeStr,32);
        _out+=MatIcon(_typeStr,32);
        _out+=MatIcon(_typeStr,32)+BRBR;
        _out+= GetText('Holiday Fish can be used on upgrades or to unlock more Event Ship slots.');
    }
    if(_typeStr=='event_fish_perc_bonus' || _typeStr=="fish_christmas_2"){
        _out+= GetText('Bonus on Holiday Fish income. Your Event Ships will catch more fish every {att1} seconds.',INCOME_SEC);
    }
    if(_out){
        InfoPopupText(_out,GetText('Resource Info'));   
    }else{
        console.error('resource explanation does not exist',_typeStr)
    }
    
}

function MatIcon(_typeStr,_size){
    if(!_size)_size=20;
    return GetIconImage(_typeStr,_size,Math.round(_size/6));
}

function PMats(_pocty,_size,_prefix,_join,_clickable){
    if(_join==undefined)_join=SPC;
    if(!_size)_size=18;
    let _outA=[];
    for(let _i in _pocty){
        if(_pocty[_i]>0){
            _outA.push((_prefix?_prefix:'')+PMat(_pocty[_i],_i,_size,_clickable));
        }
    }
    if(!_outA.length)return GetText('FREE');
    return _outA.join(_join);
}





function SimplifiedNumber(_c){
    if(_c>1000000000){
        _c=Math.round(_c / 100000000) * 100000000;
    }else if(_c>100000000){
        _c=Math.round(_c / 10000000) * 10000000;
    }else if(_c>10000000){
        _c=Math.round(_c / 1000000) * 1000000;
    }else if(_c>1000000){
        _c=Math.round(_c / 100000) * 100000;
    }else if(_c>10000){
        _c=Math.round(_c / 1000) * 1000;
    }else if(_c>1000){
        _c=Math.round(_c / 100) * 100;
    }
    return _c;
}

let errors=[];
window.onerror = (event, source, lineno, colno, error) => {
    try{
        errors.push([event, source, lineno, colno, error]);
        safeCaptureGameEvent('js_error', { lineno: lineno, colno:colno, error:error, source:source, event:event });
    }catch(e){

    }

};

const durations=[];
function PrintDur(_time,_short){
    _time=Mro(_time/1000);
    let _days = Mfl(_time/86400);
    let _hours = Mfl(_time/3600);
    let _minutes = Mfl((_time%3600)/60);
    let _seconds = _time%60;
    let _out='';
    if(_days>1){

        _out+=_days+(_days>5?GetText('days 5 and more'):GetText('days 234'))+' ';
        if(_short){
            return _out;
        }
        _out+=(_hours-_days*24)+GetText('h<!-- first letter of hours -->')+' ';
    }else{
        if(_hours){
            _out+=_hours+GetText('h<!-- first letter of hours -->')+' ';
        }
    }
    if(_minutes || _hours){
        _out+=(_minutes<10 && _hours?'0':'')+_minutes+GetText('m<!-- first letter of minutes -->')+' ';
    }
    _out+=(_seconds<10?'0':'')+_seconds+GetText('s<!-- first letter of seconds -->');
    
    return _out;
}
function PDur(_id,_time,_fun,_short){
    // if(testVersion)_time=9999000
    if(_time < 0 ){
        return '---';
    }
    _time=Math.round(_time);
    durations[_id] = {
        date: _time + new Date()*1,
        fun: _fun,
        fun_fired:false,
        short:_short,
    }
    return '<span id="'+_id+'" class="my_time">'+PrintDur(_time,_short)+'</span>';
}
function PDurDate(_id,_time,_fun,_short){
    return PDur(_id,_time - new Date()*1,_fun,_short);
}

function ProcessDurations(){
    for(let _id in durations){
        let _dur = durations[_id];
        let _time = _dur.date - new Date()*1;
        if(gebi(_id)){
            SetInner(_id,PrintDur(_time,_dur.short));
        }
        if(_time<=0  && !_dur.fun_fired){
            _dur.fun_fired=true;
            _dur.fun();
        }
    }
}
function IsLessThanHour(_time){
    if((_time - new Date()*1)*0.001 < 60*60){
        return true;
    }else{
        return false;
    }
}

function EnableMouse(){
    gebi('body').style.pointerEvents = 'auto';
}

function DisableMouse(){
    gebi('body').style.pointerEvents = 'none';
}


function GetDateMonth(_dateNum){
    if(_dateNum){
        let _dateJS=new Date(_dateNum); 
        return _dateJS.getMonth()+1;
    }
    let _dateJS=new Date(serverTime); 
    return _dateJS.getMonth()+1;
}

function GetDateDay(_dateNum){
    if(_dateNum){
        let _dateJS=new Date(_dateNum); 
        return _dateJS.getDate();
    }
    let _dateJS=new Date(serverTime); 
    return _dateJS.getDate();
}
let zoomScale=1;
let zoomScale2=1;
let MAX_ZOOM_IN=2;
function GetDefaultCamera(){
    return {
        x:0,
        y:0,
        grabbed:0,
        traveled_now:0,
        grab:{
            x:0,
            y:0,
        },
        tapGrid:{
            x:0,
            y:0,
        },
        tapScreen:{
            x:0,
            y:0,
        },
        zoom:1,
    }
}

function InitCamera(){
    if(!zoomScale)zoomScale=1;
    zoomScale2=zoomScale;
    camera=GetDefaultCamera();
    camera.x = Mro(-window.innerWidth*0.5 + zoomScale*gridSirka*0.5);
    camera.y = Mro(-GetWindowHeight()*0.5 + zoomScale*gridSirka*0.5);
    camera.grabbed=false;
}


let camera=null;



let last_action_time=0;
let last_action_tick=0;
let atLeastTouchedOnce=false;
let prev_touch_pos=[0,0];
let last_touch_pos=[0,0];
let same_last_touch_post=0;
function MouseDown(_eve,_lenScreenPos){ //ontouchstart
    if(!atLeastTouchedOnce){
        sendToFlutter('{\r\n  "event": "firstTimeClicked"\r\n}');
        atLeastTouchedOnce=true;
    }

    if(!everythingLoaded){
        return false;
    }
    let _touches=[];
    if(_eve.touches){
        _touches=_eve.touches;
    }else{
        _touches[0]={clientX: _eve.clientX,clientY: _eve.clientY};
    }
    
    camera.tapScreen.x = _touches[0].clientX;
    camera.tapScreen.y = _touches[0].clientY;
    last_action_time = hrac.last_action = Date.now();
    last_action_tick = tickCount;
    if(_lenScreenPos){
        return false;
    }else{
        hrac.stats.total_clicks++;

    }

    camera.grab.x = camera.x + _touches[0].clientX;
    camera.grab.y = camera.y + _touches[0].clientY;
    camera.grabbed = _touches.length; 
    camera.traveled_now=0;
    camera.tapGrid.x = camera.x + _touches[0].clientX;
    camera.tapGrid.y = camera.y + _touches[0].clientY;
    autoTapperInitialDelay=0;
    prev_touch_pos = [last_touch_pos[0],last_touch_pos[1]];
    last_touch_pos = [_touches[0].clientX,_touches[0].clientY];
}


function MouseUp(_eve){
    if(_eve.touches){
        camera.grabbed = _eve.touches.length;
    }else{
        camera.grabbed=0;
    }
    // console.log(_eve.touches)
    // console.log(camera.tapGrid)
    if(camera.traveled_now<30){
        let _grid = GetGridOnMousePos();
        if(_grid){
            if(gebi('bottommenuspan')){
                CloseBottomMenu();
            }
            let _disableMenu = autoTapperInitialDelay>2000;
            if(_eve.touches && last_touch_pos){
                if(Math.abs(prev_touch_pos[0]-last_touch_pos[0])<1 && Math.abs(prev_touch_pos[1]-last_touch_pos[1])<1){
                    same_last_touch_post++;
                }else{
                    same_last_touch_post=0;
                }
            }
            if(same_last_touch_post<10){
                ClickGrid(_grid,_eve,_disableMenu);
            }
        }else{
            CloseGridMenu();
            CloseBottomMenu();
            AddFloatingTextToMousePos(GetText('Out of range!'),'orange');
        }
    }
    if(_eve.touches && _eve.touches.length<=1){
        firstFingerZoomDistance=0;
        zoomOnZoomstart=0;
        lastFingerZoomDistance=0;
        // console.error('zoom reset')
    }
    drawSingleFrame=1;
    autoTapPainting=false;
}

function TouchCanceled(_eve){
    if(_eve.touches){
        camera.grabbed = _eve.touches.length;
    }else{
        camera.grabbed=0;
    }
}

let firstFingerZoomDistance=0;
let lastFingerZoomDistance=0;
let lastTouchesLength=0;
let zoomOnZoomstart=0;
let drawSingleFrame=false;

function MouseMove(_eve){
    if(camera.grabbed){
        drawSingleFrame=true;
        let _touches = [];

        if(_eve.touches){
            for(let _t of _eve.touches){
                _touches.push(_t)
            }
        }else{
            _touches[0]={clientX: _eve.clientX,clientY: _eve.clientY};
        }
        // console.log(_touches)
        if(_eve.ctrlKey){
            _touches.push({
                clientX:window.innerWidth*0.5,
                clientY:GetWindowHeight()*0.5
            })

        }
        if(_touches.length!=lastTouchesLength){
            lastFingerZoomDistance=0;
            zoomOnZoomstart=0;
            firstFingerZoomDistance=0;
            MouseDown(_eve);
            if(lastTouchesLength>1 || _touches.length>1){
                camera.traveled_now=9999;
            }
        }

        if(autoTapPainting){
            if(zoomScale>=CLICKABLE_ZOOM){
                camera.tapGrid.x = camera.x + _touches[0].clientX;
                camera.tapGrid.y = camera.y + _touches[0].clientY;
                lastTouchesLength=_touches.length;
                return false;
            }
        }

        if(_touches.length>1){ //phone zoom
            let _dist = Math.sqrt(Math.pow(_touches[0].clientX-_touches[1].clientX,2)+Math.pow(_touches[0].clientY-_touches[1].clientY,2));
            if(lastFingerZoomDistance){
                if(!zoomOnZoomstart)zoomOnZoomstart=zoomScale2;
                if(!firstFingerZoomDistance)firstFingerZoomDistance=lastFingerZoomDistance;

                let _povodnyScale=zoomScale2;
                let _priemerX = (_touches[0].clientX+_touches[1].clientX)*0.5;
                let _priemerY = (_touches[0].clientY+_touches[1].clientY)*0.5;

                if(firstFingerZoomDistance && zoomOnZoomstart){
                    let _zoomedNow = lastFingerZoomDistance/firstFingerZoomDistance;
                    zoomScale2 = _zoomedNow * zoomOnZoomstart;
                    if(zoomScale2>MAX_ZOOM_IN)zoomScale2=MAX_ZOOM_IN;

                    if(zoomScale2<GetMaxZoomOut())zoomScale2=GetMaxZoomOut();
                    camera.desiredzoom=0;
                    // console.log(_zoomedNow,zoomScale2,zoomOnZoomstart)
                }


                let _distX=(_priemerX+camera.x);
                let _distY=(_priemerY+camera.y);
                let _zmena = zoomScale2/_povodnyScale ;
                let _distX_n=(_priemerX+camera.x)*_zmena;
                let _distY_n=(_priemerY+camera.y)*_zmena;
                 
                camera.zoom = zoomScale2;
                camera.x -= _distX-_distX_n;
                camera.y -= _distY-_distY_n;
            
            }
            lastFingerZoomDistance = _dist;
            camera.traveled_now+=100;
        }else{ //phone pan
            if(lastFingerZoomDistance){
                lastFingerZoomDistance=0;
                MouseDown(_eve);
                return false;
            }

            openGridMenuInTime=0;
            camera.tapGrid.x = camera.x + _touches[0].clientX;
            camera.tapGrid.y = camera.y + _touches[0].clientY;
            camera.tapScreen.x = _touches[0].clientX;
            camera.tapScreen.y = _touches[0].clientY;
            
            let _posun_x=_touches[0].clientX;
            let _posun_y=_touches[0].clientY;
            let _traveled_x = Math.abs( camera.grab.x - _posun_x - camera.x);
            let _traveled_y = Math.abs( camera.grab.y - _posun_y - camera.y);
            if(camera.traveled_now>15){
                camera.x = camera.grab.x - _posun_x;
                camera.y = camera.grab.y - _posun_y;
            }
            camera.traveled_now+=_traveled_x+_traveled_y;
            
            // GetGridInScreenCenter();
        }

        lastTouchesLength=_touches.length;
        // console.log(camera.traveled_now)
        // console.log(camera.x,camera.grab.x,_eve.touches[0].clientX,_eve)
        // console.log(camera.x,camera.grab.x - _eve.touches[0].clientX,camera.grab.x,_eve.touches[0].clientX)
        // camera.x = camera.grab.x - _eve.touches[0].clientX;
        // camera.y = camera.y+1;
        // camera.grab.y = _eve.touches[0].clientY;
            
        // needsNewRender=true;
    }
}
// let needsNewRender=true;


function GetGridOnMousePos(){
    if(zoomScale2<CLICKABLE_ZOOM){
        let __x = Mfl(camera.tapGrid.x / (gridSirka*zoomScale2));
        let __y = Mfl(camera.tapGrid.y / (gridSirka*zoomScale2));
        MapClearTest(__x,__y);
        // if(!enabledSaving){
        //     return GetGridData(__x,__y,1);
        // }
        // for(let _x=__x-_r;_x<=__x+_r;_x++){
        //     for(let _y=__y-_r;_y<=__y+_r;_y++){
        //         if(GetGridData(_x,_y) && GetGridData(_x,_y).gem_mine && GetGridData(_x,_y).gem_mine){
        //             if(!IsGemHarvested(GetGridData(_x,_y))){
        //                 return GetGridData(_x,_y);
        //             }
        //         }
        //     }
        // }
        if(drawCollectableGems)
        for(let _g of drawCollectableGems){
            if(GetRealDistance(_g.x,_g.y,__x,__y) < (0.5 / zoomScale2)){
                let _found=hrac.harvested_gems_today.find(g=>g.x==_g.x && g.y==_g.y);
                if(!_found){
                    return GetGridData(_g.x,_g.y);
                }
            }
        }


        let _r=2;
        for(let _x=__x-_r;_x<=__x+_r;_x++){
            for(let _y=__y-_r;_y<=__y+_r;_y++){
                if(GetGridData(_x,_y) && GetGridData(_x,_y).mesto){
                    return GetGridData(_x,_y);
                }
            }
        }
        return GetGridData(__x,__y);

    }else{
        let __x = Mfl(camera.tapGrid.x / (gridSirka*zoomScale2));
        let __y = Mfl(camera.tapGrid.y / (gridSirka*zoomScale2));
        MapClearTest(__x,__y);
        return GetGridData(__x,__y);
    }

    // console.log(_X)
}

function ProcessCamera(){
    if(camera.desiredzoom && camera.desiredzoom != zoomScale2){

        povodnyScale=zoomScale2;
        if(camera.desiredzoom < zoomScale2){
            let _change = camera.desiredzoom-zoomScale2;
            if(_change<-0.01)_change=-0.01;
            zoomScale2+=_change;
        }else{
            let _change = camera.desiredzoom-zoomScale2;
            if(_change>0.01)_change=0.01;
            zoomScale2+=_change;
        }
        let _distX=(window.innerWidth*0.5+camera.x);
        let _distY=(GetWindowHeight()*0.5+camera.y);
        let _zmena = zoomScale2/povodnyScale ;
        let _distX_n=(window.innerWidth*0.5+camera.x)*_zmena;
        let _distY_n=(GetWindowHeight()*0.5+camera.y)*_zmena;
        
        camera.x -= _distX-_distX_n;
        camera.y -= _distY-_distY_n;
        camera.zoom = zoomScale2;
    }

}

function GetMaxZoomOut(){
    let _maxZoomOut=0.01;
    // if(IsJablko()){
    //     return 0.30001;
    // }
    if(!HasLevel(15)){
        _maxZoomOut = 0.1;
    }
    // if(testVersion){
    //     _maxZoomOut = 0.005;
    // }
    if(!HasLevel(8)){
        _maxZoomOut = 0.3;
    }
    if(!HasLevel(15) && hrac.special_places_radar?.length){
        _maxZoomOut = 0.10;
    }else{

        if(!HasLevel(4)){
            _maxZoomOut = 0.40;
        }
        if(!HasLevel(2)){
            _maxZoomOut = 0.55;
        }
    }
    if(IsJablko() && visitingFriend){
        _maxZoomOut = OPTIMISED_ZOOM+0.001;
    }

    return _maxZoomOut;
}

function MouseWheel(_eve){
    povodnyScale=zoomScale2;
    if(_eve.deltaY>0.1){
        if(zoomScale2<0.2){
            zoomScale2-=0.02;        
        }else{
            zoomScale2-=0.1;        
        }

        if(zoomScale2<GetMaxZoomOut())zoomScale2=GetMaxZoomOut();

    }else{
        if(zoomScale2<0.2){
            zoomScale2+=0.02;        
        }else{
            zoomScale2+=0.1;        
        }
        if(zoomScale2>MAX_ZOOM_IN)zoomScale2=MAX_ZOOM_IN;
    }
    let _distX=(_eve.clientX+camera.x);
    let _distY=(_eve.clientY+camera.y);
    let _zmena = zoomScale2/povodnyScale ;
    let _distX_n=(_eve.clientX+camera.x)*_zmena;
    let _distY_n=(_eve.clientY+camera.y)*_zmena;
    camera.desiredzoom=0;
    drawSingleFrame=true;
    
    camera.zoom = zoomScale2;
    camera.x -= _distX-_distX_n
    camera.y -= _distY-_distY_n

}


function ScrollToXY(_x,_y,_zoom,_close){
    if(_close){
        CloseBasicPopup();
    }
    drawSingleFrame=true;
    if(!_zoom)_zoom=1;
    camera.zoom = zoomScale2=_zoom;
    let _gridSirka = gridSirka*_zoom;
    camera.x = Mro(-window.innerWidth*0.5 + _gridSirka*0.5 + _x*_gridSirka);
    camera.y = Mro(-GetWindowHeight()*0.5 + _gridSirka*0.5 + (_y+2)*_gridSirka);
}

function ScrollToGrid(_grid,_zoom,_close){
    ScrollToXY(_grid.x,_grid.y,_zoom,_close);
}

function ScrollToMainCity(_zoom,_close){
    if(_close){
        CloseBottomMenu();
    }
    ScrollToXY(0,-2,_zoom?_zoom:1,_close);
    // zoomScale2=1;
    // camera.x = Mro(-window.innerWidth*0.5 + gridSirka*0.5);
    // camera.y = Mro(-GetWindowHeight()*0.5 + gridSirka*0.5);

}
let headerHeight=35;
let test1=0;

function ShowHeader(){
    ShowJS('header');
    RefreshHeader();
    RefreshAdButton();
    RefreshPackageY();
}

function RefreshHeader(){
    if(!hrac ){
        HideDiv('header');
        SetY('header_shadow',0);
        return '';
    }
    let _out='';
    // _out+='<div style="height:'+TOP_PADDING+'px;"></div>';

    // console.log('header');
    // console.time('header');
    
    if(visitingFriend && loadedUserData){
        _out+='<div class="header-flex" style="justify-content:center;height:45px;" onclick="ReturnHomeToMyTown(1);" >';
        _out += '<div style="text-align:center; font-size:16px; line-height:13px;padding-top:7px;box-sizing: border-box;">'+GetText3('Visiting: ')+Bold(loadedUserData.name?loadedUserData.name:'Anonymous')+BR+FSize(10,'('+GetText("view radius depends on your cleared area")+')')+'</div>';
        _out+='</div>';
        SetInner('header',_out);
        SetHeight('header',40);
        SetY('header_shadow',39);
        return false;
    }
    
    if(hrac.nastavenia.show_pollution_in_header){
        SetHeight('header',70);
        headerHeight = 70;//Math.max(60,_headerRect.height);
    }else{
        SetHeight('header',35);
        headerHeight = 35;//Math.max(35,_headerRect.height);

    }

    // let _headerRect = GetRect('header');
    // if(_headerRect){
    // }

    // _out+='Score: '+PCislo(hrac.enviro);
    // _out+='ale hotnoasdfsa ad';

    _out+='<div class="header-flex" style="'+(!enabledSaving?'background-color:red;':'')+'font-size:'+(HasLevel(20)?12:13)+'px;" >';
        if(AreGemsVisible()){
            _out+='<div ontouchend="PlayTap();ClickBottomMenu(GEM_BOTTOM_ID);">';
            _out+=HeaderGemIcon()+PCislo(hrac.gems);
            _out+='</div>';
        }

        _out+='<div ontouchend="test1++;if(test1>5)if(!IS_FLUTTER)OpenFullscreen();">';
        if(!HasLevel(3)){
            _out+=GetText3('Your gold: ');
            
        }
        if(hrac.gold>999999999 && window.innerWidth < 400){
            _out+=HeaderGoldIcon()+FSize(10,PCislo(hrac.gold,'header_gold_span'));
        }else{
            _out+=HeaderGoldIcon()+PCislo(hrac.gold,'header_gold_span');
        }
        _out+='</div>';

        if(KnowsSuperClickers()){
            _out+='<div ontouchend="PlayTap();ToggleSuperClickers();">';
            if(superClickersInUse){
                _out+='<div class="inner_border"></div>';
            }
            // _out+=PMat(hrac.super_clickers,'super_clickers');
            _out+=HeaderIcon('super_clickers')+PCislo(hrac.super_clickers,'header_superclickers_span');
            _out+='</div>';
        }

        _out+='<div>';
        //(1-GetPolutionPerc()) * 
        _out+='<span ontouchend="PlayTap();lastActiveHracTabIndex=4;ClickBottomMenu(1,1);allGoodsVisible=false;" style="'+(GetPolutionPerc()?'color:var(--light-color-2);':'')+'">'+SPC+(GetIncomeMultiplier()>1?ColorSpan('var(--green)',GetIncomeMultiplier()+'x'):(!HasLevel(5)?GetText('Income:')+' +':'+'))+PCislo(Mro(hrac.income_with_polution))+HeaderGoldIcon()+'/'+INCOME_SEC+'s';
        if(GetPolutionPerc()){
            _out+=Bold(ColorSpan('var(--red)','!!!'));
        }
        _out+='</span>';
        _out+='</div>';
    

        if(hrac.foodIncome || hrac.lumberIncome){
            _out+='<div ontouchend="PlayTap();ToggleAllGoods();" '+(!hrac.goods_overview_clicked?'class="pulsableBig"':'')+' >';
            _out+=GetIconImage('goods',26,3);
            if(allGoodsVisible){
                _out+='<div class="inner_border inner_border-light"></div>';
            }
            if(IsMultiIncomeReady()){
                _out+=SpanClass('pulsableBig2',ColorSpan('var(--lime)','*'));
            }
            _out+='</div>';
        }else{
            if(KnowsSuperClickers()){

            }else{
                _out+='<div>';
                _out+=GetText2('Population')+PMat(hrac.population,12);
                _out+='</div>';
            }
        }
    _out+='</div>';
    
    if(hrac.nastavenia.show_pollution_in_header){
        _out+='<div class="header-flex" '+(!enabledSaving?'style="background-color:red;"':'')+'>';

        if(GetEventType()==1){
                _out+='<div class="header-event-fish" '+(hrac.buildings.event_ship==0?'style="background:#7ac6c4;color:var(--dark-2);font-weight:bold;"':'')+' onclick="DoFishEventPopup();PlayTap();">';
                _out+=''+PMat(hrac.event_fish,'event_fish',26);
                _out+='</div>';
            }else{
                _out+='<div>';
                _out+=''+PMat(hrac.population,12);
                _out+='</div>';
            }
            
            if(HasLevel(REQ_ELECTRICITY_LEVEL)){
                _out+='<div style="'+(hrac.electricity<0?'background-color:var(--red);':'')+'" '+(hrac.electricity<0?'onclick="PlayTap();PollutionExplanationPopup();"':'')+'>';
                _out+=(hrac.electricity>=0?GetText2('Extra power'):GetText2('Power shortage'))+PCislo(hrac.electricity)+ElectricityIcon(20);
                // _out+=(hrac.electricity>=0?GetText2('Extra power'):GetText2('Power shortage'))+PlusMinusSpan('','var(--light-color)',hrac.electricity,1)+ElectricityIcon(20);
                _out+='</div>';
            }
            
            _out+='<div style="'+(hrac.polution>GetBasePollution()?'background-color:var(--red);':'')+'" '+(hrac.polution>GetBasePollution()?'onclick="PlayTap();PollutionExplanationPopup();"':'')+'>';
            _out+=(HasLevel(27)?'':GetText2('Pollution'))+PCislo(hrac.polution)+PollutionIcon(20);
            // _out+=ColorSpan(GetPolutionColor(hrac.polution,GetBasePollution()),GetText2('Pollution'))+PlusMinusSpan('var(--light-color)','',hrac.polution,0,GetBasePollution())+PollutionIcon();
            _out+='</div>';
            
            // _out+='<div>'+SPC;
            // _out+='</div>';

        _out+='</div>';
    }



    if(hrac.enhanced_clicker){
        _out+='<div style="top:'+(49+headerHeight-35)+'px;" class="super-clicker-in-use-div enhanced-clicker" id="enhanced_clickers_div">'+GetEnhanceClickerInner();
        _out+='</div>';
    }else
    if(superClickersInUse){
        _out+='<div style="top:'+(49+headerHeight-35)+'px;" class="super-clicker-in-use-div" ontouchend="PlayTap();ToggleSuperClickers();return false;">'+GetIconImage('super_clickers',20)+' '+GetTextCAPS('SUPER CLICKER ACTIVE');
        _out+='</div>';
    }else
    if(highlightedTileKey){
        _out+='<div style="top:'+(49+headerHeight-35)+'px; background-color:black;" class="super-clicker-in-use-div" ontouchend="PlayTap();highlightedTileKey=null;highlightedTileKey2=null;RefreshHeader();return false;">'+GetText('Turn off highlight');
        _out+='</div>';
    }
        
    if(hrac.electricity!=lastHeaderElectricity && hrac.electricity<0 && lastHeaderElectricity>=0){
        if(!hrac.nastavenia.show_pollution_in_header){
            allGoodsVisible=1;
        }
    }
    lastHeaderElectricity=hrac.electricity;
    if(hrac.polution!=lastHeaderPolution && hrac.polution>GetBasePollution() && lastHeaderPolution<=GetBasePollution()){
        if(!hrac.nastavenia.show_pollution_in_header){
            allGoodsVisible=1;
        }
    }
    lastHeaderPolution=hrac.polution;

    if(allGoodsVisible && (hrac.foodIncome || hrac.lumberIncome)){
        _out+='<div id="goodsOverview" style="top:'+(53+headerHeight-35)+'px;" >';
        _out+='<div style="position:relative;" ontouchend="PlayTap();ShowMaxFoodPopup();">'+'<div class="absolute-left-info" style="top:5px;">i</div>';
        _out+=GetText2('Food')+PCislo(hrac.food)+' / '+PMat(GetMaxFoodStorage(),'food')+'+-'+BR;
        _out+='</div>';
        if(hrac.lumberIncome>0)_out+=GetText2('Lumber')+PCislo(hrac.lumber)+' / '+PMat(GetMaxLumberStorage(),'lumber')+BR;
        if(hrac.rocksIncome>0)_out+=GetText2('Stone')+PCislo(hrac.rocks)+' / '+PMat(GetMaxRocksStorage(),'rocks')+BR;
        if(hrac.steelIncome>0)_out+=GetText2('Steel')+PCislo(hrac.steel)+' / '+PMat(GetMaxSteelStorage(),'steel')+BR;
        if(hrac.chipsIncome>0)_out+=GetText2('Micro-chips')+PCislo(hrac.chips)+' / '+PMat(GetMaxChipsStorage(),'chips')+BR;
        if(hrac.oilIncome>0)_out+=GetText2('Oil')+PCislo(hrac.oil)+' / '+PMat(GetMaxOilStorage(),'oil')+BR;
        if(HasLevel(11) && hrac.nastavenia.show_clay)_out+=GetTextC1('Clay')+': '+PMat(hrac.clay,'clay')+BR;

        

        _out+=GetIncomeMultiplierButton('teal',1);
        _out+=HR+GetText2('Population')+PMat(hrac.population,12)+BR;
        if(ExploredPollution()){
            _out+='<div onclick="PlayTap();PollutionExplanationPopup();" style="position:relative;'+(hrac.polution>GetBasePollution()?'background-color:var(--red)':'')+'">'+FLOATING_LEFT_INFO;
            _out+=GetText2('Pollution')+PCislo(hrac.polution)+PollutionIcon(20);
            //ColorSpan(GetPolutionColor(hrac.polution,GetBasePollution()),
            _out+='</div>';
            _out+='<div onclick="PlayTap();PollutionExplanationPopup();" style="'+(hrac.electricity<0?'background-color:var(--red)':'')+'">';
            _out+=(hrac.electricity>=0?GetText2('Extra power'):GetText2('Power shortage'))+PCislo(hrac.electricity)+ElectricityIcon(20);
            _out+='</div>';
        }
        if(GetRestorationStrength()>1){
            _out+='<div onclick="PlayTap();RestorationInfoPopup();" class="restoration_header_div" >'+FLOATING_LEFT_INFO;
            if(GetPlayerUpgradeValue(19)){
                _out+=GetText2('Restoration strength')+GetPlayerUpgradeValue(19)+'x '+PCislo(Mro(GetRestorationStrength()/GetPlayerUpgradeValue(19)))+RestorationIcon();
            }else{
                _out+=GetText2('Restoration strength')+PCislo(GetRestorationStrength())+RestorationIcon();
            }
            _out+='</div>';
        }

        _out+='</div>';
    }

    


    SetInner('header',_out);
    gebi('pre_header').style.height = TOP_PADDING+'px';
    SetY('left_boxes_container',TOP_PADDING+25);
    SetY('header',TOP_PADDING);
    if(gamePaused || !hrac?.nastavenia.showIncome){
        SetY('header_shadow',headerHeight+TOP_PADDING-1);
    }else{
        SetY('header_shadow',headerHeight+TOP_PADDING+GetIncomeBarHeight()+3);
    }
    SetInner('food_storage_gridmenu',PMat(hrac.food,4));
    SetInner('food_spoil_gridmenu',PMat(Mro(hrac.food*GetFoodSpoilPerc(1)),4));
    SetInner('lumber_storage_gridmenu',PMat(hrac.lumber,3));
    SetInner('rock_storage_gridmenu',PMat(hrac.rocks,5));
    SetInner('steel_storage_gridmenu',PMat(hrac.steel,9));
    SetInner('chips_storage_gridmenu',PMat(hrac.chips,10));
    SetInner('oil_storage_gridmenu',PMat(hrac.oil,11));
    AdjustQuickToolY();
    AdjustFPSwindow();
    // console.timeEnd('header');

}


const FLOATING_LEFT_INFO='<div class="absolute-left-info">i</div>';

let lastHeaderElectricity=-9999999;
let lastHeaderPolution=9999999;

function HeaderGoldIcon(){
    return GetIconImage('gold',HasLevel(20)?15:20,3);
}
function HeaderGemIcon(){
    return GetIconImage('gems',HasLevel(20)?15:20,3);
}
function HeaderIcon(_name){
    return GetIconImage(_name,HasLevel(20)?15:20,3);
}


let allGoodsVisible=false;
function ToggleAllGoods(){
    allGoodsVisible = !allGoodsVisible;
    hrac.goods_overview_clicked++;
    RefreshHeader();
    // console.log(allGoodsVisible)
}

let pocetRendrowMimoHru=0;
let enabledNeighbourCircle=1;
let CHEST_TICK_TIME=6000;
let drawCollectableGems=null;
let myDimensions={
    x_min:0,
    x_max:0,
    y_min:0,
    y_max:0,
}
let gridSirka=70;
let pocetDrawnGridov=0;
let _isZoomOut=false;
let _isZoomOutMultiplier=1;
let OPTIM_GRID_STEP=20; //len grafika
const OPTIM_GRID_STEP_JABLKO=60;
const OPTIMISED_ZOOM=0.3;
const OPTIMISED_SCALE=OPTIMISED_ZOOM;//to iste?
const OPTIMISED_GRID_SIRKA=(gridSirka*OPTIMISED_SCALE);
const GRID_JABLKO_SIZE=70;//70 je def 
const GRID_JABLKO_KOEF=gridSirka / GRID_JABLKO_SIZE;
// const BLOCK_RESIZE_SIZE=150;
// const BLOCK_RESIZE_SIZE_SCALE=(OPTIM_GRID_STEP*gridSirka*OPTIMISED_ZOOM) / BLOCK_RESIZE_SIZE;

let useCPU=true;
let canvas = null;
let ctx=null;
let ctx_optimised=null;
let canvas_optimised=null;


async function InitCanvas(_forceCPU,_alpha){
    canvas = gebi('myCanvas');
    myDocument = document.documentElement;

    useCPU = (IS_FLUTTER || window.innerWidth<1100) && !IsJablko();
    if(_forceCPU!==undefined){
        useCPU=_forceCPU;
    }
    
    ctx=canvas.getContext('2d', { alpha: _alpha, willReadFrequently: useCPU ? true:false });//, willReadFrequently: false
    
    if(_forceCPU===undefined){
        if(IsSecondCanvasAllowed()){
            if(!canvas_optimised){
                canvas_optimised = new OffscreenCanvas(OPTIMISED_GRID_SIRKA * (BOUNDERIES_LEFT+BOUNDERIES_RIGHT + 1),OPTIMISED_GRID_SIRKA * (BOUNDERIES_UP+BOUNDERIES_DOWN + 1));
                // ctx_optimised=canvas_optimised.getContext('2d', { alpha: false, willReadFrequently: IS_FLUTTER || window.innerWidth<1100? true:false });
                ctx_optimised=canvas_optimised.getContext('2d', { alpha: false, willReadFrequently: useCPU? true:false });
                ctx_optimised.webkitImageSmoothingEnabled = false;
                ctx_optimised.mozImageSmoothingEnabled = false;
                ctx_optimised.imageSmoothingEnabled = false;
            }
        }
    }
    ctx.webkitImageSmoothingEnabled = false;
    ctx.mozImageSmoothingEnabled = false;
    ctx.imageSmoothingEnabled = false;

    await OnResize();
}

let enabledDraw=true;
let experimentalDraw=false;
let camera_X=0;
let camera_X2=0;
let camera_Y=0;
let camera_Y2=0;
let totalDeltaTime=0;
let lastMilisecTime0=0;
let requestAnimationFrameTO = 0;
let anyPopupstartedTicks=0;

async function Draw(_raf,_doScreenshot){

    for(let _kde in popupsInTicksPart2){
        if(popupsInTicksPart2[_kde]){
            anyPopupstartedTicks+=5;
            DoPopupWithOptionsInTickPart2(popupsInTicksPart2[_kde]);
            popupsInTicksPart2[_kde]='';
        }
    }

    for(let _kde in popupsInTicks){
        if(popupsInTicks[_kde]){
            anyPopupstartedTicks+=5;
            DoPopupWithOptionsInTick(popupsInTicks[_kde]);
            popupsInTicks[_kde]='';
        }
    }

    if(GetDetails()<=2){

        const _currentTime = performance.now();
        const _deltaTime = _currentTime - lastMilisecTime0;
        lastMilisecTime0 = _currentTime;
        let _skipTicks=1;
        if(GetDetails()<=1){
            _skipTicks=3;
        }
        
        totalDeltaTime+=_deltaTime;
        if(totalDeltaTime > SEC_FRACTAL*_skipTicks ){
            totalDeltaTime=0;
        }else{
            if(_raf)
            if(!_doScreenshot){
                // if(!gameInBackground)
                {
                    requestAnimationFrame(Draw);
                    return false;
                }
            }
        }
    }



    // let _doScreenshot=false;
    let _zoomScale = camera.zoom;
    let _OPTIMISED = _zoomScale < OPTIMISED_ZOOM;
    let _gridSirka = gridSirka;
    let _1pixelSpace=0;// je to ze o kolko presahuje tile do druheho tilu, 0 vobec
    if(_zoomScale<0.87)_1pixelSpace=2;
    let _1pixelLine=2;
    let _camera_x = camera.x;
    let _camera_y = camera.y;
    let _posun_x = _camera_x;
    let _posun_y = _camera_y;
    
    camera_X = Math.floor(_camera_x/(_gridSirka*_zoomScale))-1;
    camera_Y = Math.floor(_camera_y/(_gridSirka*_zoomScale))-1;
    camera_X2 = Math.ceil((_camera_x+window.innerWidth)/(_gridSirka*_zoomScale))+1;
    camera_Y2 = Math.ceil((_camera_y+GetWindowHeight())/(_gridSirka*_zoomScale))+1;
    if(_OPTIMISED){
        camera_X = Mfl((Math.floor(_camera_x/(_gridSirka*_zoomScale))-1)/OPTIM_GRID_STEP)*OPTIM_GRID_STEP;
        if(camera_X<-GetBoundery(4))camera_X=-(Mce(GetBoundery(4)/OPTIM_GRID_STEP))*OPTIM_GRID_STEP;
        camera_Y = Mfl((Math.floor(_camera_y/(_gridSirka*_zoomScale))-1)/OPTIM_GRID_STEP)*OPTIM_GRID_STEP;
        if(camera_Y<-GetBoundery(8))camera_Y=-(Mce(GetBoundery(8)/OPTIM_GRID_STEP))*OPTIM_GRID_STEP;
        camera_X2 = Mce((Math.ceil((_camera_x+window.innerWidth)/(_gridSirka*_zoomScale))+1)/OPTIM_GRID_STEP)*OPTIM_GRID_STEP;
        if(camera_X2>GetBoundery(6))camera_X2=GetBoundery(6);
        camera_Y2 = Mce((Math.ceil((_camera_y+GetWindowHeight())/(_gridSirka*_zoomScale))+1)/OPTIM_GRID_STEP)*OPTIM_GRID_STEP;
        if(camera_Y2>GetBoundery(2))camera_Y2=GetBoundery(2);
    }
    let _isMiddleZoomout = _zoomScale<0.21;
    
    // ctx.reset();
    
    if(_doScreenshot){
        _OPTIMISED=false;
        camera_X=-BOUNDERIES_LEFT;
        camera_X2=BOUNDERIES_RIGHT;
        camera_Y=-BOUNDERIES_UP;
        camera_Y2=BOUNDERIES_DOWN;
        _isMiddleZoomout=false;

        for(let _x=camera_X;_x<camera_X2;_x++)if(myGridData[_x])
        for(let _y=camera_Y;_y<camera_Y2;_y++)if(myGridData[_x][_y]){
            if(myDimensions.x_min > _x)myDimensions.x_min = _x;
            if(myDimensions.x_max < _x)myDimensions.x_max = _x;
            if(myDimensions.y_min > _y)myDimensions.y_min = _y;
            if(myDimensions.y_max < _y)myDimensions.y_max = _y;
        }
        
        if(myDimensions.x_max-myDimensions.x_min > 85){
            myDimensions.y_max+=15;
        }

        if(myDimensions.x_max-myDimensions.x_min < 40){
            _zoomScale=0.5;
        }else{
            _zoomScale=0.2;
        }
        canvas.width = (myDimensions.x_max - myDimensions.x_min + 1)*_gridSirka*_zoomScale;
        canvas.height = (myDimensions.y_max - myDimensions.y_min + 1)*_gridSirka*_zoomScale;
        // console.log(canvas.width,canvas.height);
    }
    // _1pixelSpace = 1/_zoomScale;
    let _step = _OPTIMISED ? OPTIM_GRID_STEP : 1;
    if(_OPTIMISED && IsJablko()){
        let optimisedBlocksInThisTick=0;
        // const _currentTime = performance.now();
        for(let _x=camera_X;_x<camera_X2;_x+=_step)if(myGridData[_x]){
            for(let _y=camera_Y;_y<camera_Y2;_y+=_step){
                if(optimisedBlocks[_x]&&optimisedBlocks[_x][_y]){
                    if(!optimisedBlocks[_x][_y].ready){ //|| !optimisedBlocks[_x][_y].imageBitMap.width || !optimisedBlocks[_x][_y].imageBitMap
                        let _wasOptimised = await OptimizeBlock(_x*1,_y*1,0,0,_zoomScale);
                        if(_wasOptimised){
                            optimisedBlocksInThisTick++;
                        }
                    }
                }
            }
        }
        if(optimisedBlocksInThisTick){
            // const _currentTime2 = performance.now();
            // console.log('test',_currentTime2-_currentTime)
            // ctx.resetTransform();
            // ctx.beginPath();
            // ctx.fillStyle = 'red';
            // ctx.fillRect(0, 0, canvas.width, canvas.height);
            // requestAnimationFrame(Draw);
            // return false;
        }
    }
    

    //-----------------------------------------------------------------------------------------------------------

    // if(!enabledDraw){
    //     return false;
    // }

    // if(experimentalDraw){
    //     if(!drawSingleFrame){
    //         DrawIncome(_doScreenshot);
    //         return false;
    //     }
    //     drawSingleFrame=false;
    // }

    ctx.resetTransform();
    ctx.lineWidth = 1;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    ctx.beginPath();
    ctx.fillStyle = '#000000';
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // let _gridSirkaZ = (gridSirka) * _zoomScale;
    // let _posun_x = Math.round(_camera_x / _gridSirkaZ)*_gridSirkaZ;
    // let _posun_y = Math.round(camera.y / _gridSirkaZ)*_gridSirkaZ;

    if(_doScreenshot){
        ctx.translate(-myDimensions.x_min*_gridSirka*_zoomScale, -myDimensions.y_min*_gridSirka*_zoomScale);
    }else{
        ctx.translate(-_posun_x, -_posun_y);
    }
    ctx.scale(_zoomScale, _zoomScale);
    pocetDrawnGridov=0;
    _isZoomOut=_zoomScale<0.10;
    if(OPTIMISED_ZOOM){ //neskor odstranit
        _isZoomOut=false;
    }

    _isZoomOutMultiplier=1;
    // drawCollectableGems=[];

    
    if(hrac.stats.clears>150){
        DrawApoMegaCities();
    }
    
    ctx.globalAlpha = 1;
    if(_OPTIMISED && IsSecondCanvasAllowed()){
        ctx_optimised.resetTransform();
        ctx_optimised.scale(OPTIMISED_SCALE, OPTIMISED_SCALE);
        ctx_optimised.translate(_gridSirka*BOUNDERIES_LEFT, _gridSirka*BOUNDERIES_UP);
        ctx_optimised.beginPath();
    }
    
    
    
    if(1){ //tu bol test ze posledne vykreslenu staticku cast rendroval bez prechadzania celeho pola, akoze nieje to zle, ale ani prevratne dobre, a treba doriesit kopec detailov
        
        try{
            let _extraSize=Math.ceil(1/_zoomScale);
            for(let _x=camera_X;_x<camera_X2;_x+=_step)if(myGridData[_x]){
                for(let _y=camera_Y;_y<camera_Y2;_y+=_step){
                    if(_OPTIMISED){
                        if(optimisedBlocks[_x]&&optimisedBlocks[_x][_y]){
                            if(!optimisedBlocks[_x][_y].ready){
                                if(!IsJablko()){
                                    OptimizeBlock(_x*1,_y*1,0,0,_zoomScale);
                                }
                            }

                            if(optimisedBlocks[_x][_y].ready){
                                if(optimisedBlocks[_x][_y].filled){
                                    pocetDrawnGridov++;
                                    if(IsSecondCanvasAllowed()){
                                        ctx.drawImage(canvas_optimised,BOUNDERIES_LEFT*OPTIMISED_GRID_SIRKA+OPTIMISED_GRID_SIRKA*_x, BOUNDERIES_UP*OPTIMISED_GRID_SIRKA +OPTIMISED_GRID_SIRKA*_y, OPTIMISED_GRID_SIRKA*OPTIM_GRID_STEP, OPTIMISED_GRID_SIRKA*OPTIM_GRID_STEP,
                                            _x*_gridSirka,_y*_gridSirka,_gridSirka*OPTIM_GRID_STEP+_extraSize,_gridSirka*OPTIM_GRID_STEP+_extraSize);
                                    }else{
                                        if(optimisedBlocks[_x][_y].imageBitMap){
                                            //BLOCK_RESIZE_SIZE
                                            ctx.drawImage(optimisedBlocks[_x][_y].imageBitMap,0, 0, Math.round(OPTIMISED_GRID_SIRKA*OPTIM_GRID_STEP), Math.round(OPTIMISED_GRID_SIRKA*OPTIM_GRID_STEP),
                                            Math.round(_x*_gridSirka),Math.round(_y*_gridSirka),Math.round(_gridSirka*OPTIM_GRID_STEP+_extraSize),Math.round(_gridSirka*OPTIM_GRID_STEP+_extraSize));
                                                // _x*_gridSirka,_y*_gridSirka,_gridSirka*OPTIM_GRID_STEP+_extraSize,_gridSirka*OPTIM_GRID_STEP+_extraSize);
                                            // ctx.drawImage(optimisedBlocks[0][0].imageBitMap,0, 0, OPTIMISED_GRID_SIRKA*OPTIM_GRID_STEP, OPTIMISED_GRID_SIRKA*OPTIM_GRID_STEP,
                                            // _x*_gridSirka,_y*_gridSirka,GRID_JABLKO_KOEF*_gridSirka*OPTIM_GRID_STEP+_extraSize,GRID_JABLKO_KOEF*_gridSirka*OPTIM_GRID_STEP+_extraSize);
                                            // ctx.drawImage(optimisedBlocks[_x][_y].imageBitMap,0, 0, OPTIMISED_GRID_SIRKA*OPTIM_GRID_STEP, OPTIMISED_GRID_SIRKA*OPTIM_GRID_STEP,
                                            //     _x*_gridSirka,_y*_gridSirka,(BLOCK_RESIZE_SIZE_SCALE)*_gridSirka*OPTIM_GRID_STEP+_extraSize,(BLOCK_RESIZE_SIZE_SCALE)*_gridSirka*OPTIM_GRID_STEP+_extraSize);
                                            //BLOCK_RESIZE_SIZE
                                                
                                        }
                                    }
                                }
                            }
                        }

                    }else{
                        DrawSingleGrid(ctx,myGridData[_x][_y],_gridSirka,_isMiddleZoomout,_doScreenshot,_OPTIMISED,_1pixelSpace,_1pixelLine,_zoomScale);
                    }
                }
            }else{
                myGridData[_x]={};
            }
        }catch(e){
            drawErrors++;
        }

        // createImageBitmap(canvas).then(function (result) {
        //     allBitMaps.screenRender = result;
        //     needsNewRender=false;
        // })
    }else{
        ctx.save();
        ctx.resetTransform();
        ctx.drawImage(allBitMaps.screenRender,0,0,window.innerWidth,GetWindowHeight());
        ctx.restore();
    }

    // if(_zoomScale<0.3)
    if(!_doScreenshot)
    {
        ctx.globalAlpha = 1;
        if(!visitingFriend)
        if(camera_X<=-BOUNDERIES_LEFT || camera_X2>=BOUNDERIES_RIGHT || camera_Y<=-BOUNDERIES_UP ||camera_Y2>=BOUNDERIES_DOWN){
            DrawRadius(ctx,0,0,[BOUNDERIES_LEFT,BOUNDERIES_RIGHT,BOUNDERIES_UP,BOUNDERIES_DOWN],'silver',_zoomScale); //border
        }
    }


    ctx.globalAlpha = 1;

    if(!visitingFriend)
    for(let _ch of chests)if(_ch.x >= camera_X+1 && _ch.y>=camera_Y+1 && _ch.x<camera_X2-1 && _ch.y<camera_Y2-1){
        let _grid=GetGridData(_ch.x,_ch.y);
        if(_grid){
            if(_grid.chest){
                if(_zoomScale<0.30 && GetPlayerUpgradeValue(35)){
                    if(_zoomScale<0.04 && hrac.nastavenia.hide_chests_on_big_zoom){
                        //nekreslime    
                    }else{

                        let __gridSirka=(gridSirka*0.55)/_zoomScale;
                        ctx.beginPath();
                        ctx.fillStyle = '#fc0';
                        ctx.fillRect(Mro(_ch.x*gridSirka-__gridSirka*0.5), Mro(_ch.y*gridSirka-__gridSirka*0.5), __gridSirka, __gridSirka);
                        MyDrawXY(ctx,"chest"+(_grid.water?'_water':''), _ch.x*gridSirka-Mro(__gridSirka*0.5), _ch.y*gridSirka-Mro(__gridSirka*0.5), __gridSirka, __gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }
            }
        }else{
            // ctx.fillStyle = '#f00';
            // ctx.fillRect(_ch.x*gridSirka, _ch.y*gridSirka, gridSirka, gridSirka);

            //TOTO TREBA REFACTORNUT
            if(!_doScreenshot)
            if(_ch.time%CHEST_TICK_TIME<1000){
                // console.log(_ch.time%CHEST_TICK_TIME)
                ctx.beginPath();
                ctx.lineWidth = 1/_zoomScale;
                ctx.strokeStyle = "#fc0";
                ctx.globalAlpha = (1000-(_ch.time%CHEST_TICK_TIME))/1000;

                ctx.arc(Mro((_ch.x+0.5)*gridSirka), Mro((_ch.y+0.5)*gridSirka), 20+(_ch.time%CHEST_TICK_TIME)*0.05*(1/_zoomScale)  , 0, 360);
                ctx.stroke();
                ctx.globalAlpha = 1;
            }
        }
    }


    if(hrac.stats.clears>150 && !visitingFriend){
        DrawNotConnectedApoMegaCities();
    }
    DrawMegaCities(camera_X,camera_Y,camera_X2,camera_Y2,_1pixelLine,_zoomScale);
    DrawTrains(ctx,camera_X,camera_Y,camera_X2,camera_Y2,_isMiddleZoomout,_doScreenshot,_OPTIMISED,_1pixelSpace,_1pixelLine,_zoomScale,_gridSirka);
    DrawPinPoints(ctx,camera_X,camera_Y,camera_X2,camera_Y2);

    ctx.globalAlpha = 1;
    if(_zoomScale<1.2)
    // if(IsTester())
    {
        DrawZones(_isZoomOut);
    }

    if(GetDetails()>1)
    for(let _gc of gridClouds){
        if(_gc.grid.x >= camera_X-1 && _gc.grid.y>=camera_Y-1 && _gc.grid.x<camera_X2+1 && _gc.grid.y<camera_Y2+1){
            if(_gc.strength < 1 && _zoomScale<=0.1){
                continue;
            }
            if(_gc.strength < 2 && _zoomScale<=0.03){
                continue;
            }

            let _g = _gc.grid;
            ctx.globalAlpha = _gc.alpha;
            ctx.translate((_g.x+0.5)*gridSirka+_gc.shift_x, (_g.y+0.5)*gridSirka+_gc.shift_y);
            let _rad = (_g.x+_g.y)*0.001+_gc.strength*1.5+(total_ticks*(4/_gc.strength))*0.002;
            ctx.rotate(_rad);
            MyDrawXY(ctx,'polution_cloud', Mro((-_gc.strength-0.5)*gridSirka), Mro((-_gc.strength-0.5)*gridSirka), Mro((_gc.strength*2+1)*gridSirka), Mro((_gc.strength*2+1)*gridSirka),0,0);
            ctx.rotate(-_rad);
            ctx.translate(-(_g.x+0.5)*gridSirka-_gc.shift_x, -(_g.y+0.5)*gridSirka-_gc.shift_y);
        }

    }



    // if(!_isZoomOut)
    // for(let _s of streets)if(_s){
    //     if(_s.x >= camera_X+1 && _s.y>=camera_Y+1 && _s.x<camera_X2-1 && _s.y<camera_Y2-1){
    //         let _x = _s.x;
    //         let _y = _s.y;
    //         if(!_s.grid.mesto && !_s.grid.vidiek && !_s.grid.shipyard){
    //             if(_s.grid.swamp){
    //                 if(_s.otocenie==11){
    //                     MyDrawXY(ctx,'street_t'+_s.type+'_11_bridge', _x*gridSirka, _y*gridSirka, gridSirka, gridSirka,_1pixelSpace,_1pixelLine);
    //                 }else{
    //                     MyDrawXY(ctx,'street_t'+_s.type+'_12_bridge', _x*gridSirka, _y*gridSirka, gridSirka, gridSirka,_1pixelSpace,_1pixelLine);
    //                 }
    //             }else if(_s.grid.river){
    //                 if(_s.grid.river==12){
    //                     MyDrawXY(ctx,'street_t'+_s.type+'_11_bridge', _x*gridSirka, _y*gridSirka, gridSirka, gridSirka,_1pixelSpace,_1pixelLine);
    //                 }else{
    //                     MyDrawXY(ctx,'street_t'+_s.type+'_12_bridge', _x*gridSirka, _y*gridSirka, gridSirka, gridSirka,_1pixelSpace,_1pixelLine);
    //                 }
    //             }else{
    //                 MyDrawXY(ctx,'street_t'+_s.type+'_'+_s.otocenie, _x*gridSirka, _y*gridSirka, gridSirka, gridSirka,_1pixelSpace,_1pixelLine);
    //             }
    //         }
    //     }
    // }


    
    if(!_doScreenshot)
    if(last_grid_clicked && last_grid_clicked.grid){
        let _g = last_grid_clicked.grid;
        ctx.save();

        ctx.translate(_g.x*gridSirka, _g.y*gridSirka);
        let _scale = 1;
        if(!experimentalDraw){

            _scale = 1 + 0.2*(Math.max(0,(last_grid_clicked_time-Date.now()+200)) / 200);
            if(_scale!=1){
                ctx.translate(+0.5*gridSirka, +0.5*gridSirka);
                ctx.scale(_scale, _scale);
                ctx.translate(-0.5*gridSirka, -0.5*gridSirka);
            }
        }

        if(last_grid_clicked.grid.mega_city){
            MyDrawXY(ctx,"selector", -_gridSirka-15,-_gridSirka-15,_gridSirka*3+2*15,_gridSirka*3+2*15,_1pixelSpace,_1pixelLine);
        }else{
            MyDrawXY(ctx,"selector",-6,-6, _gridSirka+9, _gridSirka+9,_1pixelSpace,_1pixelLine);
        }

        ctx.restore();
    }

    
    
    // if(!_isZoomOut){
    //     if(pollutionClouds.length){
    //         for(let _c of pollutionClouds){
    //             if(_c[3]){
    //                 ctx.globalAlpha = _c[3];
    //             }else{
    //                 ctx.globalAlpha = 1;
    //             }
    //             ctx.translate((_c[0]+0.5)*gridSirka, (_c[1]+0.5)*gridSirka);
    //             let _rad = (_c[0]+_c[1])*0.001+_c[2]*1.5+(total_ticks*(4/_c[2]))*0.0005;
    //             ctx.rotate(_rad);
    //             MyDrawXY(ctx,'polution_cloud', (-_c[2]-0.5)*gridSirka, (-_c[2]-0.5)*gridSirka, (_c[2]*2+1)*gridSirka, (_c[2]*2+1)*gridSirka,_1pixelSpace,_1pixelLine);
    //             ctx.rotate(-_rad);
    //             ctx.translate(-(_c[0]+0.5)*gridSirka, -(_c[1]+0.5)*gridSirka);
    //         }
    //     }
    // }

    DrawOmniPollutionClouds(ctx); //             ctx.resetTransform();
    ctx.globalAlpha = 1;
    
    ctx.lineWidth = 3;
    ctx.strokeStyle = "#32343b";
    ctx.font = (24/_zoomScale)+"px Encode Sans Semi Condensed";

    
    if(!_doScreenshot){
        if(_zoomScale>0.07 && _zoomScale<0.6 && hrac.nastavenia.bigTownNumbers){
            for(let _g of allTowns)if(!_g.mega_city && !_g.znecistenie){
                if(_g.x >= camera_X && _g.y>=camera_Y && _g.x<=camera_X2 && _g.y<=camera_Y2){    
                    DrawTownBigNumber(_g,_gridSirka,_1pixelSpace,_1pixelLine,_zoomScale);
                }
            }
        }
        if( _zoomScale<0.6 && hrac.nastavenia.bigTownNumbers){
            for(let _mc of MEGA_CITIES){
                DrawTownBigNumber(GetGridData(_mc.x,_mc.y),_gridSirka,_1pixelSpace,_1pixelLine,_zoomScale);
            }
        }
        if(!_isZoomOut && _zoomScale<=0.5 && last_grid_clicked && last_grid_clicked.grid && last_grid_clicked.grid.mesto && hrac.nastavenia.bigTownNumbers){
            DrawTownBigNumber(last_grid_clicked.grid,_gridSirka,_1pixelSpace,_1pixelLine,_zoomScale);
        }
    }


    DrawHighlitedTilesInZoomOut(ctx,_zoomScale,_gridSirka);
    

    if(!_isMiddleZoomout)
    for(let _be of spriteEffects){
        DrawSpriteEffect(_be);
    }

    DrawBlinkingStructure(ctx,_OPTIMISED,_doScreenshot,_1pixelSpace,_1pixelLine);

    if(hrac.stats.towns==2 && hrac.stats.streets<=2 && needsRoadTutorial){ //ze klikaj vedla mesta a stavaj cestu tutorial
        let _XY = [0,1];
        if(hrac.stats.streets==1){
            _XY = [0,2];
        }
        if(hrac.stats.streets==2){
            _XY = [0,3];
        }
        let _g = GetGridData(_XY[0],_XY[1]);
        if(_g && !_g.znecistenie){
            ctx.globalAlpha = Math.sin(tickCount*0.2)*0.5+0.5;
            MyDrawXY(ctx,'streets/street_t1_12',_XY[0]*gridSirka,_XY[1]*gridSirka,gridSirka,gridSirka,0,0);
        }
        
    }

    ctx.globalAlpha = 1;

    DrawCollectableGems();
    
    //tutorial
    if(hrac.claimedOfflineEarning)
    if(hrac.stats.clears>=2){
        if(!GetGridData(0,4)){
            MyDrawXY(ctx,'target', (0)*gridSirka, (4)*gridSirka, gridSirka, gridSirka,0,0);
        }
        if(!GetGridData(0,3)){
            MyDrawXY(ctx,'waypoint', (0+0.25)*gridSirka, (3)*gridSirka, gridSirka*0.5, gridSirka*0.5,0,0);
            MyDrawXY(ctx,'waypoint', (0+0.25)*gridSirka, Mfl((3+0.33)*gridSirka), gridSirka*0.5, gridSirka*0.5,0,0);
            MyDrawXY(ctx,'waypoint', (0+0.25)*gridSirka, Mfl((3+0.66)*gridSirka), gridSirka*0.5, gridSirka*0.5,0,0);
        }
    }



    if(!_isZoomOut){
        if(last_tanker_grid_clicked){
            DrawRadius(ctx,last_tanker_grid_clicked.x,last_tanker_grid_clicked.y,GetTankerRadius(),BUILDINGS_BY_KEYS['tanker'].grid_color,_zoomScale);
        }
        if(showTownUpgradeZone){
            if(lastTownGridSelectedRadiusGrid){
                DrawRadius(ctx,lastTownGridSelectedRadiusGrid.x,lastTownGridSelectedRadiusGrid.y,lastTownGridSelectedRadius,0,_zoomScale);
            }
        }

        if(last_grid_clicked && last_grid_clicked.grid){

            // if(last_grid_clicked.grid.saw_mill){
            //     ctx.lineWidth = 5;
            //     ctx.strokeStyle = "black"
            //     let _range = GetLumberMillRange();

            //     ctx.beginPath();
            //     ctx.rect((last_grid_clicked.x-_range)*gridSirka, (last_grid_clicked.y-_range)*gridSirka, gridSirka*(1+2*_range),gridSirka*(1+2*_range));
            //     ctx.stroke();

            //     ctx.lineWidth = 3;
            //     ctx.strokeStyle = "#aeffde";
            //     ctx.stroke();
            // }
        
            // if(last_grid_clicked.grid.farm){
            //     ctx.lineWidth = 5;
            //     ctx.strokeStyle = "black"
            //     let _range = GetFarmRange();

            //     ctx.beginPath();
            //     ctx.rect((last_grid_clicked.x-_range)*gridSirka, (last_grid_clicked.y-_range)*gridSirka, gridSirka*(1+2*_range),gridSirka*(1+2*_range));
            //     ctx.stroke();

            //     ctx.lineWidth = 3;
            //     ctx.strokeStyle = "#aeffde";
            //     ctx.stroke();
            // }

            if(showTownUpgradeZone){
                if(last_grid_clicked.grid.mesto==10){
                    DrawRadius(ctx,last_grid_clicked.grid.x,last_grid_clicked.grid.y,5,0,_zoomScale);
                }
                if(last_grid_clicked.grid.mesto==16){
                    DrawRadius(ctx,last_grid_clicked.grid.x,last_grid_clicked.grid.y,6,0,_zoomScale);
                }
                if(last_grid_clicked.grid.mesto==21){
                    DrawRadius(ctx,last_grid_clicked.grid.x,last_grid_clicked.grid.y,6,0,_zoomScale);
                }
            }
            if(last_grid_clicked.grid.mesto==44 && last_grid_clicked.grid.x==0 && last_grid_clicked.grid.y==0){
                DrawRadius(ctx,last_grid_clicked.grid.x,last_grid_clicked.grid.y,1,0,_zoomScale);
            }

            for(let _b of BUILDINGS){
                if(_b.draw_radius_rect && last_grid_clicked.grid[_b.grid_key]){
                    DrawRadius(ctx,last_grid_clicked.grid.x,last_grid_clicked.grid.y,_b.draw_radius_rect,_b.grid_color,_zoomScale);
                }
            }
            if(last_grid_clicked.grid.ship){
                DrawRadius(ctx,last_grid_clicked.grid.x,last_grid_clicked.grid.y,GetFishingRange(),0,_zoomScale);
            }
            if(HasLevel(COPPER_LEVEL_REQ))
            if(!GetPlayerUpgradeValue(46))
            if(last_grid_clicked.grid.chip_factory || (last_grid_clicked.grid.copper_field)){
                DrawRadius(ctx,last_grid_clicked.grid.x,last_grid_clicked.grid.y,GetChipFoundryDistance(),0,_zoomScale);
            }

        }
    }



    // if(!visitingFriend)
    // if(!_isZoomOut)
    // for(let _b of BOOKS)if(_b && !_b.used){
    //     if(IsBookRead(_b)){
    //         continue;
    //     }
    //     let _x = _b.x;
    //     let _y = _b.y;
        
    //     if(GetGridData(_x,_y)){
    //         if(_x >= camera_X && _y>=camera_Y && _x<camera_X2 && _y<camera_Y2){
    //             MyDrawXY(ctx,'book', (_x)*gridSirka, (_y)*gridSirka, gridSirka, gridSirka);
    //         }
    //         // break;
    //     }
    // }


    if(hrac.started_searching_mega_city && hrac.stats.pocet_mega_cities<=0){
        if(!GetGridData(MEGA_CITIES[1].x,MEGA_CITIES[1].y)){
            ctx.beginPath();
            let _h=16 / _zoomScale;
            ctx.font = _h+"px Arial";
            ctx.fillStyle = '#aeffde';
            let _txt = GetText('Mega-city');
            let _w = ctx.measureText(_txt).width
            ctx.fillText(_txt,(MEGA_CITIES[1].x*gridSirka)+5-_w*0.5+gridSirka*0.5, (MEGA_CITIES[1].y*gridSirka)+ gridSirka*0.5+5);
        }
    }
    if(hrac.tutorial.started_searching_second_mega_city && hrac.stats.pocet_mega_cities<=2){
        let MCI=2;
        // if(testVersion)MCI=3;
        for(let _pos of [MEGA_CITIES[MCI],{x:MEGA_CITIES[MCI].x-45,y:MEGA_CITIES[MCI].y-15},{x:MEGA_CITIES[MCI].x-25,y:MEGA_CITIES[MCI].y+30}]){
            if(!GetGridData(_pos.x,_pos.y)){
                ctx.beginPath();
                let _h=16 / _zoomScale;
                ctx.font = _h+"px Arial";
                ctx.fillStyle = '#aeffde';
                let _txt = GetText('Mega-city')+' ?';
                let _w = ctx.measureText(_txt).width
                ctx.fillText(_txt,(_pos.x*gridSirka)+5-_w*0.5+gridSirka*0.5, (_pos.y*gridSirka)+ gridSirka*0.5+5);
            }
        }
    }

    if(!_doScreenshot){
        DrawPings();
    }

    ctx.globalAlpha=1;
    if(!visitingFriend)
    for(let _spr of hrac.special_places_radar)if(_spr && !_spr.found){
        if(_spr.x >= camera_X && _spr.y>=camera_Y && _spr.x<camera_X2 && _spr.y<camera_Y2){
            let _sirka=Math.max(gridSirka,gridSirka/(_zoomScale*2));
            // MyDrawXY(ctx,'target', (_spr.x)*gridSirka, (_spr.y)*gridSirka, gridSirka, gridSirka);
            MyDrawXY(ctx,'target', (_spr.x+0.5)*gridSirka-_sirka*0.5, (_spr.y+0.5)*gridSirka-_sirka*0.5, _sirka, _sirka,0,0);

            if(_zoomScale>0.05){
                let _h=14 / _zoomScale;
                ctx.font = _h+"px Arial";
                ctx.fillStyle = '#fc0';
                let _txt = GetText('Special Location');
                let _w = ctx.measureText(_txt).width
                ctx.fillText(_txt,(_spr.x*gridSirka)-_w*0.5+gridSirka*0.5, ((_spr.y+1)*gridSirka)+ ((gridSirka*1.2)/(_zoomScale*2))+5);
            }
        }
    }

    TryDrawEventShipRadiuses(ctx);


    if(visitingFriend && enabledNeighbourCircle){ //visit circle visit radius visit range

        ctx.globalCompositeOperation = 'destination-in';
        let _polomerInGrids = umelyPolomerObjavenia*1.1+8;
        let _size=(_polomerInGrids)*gridSirka;
        // draw our circle mask
        ctx.fillStyle = '#000';
        ctx.beginPath();
        ctx.arc(
            0+gridSirka*0.5, // x
            0+gridSirka*0.5, // y
            _size, // radius
            0, // start angle
            2 * Math.PI // end angle
            );
        ctx.fill();
        ctx.globalCompositeOperation = 'source-over';

    
    }

    // restore to default composite operation (is draw over current image)

    ctx.globalAlpha=1;
    if(!visitingFriend)
    for(let _b of visibleBooks){
        if(_zoomScale<0.30 && _b.x >= camera_X+3 && _b.y>=camera_Y+3 && _b.x<camera_X2-3 && _b.y<camera_Y2-3 && GetPlayerUpgradeValue(35)){
            let __gridSirka=(gridSirka*0.55)/_zoomScale;
            ctx.beginPath();
            ctx.fillStyle = '#b17455';
            ctx.fillRect(Mro(_b.x*gridSirka-__gridSirka*0.5), Mro(_b.y*gridSirka-__gridSirka*0.5), __gridSirka, __gridSirka);
            MyDrawXY(ctx,"book", _b.x*gridSirka-Mro(__gridSirka*0.5), _b.y*gridSirka-Mro(__gridSirka*0.5), __gridSirka, __gridSirka,_1pixelSpace,_1pixelLine);
        }
    }

    if(!visitingFriend)
    for(let _str of hrac.book_pages_marked)if(_str){
        let _o = _str.split('_');
        let _p={
            x:_o[0]*1,
            y:_o[1]*1,
        }
        if(_p.x >= camera_X+1 && _p.y>=camera_Y+1 && _p.x<camera_X2-1 && _p.y<camera_Y2-1){
            pocetRendrowMimoHru=0;
            let _g = GetGridData(_p.x,_p.y);
            if(_g && _g.has_book){
                //do nothing
            }else{
                let _sirka=Math.max(gridSirka,gridSirka/(_zoomScale*2));
                MyDrawXY(ctx,'target', (_p.x+0.5)*gridSirka-_sirka*0.5, (_p.y+0.5)*gridSirka-_sirka*0.5, _sirka, _sirka,0,0);
                
                if(_zoomScale>0.05){
                    let _h=14 / _zoomScale;
                    ctx.font = _h+"px Arial";
                    ctx.fillStyle = '#b17455';
                    let _txt = GetText('Story Page');
                    let _w = ctx.measureText(_txt).width
                    ctx.fillText(_txt,(_p.x*gridSirka)-_w*0.5+gridSirka*0.5, ((_p.y+0.75)*gridSirka)+ ((gridSirka*1.2)/(_zoomScale*2))+5);
                }
            }
        
        }
    }


    DrawIncome(_doScreenshot);

    

    if(pocetDrawnGridov==0){
        for(let _p of mapPings)if(_p.time>0){
            if(_p.x >= camera_X+3 && _p.y>=camera_Y+3 && _p.x<camera_X2-3 && _p.y<camera_Y2-3){
                pocetRendrowMimoHru=0;
                break;
            }
        }
    
    
        pocetRendrowMimoHru++;
        if(pocetRendrowMimoHru>(HasLevel(10)?120:90)){
            ScrollToMainCity(0.7);
        }
    }else{
        pocetRendrowMimoHru=0;
    }
    // ctx.translate(+_camera_x, +camera.y);


    if(_doScreenshot){
        ctx.lineJoin = 'round';
        ctx.miterLimit = 2;
        ctx.strokeStyle = 'black';
        ctx.lineWidth = 6;
        ctx.fillStyle = '#fc0';
        ctx.font = (450*_zoomScale)+"px Arial";
        
        let _txt = hrac.name+' : '+hrac.stats.main_town_level+' : '+PCislo(Mro(hrac.income))+'/s'
        let _w = ctx.measureText(_txt).width;

        // console.log(myDimensions.x_max-myDimensions.x_min);

        if(myDimensions.x_max-myDimensions.x_min > 85){
            ctx.resetTransform();
            ctx.beginPath();
            ctx.translate((myDimensions.x_max-myDimensions.x_min)*(gridSirka)*_zoomScale - _w - 20, (myDimensions.y_max-myDimensions.y_min)*(gridSirka)*_zoomScale - 40);
            ctx.strokeText(_txt, 0, 0);
            ctx.fillText(_txt,0,0);
        }


        if(myDimensions.x_max-myDimensions.x_min > 140){
            let _gameName = 'Post-Apo Tycoon';
            ctx.resetTransform();
            ctx.beginPath();
            ctx.translate(20, (myDimensions.y_max-myDimensions.y_min)*(gridSirka)*_zoomScale - 40);
            ctx.strokeText(_gameName, 0, 0);
            ctx.fillText(_gameName,0,0);
        }
    }

    DrawMapExpandButton();



    // console.log(pocetDrawnGridov)
    // console.log(camera.y)   

    frameCount++;
    const currentTime = performance.now();
    const deltaSecTime = currentTime - lastTime;
    const deltaTime = currentTime - lastMilisecTime;
    lastMilisecTime = currentTime;

    ProcessGame(deltaTime);

    if(deltaSecTime >= 1000){
        fps = frameCount;
        frameCount = 0;
        lastTime = currentTime;
        if(!_doScreenshot && tickCount > 30){
            fps_total+=fps;
            fps_counter++;
            if(fps_min > fps){
                fps_min=fps;
            }
            if(fps_max < fps){
                fps_max=fps;
            }
        }
    }

    // console.log(fps,_raf,_doScreenshot)

    if(_raf)
    if(!_doScreenshot){
        // if(!gameInBackground)
        {
            if(anyPopupstartedTicks){
                anyPopupstartedTicks--;
                // console.log('nejde request anim');
                setTimeout(() => {
                    Draw(1);
                }, SEC_FRACTAL);
            }else{

                if(GetDetails()<=2){
                    setTimeout(() => {
                        Draw(1);
                    }, Math.round(1.5*SEC_FRACTAL));
                }else{
                    requestAnimationFrame(Draw);
                    // console.log('real raf')

                }
            }
        }
    }
}




















































let lastTime = performance.now();
let lastMilisecTime = performance.now();
let frameCount = 0;
let fps = 0;
let fps_total=0;
let fps_counter=0;
let fps_min = 999;
let fps_max = 0;


function GetIncomeBarHeight(){
    return hrac.stats.income_ticks<20?18:6;
}

function DrawIncome(_doScreenshot){
    // return false; 
    if(!_doScreenshot)
    if(!visitingFriend)
    if(hrac.nastavenia.showIncome && IsIncomeHappening())
    {
        ctx.globalAlpha = 1;
        ctx.resetTransform();
        ctx.lineWidth = 2;
        ctx.strokeStyle = "#c0a530"
        ctx.beginPath();
        let _h=GetIncomeBarHeight();
        let _bigBar=hrac.stats.income_ticks<20;
        // if(testVersion)_bigBar=1;

        // let _perc = ((incomeTick%INCOME_EARN_TICKS)/INCOME_EARN_TICKS);
        const MAX_INCOME_TIME = INCOME_EARN_TICKS*SEC_FRACTAL;
        let _perc = Math.min(MAX_INCOME_TIME,totalProcessGameTime-lastIncomeTime) / MAX_INCOME_TIME;
        ctx.fillStyle = '#282a35';
        ctx.fillRect(0,-1+headerHeight+TOP_PADDING,(CANVAS_WIDTH),_h+5);

        if(_bigBar){
            ctx.font = "12px Arial";
            ctx.fillStyle = '#eae4c2';
            let _txt = GetText('Income +{att1} gold{EVERY_X_SECONDS} {att2}%',[PCislo(Mro(hrac.income)),Math.floor(_perc*100)]);// 'Income +'+PCislo(hrac.income)+' gold'+PER_INCOME_SHORT+' '+Math.floor(_perc*100)+'%';
            let _w = ctx.measureText(_txt).width
            ctx.fillText(_txt,CANVAS_WIDTH*0.5-_w*0.5,14+headerHeight+TOP_PADDING);
        }
        ctx.fillStyle = '#fc0';
        ctx.beginPath();
        ctx.fillRect(2,0+headerHeight+TOP_PADDING,(CANVAS_WIDTH-4)*_perc,_h);
        ctx.rect(2,0+headerHeight+TOP_PADDING,(CANVAS_WIDTH-4)*_perc,_h);
        ctx.stroke();
        if(_bigBar){
            ctx.save();
            ctx.clip();
            ctx.font = "12px Arial";
            ctx.fillStyle = '#32343b';
            let _txt = GetText('Income +{att1} gold{EVERY_X_SECONDS} {att2}%',[PCislo(Mro(hrac.income)),Math.floor(_perc*100)]);// 'Income +'+PCislo(hrac.income)+' gold'+PER_INCOME_SHORT+' '+Math.floor(_perc*100)+'%';
            let _w = ctx.measureText(_txt).width
            ctx.fillText(_txt,CANVAS_WIDTH*0.5-_w*0.5,14+headerHeight+TOP_PADDING);
            ctx.restore();
        }
    }    
}



function DrawRadius(_ctx,_x,_y,_radius,_color,_zoomScale){
    
    _ctx.beginPath();
    // _ctx.lineWidth = 9/_zoomScale;
    _ctx.lineWidth = 9.5/_zoomScale;
    _ctx.strokeStyle = "#282a35";
    if(Array.isArray(_radius)){
        _ctx.rect((_x-_radius[0])*gridSirka, (_y-_radius[2])*gridSirka, gridSirka*(1+2*_radius[1]),gridSirka*(1+2*_radius[3]));
    }else{
        _radius = _radius+Math.sin(tickCount*0.10)*0.05 +  0.05;
        _ctx.rect((_x-_radius)*gridSirka, (_y-_radius)*gridSirka, gridSirka*(1+2*_radius),gridSirka*(1+2*_radius));
    }
    _ctx.stroke();

    _ctx.lineWidth = 2/_zoomScale;
    _ctx.strokeStyle = _color?_color:"#ffde52";
    _ctx.stroke();
}


function DrawRectBar(_grid){ //restoration bar
    let _x=0;
    let _y=0;
    let _max = _grid.znecistenie_max;
    // let _progress2 = _grid.znecistenie_max-_grid.znecistenie;
    if(hrac.stats.clears>50){
        _grid.znecistenie_draw=_grid.znecistenie;
    }else{
        if(!_grid.znecistenie_draw)_grid.znecistenie_draw=_grid.znecistenie_max;
        _grid.znecistenie_draw-=0.07*_max;
        if(_grid.znecistenie_draw < _grid.znecistenie){
            _grid.znecistenie_draw = _grid.znecistenie;
        }
    }

    let _progress = _grid.znecistenie_max-_grid.znecistenie_draw;
    
    ctx.beginPath();
    ctx.lineWidth = 1;
    ctx.strokeStyle = "black";
    
    if(hrac.nastavenia.bar_position == 1 || hrac.nastavenia.bar_position == 3){
        let _shiftX = 0;
        if(hrac.nastavenia.bar_position == 3){
            _shiftX = gridSirka-11;
        }
        ctx.rect(_x*gridSirka + 1+_shiftX, _y*gridSirka + 1, 8, gridSirka-3);
        ctx.fillStyle = 'rgba(114, 216, 76,0.05)';
        ctx.fillRect(_x*gridSirka + 1+_shiftX, _y*gridSirka + 1, 8, Mro(gridSirka-3));
        let _perc = Math.min(1,_progress/_max);
        let _len = Mfl((gridSirka-3) * (_perc));
        ctx.fillStyle = 'rgb('+(150-150*_perc)+','+Mro(Math.max(120,16+200*_perc))+',76)';
        ctx.fillRect(_x*gridSirka + 1+_shiftX, (_y+1)*gridSirka - 3 - _len , 8, _len );
    }

    if(!hrac.nastavenia.bar_position || hrac.nastavenia.bar_position == 2){
        ctx.rect(_x*gridSirka + 2, _y*gridSirka + 2, gridSirka-4, 6);
        ctx.fillStyle = 'rgba(114, 216, 76,0.05)';
        // gb(114, 216, 76)
        ctx.fillRect(_x*gridSirka + 2, _y*gridSirka + 2, Mro((gridSirka-4)), 6);
        let _perc = Math.min(1,_progress/_max);
        ctx.fillStyle = 'rgb('+(150-150*_perc)+','+Mro(Math.max(120,16+200*_perc))+',76)';
        let _len = Mfl((gridSirka-3) * (_perc));
        ctx.fillRect(_x*gridSirka + 3, 3 , _len, 4 );
    }

    ctx.stroke();
}










const CACHEDGEBIS={};
function MyDraw(_ctx,_imgID,_gridSirka,_1pixelSpace,_1pixelLine){
    // if(DrawImageFromAtlas(_ctx,_imgID)) return true;
    if(allBitMaps[_imgID]){
        if(images_y_shift[_imgID]){
            _ctx.drawImage(allBitMaps[_imgID],0,-images_y_shift[_imgID],_gridSirka+_1pixelSpace,_gridSirka+_1pixelSpace+images_y_shift[_imgID]);
        }else{
            _ctx.drawImage(allBitMaps[_imgID],0,0,_gridSirka+_1pixelSpace,_gridSirka+_1pixelSpace);
        }
        return true;
    }

    
    if(!CACHEDGEBIS[_imgID]){
        CACHEDGEBIS[_imgID]=gebi(_imgID);
    }
    if(CACHEDGEBIS[_imgID]){
        if(images_y_shift[_imgID]){
            _ctx.drawImage(CACHEDGEBIS[_imgID], 0, -images_y_shift[_imgID], _gridSirka+_1pixelSpace, images_height[_imgID]+_1pixelSpace);
        }else{
            _ctx.drawImage(CACHEDGEBIS[_imgID], 0, 0, _gridSirka+_1pixelSpace, _gridSirka+_1pixelSpace);
        }
    }
}

function MyBasicDraw(_ctx,_imgID, _x,_y,_w, _h,_1pixelSpace,_1pixelLine){
    if(!CACHEDGEBIS[_imgID]){
        CACHEDGEBIS[_imgID]=gebi(_imgID);
    }
    if(CACHEDGEBIS[_imgID]){
        _ctx.drawImage(CACHEDGEBIS[_imgID], _x, _y, _w+_1pixelSpace, _h+_1pixelSpace);
    }
}

function MyDrawXY(_ctx,_imgID,_x,_y,_gridSirka_x,_gridSirka_y,_1pixelSpace,_1pixelLine){
    // if(DrawImageFromAtlasXY(_ctx,_imgID,_x,_y,_gridSirka_x,_gridSirka_y)) return true;
    if(allBitMaps[_imgID]){
        if(images_y_shift[_imgID]){
            _ctx.drawImage(allBitMaps[_imgID], _x, _y-images_y_shift[_imgID], _gridSirka_x+_1pixelSpace, images_height[_imgID]+_1pixelSpace);
        }else{
            _ctx.drawImage(allBitMaps[_imgID], _x, _y, _gridSirka_x+_1pixelSpace+_1pixelLine, _gridSirka_y+_1pixelSpace+_1pixelLine);
        }
        return true;
    }


    if(!CACHEDGEBIS[_imgID]){
        CACHEDGEBIS[_imgID]=gebi(_imgID);
    }
    if(CACHEDGEBIS[_imgID]){
        if(images_y_shift[_imgID]){
            // images_size_ratio
            _ctx.drawImage(CACHEDGEBIS[_imgID], _x, _y-images_y_shift[_imgID], _gridSirka_x+_1pixelSpace, images_height[_imgID]+_1pixelSpace);
        }else{
            _ctx.drawImage(CACHEDGEBIS[_imgID], _x, _y, _gridSirka_x+_1pixelSpace, _gridSirka_y+_1pixelSpace);
        }
    }
}



// function DrawImageFromAtlas(_ctx,_key){
//     // console.log(all_images[_key].pack)
//     // let _imgo = all_images[_key];//image object 
//     // console.log(_key)
//     if(!allBitMaps[_key]) return false;
//     _ctx.drawImage(allBitMaps[_key],
//         0,0, 70, 70 ); 
//     if(0)
//     if(_imgo){
//         if(_imgo.shift){
//             _ctx.drawImage(allBitMaps[_imgo.pack],
//                 _imgo.x,_imgo.y,_imgo.w,_imgo.h,
//                 0,0-_imgo.shift, 70, _imgo.h2 ); 
//         }else{
//             _ctx.drawImage(allBitMaps[_imgo.pack],
//                 _imgo.x,_imgo.y,_imgo.w,_imgo.h,
//                 0,0, 70, _imgo.h2 ); 
//         }
//         return true;
//     }
//     return false;
// }

// function DrawImageFromAtlasXY(_ctx,_key,_x,_y,_gridSirka_x,_gridSirka_y){
//     // console.log(all_images[_key].pack)
//     let _imgo = all_images[_key];//image object 
//     if(_imgo){
//         if(_imgo.shift){
//             _ctx.drawImage(allBitMaps[_imgo.pack],
//                 _imgo.x,_imgo.y,_imgo.w,_imgo.h,
//                 _x,_y-_imgo.shift, 70, _imgo.h2 ); 
//         }else{
//             _ctx.drawImage(allBitMaps[_imgo.pack],
//                 _imgo.x,_imgo.y,_imgo.w,_imgo.h,
//                 _x,_y, _gridSirka_x, _gridSirka_y ); 
//         }
//         return true;
//     }
//     return false;
// }


function DrawZones(){
    //in testing function
}






/** 

   XXXXX   XXXXX  X     X   XXXXX   XXX     XXXXXX         XXXXX   XXXXX   XXXXX  XXXXXX 
  XX   XX    X    XX    X  XX   XX   X      X             XX   XX  X   XX    X     X   XX
  X          X    X X   X  X         X      X             X        X    X    X     X    X
  XX         X    X X   X  X         X      X             X        X   XX    X     X    X
   XXXXX     X    X  X  X  X   XXX   X      XXXXX         X   XXX  XXXXX     X     X    X
       XX    X    X  X  X  X    XX   X      X             X    XX  XXX       X     X    X
        X    X    X   X X  X     X   X      X             X     X  X XX      X     X    X
  XX   XX    X    X   X X  XX   XX   X   X  X             XX   XX  X  XX     X     X   XX
   XXXXX   XXXXX  X    XX   XXXXX   XXXXXX  XXXXXX         XXXXX   X   XX  XXXXX  XXXXXX 

*/



function DrawSingleGrid(_ctx,_g,_gridSirka,_isMiddleZoomout,_doScreenshot,_OPTIMISED,_1pixelSpace,_1pixelLine,_zoomScale){
    if(!_g) return 0;

    
    let _x=_g.x;
    let _y=_g.y;

    {
        if(_x > camera_X+1 && _x<camera_X2-1 && _y > camera_Y+1 && _y<camera_Y2-1 ){
            pocetDrawnGridov++;
        }
        if(_isZoomOut){
            _isZoomOutMultiplier=2;
            if(_x%2!=0 || _y%2!=0){
                return 0;
            }
            _gridSirka=2*gridSirka;
            
        }
        let _drawGrass=false;

        // if(_g.znecistenie>0){
        //     if(_g.water){

        //     }else{
        //         _hasBasicFillColor=1;
        //         _ctx.fillStyle = '#444';
        //     }
        //     if(_isZoomOut && _g.water>0){
        //         _hasBasicFillColor=1;
        //         _ctx.fillStyle = '#464';
        //     }
        //     if(_g.river && IsTerrainTester()){
        //         _ctx.fillStyle = '#464';
        //     }
        // }else{
            
        //     if(_g.water>0){
        //         if(_g.shipyard && !_isZoomOut){
        //             _ctx.fillStyle = '#25a3ff';
        //         }else if(_g.ship && !_isZoomOut){
        //             _ctx.fillStyle = '#25a3ff';
        //         }else{
        //             if(_isZoomOut){
        //                 _hasBasicFillColor=1;
        //                 if(_g.deep_water){
        //                     _ctx.fillStyle = '#004ab6';
        //                 }else{
        //                     _ctx.fillStyle = '#2573e4';
        //                 }
        //             }
                    
        //         }
        //     }else if(_g.mesto>0 && !_isZoomOut){
        //         _ctx.fillStyle = '#aca';
        //         _hasBasicFillColor=1;
        //     }else{
        //         _ctx.fillStyle = '#0b0';
        //         _hasBasicFillColor=1;
        //     }
        //     if(_isZoomOut && _g.forest){
        //         _hasBasicFillColor=1;
        //         _ctx.fillStyle = '#1f720b';
        //     }
        // }
        // if(_x==0&&_y==0){
        //     if(hrac.stats.towns>3){
        //         _hasBasicFillColor=1;
        //         _ctx.fillStyle = '#0ff';
        //     }
        // }

        // _ctx.save();
        _ctx.translate(_x*(_gridSirka), _y*(_gridSirka));
        
        
        let _scale = 1;
        if(!experimentalDraw)
        if(_g.last_clicked_dur){
            _scale = 1 - 0.3*(_g.last_clicked_dur / CLICK_EFECT_DURATION);
        }
        let _alpha = 1;
        if(!experimentalDraw){
            
            if(_g.generatedTime && !_OPTIMISED){
                _alpha = 1-_g.generatedTime/GENERATED_TIME;
            }
        }
        // console.log(_alpha)
        _ctx.globalAlpha = _alpha;


        _ctx.beginPath();
        
        if(GetDetails()>1)
        if(!experimentalDraw)
        if(!_OPTIMISED){
            if(_1pixelLine)
            if(_zoomScale>0.30){
                _ctx.globalAlpha = MinMax(0,1,0+(_zoomScale*0.5-0.3)*2 )*_alpha;
                if(!_g.vidiek && !_g.mega_city){
                    _ctx.beginPath();
                    // _ctx.lineWidth=_1pixelLine / _zoomScale;
                    // _ctx.strokeStyle = "rgba(0,0,0,0.25)";
                    // _ctx.strokeStyle = "rgba(19,1,1,0.5)";
                    // _ctx.fillStyle = "rgba(40, 42, 53,1)";
                    _ctx.fillStyle = "rgb(40, 42, 53)";
                    // _ctx.fillStyle = "rgba(255, 0, 0,1)";
                    // _ctx.strokeStyle = "rgba(255,1,1,1)";
                    // _ctx.rect(-_1pixelLine/_zoomScale, -_1pixelLine/_zoomScale, _gridSirka+_1pixelLine, _gridSirka+_1pixelLine);
                    // _ctx.rect(-_1pixelLine, -_1pixelLine, _gridSirka+_1pixelLine, _gridSirka+_1pixelLine);

                    _ctx.fillRect(-_1pixelLine/ _zoomScale,-_1pixelLine/ _zoomScale,_gridSirka+_1pixelLine,_gridSirka+_1pixelLine);
                    // _ctx.rect(0,0, _gridSirka, _gridSirka);
                    // _ctx.stroke();
                }
                _ctx.globalAlpha = _alpha;
            }
        }

        if(_scale!=1){
            if(_g.mega_city){
                _scale=Math.sqrt(_scale);
            }
            _ctx.save();
            _ctx.translate(+0.5*_gridSirka, +0.5*_gridSirka);
            _ctx.scale(_scale, _scale);
            _ctx.translate(-0.5*_gridSirka, -0.5*_gridSirka);
        }

        // return 0;

        
        if(!IsTerrainTester())
        {
            if(_g.mesto){
                // if(!_g.is_connected)_g.is_connected++;//toto je hack ktory sa mi nepaci ale it gets the job done
                if(_g.mega_city){
                    if(_g.znecistenie){
                        //nekreslis, lebo sa kresli tu: DrawApoMegaCities()
                    }else{
                        // MyDrawXY(_ctx,'megacity',-_gridSirka,-_gridSirka,_gridSirka*3,_gridSirka*3,_1pixelSpace,_1pixelLine);    
                    }
                }else if(_g.mesto==1 && !_g.is_connected){
                    MyDraw(_ctx,'bunker_closed'+(_g.znecistenie?'_apo':''),_gridSirka,_1pixelSpace,_1pixelLine);
                }else{
                    MyDraw(_ctx,GetTownImageName(_g)+(_g.znecistenie?'_apo':''),_gridSirka,_1pixelSpace,_1pixelLine);
                }
                if(doGridIncomesFT && _g.is_connected){
                    if(_g.x>camera_X+1 && _g.x<camera_X2-2 && _g.y>camera_Y+2 && _g.y<camera_Y2-2-(popupsVisible.bottomGridMenuPopup?2:0)){
                        AddFloatingTextToGrid(_g,'+'+PMat(GetTownIncome(_g),'gold'),'#fc0',-1,2);
                    }
                }
            } else if(_g.river){
                // DrawImageFromAtlas(_ctx,'rivers_river_t1_'+_g.river+(_g.znecistenie?'_d':''));
                if(allBitMaps['rivers/river_t1_'+_g.river+(_g.znecistenie?'_d':'')]){
                    if(_g.river_trees){
                        MyDraw(_ctx,"rivers/river_t2_"+_g.river,_gridSirka,_1pixelSpace,_1pixelLine);
                        // _ctx.drawImage(allBitMaps['rivers/river_t1_'+_g.river+(_g.znecistenie?'_d':'')],0,0,_gridSirka+_1pixelSpace,_gridSirka+_1pixelSpace);

                    }else{
                        _ctx.drawImage(allBitMaps['rivers/river_t1_'+_g.river+(_g.znecistenie?'_d':'')],0,0,_gridSirka+_1pixelSpace,_gridSirka+_1pixelSpace);
                    }
                }
                // MyDraw(_ctx,"river_t1_"+_g.river+(_g.znecistenie?'_d':''),_gridSirka,_1pixelSpace,_1pixelLine);
            } else  if(_g.water){
                if(!_g.znecistenie)
                {
                    if(_g.deep_water){
                        MyDraw(_ctx,"water_deep",_gridSirka,_1pixelSpace,_1pixelLine);
                    }else if(_g.deep_water2){
                        MyDraw(_ctx,"water_deep",_gridSirka,_1pixelSpace,_1pixelLine);
                        // MyDraw(_ctx,"water_deep2",_gridSirka,_1pixelSpace,_1pixelLine);
                    }else{
                        MyDraw(_ctx,"water",_gridSirka,_1pixelSpace,_1pixelLine);
                    }

                    // if(!_OPTIMISED)
                    DrawGridShores(_ctx,_g,_zoomScale,_gridSirka);

                    if(_zoomScale>0.5 || (!_g.building_type) || _doScreenshot){
                        if(_g.fish && !_isMiddleZoomout){
                            MyDraw(_ctx,"fish",_gridSirka,_1pixelSpace,_1pixelLine);
                        } else if(_g.fish_small && !_isMiddleZoomout){
                            MyDraw(_ctx,"fish_small",_gridSirka,_1pixelSpace,_1pixelLine);
                        } else if(_g.fish_huge){
                            MyDraw(_ctx,"fish_huge",_gridSirka,_1pixelSpace,_1pixelLine);
                        } else if(_g.fish_big){
                            MyDraw(_ctx,"fish_big",_gridSirka,_1pixelSpace,_1pixelLine);
                        } else if(_g.oil){
                            MyDraw(_ctx,"oil_water",_gridSirka,_1pixelSpace,_1pixelLine);
                        } else if(_g.ship_wreck_small){
                            MyDraw(_ctx,"ship_wreck_small",_gridSirka,_1pixelSpace,_1pixelLine);
                        } else if(_g.water_rocks_gem){
                            MyDraw(_ctx,"water_rocks_gem", _gridSirka,_1pixelSpace,_1pixelLine);
                        }
                    }
                }else{
                    MyDraw(_ctx,"water_apo",_gridSirka,_1pixelSpace,_1pixelLine);
                    // if(!_OPTIMISED)
                    DrawGridShores(_ctx,_g,_zoomScale,_gridSirka);
                }
                if(_g.water_rocks==1){
                    if(_g.znecistenie){
                        MyDraw(_ctx,"water_rocks_apo",_gridSirka,_1pixelSpace,_1pixelLine);
                    }else{
                        MyDraw(_ctx,"water_rocks",_gridSirka,_1pixelSpace,_1pixelLine);
                    }                            
                }
                if(_g.water_rocks==2){
                    if(_g.znecistenie){
                        MyDraw(_ctx,"water_rocks_big_apo",_gridSirka,_1pixelSpace,_1pixelLine);
                    }else{
                        MyDraw(_ctx,"water_rocks_big",_gridSirka,_1pixelSpace,_1pixelLine);
                    }                            
                }
                if(_g.ship_wreck){
                    if(_g.znecistenie){
                        MyDraw(_ctx,"ship_wreck_apo",_gridSirka,_1pixelSpace,_1pixelLine);
                    }else{
                        MyDraw(_ctx,"ship_wreck",_gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }

            } else if(_g.gift){
                MyDraw(_ctx,"gift_tile",_gridSirka,_1pixelSpace,_1pixelLine);
            } else if(_g.forest){
                if(_g.znecistenie){
                    MyDraw(_ctx,"tree_dead",_gridSirka,_1pixelSpace,_1pixelLine);
                }else{
                    if(_g.uranium_cloud){
                        
                        MyDraw(_ctx,'uranium_tree_dead',_gridSirka,_1pixelSpace,_1pixelLine);
                    }else{
                        MyDraw(_ctx,'tree'+_g.forest,_gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }
            } else if(_g.building_type && BUILDINGS_BY_KEYS[_g.building_type] && BUILDINGS_BY_KEYS[_g.building_type].no_terrain_bg){
                //nic, teda ziadny terain lebo else ify
            } else if(_g.hill){
                if(_zoomScale>0.5 || !_g.building_type || _doScreenshot){
                    if(!_isMiddleZoomout){
                        if(_g.znecistenie){
                            MyDraw(_ctx,"hills_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                        }else{
                            MyDraw(_ctx,"hills", _gridSirka,_1pixelSpace,_1pixelLine);
                        }
                    }
                }
            } else  if(_g.mountain){
                if(_g.znecistenie){
                    if(!_isMiddleZoomout){
                        MyDraw(_ctx,"mountains_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }else{
                    if(!_g.rock_mine && !_g.iron_mine){
                        MyDraw(_ctx,'mountains',_gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }
            } else if(_g.golden_island){
                MyDraw(_ctx,"golden_field", _gridSirka,_1pixelSpace,_1pixelLine);
            } else  if(_g.broken_city_small){
                MyDraw(_ctx,"broken_city_small"+(_g.znecistenie?'_apo':''), _gridSirka,_1pixelSpace,_1pixelLine);
            } else  if(_g.broken_city_medium){
                MyDraw(_ctx,"broken_city_medium"+(_g.znecistenie?'_apo':''), _gridSirka,_1pixelSpace,_1pixelLine);
            } else  if(_g.broken_city_big){
                MyDraw(_ctx,"broken_city_big"+(_g.znecistenie?'_apo':''), _gridSirka,_1pixelSpace,_1pixelLine);
            } else  if(_g.broken_city_big_train){
                MyDraw(_ctx,"broken_city_big_train", _gridSirka,_1pixelSpace,_1pixelLine);
            } else  if(_g.broken_power){
                MyDraw(_ctx,"broken_power"+(_g.znecistenie?'_apo':''), _gridSirka,_1pixelSpace,_1pixelLine);
            } else  if(_g.sand){
                if(_g.znecistenie){
                    if(!_isMiddleZoomout){
                        MyDraw(_ctx,"sand_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }else{
                    MyDraw(_ctx,"sand", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.desert){
                if(_g.znecistenie){
                    if(!_isMiddleZoomout){
                        MyDraw(_ctx,"desert_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }else{
                    MyDraw(_ctx,"desert", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.rubble1){
                if(_g.znecistenie){
                    if(!_isMiddleZoomout){
                        MyDraw(_ctx,"rubble1_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }else{
                    MyDraw(_ctx,"rubble1", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.rubble2){
                if(_g.znecistenie){
                    if(!_isMiddleZoomout){
                        MyDraw(_ctx,"rubble2_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }else{
                    MyDraw(_ctx,"rubble2", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.rubble3){
                if(_g.znecistenie){
                    if(!_isMiddleZoomout){
                        MyDraw(_ctx,"rubble3_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }else{
                    MyDraw(_ctx,"rubble3", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.rubble4){
                if(_g.znecistenie){
                    if(!_isMiddleZoomout){
                        MyDraw(_ctx,"rubble4_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }else{
                    MyDraw(_ctx,"rubble4", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.rift){
                if(_g.znecistenie){
                    MyDraw(_ctx,"rift_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                }else{
                    MyDraw(_ctx,"rift", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.rift_big){
                if(_g.znecistenie){
                    MyDraw(_ctx,"rift_big_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                }else{
                    MyDraw(_ctx,"rift_big", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.ground_oil){
                if(!_g.oil_rig_ground){
                    if(_g.znecistenie){
                        MyDraw(_ctx,"ground_oil_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }else{
                        MyDraw(_ctx,"ground_oil", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }
            } else  if(_g.thermal){
                if(!_g.thermal_plant){
                    if(_g.znecistenie){
                        MyDraw(_ctx,"thermal_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }else{
                        MyDraw(_ctx,"thermal", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }
            } else  if(_g.swamp){
                if(_g.znecistenie){
                    if(!_isMiddleZoomout){
                        MyDraw(_ctx,"swamp_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }else{
                    MyDraw(_ctx,"swamp", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.swamp_rocks){
                if(_g.znecistenie){
                    if(!_isMiddleZoomout){
                        MyDraw(_ctx,"swamp_rocks_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }else{
                    MyDraw(_ctx,"swamp_rocks", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.gem_field){
                if(_g.znecistenie){
                    MyDraw(_ctx,"gem_field_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                }else{
                    MyDraw(_ctx,"gem_field", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            // } else  if(_g.wood_storage){
            //     MyDraw(_ctx,"wood_storage", _gridSirka,_1pixelSpace,_1pixelLine);
            } else  if(_g.golden_field && !_g.building_type){
                if(_g.znecistenie){
                    MyDraw(_ctx,"golden_field_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                }else{
                    MyDraw(_ctx,"golden_field", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.uranium_field && !_g.building_type){
                if(_g.znecistenie){
                    MyDraw(_ctx,"uranium_field_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                }else{
                    MyDraw(_ctx,"uranium_field", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.copper_field && !_g.chip_factory){
                if(_g.znecistenie){
                    MyDraw(_ctx,"copper_field_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                }else{
                    MyDraw(_ctx,"copper_field", _gridSirka,_1pixelSpace,_1pixelLine);
                }
            } else  if(_g.airplane_wreck ){
                if(_g.znecistenie){
                    MyDraw(_ctx,"airplane_wreck_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                }else{
                    MyDraw(_ctx,"airplane_wreck", _gridSirka,_1pixelSpace,_1pixelLine);
                }

            } else if(_g.tree_cutted){
                if(!_isMiddleZoomout){
                    if(_g.znecistenie){
                        MyDraw(_ctx,"tree_cutted_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }else{
                        MyDraw(_ctx,"tree_cutted", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }
            } else if(_g.scorched){
                if(!_isMiddleZoomout){
                    if(_g.znecistenie){
                        MyDraw(_ctx,"scorched_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }else{
                        MyDraw(_ctx,"scorched", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }
            } else if(_g.lava_rift){
                if(!_isMiddleZoomout){
                    if(_g.znecistenie){
                        MyDraw(_ctx,"lava_rift_apo", _gridSirka,_1pixelSpace,_1pixelLine);
                    }else{
                        MyDraw(_ctx,"lava_rift", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }
            } else {
                if(_g.znecistenie>0){
                    if(!_isMiddleZoomout && !_g.vidiek){
                        if(_g.x%2){
                            if(_g.y%2){
                                MyDraw(_ctx,"odpad_3", _gridSirka,_1pixelSpace,_1pixelLine);
                            }else{
                                MyDraw(_ctx,"odpad_4", _gridSirka,_1pixelSpace,_1pixelLine);
                            }
                        }else{
                            if(_g.y%2){
                                MyDraw(_ctx,"odpad_2", _gridSirka,_1pixelSpace,_1pixelLine);
                            }else{
                                MyDraw(_ctx,"odpad", _gridSirka,_1pixelSpace,_1pixelLine);
                            }
                        }
                    }
                }else{
                    if(!_g.building_type && !_g.artifact){
                        _drawGrass=true;
                    }
                    else if(_g.storage_container || _g.premium_storage || _g.oil_storage || _g.rails){
                        _drawGrass=true;
                    }
                }
            }
        }
        
        if(_g.golden_mine || _g.golden_mine_premium){
            if(doGridIncomesFT){
                if(_g.x>camera_X+1 && _g.x<camera_X2-2 && _g.y>camera_Y+2 && _g.y<camera_Y2-2-(popupsVisible.bottomGridMenuPopup?2:0)){
                    if(_g.golden_mine){
                        AddFloatingTextToGrid(_g,'+'+PMat(GetGoldenMineProduction(),'gold'),'#fc0',-1,2);
                    }
                    if(_g.golden_mine_premium){
                        AddFloatingTextToGrid(_g,'+'+PMat(GetGoldenPremiumMineProduction(),'gold'),'#fc0',-1,2);
                    }
                }
            }
        }
        // return 0;
        
        if(!_g.mesto){
            if(_drawGrass){
                if(!_isMiddleZoomout){
                    if(_g.vidiek){
                        //nic
                    }else{
                        MyDraw(_ctx,"grass", _gridSirka,_1pixelSpace,_1pixelLine);
                    }
                }
            }

            if(_g.has_street){

                if(!_g.mesto && !_g.vidiek && !_g.shipyard){
                    if(_g.swamp){
                        if(_g.otocenie==11){
                            if(allBitMaps['streets/street_t'+_g.has_street+'_11_bridge']){
                                _ctx.drawImage(allBitMaps['streets/street_t'+_g.has_street+'_11_bridge'],0,0,_gridSirka+_1pixelSpace,_gridSirka+_1pixelSpace);
                            }
                        }else{
                            if(allBitMaps['streets/street_t'+_g.has_street+'_12_bridge']){
                                _ctx.drawImage(allBitMaps['streets/street_t'+_g.has_street+'_12_bridge'],0,0,_gridSirka+_1pixelSpace,_gridSirka+_1pixelSpace);
                            }
                        }
                    }else if(_g.river){
                        // if(testVersion && _g.has_street == 2){
                        //     _ctx.drawImage(allBitMaps['trains/rails_t1_'+_g.otocenie+'_b'],0,0,_gridSirka+_1pixelSpace,_gridSirka+_1pixelSpace);
                        // }else
                        if(_g.river==12){
                            if(allBitMaps['streets/street_t'+_g.has_street+'_11_bridge']){
                                _ctx.drawImage(allBitMaps['streets/street_t'+_g.has_street+'_11_bridge'],0,0,_gridSirka+_1pixelSpace,_gridSirka+_1pixelSpace);
                            }
                        }else{
                            if(allBitMaps['streets/street_t'+_g.has_street+'_12_bridge']){
                                _ctx.drawImage(allBitMaps['streets/street_t'+_g.has_street+'_12_bridge'],0,0,_gridSirka+_1pixelSpace,_gridSirka+_1pixelSpace);
                            }
                        }
                    }else if(_g.water){
                        MyDraw(_ctx,'streets/street_t'+_g.has_street+'_'+_g.otocenie+'_bridge_big',_gridSirka,_1pixelSpace,_1pixelLine);
                    }else{
                        // DrawImageFromAtlas(_ctx,'streets/street_t'+_g.has_street+'_'+_g.otocenie);
                        // if(testVersion && _g.has_street == 2){
                        //     _ctx.drawImage(allBitMaps['trains/rails_t1_'+_g.otocenie],0,0,_gridSirka+_1pixelSpace,_gridSirka+_1pixelSpace);
                        // }else
                        if(_g.otocenie && allBitMaps['streets/street_t'+_g.has_street+'_'+_g.otocenie]){
                            _ctx.drawImage(allBitMaps['streets/street_t'+_g.has_street+'_'+_g.otocenie],0,0,_gridSirka+_1pixelSpace,_gridSirka+_1pixelSpace);
                        }
                    }
                }
            }

            if(_g.monster){
                MyDraw(_ctx,"monster_"+MONSTERS[_g.monster].image, _gridSirka,_1pixelSpace,_1pixelLine);
            }
            if(_g.artifact){
                if(_g.znecistenie){

                }else{
                    MyDraw(_ctx,"artifacts/artifact_"+_g.artifact, _gridSirka,_1pixelSpace,_1pixelLine);
                }
            }else if(_g.farmfield){
                MyDraw(_ctx,"farmfield", _gridSirka,_1pixelSpace,_1pixelLine);
            }else if(_g.farmfield2){
                MyDraw(_ctx,"farmfield2", _gridSirka,_1pixelSpace,_1pixelLine);
            }else if(_g.ship){
                MyDraw(_ctx,"ship", _gridSirka,_1pixelSpace,_1pixelLine);
            }else if(_g.windmill && _g.mountain){
                MyDraw(_ctx,"windmill_mountain", _gridSirka,_1pixelSpace,_1pixelLine);
            }else if(_g.storage_container && _g.same_neighbours>=4){
                MyDraw(_ctx,"storage_container4", _gridSirka,_1pixelSpace,_1pixelLine);
            }else if(AnyNewBuildingDrawn(_ctx,_g,_gridSirka,_OPTIMISED,_1pixelSpace,_1pixelLine)){
                //kod je uz v podmienke
            }

            
            
            if(_g.uranium_barrel){
                MyDraw(_ctx,"uranium_barrel"+(_g.znecistenie?'_apo':''), _gridSirka,_1pixelSpace,_1pixelLine);
            }
            if(!visitingFriend)
            if(_g.activists){
                // if(_zoomScale<0.5){
                //     MyDrawXY(_ctx,"activists", -_gridSirka, 0, _gridSirka*2, _gridSirka*2,_1pixelSpace,_1pixelLine );
                // }else{
                // }
                MyDraw(_ctx,"activists", _gridSirka,_1pixelSpace,_1pixelLine);
            }
        }

        if(_g.uranium_cloud){
            if(!_g.uranium_barrel){
                if(!_OPTIMISED){
                    if(!_g.uran_cloud_rad){
                        _g.uran_cloud_rad=0;
                        _g.uran_cloud_rad_speed=MyRand(30,120)*0.0001*0.2;
                    }
                    _g.uran_cloud_rad+=_g.uran_cloud_rad_speed;

                    ctx.save(_g.uran_cloud_rad);
                    ctx.translate(_gridSirka*0.5,_gridSirka*0.5);
                    ctx.rotate(_g.uran_cloud_rad);
                    ctx.translate(-_gridSirka*0.5,-_gridSirka*0.5);
                    MyDraw(_ctx,"uranium_cloud_"+_g.uranium_cloud, _gridSirka,_1pixelSpace,_1pixelLine);
                    ctx.restore();
                }else{
                    MyDraw(_ctx,"uranium_cloud_"+_g.uranium_cloud, _gridSirka,_1pixelSpace,_1pixelLine);
                }
            }
        }

        

        // if(_g.gem_mine){
        //     drawCollectableGems.push(_g);
        // }

        if(!_OPTIMISED)
        if(!visitingFriend){
            if(_g.has_book && !_g.chest){
                let _scaleBook=Math.sin(tickCount*0.15)*0.05 +  1.0;
                if(_scaleBook!=1){
                    ctx.save();
                    ctx.translate(+0.5*_gridSirka, +0.5*_gridSirka);
                    ctx.scale(_scaleBook, _scaleBook);
                    ctx.translate(-0.5*_gridSirka, -0.5*_gridSirka);
                    MyDraw(_ctx,'book', _gridSirka,_1pixelSpace,_1pixelLine);
                    ctx.restore();
                }else{
                    MyDraw(_ctx,'book', _gridSirka,_1pixelSpace,_1pixelLine);
                }
            }
        }


        if(_scale!=1){
            _ctx.restore();
        }

        _ctx.lineWidth = 1;

        if(!_OPTIMISED)
        if(!_g.znecistenie){
            if(!_g.mega_city){
                DrawGoldenTownBar(_ctx,_g,_zoomScale);
            }
            if(!_g.mega_city){
                SettlementBottomLabel(_ctx,_g,_gridSirka,_zoomScale);
            }
        }

        if(!visitingFriend){

            if(!_OPTIMISED && !_isZoomOut && lastTownGridSelectedRadiusGrid && _g.znecistenie)if(!HasLevel(20)){
                if(IsGridInSquare(lastTownGridSelectedRadiusGrid,_g.x,_g.y,lastTownGridSelectedRadius)){
                    _ctx.beginPath();
                    _ctx.fillStyle = 'rgba(50,250,0,0.7)'; //green
                    _ctx.fillRect(0, 0, _gridSirka, _gridSirka);
                }
            }

            if(!_OPTIMISED && !_isZoomOut && roadCompositionTargetType && _g.has_street && !_g.mesto && !_g.shipyard ){
                if(_g.has_street < roadCompositionTargetType){
                    _ctx.beginPath();
                    _ctx.fillStyle = 'rgba(50,200,0,0.6)'; //red
                    _ctx.fillRect(0, 0, _gridSirka, _gridSirka);
                }
            }

            if(!_isZoomOut && !_g.is_connected && !_g.ignores_connection && (_g.building_type || _g.has_street)){
                if((!_g.mesto || _g.mesto >GetPlayerUpgradeValue(21,1)) && !_g.mega_city && !_g.vidiek){
                    _ctx.beginPath();
                    _ctx.fillStyle = 'rgba(200,0,0,0.7)'; //red
                    _ctx.fillRect(0, 0, _gridSirka, _gridSirka);
                }
            }

            if(!_OPTIMISED){

                if(quickToolActive=='b' && (quickToolType2 == 'feedthefish_notsaved2' || quickToolType2 == 'feedthefish_notsaved')){ //green
                    if(!_isZoomOut && _g.fish_small && !_g.shipyard && (_g.deep_water || _g.deep_water2)){
                        _ctx.beginPath();
                        _ctx.fillStyle = 'rgba(0,240,0,0.4)';
                        _ctx.fillRect(0, 0, _gridSirka, _gridSirka);
                    }
                }else if(last_tanker_grid_clicked && _g.oil && !_g.znecistenie && IsGridInSquareByGrid(_g,last_tanker_grid_clicked,GetTankerRadius())){ //green
                    _ctx.beginPath();
                    if(!_g.oil_rig){
                        _ctx.fillStyle = 'rgba(0,240,0,0.3)';
                    }else{
                        _ctx.fillStyle = 'rgba(0,240,0,0.6)';
                    }
                    _ctx.fillRect(0, 0, _gridSirka, _gridSirka);
                }else{

                    if(highlightedTileKey || highlightedTileKey2){
                        if((_g[highlightedTileKey] || _g[highlightedTileKey2]) && !_g.building_type && !_g.znecistenie){
                            _ctx.beginPath();
                            _ctx.fillStyle = 'rgba(250,0,255,0.5)';
                            _ctx.fillRect(0, 0, _gridSirka, _gridSirka);
                            _ctx.lineWidth=5;
                            _ctx.strokeStyle = "rgba(0,0,0,1)";
                            _ctx.rect(0, 0, _gridSirka, _gridSirka);
                            _ctx.stroke();
                        }
                    }
                } 
            }
            
            
            // if(_drawGrass){
            //     _ctx.fillStyle = 'rgba(200,0,200,0.4)';
            //     _ctx.fillRect(0, 0, _gridSirka, _gridSirka);
            // }
        }
        
        // if(!_g.is_connected2 ){
        //     if(_g.mesto !=1 && !_g.mega_city){
        //         _ctx.fillStyle = 'rgba(0,250,0,0.7)';
        //         _ctx.fillRect(0, 0, _gridSirka, _gridSirka);
        //     }
        // }

        if(_g.chest){
            DrawChest(_ctx,_g,gridSirka,_1pixelSpace,_1pixelLine);
        }
        

        if(!_OPTIMISED)
        if(!_isMiddleZoomout)
        if(_g.znecistenie>0 && _g.znecistenie_max-_g.znecistenie>0){
            DrawRectBar(_g);
        }

        // _ctx.restore();
        _ctx.translate(-_x*(_gridSirka), -_y*(_gridSirka));

    }
    return 1;
}


















function DrawGoldenTownBar(_ctx,_g,_zoomScale){
    // if(_g.mega_city){
    //     console.log(!visitingFriend && _g.mesto && hrac.stats.towns_connected>1 && _g.is_connected && _g.earn_clicks_available>0 && ((_zoomScale>0.5 && _zoomScale<2) || (last_grid_clicked && last_grid_clicked.grid && last_grid_clicked.grid.x==_g.x && last_grid_clicked.grid.y==_g.y)))
    // }
    if(!visitingFriend && _g.mesto && hrac.stats.towns_connected>1 && _g.is_connected && _g.earn_clicks_available>0 && ((_zoomScale>0.5 && _zoomScale<2) || (last_grid_clicked && last_grid_clicked.grid && last_grid_clicked.grid.x==_g.x && last_grid_clicked.grid.y==_g.y))){ //golden bar goldenbar goldbar gold bar    
        let _max = GetMaxTownEarnClicks(_g);
        let _progress=_g.earn_clicks_available;
        _ctx.beginPath();
        _ctx.lineWidth = 1;
        _ctx.strokeStyle = "#282a35";
        
        let _gridSirka2 = gridSirka;
        let _gridSirka0 = 0;
        if(_g.mega_city){
            _gridSirka2*=3;
            _gridSirka0 = 0;
        }
        
        _ctx.rect(-_gridSirka0, -_gridSirka0, _gridSirka2, 8);
        _ctx.fillStyle = 'rgba(0,255,0,0.05)';
        _ctx.fillRect(-_gridSirka0, -_gridSirka0, Mro((_gridSirka2)), 8);
        _ctx.fillStyle = '#ff0';
        _ctx.fillRect(-_gridSirka0, -_gridSirka0, Mro((_gridSirka2) * (_progress/_max)), 8);
        _ctx.stroke();
    }
}


function CornerNumber(_ctx,_g,_gridSirka){
    let _gridSirka2 = _gridSirka;
    if(_g.mega_city){
        _gridSirka2*=3;
    }
    _ctx.fillStyle = '#fff9d5';
    _ctx.beginPath();
    _ctx.fillRect(_gridSirka2-30, _gridSirka2-30, 30, 30);
    _ctx.strokeStyle = "#32343b";
    _ctx.rect(_gridSirka2-30, _gridSirka2-30, 30, 30);
    _ctx.stroke();
    
    _ctx.font = "18px Encode Sans Semi Condensed";
    _ctx.fillStyle = '#32343b';
    let _txt = _g.mesto;
    let _w = _ctx.measureText(_txt).width;
    _ctx.fillText(_txt,_gridSirka2-15-_w*0.5,_gridSirka2-8);
}


function SettlementBottomLabel(_ctx,_g,_gridSirka,_zoomScale){
    if(_zoomScale>=1 && !HasLevel(10 + (testVersion?100:0))){
        if(_g.mesto && _zoomScale<3){

            _ctx.fillStyle = '#fff9d5';
            _ctx.beginPath();
            let _gridSirka0=0;
            if(_g.mega_city){
                _gridSirka0=_gridSirka*2;
            }
            _ctx.fillRect(_gridSirka0+0, _gridSirka0+_gridSirka-15, _gridSirka, 15);
            _ctx.strokeStyle = "rgba(0,0,0,1)";
            _ctx.rect(_gridSirka0+0, _gridSirka0+_gridSirka-15, _gridSirka, 15);
            _ctx.stroke();
            _ctx.font = "8px Encode Sans Semi Condensed";
            _ctx.fillStyle = '#282a35';
            
            let _txt = GetBunkerTownLabel(_g)+" "+GetText('Level:')+" "+_g.mesto; //bunker level
            if(!_g.mega_city)
            if(!_g.is_connected){
                _txt = GetText('Closed bunker');
            }
            let _w = _ctx.measureText(_txt).width;
            if(_w > _gridSirka-3){
                _ctx.font = "7px Encode Sans Semi Condensed";
                _w = _ctx.measureText(_txt).width
            }
            _ctx.fillText(_txt,_gridSirka0+_gridSirka*0.5-_w*0.5,_gridSirka0+_gridSirka-5);
        }
    }else if(_zoomScale>=0.6 && _zoomScale<2){ //cislo v rohu
        if(_g.mesto){
            CornerNumber(_ctx,_g,_gridSirka);
        }
    }

}


function ResetReadyStatusOptiBlockByGrid(_grid){
    let _block=GetOptimisedBlockFromGrid(_grid);
    if(_block){
        MarkBlockForSave(_grid);
        // console.log('block reset',_block);
        _block.ready=false;
    }
}

function GetOptimisedBlockFromGrid(_grid){
    let _i=Mfl(_grid.x/OPTIM_GRID_STEP)*OPTIM_GRID_STEP;
    let _j=Mfl(_grid.y/OPTIM_GRID_STEP)*OPTIM_GRID_STEP;
    // console.log('block',_i,_j,optimisedBlocks[_i][_j]);
    if(optimisedBlocks[_i]){
        return optimisedBlocks[_i][_j];
    }
    return null;
}

function IsSecondCanvasAllowed(){
    return !IsJablko();
}

function UseBlobOpti(){
    return false;
    return !(everythingLoaded || countOfOptimisedBlocks<MAX_JABLKO_BITMAPS);
}

const MAX_JABLKO_BITMAPS=10000;//ale aj tak to nefungovalo
let testNumOptimizedGridDraws = 0;
async function OptimizeBlock(_x,_y,_1pixelSpace,_1pixelLine,_zoomScale){
    // if(IsJablko()){
    //     await yieldToMain();
    //     // return false;
    // }
    optimisedBlocks[_x][_y].ready=true;
    let _anyGridDrawn=0;
    let __ctx = null;
    let _gridSirkaI = gridSirka;
    if(IsJablko()){
        _gridSirkaI = GRID_JABLKO_SIZE;
    }
    if(IsSecondCanvasAllowed()){
        __ctx=ctx_optimised;
    }else{
        if(UseBlobOpti()){
            canvas.width=_gridSirkaI*(OPTIM_GRID_STEP)*OPTIMISED_ZOOM;
            canvas.height=_gridSirkaI*(OPTIM_GRID_STEP)*OPTIMISED_ZOOM;
            // console.log(_gridSirkaI,OPTIM_GRID_STEP,OPTIMISED_ZOOM,_gridSirkaI*OPTIM_GRID_STEP*OPTIMISED_ZOOM)
        }
        __ctx = ctx;
        ctx.save();
        ctx.globalAlpha=1;
        ctx.resetTransform();
        ctx.translate(0 - _x * (_gridSirkaI*OPTIMISED_SCALE), (!UseBlobOpti() ? gridSirka : 0) - _y * (_gridSirkaI*OPTIMISED_SCALE));
        ctx.scale(OPTIMISED_ZOOM, OPTIMISED_ZOOM);
        ctx.fillStyle = '#000000';
        ctx.fillRect(_x * _gridSirkaI, _y * _gridSirkaI, _gridSirkaI*(OPTIM_GRID_STEP), _gridSirkaI*(OPTIM_GRID_STEP));
    }
    
    for(let _xx=_x;_xx<_x+OPTIM_GRID_STEP;_xx++)if(myGridData[_xx]){
        for(let _yy=_y;_yy<_y+OPTIM_GRID_STEP;_yy++){
            let _drawn=DrawSingleGrid(__ctx,myGridData[_xx][_yy],_gridSirkaI,false,false,true,_1pixelSpace,_1pixelLine,_zoomScale)?1:0;
            _anyGridDrawn+=_drawn;
            if(_drawn){
                testNumOptimizedGridDraws++;
            }
        }
    }

    // if(testVersion){
    //     console.log('optimalizacia')
    // }
    // if(testVersion){
    //     await JSdelay(100);
    // }

    if(_anyGridDrawn){
        if(IsSecondCanvasAllowed()){
            optimisedBlocks[_x][_y].filled=1;
        }else{
            if(IsJablko){
                if(!UseBlobOpti() ){
                    // let _result = await createImageBitmap(canvas,0, gridSirka, OPTIMISED_GRID_SIRKA*(OPTIM_GRID_STEP), OPTIMISED_GRID_SIRKA*(OPTIM_GRID_STEP),{resizeHeight:BLOCK_RESIZE_SIZE, resizeWidth:BLOCK_RESIZE_SIZE});
                    optimisedBlocks[_x][_y].imageBitMap = await createImageBitmap(canvas,0, gridSirka, Math.round(OPTIMISED_GRID_SIRKA*(OPTIM_GRID_STEP)), Math.round(OPTIMISED_GRID_SIRKA*(OPTIM_GRID_STEP)));
                }else{
                    let _imageContainerBig = gebi('jablko_optimised_image_container');
                    let _containerID = 'jablko_optimised_image_container_in_'+(_x+100000)+'_'+(_y+100000);
                    let _imageContainer = gebi(_containerID);
                    if(!_imageContainer){
                        _imageContainerBig.innerHTML+='<div id="'+_containerID+'"></div>';
                        _imageContainer = gebi(_containerID);
                    }
                    _imageContainer.innerHTML='';
                    // const blob2 = await new Promise((res) => canvas.toBlob(res));
                    const img = _imageContainer.appendChild(new Image());
                    img.src = URL.createObjectURL(await new Promise((res) => canvas.toBlob(res)));
                    optimisedBlocks[_x][_y].imageBitMap = img;
                }
                optimisedBlocks[_x][_y].filled=1;

            }else{
                let _result = await createImageBitmap(canvas,0, gridSirka, OPTIMISED_GRID_SIRKA*(OPTIM_GRID_STEP), OPTIMISED_GRID_SIRKA*(OPTIM_GRID_STEP));
                optimisedBlocks[_x][_y].imageBitMap = _result;
                optimisedBlocks[_x][_y].filled=1;
            }
        }
        countOfOptimisedBlocks++;
    }else{
        // optimisedBlocks[_x][_y].ready=false;
    }
    
    
    if(IsSecondCanvasAllowed()){
        //noothing
    }else{
        ResetCanvasSize();
        ctx.restore();
    }
    blockRedraws++;
    // console.log(1)

    return _anyGridDrawn;
}

let countOfOptimisedBlocks=0;
async function OptimizeAllBlocks(_zoomScale){
    console.log('ALL BLOCKS OPTMISATION STARTED');
    ctx.resetTransform();
    ctx.lineWidth = 1;
    countOfOptimisedBlocks=0;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.beginPath();
    ctx.fillStyle = '#000000';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.translate(-myDimensions.x_min*gridSirka*_zoomScale, -myDimensions.y_min*gridSirka*_zoomScale);
    ctx.scale(_zoomScale, _zoomScale);
    

    // console.time('optmize all 1')
    for(let _x in optimisedBlocks)if(optimisedBlocks[_x]){
        if(IsJablko()){
            // if(IS_DEV)sendToFlutter('{ "event": "game_version", "value": "'+_x+'"}');
            // if(testVersion)console.log('optimize _x',_x)
            // await JSdelay(200);
            await yieldToMain();
            await JSdelay(50);
        }
        for(let _y in optimisedBlocks[_x])if(!optimisedBlocks[_x][_y].ready){
            if(IsJablko()){
                // await yieldToMain();
            }
            await OptimizeBlock(_x*1,_y*1,0,0,_zoomScale);
        }

    }
    // console.log(countOfOptimisedBlocks);
    // console.timeEnd('optmize all 1')
}


let optimisedBlocks={};
function InitOptimisedBlocks(_player){
    if(!_player)_player=hrac;
    optimisedBlocks={};
    for(let _i=-(Mce(GetBoundery(4,_player)/OPTIM_GRID_STEP))*OPTIM_GRID_STEP;_i<=GetBoundery(6,_player);_i+=OPTIM_GRID_STEP){
        optimisedBlocks[_i]={};
        for(let _j=-(Mce(GetBoundery(8,_player)/OPTIM_GRID_STEP))*OPTIM_GRID_STEP;_j<=GetBoundery(2,_player);_j+=OPTIM_GRID_STEP){
            optimisedBlocks[_i][_j]={
                ready:false,
            };
        }
    }
    if(IsSecondCanvasAllowed()){
        ctx_optimised.globalAlpha = 1;
        ctx_optimised.lineWidth = 1;
        ctx_optimised.resetTransform();
        ctx_optimised.clearRect(0, 0, canvas_optimised.width, canvas_optimised.height);
        ctx_optimised.beginPath();
        ctx_optimised.fillStyle = '#000000';
        ctx_optimised.fillRect(0, 0, canvas_optimised.width, canvas_optimised.height);
        
        ctx_optimised.scale(OPTIMISED_SCALE, OPTIMISED_SCALE);
        ctx_optimised.translate(gridSirka*GetBoundery(4,_player), gridSirka*GetBoundery(8,_player));
    }
    console.log('optiblocks reset')
}







function DrawTownBigNumber(_g,_gridSirka,_1pixelSpace,_1pixelLine,_zoomScale){ //large big numbers
    if(!_g) return false;
    // if(!_g.is_connected) return false;
    let _gridSirka2= (_gridSirka*0.5 + _g.mesto*0.5 - 15) / _zoomScale;
    if(_gridSirka2<_gridSirka){
        _gridSirka2=_gridSirka;
    }
    
    let _gridSirka3= (_gridSirka2-_gridSirka)*0.5;
    

    if((_g.x==0&&_g.y==0) || _g.mega_city){
        ctx.fillStyle = '#aeffde';
    }else{
        ctx.fillStyle = '#fff9d5';
    }
    if(!_g.is_connected){
        ctx.fillStyle = '#a4a4a1';
    }
    ctx.beginPath();
    
    let _scale = 1;
    if(_g.last_clicked_dur){
        _scale = 1 - 0.3*(_g.last_clicked_dur / CLICK_EFECT_DURATION);
    }
    ctx.save();
    ctx.translate(_g.x*gridSirka, _g.y*gridSirka);
    if(_scale!=1){
        ctx.translate(+0.5*gridSirka, +0.5*gridSirka);
        ctx.scale(_scale, _scale);
        ctx.translate(-0.5*gridSirka, -0.5*gridSirka);
    }   
    
    
    ctx.fillRect(-_gridSirka3, -_gridSirka3, _gridSirka2, _gridSirka2);

    if(GetDetails()>1)
    if(_zoomScale>=0.4){
        if(ctx.roundRect){
            ctx.roundRect(-_gridSirka3, -_gridSirka3, _gridSirka2, _gridSirka2,10);
        }
    }
    ctx.rect(-_gridSirka3, -_gridSirka3, _gridSirka2, _gridSirka2);

    if(GetDetails()>1){
        ctx.stroke();
    }
    let _txt = _g.mesto;
    let _w = ctx.measureText(_txt).width
    ctx.fillStyle = '#32343b';
    ctx.fillText(_txt,0-_gridSirka3-_w*0.5 + _gridSirka2*0.5,35+10/_zoomScale);

    if(last_grid_clicked && last_grid_clicked.x == _g.x && last_grid_clicked.y == _g.y){
        MyDrawXY(ctx,"selector", -_gridSirka3, -_gridSirka3, _gridSirka2, _gridSirka2,_1pixelSpace,_1pixelLine);
    }
    ctx.restore();
}






let gridClouds=[];
function InitGridClouds(){
    gridClouds=[];
    // console.time('initclouds')
    for(let _x in myGridData) for(let _y in myGridData[_x]){
        if(myGridData[_x][_y]){
            if(myGridData[_x][_y].building_type && BUILDINGS_BY_KEYS[myGridData[_x][_y].building_type] && BUILDINGS_BY_KEYS[myGridData[_x][_y].building_type].pollution_cloud){
                AddGridCloud(myGridData[_x][_y],BUILDINGS_BY_KEYS[myGridData[_x][_y].building_type].pollution_cloud,1);
            }else if(myGridData[_x][_y].broken_power){
                AddBrokenPowerCloud(myGridData[_x][_y],myGridData[_x][_y].znecistenie);
            } 
        }
    }
    // console.timeEnd('initclouds')
}

function AddBrokenPowerCloud(_g,_apo){
    if(_apo){
        AddGridCloud(_g,0.75,_g.generatedTime ? Math.max(0.0001,1-_g.generatedTime/GENERATED_TIME) : 1);
    }
    AddGridCloud(_g,1.5,_g.generatedTime ? Math.max(0.0001,1-_g.generatedTime/GENERATED_TIME) : 1);
}


function AddGridCloud(_g,_strength,_alpha){
    gridClouds.push({grid: _g, strength: _strength+MyRand(0,15)*0.01, alpha: 1, shift_x: MyRand(-15,15), shift_y: MyRand(-15,15)});
}


function RemovePolutionCloud(_grid,_underSize){
    gridClouds = gridClouds.filter(o=>o && o.grid && (o.grid.x!=_grid.x || o.grid.y!=_grid.y || (_underSize && o.strength >= _underSize)));
}


let drawErrors=0;
function InitFloatingTexts(){
    let _out='';
    for(let i=0;i<70;i++){
        _out+='<div id="floating_text_div_'+i+'"></div>';
        floatingTexts[i]={
            endTime:0,
            text:'',
        }
    }
    SetInner("floating_texts",_out);
}
let floatingTexts=[];
let floatingTextTotal=0;

function HideAllFloatingTexts(){
    let _timeNow = Date.now();
    for(let i in floatingTexts){
        let _f = floatingTexts[i];
        if(_f.endTime >= _timeNow){
            SetInner('floating_text_div_'+i,'');
            // SetY('floating_text_div_'+i,-50);
            gebi('floating_text_div_'+i).style.display='none';
        }
    }

}

function AddFloatingText(_x,_y,_text,_options){
    let _timeNow = Date.now();
    if(!_options)_options={};
    
    for(let i in floatingTexts){
        let _f = floatingTexts[i];
        if(_f.endTime < _timeNow){
            floatingTextTotal++;
            _f.endTime = _timeNow+3500;
            _f.text = _text;
            let _fss=gebi('floating_text_div_'+i).style;
            if(_fss){
                _fss.animation = 'none';
                _fss.transition = 'none';
                _fss.scale = 1;
                
                if(_options.color){
                    if(_options.color=='red')_options.color='#f66';
                    _fss.color = _options.color;
                }else{
                    _fss.color = '#ffde52';
                }
                if(_options.fontSize){
                    _fss.fontSize = _options.fontSize+'px';
                }else{
                    _fss.fontSize = '18px';
                }
                _fss.animationName = '';

                _y+=rand_y;
                if(_y<120+TOP_PADDING)_y=120+TOP_PADDING;
                _fss.top = (_y-65)+'px';
                _fss.zIndex = floatingTextTotal;
                SetInner('floating_text_div_'+i,_text);
                _fss.display = 'inline-block';
                let _rect = GetRect('floating_text_div_'+i);
                let _x2 = (_x-(_rect.width*0.5));
                _x2+=rand_x; 
                let _w = _rect.width;
                let _dur = 2;
                let _scale = 1;
                if(_w > window.innerWidth*0.7){
                    _dur+=6;
                    _f.endTime = _timeNow+_dur*1000+500;
                }else if(_w > window.innerWidth*0.47){
                    _dur+=4;
                    _f.endTime = _timeNow+_dur*1000+500;
                }else if(_w > window.innerWidth*0.3){
                    _dur+=2;
                    _f.endTime = _timeNow+_dur*1000+500;
                }
                if(_options.dur){
                    _dur=_options.dur;
                    _f.endTime = _timeNow+_dur*1000+500;
                }



                if(_x2+_w> window.innerWidth-5)_x2= window.innerWidth-5-_w;
                if(_x2<5)_x2=5;

                if(_w > window.innerWidth-10){
                    _scale= (window.innerWidth-10) / _w;
                    _x2 = 5-(1-_scale)*_w*0.5;
                    _w *= _scale;

                }
                _fss.scale = _scale*0.5;

                _fss.left=_x2+'px';
                
                gebi('floating_text_div_'+i).offsetHeight; /* trigger reflow */
                _fss.animation = null; 
                _fss.transition = null;
                
                _fss.transition = '0.60s';
                _fss.animationName = 'floatingTextAnim';
                _fss.animationDuration=_dur+'s';
                _fss.scale = _scale;

            }
            // gebi('floating_text_div_'+i).style.top = (_y-25-100)+'px';

            return _f;
        }
    }
    return false;

}

function AddFloatingTextToMousePos(_text,_color,_posun_i,_dur){
    AddFloatingText(camera.tapScreen.x,camera.tapScreen.y-(_posun_i?_posun_i*40:0)-50,_text,{color:_color,dur:_dur});
}
function AddFloatingTextToGrid(_grid,_text,_color,_posun_i,_dur,_fsize){
    rand_x=0;
    rand_y=0;
    let _x = (_grid.x+0.5)*gridSirka*zoomScale-camera.x;
    let _y = (_grid.y+0.5)*gridSirka*zoomScale-camera.y;
    AddFloatingText(_x,_y-(_posun_i?_posun_i*40:0)-50,_text,{color:_color,dur:_dur,fontSize:_fsize});
}
function AddFloatingTextToGridOptions(_grid,_text,_options){
    rand_x=0;
    rand_y=0;
    let _x = (_grid.x+0.5)*gridSirka*zoomScale-camera.x;
    let _y = (_grid.y+0.5)*gridSirka*zoomScale-camera.y;
    AddFloatingText(_x,_y-50,_text,_options);
}

function AddFloatingError(_text,_posun_i){
    AddFloatingText(camera.tapScreen.x,camera.tapScreen.y-(_posun_i?_posun_i*40:0)-50,_text,{color:'red'});
}

function FloatingTextGoldIcon(){
    return FloatingTextIcon('gold');
}
function FloatingTextIcon(_type,_h,_t){
    if(!_h)_h=22;
    if(!_t)_t=3;
    return GetIconImage(_type,_h,_t);
}

function RestorationIcon(){
    return FloatingTextIcon('restoration_strength',20,5);
}









//PINGS
let mapPings=[];
function AddPing(_x,_y,_returns,_radius,_time,_color){
    if(!_time)_time=3000;
    if(!_radius)_radius=600;
    let _growSpeed=_radius/((_time*(_returns?0.5:1))/SEC_FRACTAL)
    mapPings.push({
        x:_x,
        y:_y,
        time:_time,
        color:_color,
        time_max:_time,
        size:10,
        growSpeed:_growSpeed,
        returns: _returns?1:0,
        max_radius:_radius,

    })
}

function ProcessPings(){
    let _removeAny=0;
    for(let _p of mapPings){
        _p.time-=SEC_FRACTAL;
        if(!_p.returns || _p.time>=_p.time_max*0.5){
            _p.size+=_p.growSpeed;
        }else{
            _p.size-=_p.growSpeed;
        }
        if(_p.size<=0)_p.size=0;
        if(_p.time<=0){
            _p.time=0;
            _removeAny=1;
        }
    }
    if(_removeAny){
        mapPings = mapPings.filter(p=>p.time>0);
    }
}

function DrawPings(){
    for(let _p of mapPings)if(_p.time>0){
        ctx.strokeStyle = _p.color?_p.color:"#ff0";
        ctx.lineWidth = Math.max(0.2,Math.min(1.5,1.5*_p.time / 500)) /zoomScale;
        ctx.beginPath();
        // ctx.globalAlpha = (1000-(_p.time%CHEST_TICK_TIME))/1000;
        ctx.globalAlpha = Math.min(1,_p.time / 700);
        ctx.arc((_p.x+0.5)*gridSirka, (_p.y+0.5)*gridSirka, _p.size/zoomScale  , 0, 360);
        ctx.stroke();
    }

    ctx.globalAlpha=1;
}

let enabledSaving=1;
let enabledSaving2=1;
let visitingFriend=0;
let enabledLoading=1;
let backendSaving = 1;
let saveActivists=[];
let LANGUAGES=null;
const claimedPayments = {inboxMessages: [], paymentRewards: []};
const GRID_VIEW_LEVEL=15;
// only for LOCAL DEV TESTING
let DEVICE_UUID;
let backendVersion=0;

function GetAllOptimizedGridData(){
    let _data=GetOptimizedGridDataFromArray(myGridData);
    saveActivists=_data[1]
    return _data[0];
}

function GetOptimizedGridDataFromArray(_gridData){
    let _optimised = [];
    let _activists = [];

    for(let _x in _gridData) for(let _y in _gridData[_x]){
        ProcessOneOptimisedGrid(_x,_y,_optimised,_activists);
    }

    return [_optimised,_activists];
}

function ProcessOneOptimisedGrid(_x,_y,_optimised,_activists){
    if(!myGridData[_x])return false;
    let _g = myGridData[_x][_y];
    if(_g){
        let _o1 = [];
        _o1[0]=_g.x;
        _o1[1]=_g.y;
        _o1[2]=_g.has_street?-_g.has_street-(_g.has_bridge?_g.otocenie*100:0):(_g.znecistenie?((_g.znecistenie>=_g.znecistenie_max?0:_g.znecistenie)+'_'+_g.znecistenie_max):0);
        let _terrain=0;
        if(_g.forest==1)_terrain=1;
        else if(_g.vidiek)_terrain=31;
        else if(_g.forest==2)_terrain=2;
        else if(_g.forest==3)_terrain=51;
        else if(_g.deep_water){
            if(_g.fish)_terrain=34;
            else if(_g.fish_small)_terrain=35;
            else if(_g.fish_big)_terrain=36;
            else if(_g.fish_huge)_terrain=56;
            else if(_g.oil)_terrain=37;            
            else _terrain=33;
        }
        else if(_g.deep_water2){
            if(_g.fish)_terrain=22;
            else if(_g.fish_small)_terrain=23;
            else if(_g.fish_big)_terrain=24;
            else if(_g.fish_huge)_terrain=57;
            else if(_g.oil)_terrain=25;            
            else _terrain=21;
        }
        else if(_g.fish_small)_terrain=8;
        else if(_g.fish)_terrain=7;
        else if(_g.fish_big)_terrain=9;
        else if(_g.fish_huge)_terrain=55;
        else if(_g.oil)_terrain=10;
        else if(_g.ship_wreck)_terrain=29;
        else if(_g.ship_wreck_small)_terrain=30;
        else if(_g.water_rocks==1)_terrain=16;
        else if(_g.water_rocks==2)_terrain=43;
        else if(_g.water_rocks_gem)_terrain=54;
        else if(_g.water)_terrain=5;
        else if(_g.river)_terrain=6;//nemoze byt vyssie
        else if(_g.hill)_terrain=3;
        else if(_g.mountain)_terrain=4;
        else if(_g.rift)_terrain=11;
        else if(_g.uranium_barrel)_terrain=12;
        else if(_g.gem_field)_terrain=13;
        else if(_g.golden_field)_terrain=14;
        else if(_g.ground_oil)_terrain=15;
        else if(_g.swamp)_terrain=17;
        else if(_g.rift_big)_terrain=18;
        else if(_g.copper_field)_terrain=19;
        else if(_g.tree_cutted==2)_terrain=53;
        else if(_g.tree_cutted)_terrain=20;
        else if(_g.sand)_terrain=26;
        else if(_g.desert)_terrain=27;
        else if(_g.golden_island)_terrain=28;
        else if(_g.airplane_wreck)_terrain=32;
        else if(_g.rubble1)_terrain=38;
        else if(_g.rubble2)_terrain=39;
        else if(_g.rubble3)_terrain=40;
        else if(_g.rubble4)_terrain=41;
        else if(_g.swamp_rocks)_terrain=42;
        //43 !!!! je water rocks 2
        else if(_g.thermal)_terrain=44;
        else if(_g.broken_city_small)_terrain=45;
        else if(_g.broken_city_medium)_terrain=46;
        else if(_g.broken_city_big)_terrain=47;
        else if(_g.broken_power)_terrain=48;
        else if(_g.scorched)_terrain=49;
        else if(_g.broken_city_big_train)_terrain=50;
        // else if(_g.forest==3)_terrain=51;
        else if(_g.uranium_field)_terrain=52;
        // else if(_g.tree_cutted==2)_terrain=53;
        // else if(_g.water_rocks_gem)_terrain=54;
        // else if(_g.fish_huge)_terrain=55;
        // else if(_g.fish_huge a deepwater1)_terrain=56;
        // else if(_g.fish_huge a deepwater2)_terrain=57;
        else if(_g.gift)_terrain=58;
        else if(_g.lava_rift)_terrain=59;
        //pozor tu NEMOZES DAVAT CISLA HALA BALA
        
        
        _o1[3]=_terrain;

        
        let _building=0;
        if(_g.mesto){
            _building = 1000+_g.mesto*1;
        }
        else if(_g.farmfield2)_building = 2;
        else if(_g.ship)_building = 9;
        else if(_g.farmfield)_building = 7;
        else if(_g.artifact)_building = 20+_g.artifact*1; //NESMIE BYT VIACEJ AKO 10!
        else if(_g.building_type){
            if(BUILDINGS_BY_KEYS[_g.building_type]){
                _building = BUILDINGS_BY_KEYS[_g.building_type].id;
            }
        }
        if(_g.monster)_building = 900+_g.monster*1;


        _o1[4]=_building;
        if(_g.rotation){
            _o1[5]=_g.rotation;
        }
        if(_g.klikov){
            _o1[5]=_g.klikov;
        }
        if(_g.earn_clicks_available){
            _o1[6]=_g.earn_clicks_available;
        }
        
        // _optimised.push(_o1.join(','));// save_type=0
        _optimised.push(_o1); // save_type = 1

        if(_g.activists)_activists.push([_g.x,_g.y]);
    }
}

function ParseLoadedGridData(_gridData,_player){
    if(!_player)_player=hrac;

    let _gridDataA = null;
    if(_player.save_type==0 || !_player.save_type){
        _gridDataA = _gridData.split(';');
    }else{
        _gridDataA = _gridData;
    }
    myGridData={};
    for(let _goSTR of _gridDataA){
        let _go = [];
        if(_player.save_type==0 || !_player.save_type){
            _go = _goSTR.split(',');
        }else{
            _go = _goSTR;
        }
            // if()
        let _x = _go[0]*1;
        let _y = _go[1]*1;
        let _g = {
            x:_x,
            y:_y,
        }

        let _go2=_go[2];
        if(isNaN(_go2)  && _go2.indexOf('_')>=0){
            const _go2A = _go2.split('_')
            _g.znecistenie_draw = _g.znecistenie = _go2A[0]*1;
            
            _g.znecistenie_max = _go2A[1]*1;
            if(_g.znecistenie==0)_g.znecistenie=_g.znecistenie_max;

        }else{
            _g.znecistenie = 0;
            if(_go2*1){
                // console.log(_go2*1)
                if(_go2*1<-1000){
                    // console.log('mosty',_go2)
                    _g.has_street = Math.abs(_go2*1)%100;
                    _g.otocenie = Mro(Math.abs(_go2*1)/100);
                    _g.has_bridge = 1;
                    streets.push({
                        x: _x,
                        y: _y,
                        type: _g.has_street,
                        grid: _g,
                        otocenie: _g.otocenie,
                    });//REFACTOR SOME DAY IN the future

                }else{
                    _g.has_street = Math.abs(_go2*1);
                }
// if(_x==-55 && _y==36)console.log('loading street')
            }
        }

        let _ter = _go[3]*1;
        if(_ter==1){if(!_g.has_street)_g.forest = 1}
        else if(_ter==2){if(!_g.has_street)_g.forest = 2}
        else if(_ter==3)_g.hill = 1;
        else if(_ter==4)_g.mountain = 1;
        else if(_ter==5)_g.water = 1;
        else if(_ter==6)_g.river = IsRiverGenerated(_x,_y);
        else if(_g.river==-1){
            _g.river=0;
            _g.water=1;
        }
        else if(_ter==7){
            _g.fish = 1;
            _g.water = 1;
        }
        else if(_ter==8){
            _g.fish_small = 1;
            _g.water = 1;
        }
        else if(_ter==9){
            _g.fish_big=1;
            _g.water = 1;
        }
        else if(_ter==10){
            _g.oil = 1;
            _g.water = 1;
        }
        else if(_ter==11){_g.rift = 1;}
        else if(_ter==12){_g.uranium_barrel = 1;}
        else if(_ter==13){_g.gem_field = 1;}
        else if(_ter==14){_g.golden_field = 1;}
        else if(_ter==15){_g.ground_oil = 1;}
        else if(_ter==16){
            _g.water_rocks = 1;
            _g.water = 1;
        }
        else if(_ter==17){_g.swamp = 1;}
        else if(_ter==18){_g.rift_big = 1;}
        else if(_ter==19){_g.copper_field = 1;}
        else if(_ter==20){_g.tree_cutted = 1;}
        else if(_ter==21){
            _g.deep_water2 = 1;
            _g.water = 1;
        }
        else if(_ter==22){
            _g.deep_water2 = 1;
            _g.water = 1;
            _g.fish=1;
        }
        else if(_ter==23){
            _g.deep_water2 = 1;
            _g.water = 1;
            _g.fish_small=1;
        }
        else if(_ter==24){
            _g.deep_water2 = 1;
            _g.water = 1;
            _g.fish_big=1;
        }
        else if(_ter==25){
            _g.deep_water2 = 1;
            _g.water = 1;
            _g.oil=1;
        }
        else if(_ter==26){_g.sand = 1;}
        else if(_ter==27){_g.desert = 1;}
        else if(_ter==28){_g.golden_island = 1;}
        else if(_ter==29){
            _g.water = 1;
            _g.ship_wreck = 1;
        }
        else if(_ter==30){
            _g.water = 1;
            _g.ship_wreck_small = 1;
        }
        else if(_ter==31){
            _g.vidiek = 1;
        }
        else if(_ter==32){
            _g.airplane_wreck = 1;
        }
        else if(_ter==33){
            _g.deep_water = 1;
            _g.water = 1;
        }
        else if(_ter==34){
            _g.deep_water = 1;
            _g.water = 1;
            _g.fish=1;
        }
        else if(_ter==35){
            _g.deep_water = 1;
            _g.water = 1;
            _g.fish_small=1;
        }
        else if(_ter==36){
            _g.deep_water = 1;
            _g.water = 1;
            _g.fish_big=1;
        }
        else if(_ter==37){
            _g.deep_water = 1;
            _g.water = 1;
            _g.oil=1;
        }
        else if(_ter==55){
            _g.water = 1;
            _g.fish_huge=1;
        }
        else if(_ter==56){
            _g.deep_water = 1;
            _g.water = 1;
            _g.fish_huge=1;
        }
        else if(_ter==57){
            _g.deep_water = 2;
            _g.water = 1;
            _g.fish_huge=1;
        }
        else if(_ter==38){_g.rubble1 = 1;}
        else if(_ter==39){_g.rubble2 = 1;}
        else if(_ter==40){_g.rubble3 = 1;}
        else if(_ter==41){_g.rubble4 = 1;}
        else if(_ter==42){_g.swamp_rocks = 1;}
        else if(_ter==43){
            _g.water_rocks = 2;
            _g.water = 1;
        }
        else if(_ter==44){_g.thermal = 1;}
        else if(_ter==45){_g.broken_city_small = 1;}
        else if(_ter==46){_g.broken_city_medium = 1;}
        else if(_ter==47){_g.broken_city_big = 1;}
        else if(_ter==48){_g.broken_power = 1;}
        else if(_ter==49){_g.scorched = 1;}
        else if(_ter==50){_g.broken_city_big_train = 1;}
        else if(_ter==51){if(!_g.has_street)_g.forest = 3; }
        else if(_ter==52){_g.uranium_field = 1;}
        else if(_ter==53){_g.tree_cutted = 2;}
        else if(_ter==54){
            _g.water_rocks_gem = 1;
            _g.water = 1;
        }
        else if(_ter==58){
            _g.gift = 1;
        } else if(_ter==59){
            _g.lava_rift = 1;
        }
        

        if(_go[4]*1>1000){
            _g.mesto = _go[4]*1-1000;
            if(_g.mesto>TOWN_UPGRADE_DEF_COSTS.length+1){
                _g.mesto=5;
            }
            _g.klikov=0;

            _g.building_type = 'mesto';
            if(_go[6]!=undefined){
                _g.earn_clicks_available=_go[6]*1;
            }else{
                _g.earn_clicks_available=GetMaxTownEarnClicks(_g);//ale prepisuje sa to nizsie...

            }
        }else if(_go[4]*1>900){
            _g.monster = _go[4]*1-900;
        }else{
            let _building_type=0;
            let _building_type2=1;
            if(_go[4]*1 == 2) _building_type = 'farmfield2';
            if(_go[4]*1 == 7) _building_type = 'farmfield';
            if(_go[4]*1 == 9) _building_type = 'ship';
            if(_go[4]*1 >= 21 && _go[4]*1 <= 30){_g.artifact = _go[4]*1-20;}
            
            // if(_go[4]*1 == 30){
            //     _building_type = 'artifact';
            //     _building_type2 = 10;
            // }
            if(BUILDINGS_BY_IDS[_go[4]*1]){
                if(BUILDINGS_BY_IDS[_go[4]*1].grid_key!='remove_rubble_notsaved')
                {

                    _building_type = BUILDINGS_BY_IDS[_go[4]*1].grid_key;
                    if(BUILDINGS_BY_IDS[_go[4]*1].is_shipyard){
                        _g.shipyard=1;
                    }
                }
            }
            if(_building_type){
                _g[_building_type] = _building_type2;
                _g.building_type = _building_type;
            }
            
            
            if(_go[4]*1){
                delete(_g.tree_cutted)
            }

        }
        if(_go[5]*1>0 && _g.mesto){
           _g.klikov=_go[5]*1;
        }
        if(_go[5]*1>0 && _g.train_station){
           _g.rotation=_go[5]*1;
        }



        if(!myGridData[_x])myGridData[_x]={};

        myGridData[_x][_y]=_g;
    }

    for(let _a of ARTIFACTS){
        let _g= GetGridData(_a.x,_a.y);
        if( _g && !_g.artifact){
            _g_new = {};
            _g_new.x = _a.x;
            _g_new.y = _a.y;
            if(_g.ship){
                //nic
            }else if(_g.mesto){
                if(GetGridData(_a.x,_a.y-1)){

                    _g2=GetGridData(_a.x,_a.y-1);
                    if(_g2.building_type!='ship' && _g2.building_type!='mesto'){
                        if(!hrac.storage[_g2.building_type])hrac.storage[_g2.building_type]=0;
                    }
                    hrac.storage[_g2.building_type]++;
    
                    myGridData[_a.x][_a.y-1]={
                        x:_a.x,
                        y:_a.y-1,
                        mesto: _g.mesto,
                        building_type: 'mesto',
                        klikov: _g.klikov,
                        earn_clicks_available: _g.earn_clicks_available,
                    }
                }
            }else if(_g.building_type ){
                if(!hrac.storage[_g.building_type])hrac.storage[_g.building_type]=0;
                hrac.storage[_g.building_type]++;
            }
            _g_new.artifact = _a.id;
            _g_new.znecistenie=30;
            _g_new.znecistenie_max=30;
            if(_a.water){
                _g_new.water=1;
            }
            myGridData[_a.x][_a.y]=_g_new;
        }
    }


    let _optimised = [];
    return _optimised.join(';')
}


let doSaveNotify=0;
function SaveErrorCatched(){
    doSaveNotify=1;
    saveErrors++;
    if(saveErrors>=3){
        ConnectionLostPopup();
    }
    ShowMobileError();
}


/**
 * @param {{gameTick: number, playerData: Record<string, unknown>, gridChunks: {key: string; grid: any[]}[], notify: any, forceSave?: boolean, claimedPayments: {} }} param0 
 */
async function saveGameDataToBE({gameTick, gridChunks, playerData, notify, claimedPayments, forceSave}) {
    try {
        const compressedPlayerData = compressGzipWithFFLATESync(JSON.stringify(playerData));

        const compressedChunks = [];
        for (const { key, grid } of gridChunks) {
            compressedChunks.push({ key, grid: compressGzipWithFFLATESync(JSON.stringify(grid)) });
        }

        await saveGameDataOptimizedV2({ 
            gameTick,
            playerData: compressedPlayerData,
            gridChunks: compressedChunks,
            claimedPayments: JSON.stringify(claimedPayments),
            transactionsData: undefined,
        }, { forceSave });
        // if(doSaveNotify || notify){
        //     doSaveNotify=0;
        //     AddFloatingText(window.innerWidth*0.5,GetWindowHeight()-50,Bold(GetTextCAPS('GAME SAVED')),{color:'#72d84c',fontSize:22});
        // }
    } catch (err) {
        if (err instanceof InvalidGameTick) {
            captureGameEvent('save_game_data_skipped', { message: err.message });
            return;
        }
        captureGameEvent('save_game_data_error', parseErrorToJSON(err));
        
        // SaveErrorCatched();
    }
}

let saveErrors=0;
let saveInTicks = 0;
let saveOrderIn9sec=0;

// HERE!
async function SaveGame(_notify, forceSave){
    if(!enabledSaving || !enabledSaving2){
        console.log('SAVING DISABLED')
    }
    if(enabledSaving && enabledSaving2){
        if(visitingFriend){
            console.log('NO SAVE, visiting friend')
            return false;
        }
        anyActionDone=0;
        let _timeStart = performance.now();

        hrac.saved_camera={
            x: camera.x,
            y: camera.y,
            zoom: Math.max(0.35,zoomScale2),
        }
        // console.time('gridOptimize');
        let optimizedGridData='';
        try{
            optimizedGridData = GetAllOptimizedGridData();
        }catch(e){
            captureGameEvent('get_optimized_grid_data_failed', { message: e.message, stack: e.stack });
            SaveErrorCatched();
            return false;
        }

        // console.timeEnd('gridOptimize');
        // return false;
        localStorage.setItem("already_playing", 1);
        hrac.save_type = 1;
        if(!backendSaving){
            console.time('localstorage');
            localStorage.setItem("hrac", JSON.stringify(hrac));
            localStorage.setItem("gridData", JSON.stringify(optimizedGridData));
            localStorage.setItem("chests", JSON.stringify(chests));
            localStorage.setItem("activists", JSON.stringify(saveActivists));
            console.timeEnd('localstorage');
        }
        hrac.chests = chests;
        hrac.activists = saveActivists;
        hrac.offline_reward_in_second = GetMaxOfflineTimeSec();
        hrac.stats.cleared_perc = GetClearedPerc(hrac);
        
        hrac.fps = fps_total / fps_counter;
        hrac.fps_min=fps_min;
        hrac.fps_max=fps_max;

        const savedState = JSON.stringify({
            hrac: hrac,
            chests: chests,
            activists: saveActivists,
            myGridData: optimizedGridData,
            // chunks: ChunkSave()
        });


        
        // logHracJson(savedState)


        if(backendSaving){
            saveOrderIn9sec++;
            if(saveOrderIn9sec>9)saveOrderIn9sec=9;
            const gameTick = hrac.stats.income_ticks*10+saveOrderIn9sec;
            hrac.stats.save_tick=gameTick;
            updateUserStats({ income: Mro(hrac.income), score: hrac.enviro, tilesCleaned: hrac.stats.cleaning_clicks }).catch(err => console.error(err));
            // NEW WAY OF SAVING, REFACTOR ONCE ALL PLAYERS HAVE NEW DATA FORMAT
            {
                // make copy
                const claimedPaymentsToSend = JSON.parse(JSON.stringify(claimedPayments));
                logHracJson(JSON.stringify(claimedPayments))

                compressGzipWrapper(savedState).then((binaryData) => {
                    saveGameDataOptimized(binaryData, gameTick, claimedPaymentsToSend, forceSave).then((response) => {
                        localStorage.setItem("gameDataHash", response.hash);
                        if(hrac.nastavenia.show_save_notify || doSaveNotify || _notify ){
                            doSaveNotify=0;
                            AddFloatingText(window.innerWidth*0.5,GetWindowHeight()-50,Bold(GetTextCAPS('GAME SAVED')),{color:'#72d84c',fontSize:12,dur:1});
                        }
                    }).then(() => {
                        claimedPayments.inboxMessages = claimedPayments.inboxMessages.filter(id => !claimedPaymentsToSend.inboxMessages.includes(id));
                        claimedPayments.paymentRewards = claimedPayments.paymentRewards.filter(id => !claimedPaymentsToSend.paymentRewards.includes(id));
                    }).catch((err) => {
                        if (err instanceof InvalidGameTick) {
                            captureGameEvent('save_game_data_skipped', { message: err.message });
                        } else {
                            captureGameEvent('save_game_data_error', parseErrorToJSON(err));
                        }
                        console.error(err);
                        SaveErrorCatched();
                    });
                })
            }
            // NEWER WAY OF SAVING, REFACTOR ONCE ALL PLAYERS HAVE NEW DATA FORMAT
            // { //docasne disabled chunk save
            //     const { chunksToSave, savePointer} = saveGridMarker.getChunksToSave();

            //     saveGameDataToBE({
            //         gameTick,
            //         playerData: {
            //             hrac,
            //             chests,
            //             activists: saveActivists,
            //         },
            //         gridChunks: chunksToSave,
            //         notify: _notify,
            //         forceSave, 
            //     }).then(() => {
            //         saveGridMarker.saveCompleted(savePointer);

            //         // claimedPayments.inboxMessages = claimedPayments.inboxMessages.filter(id => !claimedPaymentsToSend.inboxMessages.includes(id));
            //         // claimedPayments.paymentRewards = claimedPayments.paymentRewards.filter(id => !claimedPaymentsToSend.paymentRewards.includes(id));
            //     });
            // }
        }

        let _timeEnd = performance.now();
        hrac.stats.timer_save = _timeEnd-_timeStart;
        console.log('save calculated miliseconds: ',hrac.stats.timer_save);
        
        console.log('game saved')
        
        saveErrors = 0;
    }
}

let totalSpent=0;
let boughtPacks=[];
async function LoadGame(){
    let _gridData = null;
    let _chests = null;
    let _hrac = null;
    
    if(!backendSaving){
        if(localStorage.getItem("gridData")){
            _gridData = JSON.parse(localStorage.getItem("gridData"));
            _chests = localStorage.getItem("chests");
            _hrac = JSON.parse(localStorage.getItem("hrac"));
        }
    }
    
    if(backendSaving)
    if (IS_DEV) {
        let _deviceSecret = localStorage.getItem('deviceSecret');
        DEVICE_UUID = localStorage.getItem('deviceUuid');
        if (!DEVICE_UUID) {
            DEVICE_UUID = crypto.randomUUID();
            localStorage.setItem('deviceUuid', DEVICE_UUID);
        }

        try {
            const resp = await registerOrLogin(_deviceSecret);
            setAuthToken(resp.accessToken);
            setUserId(resp.userId);
            localStorage.setItem('deviceSecret', resp.deviceSecret);
        } catch (err) {
            if (err instanceof ApiError && err.code === 'INVALID_SECRET') {
                let resp = await registerOrLogin();
                setAuthToken(resp.accessToken);
                setUserId(resp.userId);
                localStorage.setItem('deviceSecret', resp.deviceSecret);
            } else {
                if(gebi('loading_images_info') && gebi('loading_images_info').innerHTML){
                    SetInner('loading_images_info',ColorSpan('red','connection error'));
                }
                console.error(err);
            }
        }
    }

    backendVersion = await getGameVersionCall();
    const status = await getGameStatusCall();

    if (status.isMaintenance) {
        console.log('show maintenance');
    }

    // console.log('version REQUIRED: ', backendVersion);

    if(backendSaving){
        FlutterLoadingBar(0.3);

        if(backendSaving)await startSession();
        sendAppsflyerLoginEvent();
        FlutterLoadingBar(0.5);
        
        LANGUAGES = await getLanguagesCall();
        news = await getNewsCall();
        FlutterLoadingBar(0.55);
        SERVER_OFFER_PACKS = await getPacksCall();
        SERVER_OFFER_PACKS.sort((a,b)=>a.id-b.id)
        InitStarterPacks();
        FlutterLoadingBar(0.6);
        
        let resp = await getMyself();
        FlutterLoadingBar(0.7);
        currentUser = resp;
        // console.log(resp)

        localeString = await getTranslationsCall(resp.attributes.lang?resp.attributes.lang:'en');
        
        // console.log('---------',resp.attributes.lang,localeString)

        try {
            const savedStateObj = await getMyselfGameDataOptimized();

            // try { //docasne disabled chunk save
            //     const [myPlayer, myGrid] = await Promise.all([
            //         getMyselfGameDataV2(),
            //         getMyselfGameGridDataV2(),
            //     ]);
            //     // console.log('myPlayer-', myPlayer);
            //     // console.log('myGrid-', myGrid);

            //     {
            //         const chunkKeys = Object.keys(myGrid);
            //         // console.log(chunkKeys);

            //         console.time('sync-decompress');
            //         const proccesssed = Object.entries(myGrid).map(async ([chunkKey, bufferObj]) => {
            //             const buffer = new Uint8Array(bufferObj.data);
            //             // console.log('key', chunkKey);

            //             const decompressed = decompressGzipWithFFLATESync(buffer);

            //             const [x, y] = chunkKey.split('_').map((v) => parseInt(v, 10));
            //             return {x, y, data: decompressed}
            //         });
            //         console.timeEnd('sync-decompress');

            //         console.time('async-decompress');
            //         const proccesssedv2 = await Promise.all(Object.entries(myGrid).map(async ([chunkKey, bufferObj]) => {
                        
            //             const buffer = new Uint8Array(bufferObj.data);
            //             // console.log('key', chunkKey);

            //             const decompressed = await decompressGzipWithFFLATE(buffer);
            //             const [x, y] = chunkKey.split('_').map((v) => parseInt(v, 10));
            //             return {x, y, data: decompressed}
            //         }));
            //         console.timeEnd('async-decompress');

            //         console.time('async-decompress-streams');
            //         const proccesssedv3 = await Promise.all(Object.entries(myGrid).map(async ([chunkKey, bufferObj]) => {
                        
            //             const buffer = new Uint8Array(bufferObj.data);
            //             // console.log('key', chunkKey);

            //             const decompressed = await decompressGzipFromBuffer(buffer);
            //             const [x, y] = chunkKey.split('_').map((v) => parseInt(v, 10));
            //             return {x, y, data: decompressed}
            //         }));
            //         console.timeEnd('async-decompress-streams');
            //     }

            // } catch (err) {
            //     console.error(err);
            // }
            
            if(resp.metadata){
                totalSpent = resp.metadata.totalSpent;
                boughtPacks = resp.metadata.boughtPacks;
            }

            _chests = JSON.stringify(savedStateObj.chests);
            loadedActivists = savedStateObj.activists;
            _hrac = savedStateObj.hrac
            _gridData = savedStateObj.myGridData;

            _hrac.stats.daysAfterRegistration = resp.daysAfterRegistration;
            _hrac.stats.allowNameChange = resp.flags.allowNameChange;
            _hrac.lang = resp.attributes.lang;

        } catch (err) {
            captureGameEvent('load_game_data_failed', { message: err.message, stack: err.stack });

            if (err instanceof NotFoundEntityError) {
                //TODO:TOMAS SHOW THAT SAVE FILE WAS NOT FOUND
                console.log('SAVE FILE NOT FOUND');
            } else {
                console.error(err);
                throw new Error('Failed to load game data');
            }
        }

        if(currentUser && _hrac){
            _hrac.name = currentUser.name;
            _hrac.email = currentUser.email;
            _hrac.stats.daysAfterRegistration = currentUser.daysAfterRegistration;
            _hrac.stats.allowNameChange = currentUser.flags.allowNameChange;
        }
    }

    if(_hrac) {

    
        if(_hrac.verzia == GAME_VERSION && _hrac.nastavenia){
            gamePaused=1;
            for(let _a in _hrac){
                if(_a=='stats'){
                    // console.log(_hrac[_a])
                    // console.log(_hrac.stats.super_clickersUsed)
                    for(let _s in _hrac.stats){
                        hrac.stats[_s]=_hrac.stats[_s];
                        // console.log(_s,_hrac.stats[_s])
                    }
                }else if(_a=='tutorial' || _a=='nastavenia'){
                    // console.log(_hrac[_a])
                    // console.log(_hrac.stats.super_clickersUsed)
                    for(let _s in _hrac[_a]){
                        hrac[_a][_s]=_hrac[_a][_s];
                        // console.log(_s,_hrac.stats[_s])
                    }

                }else{
                    hrac[_a]=_hrac[_a];
                }
            }
            if(!_hrac.gold && _hrac.zlato){
                hrac.gold=_hrac.zlato;
            }
            hrac.gold = Mro(hrac.gold);
            // await GetServerTimeShift();
            if(hrac.nastavenia.details && hrac.nastavenia.details==1){
                experimentalDraw = true;
            }

            if(hrac.saved_camera){
                camera.x=hrac.saved_camera.x;
                camera.y=hrac.saved_camera.y;
                camera.zoom= zoomScale = zoomScale2 = hrac.saved_camera.zoom;
            }
    
            if(HasLevel(GRID_VIEW_LEVEL)){
                if(hrac.nastavenia.default_grid_view){
                    isActionGridView=true;
                }
                isResearchedVisible=false;
            }

            FlutterLoadingBar(0.73);
            ProcessLoadedGridData(_gridData,_chests);
            
            AfterLoadTest();
            
            gamePaused=0;
            GetPlayerPackages();
            RefreshAdButton();
            if(GetPlayerUpgradeValue(35)){
                CHEST_TICK_TIME=3000;
            }

        }
    }
}


let loadedActivists=null;
function ParseActivists(_activists){
    if(_activists)
    for(let _a of _activists){
        let _g=GetGridData(_a[0]*1,_a[1]*1);
        if(_g){
            _g.activists=1;
        }
    }
}


async function ProcessLoadedGridData(_gridData,_chests,_isOtherPlayer){ // TOTO sa vola aj pri navsteve suseda
    if(_gridData){
        ParseLoadedGridData(_gridData,(_isOtherPlayer?loadedUserData:null));
        // let _activists = JSON.parse(localStorage.getItem("activists"));
        if(loadedActivists){
            ParseActivists(loadedActivists);
        }else{
            ParseActivists(JSON.parse(localStorage.getItem("activists")));
        }

        let _chests2=[];
        if(_chests){
            _chests2=JSON.parse(_chests);
        }
        chests=[];
        if(_chests2)
        for(let _ch of _chests2){
            let _g = GetGridData(_ch.x,_ch.y);
            if(_g){
                if(!_g.znecistenie){
                    // console.error('zla chesta')
                }else{
                    _g.chest = 1;
                    _ch.time=1;
                    chests.push(_ch);
                }
            }else{
                _ch.time=1;
                chests.push(_ch);
            }
        }

        if(hrac.map_size==250){
            BOUNDERIES_DOWN=hrac.map_size;
            BOUNDERIES_UP=hrac.map_size;
            BOUNDERIES_RIGHT=hrac.map_size;
            BOUNDERIES_LEFT=hrac.map_size;
            if(IsSecondCanvasAllowed()){
                canvas_optimised.width = OPTIMISED_GRID_SIRKA * (BOUNDERIES_LEFT+BOUNDERIES_RIGHT + 1);
                canvas_optimised.height = OPTIMISED_GRID_SIRKA * (BOUNDERIES_UP+BOUNDERIES_DOWN + 1);
            }
        }


        if(!_isOtherPlayer){
            TryAddEffectOfSomeUpgrades();
        }
        if(hrac.upgrades[2]>1){//fix
            hrac.upgrades[2]=1;
            hrac.upgrades[108]=1;

        }
        InitStreets();
        InitFarms();
        InitFarmFields();
        InitUBarrelclouds();
        MarkMegaCities();
        InitTowns();
        InitEventShips();
        InitCollectableGems();
        InitGridClouds();
        GenerateAllShores();
        if(_isOtherPlayer){
            if(!IsJablko()){
                await OptimizeAllBlocks(zoomScale);//pre hraca je to kvoli loadingu inde
            }
        }else{
            TryRemoveOldAd();
            if(HasLevel(BUILDING_EYE_LVL)){
                toggleShowHiddableBuildings=hrac.nastavenia.show_old_buildings;
            }
            ResetAllRoadConnections();
            ZratajUraniumBarrelPollution();
            HardRecalculateAllStats();
            InitBooks();
            hrac.special_places_radar = hrac.special_places_radar.filter(sp=>!sp.found)
        }
        FlutterLoadingBar(0.8);
        if(HasLevel(6)){
            lastActiveHracTabIndex=1;
        }

        // RefreshHeader();

        if(hrac.stats.towns==2 && hrac.stats.streets<=2){
            needsRoadTutorial=1;
        }
        
        pocetRendrowMimoHru=999;
    }
}
const BUILDING_EYE_LVL=40;


function IsTester(){
    return false;
}

function MapClearTest(){
    return false;
}

function IsTerrainTester(){
    return false;
}








/** 

  XXX      XXXXX     XXX    XXXXXX         XXXXXX  XXXXX   XXXXX  XXXXXX  X     X  XXXXXX 
   X      XX   XX   XX XX    X   XX        X       X   XX    X    X       XX    X   X   XX
   X      X     X  XX   XX   X    X        X       X    X    X    X       X X   X   X    X
   X      X     X  X     X   X    X        X       X   XX    X    X       X X   X   X    X
   X      X     X  XXXXXXX   X    X        XXXXX   XXXXX     X    XXXXX   X  X  X   X    X
   X      X     X  X     X   X    X        X       XXX       X    X       X  X  X   X    X
   X      X     X  X     X   X    X        X       X XX      X    X       X   X X   X    X
   X   X  XX   XX  X     X   X   XX        X       X  XX     X    X       X   X X   X   XX
  XXXXXX   XXXXX   X     X  XXXXXX         X       X   XX  XXXXX  XXXXXX  X    XX  XXXXXX 

*/

let returnHomeInTicks=0;
let reopenLeaderBoards=false;
let reopenLeaderBoards2=false;
function ReturnHomeToMyTown(_reopenLB){
    gamePaused=1;
    DisableMouse();
    PleaseWaitPopup();
    if(reopenLeaderBoards2){
        reopenLeaderBoards = _reopenLB;
    }
    returnHomeInTicks=25;
}
async function ReturnHomeToMyTownPart2(){ //returning home returnfrom return from
    console.log('RETURNING HOME')
    gamePaused=1;

    myGridData = mojeDataPredNavstevou.gridData;
    streets = mojeDataPredNavstevou.streets;
    chests = mojeDataPredNavstevou.chests;
    
    camera = GetDefaultCamera();
    camera.x = mojeDataPredNavstevou.camera.x;
    camera.y = mojeDataPredNavstevou.camera.y;
    if(camera.tapScreen){
        camera.tapScreen.x = mojeDataPredNavstevou.camera.tapScreen.x;
        camera.tapScreen.y = mojeDataPredNavstevou.camera.tapScreen.y;
    }
    camera.zoom = zoomScale = zoomScale2 = mojeDataPredNavstevou.camera.zoom; //tychto 5000 zoomov treba dat dopice refactor plz

    ShowJS('header_packages');
    ShowJS('ad_img');
    ShowJS('upgrades_left_box');
    ShowJS('special_offer_left_box');
    ShowJS('buildings_left_box');
    ShowJS('scb_div');
    HideAllFloatingTexts();
    mojeDataPredNavstevou=null;
    tickCount=1;
    ResetAntiClicker();
    loadedUserData=null;
    visitingFriend=0;
    InitTowns();
    InitCollectableGems();
    InitGridClouds();
    GenerateAllShores();
    InitUBarrelclouds();
    if(!IsJablko()){
        InitOptimisedBlocks();
        await OptimizeAllBlocks(zoomScale);
    }

    // await Draw();
    TownLabelRefresh();

    gamePaused=0;
    RefreshHeader();
    CloseBottomMenu();
    
    CloseLoadingPopup();
    ShowBottomMenu();
    EnableMouse();
    if(reopenLeaderBoards){
        ClickBottomMenu(1);
    }
}

let mojeDataPredNavstevou=null;

let loadedUserData=null;
let startLoadingOtherUserId=0;
let startLoadingOtherUserName='';
function LoadOtherUser(_id,_orName){
    if(_id==USER_ID){
        return false;
    }
    if(startLoadingOtherUserId){
        AddFloatingError(GetText('please wait, loading other user'));
        return false;
    }
    if(_orName){
        startLoadingOtherUserName = _orName;
    }else{
        startLoadingOtherUserId = _id;
    }
    DisableMouse();
}



async function LoadOtherUserPart2(_id,_orName){
    startLoadingOtherUserId=0;
    startLoadingOtherUserName='';
    let _failedToLoad=true;

    try {

        if(!mojeDataPredNavstevou){
            mojeDataPredNavstevou={
                gridData: myGridData,
                chests: chests,
                streets: streets,
                camera: camera,
            }
        }
        

        visitingFriend=1;
        gamePaused=1;
        PleaseWaitPopup();
        // TODO: parallelize these requests

        let _userGameData = null;
        if(_orName){
            _userGameData = await getUserByNameCall({name: _orName});
            _id = _userGameData.id;
        }else{
            _userGameData = await getUserGameData(_id);//'145d1ac2-aa84-4076-b6a2-e14f18ecf521');
        }

        let userSavedStateObj = undefined;        

        try {
            let _userGameSaveDataCompressed = await getUserGameDataOptimized(_id);

            userSavedStateObj = _userGameSaveDataCompressed;
        } catch (err) {
            console.error(err);
            captureGameEvent('load_other_user_failed', { otherUserId: _id });
            
            // TODO: temporary solution, once all players get new data format
            throw new Error('Failed to load other user data');
        }
        _failedToLoad=false;

        if(_orName && hrac.recentlyVisited){
            let _found = hrac.recentlyVisited.find(f=>f[0]==_id);
            if(!_found){
                hrac.recentlyVisited.push([_id,_orName]);
            }
            if(hrac.recentlyVisited.length > 15){
                hrac.recentlyVisited.shift();
            }
        }
        
        HideDiv('header_packages');
        HideDiv('ad_img');
        HideDiv('upgrades_left_box');
        HideDiv('special_offer_left_box');
        HideDiv('buildings_left_box');
        HideDiv('scb_div');
        HideAllFloatingTexts();

        loadedUserData = userSavedStateObj.hrac;
        for(let _kb in BUILDINGS_BY_KEYS){
            if(!loadedUserData.buildings[_kb])loadedUserData.buildings[_kb]=0;
        }
    
        loadedUserData.name = _userGameData.name;
        delete(loadedUserData.email);
        if(!enabledSaving){
            console.log(loadedUserData)
        }
        CloseBottomMenu();
        CloseBasicPopup();
        ShowBottomMenu();

        last_grid_clicked=null;
        streets=[];
        ProcessLoadedGridData(userSavedStateObj.myGridData,null,true);

        if(!IsJablko()){
            if(IsSecondCanvasAllowed() && loadedUserData.map_size && loadedUserData.map_size>230){
                canvas_optimised.width = OPTIMISED_GRID_SIRKA * (GetBoundery(4,loadedUserData)+GetBoundery(6,loadedUserData) + 1);
                canvas_optimised.height = OPTIMISED_GRID_SIRKA * (GetBoundery(2,loadedUserData)+GetBoundery(8,loadedUserData) + 1);
            }
            // InitOptimisedBlocks(loadedUserData);//treba dokodit
            InitOptimisedBlocks();
        }
    
        
        InitCamera();
        camera.zoom = zoomScale2 = zoomScale=0.65;
        // camera.x = 0;
        // camera.y = 0;
        // camera.zoom = loadedUserData.savedCamera.zoom;
        gamePaused=0;
        CloseLoadingPopup();
        RefreshHeader();
        if(townLabels[0])townLabels[0].last_camera_x=99999999;
        town_label_rect[0]=null;
        EnableMouse();

        console.log('------------------')

        // console.log(userGameData)
    } catch (err) {
        if(!_failedToLoad){
            ReturnHomeToMyTown(0);
        }else{
            CloseLoadingPopup();
            EnableMouse();
            mojeDataPredNavstevou=null;
            gamePaused=0;
            visitingFriend=0;
            ShowHeader();
            CloseBasicPopup();
            // ShowBottomMenu
        }
        AddFloatingError('unable to load this player');
        console.error(err);
    }
}


// function DecodeMatusStuff(_str){
//     let _novyStr='';
//     for(let i in _str){
//         if(_str[i].toUpperCase() != _str[i]){
//             _novyStr+=_str[i];
//         }else{
//             _novyStr+='_'+_str[i].toLowerCase();
//         }
//     }
//     return _novyStr;
// }

// function DecodeMatusStuffAll(){
//     for(let i in loadedUserData)if(i){
//         let _decodedKey = DecodeMatusStuff(i);
//         if(i != _decodedKey){
//             loadedUserData[_decodedKey] = loadedUserData[i];
//         }
//     }
//     for(let i in loadedUserData.stats)if(i){
//         let _decodedKey = DecodeMatusStuff(i);
//         if(i != _decodedKey){
//             loadedUserData.stats[_decodedKey] = loadedUserData.stats[i];
//         }
//     }
// }

function ShowFriendStats(){
    // console.log(loadedUserData)
    let _out = HracStatsInner(loadedUserData,1);
    _out += HR+HracIncomesInner(loadedUserData,1);
    DoPopupWithOptions({text:_out,kde:'bottomMenuPopup',max_height_vh:70,at_bottom:1,closefun:'DeclickSubmenu();'});

}


// setTimeout(() => {
//     LoadOtherUser('145d1ac2-aa84-4076-b6a2-e14f18ecf521')
// }, 1500);


function ShowMobileError(){
    AddFloatingText(window.innerWidth*0.5,GetWindowHeight()-50,Bold('SAVE ERROR'),{color:'red',fontSize:22});
    console.error('mobile error')
}

function AfterLoadTest(){

}





// new chunk save 
// new chunk save 
// new chunk save 
// new chunk save 
// new chunk save 
// new chunk save 
// new chunk save 
// new chunk save 
// new chunk save 
// new chunk save 
// new chunk save 
// new chunk save 
// new chunk save 
let saveGridsMarks=[];

class SaveGridMarker {
    constructor() {
        // Map<number(savePointer), Set<string>(chunkIndex)>
        this.saveGridsMarksMap = new Map();
        this.savePointer = 0;
    }


    markBlockForSave(_grid){
        const chunkMarks = this.saveGridsMarksMap.get(this.savePointer);
        const index = GetSaveBlockIndexFromGrid(_grid);

        if (chunkMarks == null) {
            this.saveGridsMarksMap.set(this.savePointer, new Set([index]));
            return;
        }

        chunkMarks.add(index);
    }

    saveCompleted(_savePointer){
        if (typeof _savePointer === 'number') {
            const validSavePointers = Array.from(this.saveGridsMarksMap.keys()).filter((savePointer) => savePointer <= _savePointer);
            for(const savePointer of validSavePointers) {
                this.saveGridsMarksMap.delete(savePointer);
            }
            return true;
        }
        return false;
    }

    /**
     * 
     * @returns {{savePointer: number, chunksToSave: {key: string, grid: any[]}[]}}
     */
    getChunksToSave() {
        this.savePointer++;

        const chunksToSave = [];
        const savePointers = Array.from(this.saveGridsMarksMap.keys());

        //TODO: take all savePointers
        const savePointer = savePointers.pop();

        if (savePointer == null) {
            return {
                savePointer,
                chunksToSave,
            }
        }

        const chunkMarks = this.saveGridsMarksMap.get(savePointer);

        if (chunkMarks == null) {
            return {
                savePointer,
                chunksToSave,
            }
        }

        for (const index of chunkMarks) {
            const chunkData = ProcessOneChunkSave(index);
            const worldId = 1;
            chunksToSave.push({
                key: this.createChunkKey(worldId, chunkData.x, chunkData.y),
                grid: chunkData.grid_data,
            });
        }

        return {
            savePointer,
            chunksToSave,
        }
    }

    createChunkKey(_worldId, _chunkX, _chunkY) {
        return `chunk_${_worldId}_${_chunkX}_${_chunkY}`;
    }
}

const saveGridMarker = new SaveGridMarker();

// save all chunks
function UnoptimisedSaveAllChunks(){
    console.time('create all chunks');
    saveGridsMarks=[];
    for(let _x=-BOUNDERIES_LEFT;_x<BOUNDERIES_RIGHT;_x+=1){
        for(let _y=-BOUNDERIES_UP;_y<BOUNDERIES_DOWN;_y+=1){
            let _g = GetGridData(_x,_y);
            if(_g){
                MarkBlockForSave(_g);
            }
        }
    }
    console.timeEnd('create all chunks');
    console.log(saveGridsMarks)
    
    let chunksToSave = [];
    for(let _coordinatesSTR of saveGridsMarks){
        chunksToSave.push(ProcessOneChunkSave(_coordinatesSTR));
    }
    console.log(chunksToSave)
    saveGridsMarks=[];
}

function ProcessOneChunkSave(_coordinatesSTR){
    let _coordinates = _coordinatesSTR.split('_');
    let _chunkX = Mro(_coordinates[0]*1);
    let _chunkY = Mro(_coordinates[1]*1);

    let _optimised = [];
    let _activists = [];
    
    for(let _x = _chunkX*CHUNK_SIZE;_x < (_chunkX+1)*CHUNK_SIZE; _x++){
        for(let _y = _chunkY*CHUNK_SIZE;_y < (_chunkY+1)*CHUNK_SIZE; _y++){
            ProcessOneOptimisedGrid(_x,_y,_optimised,_activists);
        }
    }
    return {
        grid_data:_optimised,
        x: _chunkX*CHUNK_SIZE,
        y: _chunkY*CHUNK_SIZE,
        // activists:_activists
    }
}

function MarkBlockForSave(_grid){
    return false;//docasne disabled chunk save
}

const CHUNK_SIZE=50;

function GetSaveBlockIndexFromGrid(_grid){
    let _bx = Math.round(_grid.x/CHUNK_SIZE);
    let _by = Math.round(_grid.y/CHUNK_SIZE);
    return _bx+'_'+_by;
}

function CheckVersion(){
    getGameVersionCall().then(function (version) {
        if(backendVersion != version){
            let _out='';
            _out+=BRBR+GetText('A new version is available now! Restart your app to have more fun!')+BRBR;
            _out+=BRBR+Button(GetText('Restart app'),'RestartApp();')+BRBR;
            ErrorPopup(_out,GetText('New version!'),{});
        }
        console.log('version', backendVersion, version)
    });
}



const GEM_BOTTOM_ID=3;
const GEMS_LEVEL_REQUIRED=3;
const _menucka=[
    {
        id:1,
        label:'stats',
        icon:'leaderboard',
        opened:0,
        town_level_required:1,
    },
    {
        id:2,
        label:'UPGRADES',
        icon:'upgrades',
        opened:0,
        town_level_required:1,
    },
    {
        id:GEM_BOTTOM_ID,
        label:'SHOP',
        icon:'shop',
        opened:0,
        town_level_required:GEMS_LEVEL_REQUIRED,
    },
    {
        id:4,
        label:'SETTINGS',
        icon:'settings',
        opened:0,
        town_level_required:1,
    },
];

const MAX_WIDTH=600;

function ShowBottomMenu(){

    if(!hrac || !hrac.stats ){
        return false;
    }

    let _out='';
    let _krajnaMedzera=0;
    let _medzera=3;
    let _sirkaFooter = window.innerWidth+2*_medzera;
    if(_sirkaFooter>MAX_WIDTH){
        _sirkaFooter=MAX_WIDTH;
        if(hrac.nastavenia.leftHanded==2){
            _krajnaMedzera=12;
        }
        if(hrac.nastavenia.leftHanded==0){
            _krajnaMedzera=  (window.innerWidth+2*_medzera - MAX_WIDTH) * 0.5;
        }
        if(hrac.nastavenia.leftHanded==1){
            _krajnaMedzera=  (window.innerWidth+2*_medzera - MAX_WIDTH) - 12;
        }
        
    }

    if(visitingFriend){

        let _friendBottomMenu=[
            {
                label: GetTextCAPS('stats'),
                fun: 'ShowFriendStats();',
                id: 'friend_stats',
            },
            {
                label: GetTextCAPS('RETURN HOME'),
                fun: 'ReturnHomeToMyTown(1);',
                id: 'bottom_menu_but_return_home',
            },
        ];
        let _orderIndex=-1;
        let _button_count=2;
        let _button_space=20;
        for(let _o of _friendBottomMenu){
            _orderIndex++;
            let _sirka = (_sirkaFooter / _button_count)-(2)*_button_space;
            let _x = _orderIndex*(_sirkaFooter / _button_count)+_button_space;
            
            
            _out+='<div class="bottom-menu-button" style="top:'+(-GetBottomMenuSize())+'px; left:'+(_x)+'px; width:'+(_sirka)+'px;" id="'+_o.id+'" onclick="PlayTap();">'+_o.label+'</div>';
            _out+='<div class="bottom-menu-button" style="font-size:14px;top:'+(-GetBottomMenuSize())+'px; left:'+(_x)+'px; width:'+(_sirka)+'px;" id="'+_o.id+'" onclick="PlayTap();'+_o.fun+'">'+_o.label+'</div>';
            SetInner('footer',_out);
        }
        return false;
    }

    let _pocet = 0;
    for(let _m of _menucka){
        if(HasLevel(_m.town_level_required)){
            _pocet++;
        }
    }

    let _por=-1;
    let _sirka = (_sirkaFooter / _pocet)-2*_medzera;

    for(let _m of _menucka){
        if(HasLevel(_m.town_level_required)){

            _por++;
            let _x = _por*(_sirkaFooter / _pocet)+_krajnaMedzera;
            

            _style=' style="height:'+(GetBottomMenuSize()-13)+'px;"';
            // _style='style="height:'+(35)+'px;"';
            _out+='<div class="bottom-menu-button '+(_m.opened?'selected':'')+'" style="top:'+(-GetBottomMenuSize()-(_m.opened?13:5))+'px; left:'+_x+'px; width:'+(_sirka)+'px;" id="bottom_menu_but_'+_m.id+'" onclick="PlayTap();ClickBottomMenu('+_m.id+');">';
            _out+=GetIconImage(_m.icon,35,-8);
            if(_m.id==3 && HasDoubleSale() && HasLevel(7) ){
                _out+='<div id="offer_star">'+GetIconImage('menu_star',24,3)+'</div>';
            }
            _out+='<div class="line-border" style="left:-3px;"></div>';
            _out+='<div class="line-border" style="right:-3px;"></div>';
            _out+='</div>';
            if(hrac.nastavenia.biggerBottomMenu){
                _out+='<div class="bottom-menu-button-label '+(_m.opened?'selected':'')+'" style="left:'+_x+'px; width:'+(_sirka)+'px;" onclick="PlayTap();ClickBottomMenu('+_m.id+');" id="bottom_menu_but_label_'+_m.id+'">'+SpanID('bottom_label_'+_m.id,GetTextCAPS(_m.label))+'</div>';
            }
        } 
    }
    SetInner('footer',_out);
    gebi('footer').style.top = 'calc(100vh - '+BOTTOM_PADDING+'px)';

    for(let _m of _menucka){
        if(HasLevel(_m.town_level_required)){
            let _rect2=GetRect('bottom_label_'+_m.id);
            if(_rect2 && _rect2.width > _sirka-5){
                ChangeSizeOfAllMenuButtons();
                break;
            }
        }
    }    
    
    let _shadow='';
    _shadow+='<div id="bottom-bg-bar" style="top:-'+(hrac.nastavenia.biggerBottomMenu?50:30)+'px;"></div>';
    _shadow+='<div id="bottom-bg-bar-shadow" style="top:-'+((hrac.nastavenia.biggerBottomMenu?50:30)+60)+'px;"></div>';
    SetInner('footer_shadow',_shadow);
    gebi('footer_shadow').style.top = 'calc(100vh - '+BOTTOM_PADDING+'px)';
}

function ChangeSizeOfAllMenuButtons(){
    for(let _m of _menucka){
        if(gebi('bottom_label_'+_m.id)){
            gebi('bottom_label_'+_m.id).style.fontWeight='normal';
            gebi('bottom_label_'+_m.id).style.fontSize='9px';
        }
    }

}


function GetBottomMenuSize(){
    if(hrac && hrac.nastavenia && hrac.nastavenia.biggerBottomMenu){
        return 65;
    }
    return 45;
}

function DeclickSubmenu(){//refactor
    for(let _m of _menucka){
        if(_m.opened){
            SetY('bottom_menu_but_'+_m.id,-GetBottomMenuSize()-5);
            RemoveClass('bottom_menu_but_'+_m.id,'selected');
            RemoveClass('bottom_menu_but_label_'+_m.id,'selected');
            _m.opened=0;
            
        }
    }
    
    highlightUpgradeId=0;
}

function RefreshStats(){
    if(gebi('player_stats')){
        ClickBottomMenu(1,1);
    }
}

function IsGridMenuVisible(){
    if(gebi('isGridMenuVisible')) return true;
    return false;
    
}


function ClickBottomMenu(_id,_refresh,_extra){
    // console.log(_id)
    let _anyOpened=0;

    for(let _m of _menucka){
        if(_m.id != _id || (_m.opened && !_refresh)){
            SetY('bottom_menu_but_'+_m.id,-GetBottomMenuSize()-5);
            RemoveClass('bottom_menu_but_'+_m.id,'selected');
            RemoveClass('bottom_menu_but_label_'+_m.id,'selected');
            _m.opened=0;
        }else{
            _m.opened=1;
            SetY('bottom_menu_but_'+_m.id,-GetBottomMenuSize()-13);
            AddClass('bottom_menu_but_'+_m.id,'selected');
            AddClass('bottom_menu_but_label_'+_m.id,'selected');
            _anyOpened=1;
        }
    }
    
    refreshTownInfoEnabled=true;

    if(_anyOpened || _refresh){

        let _options={
            kde:'bottomMenuPopup',
            refresh_id: 'bm_'+_id,
            no_bg:1,
            at_bottom:1,
            closefun:'DeclickSubmenu();if(showUpgradesTO)clearTimeout(showUpgradesTO)'
        }
        if(!_refresh){
            HideAllFloatingTexts();
        }
        let _out='<span id="bottommenuspan"></span>';
        if(_id==1){
            _out+=InitTabInner('hrac_tabs',[GetIconImage('stats_leaderboards',36),GetIconImage('stats_player',36),(hrac.stats && hrac.stats.achievement_ids_done && hrac.stats.achievement_ids_done.length>0?GetIconImage('stats_achievement',36):0),GetIconImage('stats_incomes',36),GetIconImage('stats_book',36),GetIconImage('stats_species',36)],lastActiveHracTabIndex,'GetHracTabInner(','RefreshBottomPopupPosition();' );

            // _out += HracStatsInner();
            _options.max_height_vh=70;
            _options.disable_scroll=1;
            
        }
        if(_id==2){//upgrades
            _options.max_height_vh=70;
            if(HasLevel(10)){
                _options.showEyeButton=1;
            }
            _options.onscrollfun='UpgradesScrollChange(event,this,2);';
            _options.bg_image='linear-gradient(to bottom, #31618d, #393c49)';

            _options.setScrollTop=lastUpgradeScroll2;
            _options.label2 = GetTextCAPS('POST-APO MARKET');
            
            _options.label2=GetTextCAPS('UPGRADES')+SpanID('upgrades_count_overview',GetUpgradeCountOverview());

            _out+='<div id="upgrades_container">'+GetUpgradesInner()+'</div>';

        }
        if(_id==3){
            _options.max_height_vh=70;
            // if(testVersion)_options.max_height_vh=80;
            _options.label2 = GetTextCAPS('POST-APO MARKET');
            _out+=StoreOfferPacksInner(_extra);
            if(!_extra){
                _out+=GemyOffersInner();
            }
            _options.bg_image='linear-gradient(to bottom, #733aad, #393c49)';
            _options.onscrollfun='UpgradesScrollChange(event,this,3);';

            if(_refresh){
                _options.setScrollTop=lastUpgradeScroll3;
            }
        }



        if(_id==4){
            _options.max_height_vh=70;
            _out+=GetSettingsInner(_extra?_extra:0);
            _options.label2=GetTextCAPS('SETTINGS');
        }
        CloseGridMenu();
        _options.text = _out;

        DoPopupWithOptions(_options);

        if(_id==1){
            GetAndPrintLeaderBoards();
        }

        if(_id==3 && !hrac.tutorial_gems_scroll){
            hrac.tutorial_gems_scroll=true;
            setTimeout(() => {
                StartAnimatedScrollTo('bottomMenuPopup_okno_in_2',1200,30);
            }, 500); 
            setTimeout(() => {
                StartAnimatedScrollTo('bottomMenuPopup_okno_in_2',0,45);
            }, 1500); 
        }
    
 
    }else{
        CloseBottomMenu();
    }

    // gebi('bottom_menu_but_'+_id).top = '-50px';
}



function FillNameInner(){
    return BRBR+GetText('PLEASE fill in your name in {att1} to show leader boards',ClickSpan(GetText('settings'),'NameChangePopup();'))+BRBR;//set your username
}

async function GetAndPrintLeaderBoards(){
    try {
        if(!hrac.name || hrac.stats.allowNameChange){
            SetInner('leader_boards_container',FillNameInner());
        }else{
            if(leaderBoardsDate<Date.now() || leaderBoardsLastIncome < hrac.income){
                const [resp2, resp3] = await Promise.all([
                    getLeaderboardCall('all'), 
                    getLeaderboardCall('country')
                ]);


                leaderBoardsLastIncome = hrac.income;
                leaderBoards = resp2;
                leaderBoardsByCountry = resp3;
                leaderBoardsDate = Date.now()+60*1000;
                ClickBottomMenu(1,1);
            }
        }

    } catch (err) {
        console.error(err);
    }
}

function SearchFriendPopup(){
    let _out='';
    _out+='<input type="text" id="find_player_input" maxlength="50" placeholder="'+GetText('Type in exact player name')+'">'+BRBR;
    _out+=Button('Search','LoadUserByInput();')+BRBR;
    if(hrac.recentlyVisited?.length){
        _out+=LabelSpan(GetTextCAPS('Recently visited')+':')+BR;
        for(let _rv of hrac.recentlyVisited){
            _out+='<div class="visit_friend_but">'+ClickSpan(_rv[1],'LoadOtherUser(\''+_rv[0]+'\');')+'</div>';
        }
    }
    DoBasicPopup(_out,GetText('Find a player'),{centerised:1,top_y:90+TOP_PADDING,max_width: GetSmallerPopupWidth()});
}

function LoadUserByInput(){
    let _name = gebi('find_player_input').value;
    if(_name){
        LoadOtherUser(0,_name);
    }
}

let leaderBoardsLastIncome=0;
let leaderBoardsDate=0;
let leaderBoards=null;
let leaderBoardsByCountry=null;
let LEVEL_LEADER_BOARDS=6;
function GetLeaderBoardsInner(){
    
    let _out='';
    
    _out+=Center(Button(GetText('Find a player'),'SearchFriendPopup();'));

    // _out+='blah blah'+BR;
    // _out+='blah blah'+BR;
    // _out+='blah blah'+BR;
    _out+=BR;
    _out+=Center(LabelSpan(GetTextCAPS('BEST EXPLORERS')+':'))+BRBR;
    if(!HasLevel(LEVEL_LEADER_BOARDS)){
        _out+=Center(GetText("Level {att1} required",LEVEL_LEADER_BOARDS))+BRBR;
        return _out;
    }
    if(!leaderBoards){
        if(!hrac.name || hrac.stats.allowNameChange){
            _out+=FillNameInner()
        }else{
            _out+=GetText('loading leaderboards...')+BRBR+BRBR;
        }
        return _out;
    }
    _out+='<table class="leaderboards-table" id="ladder_table">';
    // _out+='<tr><th colspan="3">'+LabelSpan(GetTextCAPS('BEST EXPLORERS'))+'</th></tr>';
    _out+='<tr><th>#</th><th>'+GetText('name')+'</th><th>'+GetText('income')+'</th></tr>';
    
    reopenLeaderBoards2=true;
    _out+=GetSingleLeaderBoardInner(leaderBoards);

    _out+='<tr><td colspan="4" style="text-align:center;">'+BRBR+ColorSpan('#8151cf',GetText('You can click any player and check his base'))+BR;
    _out+=BRBR+Bold(GetText('The leaderboard of your country'))+'</td></tr>';
    _out+='<tr><th>#</th><th>'+GetText('name')+'</th><th>'+GetText('income')+'</th></tr>';

    _out+=GetSingleLeaderBoardInner(leaderBoardsByCountry);

    _out+='<tr><td colspan="4" style="text-align:center;">'+BRBR+GetText('data updates every few minutes')+'</td></tr>';

    _out+='</table>'+BRBR;
    anyPopupstartedTicks+=5;
    return _out;
}

function GetSingleLeaderBoardInner(_leaderBoard,_sufix){
    let _printedRank=0;
    let _myRank=999999999;
    let _out='';

                    // if(testVersion)_out+=BRBR+GetFlagImg(hrac.lang)

    if(_leaderBoard){
        for(let _i in _leaderBoard.topPlayers){
            let _user=_leaderBoard.topPlayers[_i];
            if(_user.userId == USER_ID && _user.placement>20){
                continue;
            }
            if(_user&&_user.score<0){
                _user.score=0;
            }
            _out+='<tr style="text-align:left;" onclick="PlayTap();LoadOtherUser(\''+_user.userId+'\');" class="'+(_user.userId == USER_ID?'leaderboards-me':'')+'">';
            _out+='<td style="text-align:center;">'+Bold(FSize(20,_user.placement))+'</td>';
            _out+='<td>'+GetFlagImg(_user.country,28)+(_user.userId == USER_ID?hrac.name:_user.userName)+'</td>';
            _out+='<td style="text-align:center">'+PNumMega(Mro(_user.score))+(_sufix?_sufix:'')+'</td>';
            _printedRank = _user.placement;
            _out+='</tr>';
            if(_user.userId == USER_ID){
                _myRank=_user.placement;
            }
        }
        
        if(_myRank>=20){
            _out+='<tr><td colspan="4">'+BR+Center('...')+BR+'</td></tr>';
            for(let _i in _leaderBoard.playersAround){
                let _user=_leaderBoard.playersAround[_i];
                if(_user.placement <= _printedRank){
                    continue;
                }
                if(_user&&_user.score<0){
                    _user.score=0;
                }
                _out+='<tr style="text-align:left;" onclick="PlayTap();LoadOtherUser(\''+_user.userId+'\');" class="'+(_user.userId == USER_ID?'leaderboards-me':'')+'">';
                _out+='<td style="text-align:center;">'+Bold(FSize((_myRank>980?12:20),_user.placement))+'</td>';
                _out+='<td>'+GetFlagImg(_user.country,28)+(_user.userId == USER_ID?hrac.name:_user.userName)+'</td>';
                _out+='<td style="text-align:center">'+PCislo(Mro(_user.score))+(_sufix?_sufix:'')+'</td>';
                _out+='</tr>';
            }
        }
    }
    return _out;
}

function GetFlagImg(_flagName,_width){
    if(!images_flags[_flagName]){
        console.error('_flagName not defined',_flagName)
        return '';
    }
    let _out='';
    let _scale=_width / 64;
    let _w=Mfl(64*_scale);
    let _h=Mfl(43*_scale);

    const flagImgUrl = getAssetUrl(`public/images/atlas/flags.png?v=${PIC_VERSION}`);
    _out+='<div style="margin-right:5px; position:relative; top:3px; display:inline-block; width:'+(_w)+'px;height:'+(_h)+'px; background-size: '+(_scale*1320)+'px; background-position: '+(-_scale*images_flags[_flagName].x)+'px '+(-_scale*images_flags[_flagName].y)+'px;' + `background-image: url('${flagImgUrl}');` + '"></div>';
    
    return _out;
}


function CloseBottomMenu(){
    // console.error('zavri')
    DeclickSubmenu();   
    CloseGridMenu();
    ClosePopup('bottomMenuPopup');
    
}

function InitTabInner(_id,_tabLabels,_activeTab,_innerFunc,_afterFun){
    if(!_activeTab)_activeTab=1;
    myTabs[_id]={
        labels: _tabLabels,
        func: _innerFunc,
        afterFun: _afterFun?_afterFun:'',
    }
    let _out='<div id="'+_id+'" >'+GetTabMainBody(_id,_tabLabels,_activeTab,_innerFunc,_afterFun)+'</div>';
    return _out;
}

function GetTabMainBody(_id,_tabLabels,_activeTab,_innerFunc,_afterFun){
    let _out='<table cellspacing="0" class="tab-table"><tr class="tab-tr">';
    let _tabCount = _tabLabels.length;
    for(let i in _tabLabels)if(_tabLabels[i]){
        _out+='<th onclick="SetTab(\''+_id+'\','+(i*1+1)+');'+(_afterFun?_afterFun:'')+'" style="width:'+(100/_tabCount)+'%;'+(_activeTab-1==i*1?'border-bottom:none;background-color:var(--light-color-2);':'')+'" >'+(_activeTab-1==i*1?'':'<div class="tab-up-line"></div>')+_tabLabels[i]+'</th>';
    }
    _out+='</tr><tr class="tab-tr"><td colspan="'+_tabCount+'">';
    _out+=eval(_innerFunc+_activeTab+');');
    _out+='</td></tr></table>';
    return _out;
}
let myTabs=[];

function SetTab(_id,_index){
    PlayTap();
    // console.log(_id,_index)
    SetInner(_id,GetTabMainBody(_id,myTabs[_id].labels,_index,myTabs[_id].func,myTabs[_id].afterFun));
}
function InitTownLabels(){
    SetInner('town_labels','<div class="town_label" id="town_label_0"  ontouchmove="MouseMove(event);return false" ontouchstart="MouseDown(event);return false;" ontouchend="TryClickTownLabel(0);return false;"></div>');
    townLabels.push({
        last_camera_x:0,
        last_camera_y:0,
    })
}


let townLabels=[];


function TryClickTownLabel(_index){
    //todo dokoncit index
    if(camera.traveled_now<60){
        camera.grabbed=0;
        ScrollToMainCity();
        ClickGrid(myGridData[0][0]);
    }

}

const town_label_rect=[];
const town_label_is_initials=[];
function TownLabelRefresh(_force){
    let _index = 0;
    if(HasLevel(2))
    if(_force || camera.grabbed || (townLabels[_index].last_camera_x!=camera.x && townLabels[_index].last_camera_y!=camera.y)){
        if(zoomScale>1.0 || zoomScale<0.250){
            SetInner('town_label_'+_index,'');
            town_label_rect[_index]=null;
        }else{
            // console.log('a',camera.x);
            let _townName = hrac.town_names[_index];
            if(visitingFriend){
                if(loadedUserData.town_names){
                    if(!loadedUserData || !loadedUserData.town_names[_index]){
                        SetInner('town_label_'+_index,'');
                        town_label_rect[_index]=null;
                        return false;
                    }else{
                        _townName = loadedUserData.town_names[_index];
                    }
                }else{
                    SetInner('town_label_'+_index,'');
                    town_label_rect[_index]=null;
                    return false;
                }
            }
            

            SetInner('town_label_'+_index,_townName);
            let _x_town = -camera.x+zoomScale*gridSirka*0.5;
            let _y_town = -camera.y-zoomScale*gridSirka*0.5;
            if(_x_town<0 || _x_town>window.innerWidth || _y_town<50 || _y_town>GetWindowHeight()-70){
                if(!town_label_is_initials[_index]){
                    let _townNameA = _townName.split(' ');
                    let _inicialy='';
                    for(let _str of _townNameA){
                        _inicialy+=_str[0]+'.';
                    }
                    town_label_rect[_index]=null;
                    town_label_is_initials[_index]=_inicialy;
                }
                SetInner('town_label_'+_index,town_label_is_initials[_index]);
            }else{
                if(town_label_is_initials[_index]){
                    town_label_is_initials[_index]=null;
                    town_label_rect[_index]=null;
                }
            }
            
            if(!town_label_rect[_index]){
                town_label_rect[_index] = GetRect('town_label_'+_index);
            } 

            if(town_label_rect[_index]){
                let _labelWidth = town_label_rect[_index].width;        
                let _labelHeight = town_label_rect[_index].height;        

                let _x = -camera.x+zoomScale*gridSirka*0.5-_labelWidth*0.5;
                let _y = -camera.y-_labelHeight*0.5;
                // if(_index>0 || HasLevel(45)){
                    _y-=zoomScale*gridSirka*0.5;
                // }
                
                let _inScreen=1;
                if(_x<=-_labelWidth*0.0){ 
                    _x=-_labelWidth*0.0;
                    SetOpacity('town_label_'+_index,0.6);
                    _inScreen=false;
                }else if(_x>window.innerWidth-_labelWidth+_labelWidth*0.0){ 
                    _x=window.innerWidth-_labelWidth+_labelWidth*0.0;
                    SetOpacity('town_label_'+_index,0.6);
                    _inScreen=false;
                }
                if(_y<=50+headerHeight-35+TOP_PADDING){ 
                    _y=50+headerHeight-35+TOP_PADDING;
                    SetOpacity('town_label_'+_index,0.6)
                    _inScreen=false;
                }else if(_y>GetWindowHeight()-100-BOTTOM_PADDING){ 
                    _y=GetWindowHeight()-100-BOTTOM_PADDING;
                    SetOpacity('town_label_'+_index,0.6)
                    _inScreen=false;
                    // gebi('town_label_'+_index).style.transform = 'scale(1)';
                }
                if(_inScreen){
                    SetOpacity('town_label_'+_index,1)
                }else{
                    if(!hrac.nastavenia.displayMainTownLabel){
                        SetInner('town_label_'+_index,'');
                    }
                }
                SetXY('town_label_'+_index,_x,_y);
                townLabels[_index].last_camera_x=camera.x;
                townLabels[_index].last_camera_y=camera.y;
            }
        }
    }
     
}














// pinpoints
// pinpoints
// pinpoints
// pinpoints
// pinpoints
// pinpoints
// pinpoints
// pinpoints
// pinpoints
// pinpoints

let PINPOINT_LVL=14;
function GetMaxPinPoints(){
    return 3;
}

function AddPinPoint(_x,_y,_text){
    hrac.pinpoints.push({
        x: _x, 
        y: _y,
        text: _text,
    });
}

function DrawPinPoints(_ctx,camera_X,camera_Y,camera_X2,camera_Y2){
    if(zoomScale<0.030){
        return false;
    }
    let _scale = 1/zoomScale;

    if(!visitingFriend){
        for(let _point of hrac.pinpoints){
            let _grid = GetGridData(_point.x,_point.y);
            if(_grid){
                if(_grid.x >= camera_X-1 && _grid.y>=camera_Y-1 && _grid.x<camera_X2 && _grid.y<camera_Y2){    
                    _ctx.translate(_grid.x*gridSirka, _grid.y*gridSirka);
                    if(zoomScale<=0.75){
                        MyDrawXY(_ctx,'pinpoint',-(gridSirka)*(_scale-1)*0.5,-gridSirka*_scale*0.8,gridSirka*_scale,gridSirka*_scale,0,0);            
                    }
                    // MyDrawXY(_ctx,'gift_tile',0,0,gridSirka,gridSirka,0,0); //test
                    if(zoomScale>0.35){
                        _ctx.beginPath();
                        _ctx.lineWidth = 2;
                        _ctx.strokeStyle = "#ffde52";
                        _ctx.rect(-1, -1, gridSirka+2,gridSirka+2);
                        _ctx.stroke();
                    }

                    _ctx.translate(-_grid.x*gridSirka,-_grid.y*gridSirka);
                 
                
                }
            }
        }
    }
}

function OpenPinPointMenu(_x,_y){
    if(_x===undefined || _y===undefined){
        if(last_grid_clicked && last_grid_clicked.grid){
            _x = last_grid_clicked.grid.x;
            _y = last_grid_clicked.grid.y;
        }else{
            PlayErrorSound();
            return false;
        }
    }
    let _grid = GetGridData(_x,_y);
    if(_grid){
        let _out='';
        let _pinpoint = hrac.pinpoints.find(p=>p.x==_x && p.y==_y);
        if(hrac.pinpoints.length < GetMaxPinPoints() || _pinpoint){
            
            _out+=GetText3('Your pin point description:')+BR+'<textarea id="pin_point_TA" style="width:95%;" rows="5" maxlength="150">'+(_pinpoint && _pinpoint.text?_pinpoint.text:'')+'</textarea>';
            _out+=BRBR+Button(GetText('Save'),'SavePinPointByXY('+_x+','+_y+');',{color:'green'});
            if(hrac.pinpoints.find(p=>p.x==_x && p.y==_y)){
                _out+=Button(GetText('Remove'),'RemovePinPointByXY('+_x+','+_y+');');
            }
            
            if(hrac.pinpoints.length){
                _out+=BRBR+GetText3('Pin points used: ')+(hrac.pinpoints.length)+' / '+GetMaxPinPoints();
            }
            
        }else{
            _out+=BRBR+ColorSpan('red',GetText3('Pin points used: ')+(hrac.pinpoints.length)+' / '+GetMaxPinPoints())+BRBR;
        }
        
        DoBasicPopup(_out,GetText('Pin point'),{centerised:1,top_y:90+TOP_PADDING});
    }
}



function SavePinPointByXY(_x,_y){
    PlayTap();
    hrac.pinpoints = hrac.pinpoints.filter(p=>p.x!=_x || p.y!=_y);
    AddPinPoint(_x,_y,GV('pin_point_TA'))
    CloseBasicPopup();
}

function RemovePinPointByXY(_x,_y){
    PlayTap();
    CloseBasicPopup();
    hrac.pinpoints = hrac.pinpoints.filter(p=>p.x!=_x || p.y!=_y);
}

function sendToFlutter(_message){
    if(window.handleJs){
        window.handleJs.postMessage(_message);
        return 1;
    }
    return 0;
}
  

function AddFlutterListeners(){
    // zatial ziadne
    // AddGold;
    // console.log('test')
}

let everythingLoaded=false;
function isWebLoaded(){
    if(everythingLoaded){
        sendToFlutter('{\r\n  "event": "loadingDone"\r\n}');
    }
}

function setFlutterTrue(){
    IS_FLUTTER=true;    
}

let gameInBackground=false;
function appWentToBackground(){
    gameInBackground=true;
    if(backendSaving)safeCaptureGameEvent('app_went_to_background');
    if(!everythingLoaded){
        return false;
    }
    if(IS_FLUTTER && anyActionDone>0){
        saveInTicks=2;
    }
    if(!gamePaused){
        gamePaused=1;    
    }
}

function backButtonFired(){
    let _anyPopupVisible=false;
    for(let _p in popupsVisible){
        if(popupsVisible[_p] && popupsClosable[_p]){
            _anyPopupVisible=true;
            ClosePopup(_p);
            if(_p=='bottomMenuPopup'){
                DeclickSubmenu();
            }
            break;
        }
    }
    if(!_anyPopupVisible){
        console.log('back button fired')
        sendToFlutter('{"event":"exitApp"}')
    }
    
}

window.addEventListener('beforeunload', () => {
    backButtonFired();
}) 


let TOP_PADDING=0;//header
let BOTTOM_PADDING=0;
function setSafeAreaPadding(_top,_bottom){
    TOP_PADDING = _top;
    if(window.innerWidth<600){//tie apple telefoniky vracaju taku hodnotu ze idealne este 22 odobrat
        BOTTOM_PADDING = Math.max(0,_bottom-22);
    }else{ 
        BOTTOM_PADDING = _bottom;
    }
}

function SetFlutterMusic(){
    sendToFlutter('{ "event": "setMusic","enabled": '+(hrac.nastavenia.music?'true':'false')+' }');
}

function ShowFlutterPrivacyOptions(){
    sendToFlutter('{ "event": "showPrivacyOptionsFormUmp" }');
}

function SendFlutterReset() {
    sendToFlutter('{ "event": "resetGame" }');
}

async function appWentToForeground(){//ze z backgroundy hrac znova zapol appku
    try {
        appWentToForegroundPart2();
    } catch (error) {
    }
    
    // if(gameInBackground){
    //     requestAnimationFrame(Draw);
    //     gameInBackground=false;
    // }
}
async function appWentToForegroundPart2(){//ze z backgroundy hrac znova zapol appku
    if(backendSaving)safeCaptureGameEvent('app_went_to_foreground');
    if(!everythingLoaded){return false;}
    if(saveErrors>=3) return false;
    if(gebi('nonActivePopup')){
        CloseBasicPopup();
        gamePaused=1;
    }
    if(gamePaused==1){
        gamePaused=0;
        last_action_time=Date.now();

        if(visitingFriend){
            return false;
        }
        if(!hrac || !hrac.claimedOfflineEarning){
            return false;
        }

        let _now = Date.now();
        let _dif = _now-hrac.last_play_time;
        let _dif2 = _now-hrac.last_online_time;
        hrac.last_online_time = _now;
        // if(IsJablko()){
        //     if(_dif2 > 5*60*1000){
        //         if(IS_FLUTTER){
        //             RestartAppManuallyPopup();
        //             return false;
        //         }
        //     }
        // }else{
        // }
        if(_dif2 > 3*60*60*1000){
            if(IS_FLUTTER){
                RestartApp();
                return false;
            }
        }
    
        if(_dif2>9*1000){
            let _amount = Mfl(_dif2 / (INCOME_SEC*1000));
            if(_amount>6){
                _amount=6;
            }            
            for(let i=0;i<_amount;i++){
                GiveIncome(1);
            }
        }
        
        if(_dif>60*1000){
            await ReTryOfflineEarnings();
        }
        if(!testVersion){
            CloseGridMenu();
            CloseBottomMenu();
        }

        allGoodsVisible = false;
    

        RefreshHeader();
        await OnResize();
        RefreshAdButton();
        refreshTownInfoEnabled=true;
        drawSingleFrame=1;
    }
}


function IsJablko() {
    if(IS_IOS){
        return true;
    }
    
    let userAgent = navigator.userAgent || navigator.vendor || window.opera;

    // Windows Phone must come first because its UA also contains "Android"
    if (/windows phone/i.test(userAgent)) {
        return false;
        // return "Windows Phone";
    }

    if (/android/i.test(userAgent)) {
        return false;
        // return "Android";
    }

    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
        return true;
        // return "iOS";
    }

    return false;
    // return "unknown";
}


let canShowPrivacyOption=false;
function showPrivacyOptionsSettings(){
    canShowPrivacyOption=true;
}

let connectionLost=0;
function ConnectionLostPopup(){
    let _out='';
    gamePaused=1;
    connectionLost=1;
    _out+=GetText('Connection lost');
    _out+=BRBR+GetText('Seems like there is a problem with connection, try to restart your app.');
    _out+=BRBR+Button(GetText('Restart app'),'RestartApp();');
    
    ErrorPopup(_out,GetText('Connection lost'),{});

    safeCaptureGameEvent('js_connection_lost', { total_ticks: total_ticks, tickCount: tickCount  });
}

function RestartAppManuallyPopup(){
    let _out='';
    gamePaused=1;
    connectionLost=1;
    _out+=GetText('Seems like your app was in background for too long. Please restart it manually.');
    // _out+=BRBR+Button(GetText('Restart app'),'RestartApp();');
    
    ErrorPopup(_out,GetText('Offline'),{});
}

function LogedOnAnotherDevicePopup(){
    let _out='';
    gamePaused=1;
    connectionLost=1;
    _out+=BRBR+GetText('Seems like you were logged on a different device.');
    _out+=BRBR+Button(GetText('Restart app'),'RestartApp();');
    
    ErrorPopup(_out,GetText('Information'),{});
}



function RestartApp(){
    sendToFlutter('{ "event": "relogUser"}');
}


let flutter_loading_progress=[0,0,0];
function FlutterLoadingBar(_player_progress,_images_progress,_fake_progress){
    if(_player_progress)flutter_loading_progress[0]=Math.min(1,_player_progress);
    if(_images_progress)flutter_loading_progress[1]=Math.min(1,_images_progress);
    if(_fake_progress)flutter_loading_progress[2]=Math.min(1,_fake_progress);

    let _perc = (flutter_loading_progress[0]+flutter_loading_progress[1]) / 2;
    _perc = Math.min(1, _perc*0.8 + 0.1 + flutter_loading_progress[2]*0.1);
    // console.log(_perc)
    sendToFlutter('{ "event": "changeLoading", "loadingValue": '+_perc+'}');
}


let rewardAdIsReady=false;
function loadedRewardedAds(){
    rewardAdIsReady=true;
}


let interstitialAdIsReady=false;
function loadedInterstitialAds(){
    interstitialAdIsReady=true;
}


function failedLoadingInterstitialAds() {
    safeCaptureGameEvent('failed_loading_interstitial_ads');
}

let countOfFlutterAdLoadfails=0;
function failedToLoadVideoAds() {
    safeCaptureGameEvent('failed_loading_video_ads');
    rewardAdIsReady=false;
    countOfFlutterAdLoadfails++;

}

function rewardedVideoEnd() {
    // we do not care about video ends event
}

function rewardedVideoEarned(){//flutter
    ShowAdRewardMenu();
}

function sendAppsflyerLoginEvent(){
    sendToFlutter(JSON.stringify({event: "analyticsEvent", eventName: "af_login"}));
}

function sendAppsflyerPurchaseEvent({price, currency}){
    sendToFlutter(JSON.stringify({event: "analyticsEvent", eventName: "af_purchase", af_revenue: price, af_currency: currency, af_quantity: 1}));
}
let SERVER_OFFER_PACKS=null; //nacitava sa v saveload.js
let STARTER_PACKS=[];

function GetPackById(_sid){
    if(!SERVER_OFFER_PACKS){
        return null;
    }
    let _found = SERVER_OFFER_PACKS.find(p=>p && p.storeId==_sid);
    if(_found){
        return _found;
    }
    return null;
}

function TryBuyPack(_storeId){
    if(!areOffersClickable){
        return false;
    }
    lastlyClickedStarterPackID = _storeId;

    // AddToRecentStarterPacks(lastlyClickedStarterPackID,0.5);
    if(IsStarterPack(_storeId)){
        RefreshSuperClickerBonusButton();
    }
    CloseBasicPopup();
    CloseBottomMenu();
    if(IS_FLUTTER){
        sendToFlutter('{"event": "buyProduct", "productId": "'+_storeId+'"}');
    }else{
        DoBasicPopup('works only in app! '+_storeId,'sorry');
    }
}


function IsAnyStarterPackAvailable(){
    for(let i in STARTER_PACKS){
        let _p = STARTER_PACKS[i];
        if(_p && IsStarterPackReadyByLevel(i)){
            if(i<GetMinStarterPack()){
                continue;
            }

            if(HasBoughtStarterPack(_p.storeId)){

            }else{
                if(latest_bought_pack_store_id!=_p.storeId && !IsStarterPackAmongRecentlyClickedStarterPacks(_p.storeId)){
                    return true;
                }
                break;
            }
        }
    }
    return false;
}

function IsStarterPack(_sid){
    return (_sid && _sid.indexOf('starter_pack')>=0);
}

function InitStarterPacks(){
    STARTER_PACKS[1] =GetPackById('pat_starter_pack_1');
    STARTER_PACKS[2] =GetPackById('pat_starter_pack_2');
    STARTER_PACKS[3] =GetPackById('pat_starter_pack_3');
    STARTER_PACKS[4] =GetPackById('pat_starter_pack_4');
    STARTER_PACKS[5] =GetPackById('pat_starter_pack_5');
    STARTER_PACKS[6] =GetPackById('pat_starter_pack_6');
    STARTER_PACKS[7] =GetPackById('pat_starter_pack_7');
    STARTER_PACKS[8] =GetPackById('pat_starter_pack_8');
    STARTER_PACKS[9] =GetPackById('pat_starter_pack_9');
    STARTER_PACKS[10]=GetPackById('pat_starter_pack_10');
    STARTER_PACKS[11]=GetPackById('pat_starter_pack_11');
    STARTER_PACKS[12]=GetPackById('pat_starter_pack_12');
    STARTER_PACKS[13]=GetPackById('pat_starter_pack_13');
}

function IsStarterPackReadyByLevel(i){
    let _minusLevel = 0;
    if(hrac?.stats?.daysAfterRegistration > 3){
        _minusLevel=5;
    }
    if(!HasLevel(10-_minusLevel)){
        return false;
    }
    if(!HasLevel(7-_minusLevel+i*1)){
        return false;
    }
    return true;
}
function HasStarterPacks(){
    return (hrac && KnowsSuperClickers() && IsAnyStarterPackAvailable());
}



const STRONG_COUNTRIES=['AU','AT','BE','CA','DK','FI','FR','DE','IE','IT','LU','NL','NZ','NO','SE','ES','CH','GB','US', 'PL','CZ','SK'];
function GetMinStarterPack(){
    if(!hrac.registered_country && currentUser?.attributes?.country)hrac.registered_country=currentUser.attributes.country;
    if(hrac.registered_country){
        if(STRONG_COUNTRIES.includes(hrac.registered_country)){

        }else{
            return 1;
        }
    }
    return 3;
}

function GetAllAvailableStarterPacksInArray(_max){
    let _count=0;
    let _array=[];
    let _highestStarterPack = Math.max(GetMinStarterPack(),hrac.stats.highest_starter_pack_bought);
    if(totalSpent>50)_highestStarterPack=11;
    if(totalSpent>100)_highestStarterPack=13;

    if(HasStarterPacks()){
        for(let i in STARTER_PACKS){
            if(i<GetMinStarterPack()){
                continue;
            }
            
            let _p = STARTER_PACKS[i];
            if(_p && IsStarterPackReadyByLevel(i)){

                if(HasBoughtStarterPack(_p.storeId)){
                    if(hrac.stats.highest_starter_pack_bought < i ){
                        _highestStarterPack = hrac.stats.highest_starter_pack_bought = i;
                    }

                }else{
                    if(latest_bought_pack_store_id!=_p.storeId && !IsStarterPackAmongRecentlyClickedStarterPacks(_p.storeId)){
                        let _out='';
                        if(_p.price){
                            _out += '<div class="starter-pack" onclick="TryBuyPack(\''+_p.storeId+'\');">';
                        }else{
                            _out += '<div class="starter-pack">';

                        }
                        
                        let _reward=[];
                        for(let _r of _p.reward){
                            _reward[_r.resource]=_r.amount;
                        }
                        const imgUrl = getAssetUrl('public/images/ui/offer_light.png');
                        _out += '<img src="' + imgUrl + '" class="starter_pack_bg_image">';
                        _out += '<div class="starter_pack_label">Starter pack</div>';
                        // if(testVersion)_reward['gold']=15000;
                        _out += '<div class="starter_pack_reward">'+PMats(_reward,32,'+','&nbsp;');
                        if(IsStarterPack(_p.storeId) && GetSuperClickerStarterPackDisplayBonus()>0){
                            _out += BR+FSize(16,GetText3('Bonus:'))+'+'+PMat(GetSuperClickerStarterPackDisplayBonus(),'super_clickers',32);
                        }
                        _out += '</div>';
                        if(_p.price){
                            _out += '<div class="starter_pack_cost">';
                            _out += GetText3('Cost:')+_p.price.value+' '+(_p.price.currency=='EUR'?'&euro;':_p.price.currency);
                            _out += '</div>';
                        }
                        _out += '<div class="starter_pack_bottom_effect"></div>';
                        _out += '<div class="starter_pack_bottom_effect2"></div>';
                        _out += '</div>';
                        _array.push(_out);
                        _count++;
                        if(_max && _count>=_max){
                            break;
                        }
                    }



                    if(_highestStarterPack > i){

                    }else{
                        break;
                    }
                }
            }
        }
    }

    return _array;
}

function GetStarterPacksInner(_max,_isPopup){
    let _out='';
    let _array = GetAllAvailableStarterPacksInArray(_max);
    
    
    if(_array?.length){

        if(_isPopup){
            return GetRandomItemFromArray(_array);
        }

        for(let _sp of _array){
            _out+=_sp;
        }
        _out = '<div id="starter_packs_container">'+_out+'</div>';
    }
        
    return _out;
}

function StoreOfferPacksInner(_onlyStarterPacks){
    let _out='';
    if(HasStarterPacks()){
        let _starterPacks=GetStarterPacksInner();
        if(_starterPacks){

            _out += BR;
            _out+=_starterPacks;
            if(_onlyStarterPacks){
                RefreshSuperClickerBonusButton();
                _out += BR;
                return _out;
            }
            _out += BR+BR;
        }
    }


    if(playerPackages?.length){
        _out += '<div class="check-inbox" onclick="CloseBottomMenu(); OpenInbox();">';
        _out += GetIconImage('package',60,20)+GetText('Open the package!')+GetIconImage('package',60,20);
        _out += '</div>';
    }


    
    
    if(HasDoubleSale(0)){
        _out += '<div id="packs_container">';
        _out += '<div class="double-sale-up">'+GetText('+{att1}% BONUS SALE',100)+' '+GetIconImage('menu_star',24,3)+'</div>'+BR;
    }else{
        _out += '<div style="position:relative;text-align:center;">';
    }
    SetOpacity('offer_star',0);
    let _basicPacks = [GetPackById('pat_basic_pack_5'),GetPackById('pat_basic_pack_15'),GetPackById('pat_basic_pack_35'),GetPackById('pat_basic_pack_70')];
    for(let _p of _basicPacks)if(_p){
        if(_p.price){
            _out += '<div class="basic-pack" onclick="TryBuyPack(\''+_p.storeId+'\');">';
        }else{
            _out += '<div class="basic-pack" >';
        }
        
        let _reward=[];
        for(let _r of _p.reward){
            _reward[_r.resource]=_r.amount;
        }
        
        if(_p.storeId=='pat_basic_pack_35'){
            const imgUrl = getAssetUrl('public/images/effects/blue_flag.png');
            _out += `<img class="label-img" src="${imgUrl}">`;
            _out += '<div class="label">'+GetText('Most popular')+'</div>';
        }
        _out += `<img class="basic-pack-img-bg" src="${getAssetUrl('public/images/effects/click_gem_bg.png')}">`;
        let _imageSize = (window.innerWidth/2)-80;
        _imageSize = Math.min(_imageSize,200);
        _out += '<div class="basic-pack-img-div">'+GetTileImage(GetOfferPicByCost(_p),_imageSize,'basic-pack-img')+'</div>';
        _out += '<div class="pack_reward">'+(HasDoubleSale(0)?ColorSpan('#fc0',FSize(26,'2x ')):'+')+PMats(_reward,window.innerWidth<450?24:48)+'</div>';
        if(_p.price){
            _out += '<div class="basic-pack-cost">';
            _out += GetText3('Cost: ')+_p.price.value+' '+(_p.price.currency=='EUR'?'&euro;':_p.price.currency);
            _out += '</div>';
        }
        _out += '</div>';
    }
    _out += '</div>';
    if(HasDoubleSale(0)){
        _out += '<div class="double-sale-down">'+GetText3('Offer expires in:')+PDur('sale2x',(1-hrac.stats.daysAfterRegistration%1) * 86400*1000,()=>{CloseBottomMenu();} );
        if(showExtraTestSettings>10){
            _out += ':'+(1-hrac.stats.daysAfterRegistration%1) * 86400*1000
        }
        _out += '</div>'+BRBR+BRBR;
    }

    _out += BR;
    _out += GetAllSpecialOfferPacksInner();
    
    return _out;    
}

function GetAllSpecialOfferPacksInner(){
    let _out='';
    let _eventPacks=GetAllActiveSpecialPacks();
    if(_eventPacks){
        _out += '<div style="text-align:center;">';
        for(let _pack of _eventPacks){
            _out += '<div class="special_offer_left_box" style="display:inline-block; margin:10px;">';
            _out += GetOneEventLeftBox(_pack);
            _out += '</div>';
        }
        _out += '</div>';
        _out += BRBR;
    }
    return _out;

}

function GetOfferPicByCost(_p){
    if(_p.storeId == 'pat_basic_pack_15'){
        return 'ui/offer_backpack';
    }
    if(_p.storeId == 'pat_basic_pack_35'){
        return 'ui/offer_treasure';
        
    }
    if(_p.storeId == 'pat_basic_pack_70'){
        return 'ui/offer_bunker';
        
    }
    return 'ui/offer_basic';
}

let latest_bought_pack_store_id=0;
function purchaseFinished(_id,_success){ //purchased

    if(_success === 'true'){
        AddToRecentStarterPacks(lastlyClickedStarterPackID,60);
        GetPlayerPackages();
        latest_bought_pack_store_id=_id;
        if(!boughtPacks[_id]){
            boughtPacks[_id]=0;
        }
        boughtPacks[_id]++;

        let pack = (SERVER_OFFER_PACKS ?? []).find((p) => p.storeId === _id);
        if(pack){
            sendAppsflyerPurchaseEvent({currency: pack.price.currency, price: pack.price.value});
        }
    }
}

function HasBoughtStarterPack(_id){
    if(hrac.stats.bought_starter_packs){
        let _found = hrac.stats.bought_starter_packs.find(p=>p && p.id == _id);
        if(_found){
            return true;
        }
    }
    return false;

}

// setTimeout(() => {
//     if(!enabledSaving2)ClickBottomMenu(3);
// }, 3000);


function GetSuperClickerStarterPackDisplayBonus(){
    return Mfl(hrac.bonus_superClickers_to_starter_pack/25)*25;
}

var super_clicker_bonus_hide_value=0;

function RefreshSuperClickerBonusButton(){
    let _y=25+headerHeight+TOP_PADDING;
    if(playerPackages && playerPackages.length){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace();
    }
    if(hrac.currentAdId){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace();
    }
    if(GetSpecialOfferPack()){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace()+25;
    }
    if(HasUpgradesLeftBox()){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace()+25;
    }
    if(HasBuildingsLeftBox()){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace()+25;
    }

    if(!HasStarterPacks()){
        SetXY('scb_div',-150,_y);
    }else{
        if(HasStarterPackLeftBox()){
            SetInner('scb_div','<div id="scb_div_in" class="starter-pack-leftbox" ontouchstart="SliderLeftBoxStarted(event,this);" ontouchmove="SlidingleftBox(event,this);" ontouchend="if(IsSlidedLeftBox(this))return false; PlayTap();super_clicker_bonus_hide_value=GetSuperClickerStarterPackDisplayBonus();ClickBottomMenu(3,0,1);"><div class="sp-lb-clickers"><div class="bg"></div><div class="text-in">+'+GetSuperClickerStarterPackDisplayBonus()+MatIcon('super_clickers',20)+'</div></div><div class="sp-lb-text">'+GetText('Starter pack bonus')+'</div></div>');
            SetWidth('scb_div',GetLeftBoxIconSize());
            SetWidth('scb_div_in',GetLeftBoxIconSize());
            SetXY('scb_div',10,_y);
        }else{
            SetXY('scb_div',-150,_y);
        }
    }
    RefreshPoolLeftBoxButton();
    
}

function HasStarterPackLeftBox(){
    return KnowsSuperClickers() && GetSuperClickerStarterPackDisplayBonus()>super_clicker_bonus_hide_value && IsAnyStarterPackAvailable();
}



function TryIncreaseSuperClickerBonusToStarterPack(_amount){
    hrac.bonus_superClickers_to_starter_pack+=_amount;
    if(hrac.bonus_superClickers_to_starter_pack>500){
        hrac.bonus_superClickers_to_starter_pack=500;
    }
    // console.log('hrac.bonus_superClickers_to_starter_pack: ',hrac.bonus_superClickers_to_starter_pack)
    if(Mfl((hrac.bonus_superClickers_to_starter_pack-_amount)/25) < Mfl(hrac.bonus_superClickers_to_starter_pack/25)){
        RefreshSuperClickerBonusButton();
    }
}


let recent_sp=[];
function LoadRecentStarterPacks(){
    let _recent_sp =  localStorage.getItem('recent_sp');
    if(_recent_sp){
        recent_sp = JSON.parse(_recent_sp);
    }
}

function IsStarterPackAmongRecentlyClickedStarterPacks(_id){
    recent_sp = recent_sp.filter(r=>r?.time > new Date()*1);
    if(recent_sp.find(r=>r?.id == _id)){
        return true;
    }
    return false;
}


let lastlyClickedStarterPackID=0;;
function AddToRecentStarterPacks(_id,_plusMinutes){
    if(!IsStarterPack(_id)){
        return false;
    }
    if(_plusMinutes<1 && !HasLevel(12)){ //momentalne sem nezbehne
        _plusMinutes=0;
    }
    if(_plusMinutes){

        recent_sp.push({
            id: _id,
            time: new Date()*1 + _plusMinutes*60*1000
        });
        recent_sp = recent_sp.filter(r=>r && r.time > new Date()*1);
        localStorage.setItem('recent_sp',JSON.stringify(recent_sp));
    }
}


let areOffersClickable=true;
function TryShowStarterPackPopup(){
    if(!popupsVisible.basicPopup && !popupsVisible.bottomGridMenuPopup && !popupsVisible.secondaryPopup && hrac.claimedOfflineEarning  && hrac.gems<1500 && !visitingFriend){
        if( tickCount>30*60 && IsAnyStarterPackAvailable()){
            if((new Date()*1) - hrac.last_starter_offer_popup_date > 0){
                let _text = GetStarterPacksInner(0,1);
                if(_text){
                    hrac.last_starter_offer_popup_date = new Date()*1 + 1000*60*60*26;
                    areOffersClickable=false;
                    setTimeout(() => {
                        areOffersClickable=true;
                    }, 1400);
                    setTimeout(() => {
                        if(!popupsVisible.basicPopup && !popupsVisible.bottomGridMenuPopup && !popupsVisible.secondaryPopup && hrac.claimedOfflineEarning){
                            DoBasicPopup(_text,GetText('Special Offer'),{centerised:1, bg_image:'linear-gradient(to bottom, #733aad, #393c49)'});
                        }
                    }, 500);
                }
            }
        }
    }
}









function LineThrought(_text,_shiftY){
    let _out='';
    _out+='<div class="red-line-div" style="top:-'+_shiftY+'px;"><div></div>'+_text+'</div>';
    return _out;
}


function HasDoubleSale(_extra){ //double
    if(testVersion)return true;
    return (hrac.stats.daysAfterRegistration % 7) < (1+_extra);

}




// ---------------------------------------------------------------
// ---------------------------------------------------------------
// ---------------------------------------------------------------

function GetAllActiveSpecialPacks(){
    let _now = new Date()*1;
    if(HasLevel(8))
    if(SERVER_OFFER_PACKS){
        let _possiblePacks=[]
        for(let i in SERVER_OFFER_PACKS){
            let _pack = SERVER_OFFER_PACKS[i];
            if(_pack?.storeId && _pack.price){
                if(_pack.storeId && (_pack.storeId.indexOf('_event_') >0 || IsNaturalPack(_pack) || IsSaleChillPack(_pack))){
                    if(_pack.price){
                        if(_pack.startDate && _now < (new Date(_pack.startDate)*1) ){
                            continue;
                        }
                        if(new Date(_pack.endDate)*1 < new Date()*1 ){
                            continue;
                        }
                        if(_pack.storeId.indexOf('christmas')!=-1){
                            if(!IsEvent()){
                                continue;
                            }
                        }
                        if(!testVersion)
                        if(GetMyPackCount(_pack.storeId)>=GetSOmaxCount(_pack)){//treba dorobit _pack.max_count
                            continue;
                        }
                        _possiblePacks.push(_pack);
                    }
                }
            }
        }
        return _possiblePacks;
    }
    return null;

}

function GetSpecialOfferPack(){
    let _now = new Date()*1;
    if(HasLevel(8))
    if(canSpecialOfferBeShown)
    if(SERVER_OFFER_PACKS){
        let _possiblePacks=[]
        for(let i in SERVER_OFFER_PACKS){
            let _pack = SERVER_OFFER_PACKS[i];
            if(_pack?.storeId && _pack.price){
                if(_pack.storeId && (_pack.storeId.indexOf('_event_') >0 || IsNaturalPack(_pack) || IsSaleChillPack(_pack))){
                    if(_pack.startDate && _now < (new Date(_pack.startDate)*1) ){
                        continue;
                    }
                    if(_now > new Date(_pack.endDate)*1 ){
                        continue;
                    }

                    if(GetMyPackCount(_pack.storeId)>=GetSOmaxCount(_pack)){//treba dorobit _pack.max_count
                        continue;
                    }

                    if(_pack.storeId.indexOf('christmas')!=-1){
                        if(!IsEvent()){
                            continue;
                        }
                    }

                    // if(testVersion && _pack.storeId.indexOf('christmas')==-1)continue;//remove
                    if(totalSpent >= _pack.minSpend && totalSpent < _pack.maxSpend ){
                        return _pack;
                    }
                    _possiblePacks.push(_pack);
                }
            }
        }
        if(_possiblePacks.length){
            return _possiblePacks[0];
        }
    }
    return null;
}
const MAX_SO_PACK=4;
function GetSOmaxCount(_pack){
    if(_pack.maxCount){
        return _pack.maxCount;
    }
    return MAX_SO_PACK;
}

function GetMyPackCount(_storeId){
    if(boughtPacks){
        if(boughtPacks[_storeId]){
            return boughtPacks[_storeId];
        }
    }
    return 0;
}

function TryShowSpecialOfferPopup(){
    if( canSpecialOfferPopup)
    if(!popupsVisible.basicPopup && !popupsVisible.bottomGridMenuPopup && !popupsVisible.secondaryPopup && hrac.claimedOfflineEarning && !visitingFriend){
        if((new Date()*1) - hrac.last_special_offer_popup_date > 0 && tickCount>30*60){
            let _pack = GetSpecialOfferPack();
            if(_pack){
                hrac.last_special_offer_popup_date = new Date()*1 + 1000*86400*1.5;
                if(hrac.gems>20000){
                    hrac.last_special_offer_popup_date = new Date()*1 + 1000*86400*3;
                }
                // if(testVersion)hrac.last_special_offer_popup_date = new Date()*1 + 5000;
                if(IsXMasPack(_pack)){
                    ShowXMasPack(_pack);
                }else if(IsSaleChillPack(_pack)){
                    ShowSaleChillPack(_pack);//zatial napevno takto
                }else if(IsNaturalPack(_pack)){
                    ShowNaturalPack(_pack);//zatial napevno takto
                }else{
                    ShowBlackFridayPack(_pack);//zatial napevno takto
                }
            }
        }
    }
}

function IsNaturalPack(_pack){
    return (_pack.category=='naturalpack');
    // return (["pat_natural_pack_1","pat_natural_pack_2","pat_natural_pack_3","pat_natural_pack_4"].includes(_pack.storeId));
}

function ShowNaturalPack(_pack,_storeId){
    if(_storeId){
        _pack=SERVER_OFFER_PACKS.find(p=>p.storeId==_storeId);
    }
    if(!_pack)_pack=GetSpecialOfferPack();
    if(!_pack)return false;
    let _out='';
    let _discount = _pack.discount;
    if(!_pack.price)return false;
    canSpecialOfferPopup=false;
    
    // let _header='<div class="bf-discount" style="font-size:'+Mro(Math.min(window.innerWidth,MAX_WIDTH)*0.06)+'px;">-'+_discount+'%</div>';
    let _header=GetText('Natural pack');
    
    
    _out+='<div class="black-friday-inner-block" style="'+(GetWindowHeight()>900?'':'padding-top:2px;padding-bottom:4px;')+'">'+BR;
    _out+='<table class="premium-building-table" cellspacing="5"><tr>';
    let _count=0;
    let _small = window.innerWidth<360?1:0;
    for(let _r of _pack.reward){
        if(_r.resource == 'building'){
            let _b = BUILDINGS_BY_IDS[_r.buildingId];
            if(_b.level_up_info){
                _desc+=ColorSpan('var(--light-purple-3)',_b.level_up_info())
            }
            
            _out+='<td onclick="GetBuildingInfoDescriptionPopup(\''+_b.grid_key+'\');">'+GetBuildingMultiTileImage(_b,_small?40:60,'')+'</td>';
            _out+='<td onclick="GetBuildingInfoDescriptionPopup(\''+_b.grid_key+'\');" style="text-align:left;color:#ffde52;"><span style="line-height:24px;">'+Bold(FSize(_small?30:44,_r.amount+'x'))+'</span>'+BR+Bold(FSize(_small?9:12,GetText(_b.name)))+'</td>';
            _count++;
            if(_count==2){
                _out+='</tr><tr>';

            }
        }
    }

    _out+='</tr></table>';
    _out+=BR;
    _out+='<div class="so-mat-rewards">';
    for(let _r of _pack.reward)if(_r.resource!='building'){
        _out+='<div class="so-mat-reward">'+'+'+PMat(_r.amount,_r.resource,32,1,1)+'</div>';
    }
    _out+='</div>';
    _out+='</div>';

    if(GetWindowHeight()>1000){
        _out+=BR+HRp;
        if(window.innerWidth > 300){
            _out+=FSize(14,GetText3('Price:'))+BR;
        }
    }

    if(_discount){
        let _discountedCost = (_pack.price.value / ((100-_discount)*0.01)).toFixed(2);
        _out+=LineThrought(FSize(24,ColorSpan('var(--darker-color)',_discountedCost+_pack.price.currency)),4)+SPC+SPC;
    }
    _out+=FSize(40,Bold(_pack.price.value+_pack.price.currency))
    if(GetMyPackCount(_pack.storeId)<GetSOmaxCount(_pack)){
        _out+=BR+Button(GetTextCAPS('BUY'),'TryBuyPack(\''+_pack.storeId+'\');',{super_button:'teal'});
        _out+=SPC+SPC+Button(GetTextCAPS('HIDE'),'HideSpecialOffer();');
    }
    if(GetWindowHeight()>900){
        _out+=BR+DivClass('so-bought-div',GetText3('Bought:')+GetMyPackCount(_pack.storeId)+' / '+GetSOmaxCount(_pack));
    }else{
        _out+=BR+DivClass('so-bought-div-2',GetText3('Bought:')+GetMyPackCount(_pack.storeId)+' / '+GetSOmaxCount(_pack));

    }

    if((new Date(_pack.endDate) - new Date()) < 86400*1000*1){
        _out+=DivClass('expires-in-so',GetText3('Offer expires in:')+Bold(PDurDate('special_offer_timer',new Date(_pack.endDate),()=>{CloseBasicPopup(); })));
    }
    

    DoBasicPopup(_out,_header,{centerised:1,max_height_vh:92,max_width: GetSmallerPopupWidth(150,400)});
}







function GetBuildingRewardFromPack(_pack){
    for(let _r of _pack.reward){
        if(_r.resource == 'building'){
            return _r;
        }
    }
    return null;
}

function ShowBlackFridayPack(_pack,_storeId){
    if(_storeId){
        _pack=SERVER_OFFER_PACKS.find(p=>p.storeId==_storeId);
    }
    if(!_pack)_pack=GetSpecialOfferPack();
    if(!_pack)return false;
    let _out='';
    let _discount = _pack.discount;
    if(!_pack.price)return false;
    canSpecialOfferPopup=false;
    
    let _header='<div class="bf-discount" style="font-size:'+Mro(Math.min(window.innerWidth,MAX_WIDTH)*0.06)+'px;">-'+_discount+'%</div><img style="position:relative;left:-6px;top:11px;margin-top:-8px;background-color:var(--dark-2);width:calc(100% + 12px);border-radius:12px;" src="public/images/art/black_friday.png?v='+PIC_VERSION+'">';
    
    let _buildingRew = GetBuildingRewardFromPack(_pack);
    
    _out+='<div class="black-friday-inner-block" style="'+(GetWindowHeight()>900?'':'padding-top:2px;padding-bottom:4px;')+'">';
    if(_buildingRew){
        let _grid=GetGridData(0,0);
        let _b = BUILDINGS_BY_IDS[_buildingRew.buildingId];
        let _desc=GetFullBuildingDescription(_grid,_b,1,1,1);
        if(_b.level_up_info){
            _desc+=ColorSpan('var(--light-purple-3)',_b.level_up_info())
        }
        let _ppb = possiblePremiumBuildings.find(o=>o?.id == _buildingRew.buildingId);
        if(GetWindowHeight()>900){
            if(_ppb && _ppb.text){
                _out+=FSize(16,ColorSpan('var(--light-color-2)',Bold(GetText(_ppb.text))));
            }
        }
        _out+='<table class="premium-building-table" cellspacing="5"><tr>';
        if(GetWindowHeight()>900){
            _out+='<td>'+GetBuildingMultiTileImage(_b,85,'')+'</td>';
            _out+='<td style="text-align:left;color:#ffde52;"><span style="line-height:24px;">'+Bold(FSize(64,_buildingRew.amount+'x'))+'</span>'+BR+Bold(FSize(18,GetText(_b.name)))+'</td></tr></table>';
        }else{
            _out+='<td>'+GetBuildingMultiTileImage(_b,60,'')+'</td>';
            _out+='<td style="text-align:left;color:#ffde52;"><span style="line-height:24px;">'+Bold(FSize(44,_buildingRew.amount+'x'))+'</span>'+BR+Bold(FSize(12,GetText(_b.name)))+'</td></tr></table>';
        }
        _out+=DivClass('popup-in-block-2',_desc);
    }

    _out+=BR;
    _out+='<div class="so-mat-rewards">';
    for(let _r of _pack.reward)if(_r.resource!='building'){
        _out+='<div class="so-mat-reward">'+'+'+PMat(_r.amount,_r.resource,32,1,1)+'</div>';
    }
    _out+='</div>';
    _out+='</div>';

    if(GetWindowHeight()>1000){
        _out+=BR+HRp;
        if(window.innerWidth > 300){
            _out+=FSize(14,GetText3('Price:'))+BR;
        }
    }

    if(_discount){
        let _discountedCost = (_pack.price.value / ((100-_discount)*0.01)).toFixed(2);
        _out+=LineThrought(FSize(24,ColorSpan('var(--darker-color)',_discountedCost+_pack.price.currency)),4)+SPC+SPC;
    }
    _out+=FSize(40,Bold(_pack.price.value+_pack.price.currency))
    if(GetMyPackCount(_pack.storeId)<GetSOmaxCount(_pack)){
        _out+=BR+Button(GetTextCAPS('BUY'),'TryBuyPack(\''+_pack.storeId+'\');',{super_button:'teal'});
        _out+=SPC+SPC+Button(GetTextCAPS('HIDE'),'HideSpecialOffer();');
    }
    if(GetWindowHeight()>900){
        _out+=BR+DivClass('so-bought-div',GetText3('Bought:')+GetMyPackCount(_pack.storeId)+' / '+GetSOmaxCount(_pack));
    }else{
        _out+=BR+DivClass('so-bought-div-2',GetText3('Bought:')+GetMyPackCount(_pack.storeId)+' / '+GetSOmaxCount(_pack));

    }

    if((new Date(_pack.endDate) - new Date()) < 86400*1000*1){
        _out+=DivClass('expires-in-so',GetText3('Offer expires in:')+Bold(PDurDate('special_offer_timer',new Date(_pack.endDate),()=>{CloseBasicPopup(); })));
    }
    

    DoBasicPopup(_out,_header,{centerised:1,max_height_vh:92,max_width: GetSmallerPopupWidth(150,400)});
}



let canSpecialOfferBeShown=true;
let canSpecialOfferPopup=true;
function HideSpecialOffer(){
    canSpecialOfferBeShown=false;
    CloseBasicPopup();
    RefreshSpecialOfferLeftBox();
}

let specialOfferHidden=false;
function RefreshSpecialOfferLeftBox(){
    if(!canSpecialOfferBeShown){
        SetX('special_offer_left_box',-150);
        if(!specialOfferHidden){
            specialOfferHidden=true;
            setTimeout(() => {
                HideDiv('special_offer_left_box');
            }, 500);
        }
    }else{
        let _y=25+headerHeight+TOP_PADDING;
        if(playerPackages && playerPackages.length){
            _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace();
        }
        if(IsRewardAdVisible()){
            _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace();
        }
        
        let _pack = GetSpecialOfferPack();
        
        if(_pack){
            
            SetInner('special_offer_left_box',GetOneEventLeftBox(_pack,1));
            SetXY('special_offer_left_box',10,_y);
            SetWidth('special_offer_left_box',GetLeftBoxIconSize());
            SetWidth('special_offer_left_box_in',GetLeftBoxIconSize());
        }else{
            SetXY('special_offer_left_box',-150,_y);
        }
    }

    RefreshUpgradesLeftbox();
}



















function GetOneEventLeftBox(_pack,_slideToHide){
    let _out='';
    let _fun='';
    
    if(["pat_event_offer_1","pat_event_offer_2","pat_event_offer_3","pat_event_offer_4"].includes(_pack.storeId)){
        _out+=GetIconImage('black_friday_icon',GetLeftBoxIconSize()-5)+BR;
        _fun+='ShowBlackFridayPack(null,\''+_pack.storeId+'\');';
    }
    if(IsNaturalPack(_pack)){
        _out+=GetIconImage('seeds',GetLeftBoxIconSize()-5)+BR;
        _fun+='ShowNaturalPack(null,\''+_pack.storeId+'\');';
    }
    if(IsSaleChillPack(_pack)){
        _out+=GetIconImage('sale',GetLeftBoxIconSize()-5)+BR;
        _fun+='ShowSaleChillPack(null,\''+_pack.storeId+'\');';
    }
    if(IsXMasPack(_pack)){
        _out+=GetIconImage('xmas_icon',GetLeftBoxIconSize()-5)+BR;
        _fun+='ShowXMasPack(null,\''+_pack.storeId+'\');';
    }

    // console.log(new Date(_pack.endDate))
    if(new Date(_pack.endDate)*1 < (new Date()*1) + 86400*1000 || !_pack.discount){
        if(_slideToHide){
            _out+=PDurDate('special_offer_leftbox',new Date(_pack.endDate)*1,()=>{RefreshSpecialOfferLeftBox();},1);
        }else{
            if(_pack.price){
                _out+=_pack.price.value;
            }
        }
    }else if(_pack.discount ){
        _out+=FSize(14,'-'+_pack.discount+'%');
    }

    return '<div class="left_box_in" '+(_slideToHide?' id="special_offer_left_box_in" ontouchstart="SliderLeftBoxStarted(event,this);" ontouchmove="SlidingleftBox(event,this);" ':'')+' ontouchend="'+(_slideToHide?'if(IsSlidedLeftBox(this))return false; ':'')+'PlayTap();'+_fun+'">'+_out+'</div>';
}

    













function IsSaleChillPack(_pack){
    return (_pack.category=='salechill');
}




function ShowSaleChillPack(_pack,_storeId){
    if(_storeId){
        _pack=SERVER_OFFER_PACKS.find(p=>p.storeId==_storeId);
    }
    if(!_pack)_pack=GetSpecialOfferPack();
    if(!_pack)return false;
    let _out='';
    let _discount = _pack.discount;
    if(!_pack.price)return false;
    canSpecialOfferPopup=false;
    
    // let _header='<div class="bf-discount" style="font-size:'+Mro(Math.min(window.innerWidth,MAX_WIDTH)*0.06)+'px;">-'+_discount+'%</div><img style="position:relative;left:-6px;top:11px;margin-top:-8px;background-color:var(--dark-2);width:calc(100% + 12px);border-radius:12px;" src="public/images/art/black_friday.png?v='+PIC_VERSION+'">';
    let _header='SALE & CHILL';
    
    let _buildingRew = GetBuildingRewardFromPack(_pack);
    
    _out+='<div class="black-friday-inner-block" style="'+(GetWindowHeight()>900?'':'padding-top:2px;padding-bottom:4px;')+'">';
    if(_buildingRew){
        let _grid=GetGridData(0,0);
        let _b = BUILDINGS_BY_IDS[_buildingRew.buildingId];
        let _desc=GetFullBuildingDescription(_grid,_b,1,1,1);
        if(_b.level_up_info){
            _desc+=ColorSpan('var(--light-purple-3)',_b.level_up_info())
        }
        let _ppb = possiblePremiumBuildings.find(o=>o?.id == _buildingRew.buildingId);
        if(GetWindowHeight()>900){
            if(_ppb && _ppb.text){
                _out+=FSize(16,ColorSpan('var(--light-color-2)',Bold(GetText(_ppb.text))));
            }
        }
        _out+='<table class="premium-building-table" cellspacing="5"><tr>';
        if(GetWindowHeight()>900){
            _out+='<td onclick="GetBuildingInfoDescriptionPopup(\''+_b.grid_key+'\');">'+GetBuildingMultiTileImage(_b,85,'')+'</td>';
            _out+='<td onclick="GetBuildingInfoDescriptionPopup(\''+_b.grid_key+'\');"style="text-align:left;color:#ffde52;"><span style="line-height:24px;">'+Bold(FSize(64,_buildingRew.amount+'x'))+'</span>'+BR+Bold(FSize(18,GetText(_b.name)))+'</td></tr></table>';
        }else{
            _out+='<td onclick="GetBuildingInfoDescriptionPopup(\''+_b.grid_key+'\');">'+GetBuildingMultiTileImage(_b,60,'')+'</td>';
            _out+='<td onclick="GetBuildingInfoDescriptionPopup(\''+_b.grid_key+'\');" style="text-align:left;color:#ffde52;"><span style="line-height:24px;">'+Bold(FSize(44,_buildingRew.amount+'x'))+'</span>'+BR+Bold(FSize(12,GetText(_b.name)))+'</td></tr></table>';
        }
        _out+=DivClass('popup-in-block-2',_desc);
    }

    _out+=BR;
    _out+='<div class="so-mat-rewards">';
    for(let _r of _pack.reward)if(_r.resource!='building'){
        _out+='<div class="so-mat-reward">'+'+'+PMat(_r.amount,_r.resource,32,1,1)+'</div>';
    }
    _out+='</div>';
    _out+='</div>';

    if(GetWindowHeight()>1000){
        _out+=BR+HRp;
        if(window.innerWidth > 300){
            _out+=FSize(14,GetText3('Price:'))+BR;
        }
    }

    if(_discount){
        let _discountedCost = (_pack.price.value / ((100-_discount)*0.01)).toFixed(2);
        _out+=LineThrought(FSize(24,ColorSpan('var(--darker-color)',_discountedCost+_pack.price.currency)),4)+SPC+SPC;
    }
    _out+=FSize(40,Bold(_pack.price.value+_pack.price.currency))
    if(GetMyPackCount(_pack.storeId)<GetSOmaxCount(_pack)){
        _out+=BR+Button(GetTextCAPS('BUY'),'TryBuyPack(\''+_pack.storeId+'\');',{super_button:'teal'});
        _out+=SPC+SPC+Button(GetTextCAPS('HIDE'),'HideSpecialOffer();');
    }
    if(GetWindowHeight()>900){
        _out+=BR+DivClass('so-bought-div',GetText3('Bought:')+GetMyPackCount(_pack.storeId)+' / '+GetSOmaxCount(_pack));
    }else{
        _out+=BR+DivClass('so-bought-div-2',GetText3('Bought:')+GetMyPackCount(_pack.storeId)+' / '+GetSOmaxCount(_pack));

    }

    if((new Date(_pack.endDate) - new Date()) < 86400*1000*1){
        _out+=DivClass('expires-in-so',GetText3('Offer expires in:')+Bold(PDurDate('special_offer_timer',new Date(_pack.endDate),()=>{CloseBasicPopup(); })));
    }
    

    DoBasicPopup(_out,_header,{centerised:1,max_height_vh:92,max_width: GetSmallerPopupWidth(150,400)});
}



let playerPackages=[];
async function GetPlayerPackages(){
    if(visitingFriend || !backendSaving){
        return false;
    }
    const { getInboxMessages, getInboxPaymentRewards } = await getInbox();
    playerPackages =[];
    for(let _p of getInboxMessages)if(!_p.isClaimed){
        // _p.message = JSON.stringify(hrac)
        playerPackages.push(_p)
    }
    for(let _p of getInboxPaymentRewards)if(!_p.isClaimed){
        playerPackages.push(_p)
    }
    // if(testVersion)playerPackages.push(1);//TOTO REMOVE
    if(playerPackages?.length){
        SetX('header_packages',10);
        RefreshPackageY();
        RefreshAdButton();
    }
}

function RefreshPackageY(){
    SetY('header_packages',(hrac.nastavenia.show_pollution_in_header?90:60)+TOP_PADDING);
}

async function GrabPackage(_p){
    try{
        let _id = _p.id;
        let _resp = null;
        
        if(_p.type == 'payment'){
            _resp = await claimInboxPaymentReward(_id);
        }else{
            _resp = await claimInboxRewardMessage(_id);
        }

        // console.log('resp0',_resp)
        if(_p && _p.upgradeReset){
            // console.log('resp - reset',_resp)
            let _u = UPGRADES_BY_ID[_p.upgradeReset];
            if(_u){
                let _refundCostValue=GetUpgradeTotalGemCost(_u,GetPlayerUpgrade(_u));
                if(_refundCostValue*1==0){
                    let _costs=GetUpgradeTotalMatCost(_u,GetPlayerUpgrade(_u))
                    for(let i in _costs){
                        AddMat(_costs[i],i);
                    }
                }else{
                    AddMat(_refundCostValue,'gems');                    
                }
                RefreshHeader();

                hrac.upgrades[_p.upgradeReset] = 0;
                SaveGame(1, true);
                CloseBasicPopup();
            }

        }else if(_resp){
            PlaySound('cash1');
            // console.log('resp1',_resp)
            for(let _r of _resp){
                let _amount = _r.amount;
                // _out+=FSize(24,PMat(_r.amount,_r.resource.toLowerCase()))+' ';
                if(!IsStarterPack(_p.storeId) && _p.type=='payment' && _p.storeId.indexOf('_event_')==-1 && _p.storeId.indexOf('basic_pack')>=0 && HasDoubleSale(0.3) && _r.resource=='gems'){
                    _amount*=2;
                }
    
                pmatYShift++;
                if(_r.resource=='building'){
                    if(_r.buildingId && BUILDINGS_BY_IDS[_r.buildingId]){
                        if(!hrac.storage[BUILDINGS_BY_IDS[_r.buildingId].grid_key]){
                            hrac.storage[BUILDINGS_BY_IDS[_r.buildingId].grid_key]=0;
                        }
                        hrac.storage[BUILDINGS_BY_IDS[_r.buildingId].grid_key]+=_amount;
                        AddFloatingTextToMousePos('+'+_amount+'x '+GetText(BUILDINGS_BY_IDS[_r.buildingId].name),'lime',-pmatYShift);
                    }
                }else if(_r.resource=='restoration_strength'){
                    hrac.restoration_offer_bonus+=_amount;
                    AddFloatingTextToMousePos('+'+PMat(_amount,_r.resource),'lime',-pmatYShift);
                }else if(_r.resource=='electricity'){
                    hrac.extra_electricity+=_amount;
                    hrac.electricity += _amount;
                    AddFloatingTextToMousePos('+'+PMat(_amount,_r.resource),'lime',-pmatYShift);
                }else if(_r.resource=='event_fish_perc_bonus'){
                    hrac.event_fish_perc_bonus+=_amount;
                    AddFloatingTextToMousePos('+'+PMat(_amount,_r.resource),'lime',-pmatYShift);
                }else{
                    AddMat(_amount,_r.resource);
                    AddFloatingTextToMousePos('+'+PMat(_amount,_r.resource),'lime',-pmatYShift);
                }
            }

            // keep track and will send a game save request to ack claimed rewards
            if(_p.type == 'payment'){
                claimedPayments.paymentRewards.push(_id);
            }else{
                claimedPayments.inboxMessages.push(_id);
            }

            SaveGame(1, true);
            RefreshHeader();
            RefreshAdButton();
        }
    }catch(e){
        console.log('asi uz claimed reward',e)
    }
}

let pmatYShift=0;
function OpenInbox(_refreshOnly){
    let _outFull='';
    for(let _p of playerPackages)if(!_p.isClaimed){
        let _out='';
        let _buildings='';
        _out+='<div class="package-div" id="package_'+_p.id+'">';
        _out+=Bold(_p.title)+BR;
        if(_p.isLocalized){
            _out+=GetText(_p.message)+BR;
        }else{
            _out+=(_p.message)+BR;
        }
        // if(testVersion)console.log(_p,_p.storeId)
        if(_p.reward){

            for(let _r of _p.reward){
                if(!IsStarterPack(_p.storeId) && _p.type=='payment' && _p.storeId.indexOf('_event_')==-1&& _p.storeId.indexOf('basic_pack')>=0 && HasDoubleSale(0.3) && _r.resource=='gems'){
                    _out+=FSize(24,ColorSpan('#00','2x '))+' ';
                }
                if(_r.resource=='building'){
                    if(_r.buildingId && BUILDINGS_BY_IDS[_r.buildingId]){
                        _buildings+='<div style="display:inline-block;">'+FSize(24,_r.amount +'x ')+''+GetBuildingMultiTileImage(BUILDINGS_BY_IDS[_r.buildingId],40,'building_in_pack')+'</div>'; 
                    }
                }else{
                    _out+=FSize(24,PMat(_r.amount,_r.resource.toLowerCase()))+' ';
                }
            }
        }else if(_p.upgradeReset){
            let _u = UPGRADES_BY_ID[_p.upgradeReset];
            if(_u){
                if(!GetPlayerUpgrade(_u)){
                    continue;
                }else{

                    let _refundCostValue=GetUpgradeTotalGemCost(_u,GetPlayerUpgrade(_u));
                    let _refundCostType='gems';
                    if(_refundCostValue*1==0){
                        let _costs=GetUpgradeTotalMatCost(_u,GetPlayerUpgrade(_u))
                        _out+=GetText('Removes upgrade {att1} and gives you {att2}',[Bold(GetUpgradeNameById(_p.upgradeReset)),Bold(PMats(_costs,0,'',', '))]);
                    }else{
                        _out+=GetText('Removes upgrade {att1} and gives you {att2}',[Bold(GetUpgradeNameById(_p.upgradeReset)),Bold(PMat(_refundCostValue,_refundCostType))]);
                    }
                }
            }
        }else{
            console.log(_p)
        }
        if(GetSuperClickerStarterPackDisplayBonus()>0 && (_p.type == 'payment' && IsStarterPack(_p.storeId))){
            _out+=FSize(24,PMat(GetSuperClickerStarterPackDisplayBonus(),'super_clickers'))+' ';
        }
        _out+=BRBR+_buildings+BRBR;
        if(_p.upgradeReset){
            // _out+=BR+Button(GetText('Discard'),'DiscardPackage(\''+_p.id+'\',\''+_p.type+'\');')+BR;
            _out+=BR+Button(GetText('Accept'),'ClaimPackage(\''+_p.id+'\',\''+_p.type+'\');')+BR;
        }else{
            _out+=BR+Button(GetText('Claim'),'ClaimPackage(\''+_p.id+'\',\''+_p.type+'\');')+BR;
        }
        
                    
        _out+='</div>';
        _outFull+=_out;
    }
    DoBasicPopup(_outFull,GetText('Your inbox'),{refresh_id:'inbox_div'})
}

function DiscardPackage(_pid,_type){

}

function ClaimPackage(_id,_type){
    let _p=playerPackages.find(p=>p.id==_id && p.type == _type);
    if(_p && !_p.isClaimed){
        _p.isClaimed=1;
        SetInner('package_'+_id,BR+BRBR+GetTextCAPS('LOADING')+BRBR+BR);
        pmatYShift=0;
        if(_p.type == 'payment' && IsStarterPack(_p.storeId)){
            pmatYShift++;
            if(GetSuperClickerStarterPackDisplayBonus()>0){
                AddMat(GetSuperClickerStarterPackDisplayBonus(),'super_clickers');
                AddFloatingTextToMousePos('+'+PMat(GetSuperClickerStarterPackDisplayBonus(),'super_clickers'),'lime',-pmatYShift);
                // hrac.bonus_superClickers_to_starter_pack=0;
            }
            hrac.stats.bought_starter_packs.push({ //nech sem damva len starter packy ale asi je to jedno, toto SA VYMAZAVA Z CASU NA CAS, a udaje tu byvaju aj dvojmo
                id: _p.storeId,
                date: Date.now(),
            });
        }

        GrabPackage(_p);
        playerPackages=playerPackages.filter(_p=>!_p.isClaimed);
        OpenInbox(1);


    }
    if(playerPackages.filter(p=>!p.isClaimed).length<=0){
        CloseBasicPopup();
        // HideDiv('header_packages');
        SetX('header_packages',-90);
        RefreshAdButton();
    }
    // console.log(_id)
}

function TryShowPackagePopup(){
    if(playerPackages?.length && !testVersion){
        OpenInbox();
        return true;
    }else{
        TryShowNews();
        return false;
    }
}
const PIC_VERSION=10;
let alreadyPlayingTest=-1;

function LoadFlutterImages(){
    // sendToFlutter('{ "event": "getGameImages"}');
    // console.time('getimages_load');
    // sendGameImages({bat1_opti:'test',bat2_opti:'test'})
}

function sendGameImages(_array_of_base64){
    console.timeEnd('getimages_load');
    console.time('getimage_parse');
    for(let _img_name in _array_of_base64){
        console.log('base 64 image name: '+_img_name);
    }
    console.timeEnd('getimage_parse');
}



function yieldToMain() {
    return new Promise(resolve => {
        setTimeout(resolve, 0);
    });
}

async function JSdelay(_miliSec){
    if(!_miliSec)_miliSec=5;
    await new Promise((resolve)=>{
        setTimeout(() => {
            resolve()
        }, _miliSec);
    });

}




function InitImageLoading(){
    // localStorage.removeItem("already_playing");//testoval som preload
    // if(testVersion)localStorage.removeItem("already_playing", 0);
    let _alreadyPlaying=localStorage.getItem("already_playing");
    // _alreadyPlaying=false;//HACK REMOVE ME, is here for test
    if(!_alreadyPlaying){
        for(let i of [1,2,3,4]){
            IMAGES_TO_LOAD.push({
                id:'story'+i,
                src:'stories/story'+i,
                koncovka:'.jpg',
            });
        }
    }

    if(IsJablko()){
        console.log('loading ALL jablko')
        _alreadyPlaying=true;
    }
    alreadyPlayingTest = _alreadyPlaying;

    SetInner('loading_images_info','Loading images:'+' 0%');
    
    let _imagesToLoad = IMAGES_TO_LOAD;
    if(_alreadyPlaying){
        for(let i in IMAGES_TO_LOAD_LATER){
            _imagesToLoad.push(IMAGES_TO_LOAD_LATER[i]);
        }
    }
    amountOfLoadedImages=0;
    LoadImages(_imagesToLoad,true);
}

let singleLoadPictures=0;
let allBitMaps={};
let amountOfLoadedImages=0;
let images_y_shift={};
let images_height={};
let isImageLoaded={};
let loadJablkoImages=[];
function LoadImages(_IMAGES_TO_LOAD,_startGame){

    if(amountOfLoadedImages>=_IMAGES_TO_LOAD.length){
        return false;
    }

    // if(IsJablko()){
    //     sendToFlutter('{\r\n  "event": "loadingDone"\r\n}');
    // }


    let _imageContainer = gebi('image_preloader_container');
    for(let _imageToLoad of _IMAGES_TO_LOAD )if(!_imageToLoad.loaded){
        const imgUrl = getAssetUrl(`public/images/${_imageToLoad.src}${_imageToLoad.koncovka ? _imageToLoad.koncovka : `.png?v=${PIC_VERSION}`}`);
        let _src = imgUrl;
        
        if(isImageLoaded[_src]){
            continue;
        }

        let _img = document.createElement("img");
        // _img.id = _imageToLoad.id;
        _img.src = _src;
        _img.crossOrigin = "Anonymous";
        _imageContainer.appendChild(_img);
        _img.onload = function () {
            if(amountOfLoadedImages>=_IMAGES_TO_LOAD.length){
                return false;
            }
            if(isImageLoaded[_img.src]){
                return false;
            }
            isImageLoaded[_img.src]=true;

            if(_imageToLoad.koncovka){
                amountOfLoadedImages++;
                if(_startGame){
                    SetInner('loading_images_info','Loading images: '+PCisloB(Mfl((amountOfLoadedImages/_IMAGES_TO_LOAD.length)*0.99*100))+'%');
                    FlutterLoadingBar(0,amountOfLoadedImages/_IMAGES_TO_LOAD.length);
                }
                if(amountOfLoadedImages>=_IMAGES_TO_LOAD.length){
                    if(_startGame){
                        console.log('-------------EVALING 2-----------')
                        if(IsJablko()){
                            JablkoImagesLoadingPart2(_startGame);
                        }else{
                            OnAllImagesLoaded();
                        }
                    }
                }
                //lebo to bude asi jpg a z tych nepotrebujem bitmapy!
                return false;
            }

            // Image was loaded.
            if(!_imageToLoad.loaded){
                if(!_imageToLoad.gridWidth)_imageToLoad.gridWidth=1;
                _imageToLoad.loaded = true;               
                _img.id = _imageToLoad.id;

                if(IsJablko()){
                    loadJablkoImages.push([_imageToLoad,_img]);
                    amountOfLoadedImages++;
                    if(_startGame){
                        SetInner('loading_images_info','Loading images: '+PCisloB(Mfl((amountOfLoadedImages/_IMAGES_TO_LOAD.length)*0.99*100))+'%');
                        FlutterLoadingBar(0,amountOfLoadedImages/_IMAGES_TO_LOAD.length);
                    }

                    if(amountOfLoadedImages>=_IMAGES_TO_LOAD.length){
                        SetInner('loading_images_info','LOADED, prepare for parse');
                        setTimeout(() => {
                            JablkoImagesLoadingPart2(_startGame);
                        }, 15);
                    }
                    return true;
                }


                
                
                if(_imageToLoad.doImageBitMaps){
                    createImageBitmap(_img).then(function (result) {
                        allBitMaps[_img.id] = result;
                        let _count = 0;
                        let _total = 0;
                        for(let i in _imageToLoad.doImageBitMaps){
                            _total++;
                        }
                        for(let i in _imageToLoad.doImageBitMaps){
                            let _imgname = i;
                            if(_imageToLoad.doImageBitMaps[i].prefix){
                                _imgname = _imageToLoad.doImageBitMaps[i].prefix+'/'+i;
                            }
                            createImageBitmap(allBitMaps[_img.id],_imageToLoad.doImageBitMaps[i].x,_imageToLoad.doImageBitMaps[i].y,_imageToLoad.doImageBitMaps[i].w,_imageToLoad.doImageBitMaps[i].h).then(function (_result2) {
                                if(!singleLoadPictures){
                                    allBitMaps[_imgname] = _result2;
                                }
                                let _delitel = _imageToLoad.doImageBitMaps[i].w / 70 ;
                                images_height[_imgname] = Math.ceil(_imageToLoad.doImageBitMaps[i].h / _delitel);
                                images_y_shift[_imgname]= (images_height[_imgname]) - gridSirka; 
                                // console.log('haha',i)
                                _count++;
                                if(_count >= _total){
                                    allBitMaps[_img.id].close();
                                    // delete(allBitMaps[_img.id]);
                                    if(_startGame){
                                        SetInner('loading_images_info','Loading images: '+PCisloB(Mfl((amountOfLoadedImages/_IMAGES_TO_LOAD.length)*0.99*100))+'%');
                                        FlutterLoadingBar(0,amountOfLoadedImages/_IMAGES_TO_LOAD.length);
                                    }
                                    amountOfLoadedImages++;
                                    if(amountOfLoadedImages>=_IMAGES_TO_LOAD.length){
                                        _imageToLoad.loaded = true;
                                        if(_startGame){
                                            if(!singleLoadPictures){
                                                console.log('-------------EVALING 1-----------')
                                                OnAllImagesLoaded();
                                            }
                                        }
                                    }
                                }
                            });
                        }
                    });


                }else{
                    images_y_shift[_imageToLoad.id]= Mro((gridSirka*_imageToLoad.gridWidth) * (_img.height / _img.width) - (gridSirka*_imageToLoad.gridWidth)); 
                    let _delitel = _img.width / (gridSirka*_imageToLoad.gridWidth);
                    images_height[_imageToLoad.id] =  _img.height / _delitel; 
                    _imageToLoad.loaded=true;

                    amountOfLoadedImages++;
                    if(_startGame){
                        SetInner('loading_images_info','Loading images: '+PCisloB(Mfl((amountOfLoadedImages/_IMAGES_TO_LOAD.length)*0.99*100))+'%');
                        FlutterLoadingBar(0,amountOfLoadedImages/_IMAGES_TO_LOAD.length);
                    }
                    if(amountOfLoadedImages>=_IMAGES_TO_LOAD.length){
                        if(_startGame){
                            console.log('-------------EVALING 2-----------')
                            OnAllImagesLoaded();
                        }
                    }
                }
               
            }
        };
    }

    if(singleLoadPictures){
        PreloadSingleImages(_startGame);
        // return false;
        //
    }


    if(!IsJablko())
    loadingImagesTO = setTimeout(() => {
        console.log('try Preloading Images again');
        LoadImages(_IMAGES_TO_LOAD,_startGame);
    }, 8000);
}
let loadingImagesTO=0;

function PreloadSingleImages(){
    //vola sa v testingu
}



let poradieJablkoParser=0;
let jablko_images_to_parse=[];
function JablkoImagesLoadingPart2(_startGame){
    for(let _j in loadJablkoImages){
        let _imageToLoad = loadJablkoImages[_j][0];
        let _img = loadJablkoImages[_j][1];
        
        if(_imageToLoad.doImageBitMaps){
            for(let _i in _imageToLoad.doImageBitMaps){
                jablko_images_to_parse.push([_i,_j]);
            }
        }else{
            images_y_shift[_imageToLoad.id]= (gridSirka*_imageToLoad.gridWidth) * (_img.height / _img.width) - (gridSirka*_imageToLoad.gridWidth); 
            let _delitel = _img.width / (gridSirka*_imageToLoad.gridWidth);
            images_height[_imageToLoad.id] =  _img.height / _delitel; 
            _imageToLoad.loaded=true;
        }
    }
    console.time('parsing');
    JablkoImagesLoadingPart3(_startGame);
}

let _pocetImageCreateBitMaps=0;
const DAVKOVANIE=100;
async function JablkoImagesLoadingPart3(_startGame){
    await yieldToMain();
    // console.log(jablko_images_to_parse)
    let _imageContainer = gebi('image_preloader_container');
    if(poradieJablkoParser < jablko_images_to_parse.length){
        console.log(poradieJablkoParser);
        SetInner('loading_images_info','PARSING block: '+poradieJablkoParser+' / '+jablko_images_to_parse.length);
        for(let _d=0;_d<DAVKOVANIE;_d++){
            if(poradieJablkoParser < jablko_images_to_parse.length){
                ctx.beginPath();
                let _i = jablko_images_to_parse[poradieJablkoParser][0];
                let _j = jablko_images_to_parse[poradieJablkoParser][1];
                let _imageToLoad = loadJablkoImages[_j][0];
                let _img = loadJablkoImages[_j][1];
                canvas.width = _imageToLoad.doImageBitMaps[_i].w;
                canvas.height = _imageToLoad.doImageBitMaps[_i].h;
                // console.log(_i,_j)
                let _imgname = _i;
                if(_imageToLoad.doImageBitMaps[_i].prefix){
                    _imgname = _imageToLoad.doImageBitMaps[_i].prefix+'/'+_i;
                }


                ctx.clearRect(0, 0, _imageToLoad.doImageBitMaps[_i].w, _imageToLoad.doImageBitMaps[_i].h);
                ctx.drawImage(gebi(_img.id),_imageToLoad.doImageBitMaps[_i].x,_imageToLoad.doImageBitMaps[_i].y,_imageToLoad.doImageBitMaps[_i].w,_imageToLoad.doImageBitMaps[_i].h,0,0,_imageToLoad.doImageBitMaps[_i].w,_imageToLoad.doImageBitMaps[_i].h);

                if(_imageToLoad.use_jablko_blob){
                    const blob2 = await new Promise((res) => canvas.toBlob(res));
                    const img = _imageContainer.appendChild(new Image());
                    img.src = URL.createObjectURL(blob2);
                    allBitMaps[_imgname] = img;
                    // console.log(_imgname)
                }else{
                    // ResetCanvasSize();
                    allBitMaps[_imgname] = await createImageBitmap(canvas,0,0,_imageToLoad.doImageBitMaps[_i].w,_imageToLoad.doImageBitMaps[_i].h);//,{resizeWidth:128,resizeHeight:128}
                    _pocetImageCreateBitMaps++;
                }

                // let _bmp = await createImageBitmap(canvas,0,0,_imageToLoad.doImageBitMaps[_i].w,_imageToLoad.doImageBitMaps[_i].h);//,{resizeWidth:128,resizeHeight:128}
                // canvas.width = _imageToLoad.doImageBitMaps[_i].w
                // canvas.height = _imageToLoad.doImageBitMaps[_i].h
                // const _ctx = canvas.getContext('bitmaprenderer');
                // _ctx.transferFromImageBitmap(_bmp);
                // const blob2 = await new Promise((res) => canvas.toBlob(res));
                // // console.log(blob2); // Blob
                // const img = document.body.appendChild(new Image());
                // img.src = URL.createObjectURL(blob2);
                // allBitMaps[_i] = img;

                let _delitel = _imageToLoad.doImageBitMaps[_i].w / 70 ;
                images_height[_imgname] = Math.ceil(_imageToLoad.doImageBitMaps[_i].h / _delitel);
                images_y_shift[_imgname]= (images_height[_imgname]) - gridSirka; 
                _imageToLoad.loaded=true;

                poradieJablkoParser++;
            }
        }
        setTimeout(() => {
            JablkoImagesLoadingPart3(_startGame);
        }, (15));
    }else{
        console.log(_pocetImageCreateBitMaps)
        loadJablkoImages=[];

        _pocetImageCreateBitMaps=0;
        console.timeEnd('parsing');
        ResetCanvasSize();
        if(!allImagesLoaded){
            console.log('jablko parsing done')
            SetInner('loading_images_info','PARSING - DONE');
            OnAllImagesLoaded();
        }
    }
}


// const blob2 = await new Promise((res) => canvas.toBlob(res));
//   console.log(blob2); // Blob
//   const img = document.body.appendChild(new Image());
//   img.src = URL.createObjectURL(blob2);

// // --------

// if (!('createImageBitmap' in window)) {
//     window.createImageBitmap = async function(blob) {
//         return new Promise((resolve,reject) => {
//             let img = document.createElement('img');
//             img.addEventListener('load', function() {
//                 resolve(this);
//             });
//             img.src = URL.createObjectURL(blob);
//         });
//     }
// }

// async function JablkoImagesLoadingPart2(_startGame){
//     //je to rozdelene pretoze mam podozrenie ze jablka vu flutteri / ios je nejaky problem a tak sa to snazim oddelit a debugovat
//     let _count0=0;
//     for(let _obj of loadJablkoImages){
//         if(poradieJablkoParser!=_count0){
//             _count0++;
//             continue;
//         }
//         _count0++;
//         let _imageToLoad=_obj[0];
//         let _img = _obj[1];
        
//         if(_imageToLoad.doImageBitMaps){
//             SetInner('loading_images_info','PARSING images: '+poradieJablkoParser+BR+'PARSING: '+_img.id);
//             // SetInner('loading_images_info','PARSING images: '+PCisloB(Mfl((_count0/loadJablkoImages.length)*0.99*100))+'%');
//             // console.log(PCisloB(Mfl((_count0/loadJablkoImages.length)*0.99*100))+'%')
            
//             // let result = await createImageBitmap(_img)
//             // allBitMaps[_img.id] = result;
//             // let _count = 0;
//             // let _total = 0;
//             // for(let i in _imageToLoad.doImageBitMaps){
//             //     _total++;
//             // }
//             for(let i in _imageToLoad.doImageBitMaps){
//                 ctx.beginPath();
//                 ctx.clearRect(0, 0, _imageToLoad.doImageBitMaps[i].w, _imageToLoad.doImageBitMaps[i].h);
//                 ctx.drawImage(gebi(_img.id),_imageToLoad.doImageBitMaps[i].x,_imageToLoad.doImageBitMaps[i].y,_imageToLoad.doImageBitMaps[i].w,_imageToLoad.doImageBitMaps[i].h,0,0,_imageToLoad.doImageBitMaps[i].w,_imageToLoad.doImageBitMaps[i].h);
//                 allBitMaps[i] = await createImageBitmap(canvas,0,0,_imageToLoad.doImageBitMaps[i].w,_imageToLoad.doImageBitMaps[i].h);
//                 let _delitel = _imageToLoad.doImageBitMaps[i].w / 70 ;
//                 images_height[i] = Math.ceil(_imageToLoad.doImageBitMaps[i].h / _delitel);
//                 images_y_shift[i]= (images_height[i]) - gridSirka; 
//                 // // console.log('haha',i)
//                 // _count++;
//                 // SetInner('loading_images_info','PARSING images: '+PCisloB(Mfl((_count0/loadJablkoImages.length)*0.99*100))+'% _ '+(_count)+' / '+_total);
//                 // if(_count >= _total){
//                 //     allBitMaps[_img.id].close();
//                 //     delete(allBitMaps[_img.id]);
//                 // }
//             }
            
    
//         }else{
//             SetInner('loading_images_info','PARSING images: '+poradieJablkoParser+BR+'single: '+_img.id);
//             images_y_shift[_imageToLoad.id]= (gridSirka*_imageToLoad.gridWidth) * (_img.height / _img.width) - (gridSirka*_imageToLoad.gridWidth); 
//             let _delitel = _img.width / (gridSirka*_imageToLoad.gridWidth);
//             images_height[_imageToLoad.id] =  _img.height / _delitel; 
    
//         }
//     }

//     if(poradieJablkoParser == loadJablkoImages.length){

//         if(_startGame){
//             console.log('-------------EVALING 3-----------');
//             setTimeout(() => {
//                 OnAllImagesLoaded();
//             }, 300);
//         }
//     }else{
//         console.log('poradieJablkoParser ',poradieJablkoParser)
//         poradieJablkoParser++;
//         setTimeout(() => {
//             JablkoImagesLoadingPart2(_startGame);
//         }, 250);
        
//     }

// }

const images_icons={};
images_icons['ui/ad1']={pack: 'icons',x: 0, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/ad5']={pack: 'icons',x: 220, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/ad6']={pack: 'icons',x: 440, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/ad7']={pack: 'icons',x: 660, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/axe']={pack: 'icons',x: 880, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/buldoser']={pack: 'icons',x: 1100, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/buldoser2']={pack: 'icons',x: 1320, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/deep_water']={pack: 'icons',x: 1540, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/flatten']={pack: 'icons',x: 1760, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/revitalise']={pack: 'icons',x: 0, y: 220, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/salvage']={pack: 'icons',x: 220, y: 220, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/uranium_destroy']={pack: 'icons',x: 440, y: 220, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/research']={pack: 'icons',x: 660, y: 220, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/pat_logo']={pack: 'icons',x: 880, y: 220, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/back_button']={pack: 'icons',x: 1100, y: 440, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/clay']={pack: 'icons',x: 1320, y: 440, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/electricity']={pack: 'icons',x: 1540, y: 440, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/food']={pack: 'icons',x: 1760, y: 440, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/gold']={pack: 'icons',x: 0, y: 660, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/goods']={pack: 'icons',x: 220, y: 660, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/chips']={pack: 'icons',x: 440, y: 660, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/from_storage']={pack: 'icons',x: 660, y: 660, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/into_storage']={pack: 'icons',x: 880, y: 660, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/leaderboard']={pack: 'icons',x: 1100, y: 660, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/lumber']={pack: 'icons',x: 1320, y: 660, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/oil']={pack: 'icons',x: 1540, y: 660, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/package']={pack: 'icons',x: 1760, y: 660, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/polution']={pack: 'icons',x: 0, y: 880, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/population']={pack: 'icons',x: 220, y: 880, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/remove_cross']={pack: 'icons',x: 440, y: 880, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/restoration_strength']={pack: 'icons',x: 660, y: 880, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/rocks']={pack: 'icons',x: 880, y: 880, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/settings']={pack: 'icons',x: 1100, y: 880, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/steel']={pack: 'icons',x: 1320, y: 880, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/thumbsup']={pack: 'icons',x: 1540, y: 880, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/upgrades']={pack: 'icons',x: 1760, y: 880, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/sensor_search']={pack: 'icons',x: 0, y: 1100, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/ad_skippers']={pack: 'icons',x: 220, y: 1100, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/uranium']={pack: 'icons',x: 440, y: 1100, w: 200, h: 200, h2: 70, shift: 0};
images_icons['ui/gold_pile']={pack: 'icons',x: 660, y: 1100, w: 200, h: 200, h2: 70, shift: 0};








const images_icons2={};
images_icons2['ui/upgrade_but']={pack: 'icons2',x: 0, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/upgrade_done']={pack: 'icons2',x: 202, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/upsalebut']={pack: 'icons2',x: 404, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/stats_species']={pack: 'icons2',x: 606, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/stats_achievement']={pack: 'icons2',x: 808, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/stats_book']={pack: 'icons2',x: 1010, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/stats_incomes']={pack: 'icons2',x: 1212, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/stats_leaderboards']={pack: 'icons2',x: 1414, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/stats_player']={pack: 'icons2',x: 1616, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/shop']={pack: 'icons2',x: 1818, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/ad2']={pack: 'icons2',x: 0, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/ad3']={pack: 'icons2',x: 202, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/ad4']={pack: 'icons2',x: 404, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/sensor_search2']={pack: 'icons2',x: 606, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/super_clickers']={pack: 'icons2',x: 808, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/gems']={pack: 'icons2',x: 1010, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/offer_treasure']={pack: 'icons2',x: 1212, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/offer_backpack']={pack: 'icons2',x: 1414, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/offer_basic']={pack: 'icons2',x: 1616, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/offer_bunker']={pack: 'icons2',x: 1818, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons2['ui/gem_pickaxe']={pack: 'icons2',x: 0, y: 404, w: 200, h: 200, h2: 70, shift: 0};



const images_icons3={};
images_icons3['ui/black_friday_icon']={pack: 'icons3',x: 0, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/level_icon']={pack: 'icons3',x: 202, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/menu_star']={pack: 'icons3',x: 404, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/book_page']={pack: 'icons3',x: 606, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/pool']={pack: 'icons3',x: 808, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/rotate_button']={pack: 'icons3',x: 1010, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/multitool']={pack: 'icons3',x: 1212, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/event_fish']={pack: 'icons3',x: 1414, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/fish_christmas_2']={pack: 'icons3',x: 1616, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/ms_check']={pack: 'icons3',x: 1818, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/xmas_icon']={pack: 'icons3',x: 0, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/sensor_search3']={pack: 'icons3',x: 202, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/show_storage']={pack: 'icons3',x: 404, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/sale']={pack: 'icons3',x: 606, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_icons3['ui/seeds']={pack: 'icons3',x: 808, y: 202, w: 200, h: 200, h2: 70, shift: 0};
















const images_waters={};
images_waters['water']={pack: 'waters',x: 0, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_waters['water_apo']={pack: 'waters',x: 202, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_waters['water_deep']={pack: 'waters',x: 404, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_waters['water_deep2']={pack: 'waters',x: 606, y: 0, w: 200, h: 200, h2: 70, shift: 0};









let images_roads12={};
images_roads12['streets/street_t1_1']={pack: 'roads12',x: 0, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t1_2']={pack: 'roads12',x: 202, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t1_3']={pack: 'roads12',x: 404, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t1_4']={pack: 'roads12',x: 606, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t1_5']={pack: 'roads12',x: 808, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t1_6']={pack: 'roads12',x: 1010, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t1_7']={pack: 'roads12',x: 0, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t1_8']={pack: 'roads12',x: 202, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t1_9']={pack: 'roads12',x: 404, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t1_11']={pack: 'roads12',x: 606, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t1_11_bridge']={pack: 'roads12',x: 808, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t1_12']={pack: 'roads12',x: 1010, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t1_12_bridge']={pack: 'roads12',x: 0, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_1']={pack: 'roads12',x: 202, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_2']={pack: 'roads12',x: 404, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_3']={pack: 'roads12',x: 606, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_4']={pack: 'roads12',x: 808, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_5']={pack: 'roads12',x: 1010, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_6']={pack: 'roads12',x: 0, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_7']={pack: 'roads12',x: 202, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_8']={pack: 'roads12',x: 404, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_9']={pack: 'roads12',x: 606, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_11']={pack: 'roads12',x: 808, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_11_bridge']={pack: 'roads12',x: 1010, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_12']={pack: 'roads12',x: 0, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_roads12['streets/street_t2_12_bridge']={pack: 'roads12',x: 202, y: 808, w: 200, h: 203, h2: 72, shift: 2};



let images_roads34={};
images_roads34['streets/street_t3_1']={pack: 'roads34',x: 0, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t3_2']={pack: 'roads34',x: 202, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t3_3']={pack: 'roads34',x: 404, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t3_4']={pack: 'roads34',x: 606, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t3_5']={pack: 'roads34',x: 808, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t3_6']={pack: 'roads34',x: 1010, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t3_7']={pack: 'roads34',x: 0, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t3_8']={pack: 'roads34',x: 202, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t3_9']={pack: 'roads34',x: 404, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t3_11']={pack: 'roads34',x: 606, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t3_11_bridge']={pack: 'roads34',x: 808, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t3_12']={pack: 'roads34',x: 1010, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t3_12_bridge']={pack: 'roads34',x: 0, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_1']={pack: 'roads34',x: 202, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_2']={pack: 'roads34',x: 404, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_3']={pack: 'roads34',x: 606, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_4']={pack: 'roads34',x: 808, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_5']={pack: 'roads34',x: 1010, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_6']={pack: 'roads34',x: 0, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_7']={pack: 'roads34',x: 202, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_8']={pack: 'roads34',x: 404, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_9']={pack: 'roads34',x: 606, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_11']={pack: 'roads34',x: 808, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_11_bridge']={pack: 'roads34',x: 1010, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_11_bridge_big']={pack: 'roads34',x: 0, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_12']={pack: 'roads34',x: 202, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_12_bridge']={pack: 'roads34',x: 404, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_roads34['streets/street_t4_12_bridge_big']={pack: 'roads34',x: 606, y: 808, w: 200, h: 229, h2: 81, shift: 11};



let images_shores={};
images_shores['shores/shore_inner_corner']={pack: 'shores',x: 0, y: 0, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_inner_corner_apo']={pack: 'shores',x: 152, y: 0, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_inner_corner2']={pack: 'shores',x: 304, y: 0, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_inner_corner2_apo']={pack: 'shores',x: 456, y: 0, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_inner_corner3']={pack: 'shores',x: 608, y: 0, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_inner_corner3_apo']={pack: 'shores',x: 760, y: 0, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_inner_corner4']={pack: 'shores',x: 0, y: 152, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_inner_corner4_apo']={pack: 'shores',x: 152, y: 152, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_outer_corner']={pack: 'shores',x: 304, y: 152, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_outer_corner_apo']={pack: 'shores',x: 456, y: 152, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_river']={pack: 'shores',x: 608, y: 152, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_river_apo']={pack: 'shores',x: 760, y: 152, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_straight']={pack: 'shores',x: 0, y: 304, w: 150, h: 150, h2: 70, shift: 0};
images_shores['shores/shore_straight_apo']={pack: 'shores',x: 152, y: 304, w: 150, h: 150, h2: 70, shift: 0};



let images_rivers={};
images_rivers['rivers/river_t1_1']={pack: 'rivers',x: 0, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_1_d']={pack: 'rivers',x: 202, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_2']={pack: 'rivers',x: 404, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_2_d']={pack: 'rivers',x: 606, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_3']={pack: 'rivers',x: 808, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_3_d']={pack: 'rivers',x: 1010, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_4']={pack: 'rivers',x: 0, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_4_d']={pack: 'rivers',x: 202, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_5']={pack: 'rivers',x: 404, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_5_d']={pack: 'rivers',x: 606, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_6']={pack: 'rivers',x: 808, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_6_d']={pack: 'rivers',x: 1010, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_7']={pack: 'rivers',x: 0, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_7_d']={pack: 'rivers',x: 202, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_8']={pack: 'rivers',x: 404, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_8_d']={pack: 'rivers',x: 606, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_9']={pack: 'rivers',x: 808, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_9_d']={pack: 'rivers',x: 1010, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_11']={pack: 'rivers',x: 0, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_11_d']={pack: 'rivers',x: 202, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_12']={pack: 'rivers',x: 404, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_rivers['rivers/river_t1_12_d']={pack: 'rivers',x: 606, y: 606, w: 200, h: 200, h2: 70, shift: 0};



const images_bat1={};
images_bat1['book']={pack: 'bat1',x: 0, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['broken_city_big']={pack: 'bat1',x: 202, y: 0, w: 200, h: 214, h2: 75, shift: 5};
images_bat1['broken_city_big_apo']={pack: 'bat1',x: 404, y: 0, w: 200, h: 214, h2: 75, shift: 5};
images_bat1['broken_city_big_train']={pack: 'bat1',x: 606, y: 0, w: 200, h: 214, h2: 75, shift: 5};
images_bat1['broken_city_medium']={pack: 'bat1',x: 808, y: 0, w: 200, h: 215, h2: 76, shift: 6};
images_bat1['broken_city_medium_apo']={pack: 'bat1',x: 1010, y: 0, w: 200, h: 215, h2: 76, shift: 6};
images_bat1['broken_city_small']={pack: 'bat1',x: 1212, y: 0, w: 200, h: 224, h2: 79, shift: 9};
images_bat1['broken_city_small_apo']={pack: 'bat1',x: 1414, y: 0, w: 200, h: 224, h2: 79, shift: 9};
images_bat1['airplane_wreck']={pack: 'bat1',x: 1616, y: 0, w: 200, h: 228, h2: 80, shift: 10};
images_bat1['airplane_wreck_apo']={pack: 'bat1',x: 1818, y: 0, w: 200, h: 229, h2: 81, shift: 11};
images_bat1['broken_power']={pack: 'bat1',x: 0, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['broken_power_apo']={pack: 'bat1',x: 202, y: 216, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['bunker']={pack: 'bat1',x: 404, y: 216, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['bunker_closed']={pack: 'bat1',x: 606, y: 216, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['bunker_closed_apo']={pack: 'bat1',x: 808, y: 217, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['desert']={pack: 'bat1',x: 1010, y: 217, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['desert_apo']={pack: 'bat1',x: 1212, y: 226, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['farm']={pack: 'bat1',x: 1414, y: 226, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['farmfield']={pack: 'bat1',x: 1616, y: 230, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['fish']={pack: 'bat1',x: 1818, y: 231, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['fish_small']={pack: 'bat1',x: 0, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['gem_field']={pack: 'bat1',x: 202, y: 418, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['gem_field_apo']={pack: 'bat1',x: 404, y: 418, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['golden_field']={pack: 'bat1',x: 606, y: 418, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['golden_field_apo']={pack: 'bat1',x: 808, y: 419, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['golden_mine_1']={pack: 'bat1',x: 1010, y: 419, w: 200, h: 205, h2: 72, shift: 2};
images_bat1['golden_mine_premium']={pack: 'bat1',x: 1212, y: 428, w: 200, h: 222, h2: 78, shift: 8};
images_bat1['grass']={pack: 'bat1',x: 1414, y: 428, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['hills']={pack: 'bat1',x: 1616, y: 432, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['hills_apo']={pack: 'bat1',x: 1818, y: 433, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['chest']={pack: 'bat1',x: 0, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['mountains']={pack: 'bat1',x: 202, y: 620, w: 200, h: 228, h2: 80, shift: 10};
images_bat1['odpad']={pack: 'bat1',x: 404, y: 620, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['odpad_2']={pack: 'bat1',x: 606, y: 620, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['odpad_3']={pack: 'bat1',x: 808, y: 621, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['odpad_4']={pack: 'bat1',x: 1010, y: 626, w: 200, h: 209, h2: 74, shift: 4};
images_bat1['rubble1']={pack: 'bat1',x: 1212, y: 652, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['rubble1_apo']={pack: 'bat1',x: 1414, y: 630, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['rubble2']={pack: 'bat1',x: 1616, y: 634, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['rubble2_apo']={pack: 'bat1',x: 1818, y: 635, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['rubble3']={pack: 'bat1',x: 0, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['rubble3_apo']={pack: 'bat1',x: 202, y: 850, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['rubble4']={pack: 'bat1',x: 404, y: 822, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['rubble4_apo']={pack: 'bat1',x: 606, y: 822, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['sand']={pack: 'bat1',x: 808, y: 823, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['sand_apo']={pack: 'bat1',x: 1010, y: 837, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['selector']={pack: 'bat1',x: 1212, y: 854, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['ship_wreck']={pack: 'bat1',x: 1414, y: 832, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['ship_wreck_apo']={pack: 'bat1',x: 1616, y: 836, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['ship_wreck_small']={pack: 'bat1',x: 1818, y: 837, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['swamp']={pack: 'bat1',x: 0, y: 1010, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['swamp_apo']={pack: 'bat1',x: 202, y: 1052, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['target']={pack: 'bat1',x: 404, y: 1024, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['waypoint']={pack: 'bat1',x: 606, y: 1024, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['mountains_apo']={pack: 'bat1',x: 808, y: 1025, w: 200, h: 228, h2: 80, shift: 10};
images_bat1['tree1']={pack: 'bat1',x: 1010, y: 1039, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['tree_cutted']={pack: 'bat1',x: 1212, y: 1056, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['tree_cutted_apo']={pack: 'bat1',x: 1414, y: 1034, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['tree_dead']={pack: 'bat1',x: 1616, y: 1038, w: 200, h: 200, h2: 70, shift: 0};
images_bat1['watchtower']={pack: 'bat1',x: 1818, y: 1039, w: 200, h: 235, h2: 83, shift: 13};


const images_bat2={};
images_bat2['wood_storage']={pack: 'bat2',x: 0, y: 0, w: 200, h: 220, h2: 77, shift: 7};
images_bat2['copper_field']={pack: 'bat2',x: 202, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['copper_field_apo']={pack: 'bat2',x: 404, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['farm_big']={pack: 'bat2',x: 606, y: 0, w: 200, h: 223, h2: 79, shift: 9};
images_bat2['farmfield2']={pack: 'bat2',x: 808, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['foundry']={pack: 'bat2',x: 1010, y: 0, w: 200, h: 218, h2: 77, shift: 7};
images_bat2['gem_mine']={pack: 'bat2',x: 1212, y: 0, w: 200, h: 236, h2: 83, shift: 13};
images_bat2['golden_mine_2']={pack: 'bat2',x: 1414, y: 0, w: 200, h: 224, h2: 79, shift: 9};
images_bat2['golden_small_field']={pack: 'bat2',x: 1616, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['golden_small_field_apo']={pack: 'bat2',x: 1818, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['ground_oil']={pack: 'bat2',x: 0, y: 222, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['ground_oil_apo']={pack: 'bat2',x: 202, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['heavy_lumber_mill']={pack: 'bat2',x: 404, y: 202, w: 200, h: 215, h2: 76, shift: 6};
images_bat2['chest_water']={pack: 'bat2',x: 606, y: 225, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['chip_factory']={pack: 'bat2',x: 808, y: 202, w: 200, h: 231, h2: 81, shift: 11};
images_bat2['iron_mine']={pack: 'bat2',x: 1010, y: 220, w: 200, h: 224, h2: 79, shift: 9};
images_bat2['fish_big']={pack: 'bat2',x: 1212, y: 238, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['fish_huge']={pack: 'bat2',x: 1414, y: 226, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['oil_water']={pack: 'bat2',x: 1616, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['oil_rig']={pack: 'bat2',x: 1818, y: 202, w: 200, h: 218, h2: 77, shift: 7};
images_bat2['oil_rig_ground']={pack: 'bat2',x: 0, y: 424, w: 200, h: 227, h2: 80, shift: 10};
images_bat2['oil_storage']={pack: 'bat2',x: 202, y: 404, w: 200, h: 208, h2: 73, shift: 3};
images_bat2['premium_iron_mine']={pack: 'bat2',x: 404, y: 419, w: 200, h: 227, h2: 80, shift: 10};
images_bat2['rift']={pack: 'bat2',x: 606, y: 427, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['rift_apo']={pack: 'bat2',x: 808, y: 435, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['rift_big']={pack: 'bat2',x: 1010, y: 446, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['rift_big_apo']={pack: 'bat2',x: 1212, y: 440, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['rift_miner']={pack: 'bat2',x: 1414, y: 428, w: 200, h: 244, h2: 86, shift: 16};
images_bat2['river_cleaner']={pack: 'bat2',x: 1616, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['rock_mine']={pack: 'bat2',x: 1818, y: 422, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['rock_mine_boost']={pack: 'bat2',x: 0, y: 653, w: 200, h: 212, h2: 75, shift: 5};
images_bat2['rock_mine2']={pack: 'bat2',x: 202, y: 614, w: 200, h: 250, h2: 88, shift: 18};
images_bat2['sawmill']={pack: 'bat2',x: 404, y: 648, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['scorched']={pack: 'bat2',x: 606, y: 629, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['scorched_apo']={pack: 'bat2',x: 808, y: 637, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['sensor_tower']={pack: 'bat2',x: 1010, y: 648, w: 200, h: 317, h2: 111, shift: 41};
images_bat2['shipyard_heavy']={pack: 'bat2',x: 1212, y: 642, w: 200, h: 266, h2: 94, shift: 24};
images_bat2['shipyard_small']={pack: 'bat2',x: 1414, y: 674, w: 200, h: 222, h2: 78, shift: 8};
images_bat2['tree2']={pack: 'bat2',x: 1616, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['tree3']={pack: 'bat2',x: 1818, y: 624, w: 200, h: 215, h2: 76, shift: 6};
images_bat2['uranium_tree_dead']={pack: 'bat2',x: 0, y: 867, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['town1']={pack: 'bat2',x: 202, y: 866, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['town1_apo']={pack: 'bat2',x: 404, y: 850, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['town2']={pack: 'bat2',x: 606, y: 831, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['town3']={pack: 'bat2',x: 808, y: 839, w: 200, h: 216, h2: 76, shift: 6};
images_bat2['town4']={pack: 'bat2',x: 1010, y: 967, w: 200, h: 206, h2: 73, shift: 3};
images_bat2['town5']={pack: 'bat2',x: 1212, y: 910, w: 200, h: 206, h2: 73, shift: 3};
images_bat2['town6']={pack: 'bat2',x: 1414, y: 898, w: 200, h: 250, h2: 88, shift: 18};
images_bat2['lumber_premium']={pack: 'bat2',x: 1616, y: 808, w: 200, h: 224, h2: 79, shift: 9};
images_bat2['palms']={pack: 'bat2',x: 1818, y: 841, w: 200, h: 238, h2: 84, shift: 14};
images_bat2['foundry_big']={pack: 'bat2',x: 0, y: 1069, w: 200, h: 261, h2: 92, shift: 22};
images_bat2['foundry_eco']={pack: 'bat2',x: 202, y: 1068, w: 200, h: 235, h2: 83, shift: 13};
images_bat2['sawmill_2']={pack: 'bat2',x: 404, y: 1052, w: 200, h: 220, h2: 77, shift: 7};
images_bat2['lava_rift']={pack: 'bat2',x: 606, y: 1033, w: 200, h: 200, h2: 70, shift: 0};
images_bat2['lava_rift_apo']={pack: 'bat2',x: 808, y: 1057, w: 200, h: 200, h2: 70, shift: 0};




const images_bat3={};
images_bat3['swamp_rocks']={pack: 'bat3',x: 0, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['swamp_rocks_apo']={pack: 'bat3',x: 202, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['storage_container']={pack: 'bat3',x: 404, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['storage_container4']={pack: 'bat3',x: 606, y: 0, w: 200, h: 238, h2: 84, shift: 14};
images_bat3['premium_storage']={pack: 'bat3',x: 808, y: 0, w: 200, h: 238, h2: 84, shift: 14};
images_bat3['solarpanels']={pack: 'bat3',x: 1010, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['activists']={pack: 'bat3',x: 1212, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['coal_plant']={pack: 'bat3',x: 1414, y: 0, w: 200, h: 244, h2: 86, shift: 16};
images_bat3['ship']={pack: 'bat3',x: 1616, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['ship_big']={pack: 'bat3',x: 1818, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['tanker']={pack: 'bat3',x: 0, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['thermal']={pack: 'bat3',x: 202, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['thermal_apo']={pack: 'bat3',x: 404, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['thermal_plant']={pack: 'bat3',x: 606, y: 240, w: 200, h: 224, h2: 79, shift: 9};
images_bat3['uranium_barrel']={pack: 'bat3',x: 808, y: 240, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['uranium_cloud_1']={pack: 'bat3',x: 1010, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['uranium_cloud_2']={pack: 'bat3',x: 1212, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['uranium_cloud_3']={pack: 'bat3',x: 1414, y: 246, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['ville']={pack: 'bat3',x: 1616, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['water_generator']={pack: 'bat3',x: 1818, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['water_rocks']={pack: 'bat3',x: 0, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['water_rocks_apo']={pack: 'bat3',x: 202, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['water_rocks_big']={pack: 'bat3',x: 404, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['water_rocks_big_apo']={pack: 'bat3',x: 606, y: 466, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['water_rocks_gem']={pack: 'bat3',x: 808, y: 442, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['windmill']={pack: 'bat3',x: 1010, y: 404, w: 200, h: 281, h2: 99, shift: 29};
images_bat3['windmill_mountain']={pack: 'bat3',x: 1212, y: 404, w: 200, h: 281, h2: 99, shift: 29};
images_bat3['uranium_field']={pack: 'bat3',x: 1414, y: 448, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['uranium_field_apo']={pack: 'bat3',x: 1616, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['uranium_barrel_apo']={pack: 'bat3',x: 1818, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['golden_mine_premium_2']={pack: 'bat3',x: 0, y: 606, w: 200, h: 271, h2: 95, shift: 25};
images_bat3['golden_mine_3']={pack: 'bat3',x: 202, y: 606, w: 200, h: 272, h2: 96, shift: 26};
images_bat3['bio_dom']={pack: 'bat3',x: 404, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_bat3['bio_dom_big']={pack: 'bat3',x: 606, y: 668, w: 200, h: 200, h2: 70, shift: 0};


const images_bat4={};
images_bat4['storage_crane']={pack: 'bat4',x: 0, y: 0, w: 200, h: 236, h2: 83, shift: 13};
images_bat4['storage_shipyard']={pack: 'bat4',x: 202, y: 0, w: 200, h: 224, h2: 79, shift: 9};
images_bat4['super_factory']={pack: 'bat4',x: 404, y: 0, w: 200, h: 280, h2: 98, shift: 28};
images_bat4['chip_factory_big']={pack: 'bat4',x: 606, y: 0, w: 200, h: 285, h2: 100, shift: 30};
images_bat4['gems']={pack: 'bat4',x: 808, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['river_t2_12']={pack: 'bat4',prefix:'rivers',x: 1010, y: 0, w: 200, h: 222, h2: 78, shift: 8};
images_bat4['river_t2_1']={pack: 'bat4',prefix:'rivers',x: 1212, y: 0, w: 200, h: 235, h2: 83, shift: 13};
images_bat4['river_t2_2']={pack: 'bat4',prefix:'rivers',x: 1414, y: 0, w: 200, h: 232, h2: 82, shift: 12};
images_bat4['river_t2_3']={pack: 'bat4',prefix:'rivers',x: 1616, y: 0, w: 200, h: 228, h2: 80, shift: 10};
images_bat4['river_t2_4']={pack: 'bat4',prefix:'rivers',x: 1818, y: 0, w: 200, h: 230, h2: 81, shift: 11};
images_bat4['river_t2_5']={pack: 'bat4',prefix:'rivers',x: 0, y: 238, w: 200, h: 239, h2: 84, shift: 14};
images_bat4['river_t2_6']={pack: 'bat4',prefix:'rivers',x: 202, y: 226, w: 200, h: 230, h2: 81, shift: 11};
images_bat4['river_t2_7']={pack: 'bat4',prefix:'rivers',x: 404, y: 282, w: 200, h: 240, h2: 84, shift: 14};
images_bat4['river_t2_8']={pack: 'bat4',prefix:'rivers',x: 606, y: 287, w: 200, h: 231, h2: 81, shift: 11};
images_bat4['river_t2_9']={pack: 'bat4',prefix:'rivers',x: 808, y: 202, w: 200, h: 233, h2: 82, shift: 12};
images_bat4['river_t2_11']={pack: 'bat4',prefix:'rivers',x: 1010, y: 224, w: 200, h: 235, h2: 83, shift: 13};
images_bat4['street_t1_11_bridge_2']={pack: 'bat4',prefix:'streets',x: 1212, y: 237, w: 200, h: 219, h2: 77, shift: 7};
images_bat4['street_t1_12_bridge_2']={pack: 'bat4',prefix:'streets',x: 1414, y: 234, w: 200, h: 241, h2: 85, shift: 15};
images_bat4['street_t2_11_bridge_2']={pack: 'bat4',prefix:'streets',x: 1616, y: 230, w: 200, h: 219, h2: 77, shift: 7};
images_bat4['street_t2_12_bridge_2']={pack: 'bat4',prefix:'streets',x: 1818, y: 232, w: 200, h: 241, h2: 85, shift: 15};
images_bat4['street_t3_11_bridge_2']={pack: 'bat4',prefix:'streets',x: 0, y: 479, w: 200, h: 222, h2: 78, shift: 8};
images_bat4['street_t3_12_bridge_2']={pack: 'bat4',prefix:'streets',x: 202, y: 458, w: 200, h: 240, h2: 84, shift: 14};
images_bat4['street_t4_11_bridge_2']={pack: 'bat4',prefix:'streets',x: 404, y: 524, w: 200, h: 228, h2: 80, shift: 10};
images_bat4['street_t4_12_bridge_2']={pack: 'bat4',prefix:'streets',x: 606, y: 520, w: 200, h: 242, h2: 85, shift: 15};
images_bat4['street_t5_11']={pack: 'bat4',prefix:'streets',x: 808, y: 437, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_12']={pack: 'bat4',prefix:'streets',x: 1010, y: 461, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_1']={pack: 'bat4',prefix:'streets',x: 1212, y: 458, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_2']={pack: 'bat4',prefix:'streets',x: 1414, y: 477, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_3']={pack: 'bat4',prefix:'streets',x: 1616, y: 451, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_4']={pack: 'bat4',prefix:'streets',x: 1818, y: 475, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_5']={pack: 'bat4',prefix:'streets',x: 0, y: 703, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_6']={pack: 'bat4',prefix:'streets',x: 202, y: 700, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_7']={pack: 'bat4',prefix:'streets',x: 404, y: 754, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_8']={pack: 'bat4',prefix:'streets',x: 606, y: 764, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_9']={pack: 'bat4',prefix:'streets',x: 808, y: 639, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_11_bridge']={pack: 'bat4',prefix:'streets',x: 1010, y: 663, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_12_bridge']={pack: 'bat4',prefix:'streets',x: 1212, y: 660, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_11_bridge_2']={pack: 'bat4',prefix:'streets',x: 1414, y: 679, w: 200, h: 235, h2: 83, shift: 13};
images_bat4['street_t5_12_bridge_2']={pack: 'bat4',prefix:'streets',x: 1616, y: 653, w: 200, h: 235, h2: 83, shift: 13};
images_bat4['street_t5_11_bridge_big']={pack: 'bat4',prefix:'streets',x: 1818, y: 677, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['street_t5_12_bridge_big']={pack: 'bat4',prefix:'streets',x: 0, y: 905, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['artifact_2']={pack: 'bat4',prefix:'artifacts',x: 202, y: 902, w: 200, h: 224, h2: 79, shift: 9};
images_bat4['artifact_3']={pack: 'bat4',prefix:'artifacts',x: 404, y: 956, w: 200, h: 285, h2: 100, shift: 30};
images_bat4['artifact_4']={pack: 'bat4',prefix:'artifacts',x: 606, y: 966, w: 200, h: 294, h2: 103, shift: 33};
images_bat4['artifact_5']={pack: 'bat4',prefix:'artifacts',x: 808, y: 841, w: 200, h: 246, h2: 87, shift: 17};
images_bat4['artifact_6']={pack: 'bat4',prefix:'artifacts',x: 1010, y: 865, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['artifact_7']={pack: 'bat4',prefix:'artifacts',x: 1212, y: 862, w: 200, h: 204, h2: 72, shift: 2};
images_bat4['artifact_8']={pack: 'bat4',prefix:'artifacts',x: 1414, y: 916, w: 200, h: 228, h2: 80, shift: 10};
images_bat4['artifact_9']={pack: 'bat4',prefix:'artifacts',x: 1616, y: 890, w: 200, h: 225, h2: 79, shift: 9};
images_bat4['artifact_10']={pack: 'bat4',prefix:'artifacts',x: 1818, y: 879, w: 200, h: 231, h2: 81, shift: 11};
images_bat4['sekvoja']={pack: 'bat4',x: 0, y: 1107, w: 200, h: 341, h2: 120, shift: 50};
images_bat4['shipyard_market']={pack: 'bat4',x: 202, y: 1128, w: 200, h: 251, h2: 88, shift: 18};
images_bat4['event_ship']={pack: 'bat4',x: 404, y: 1243, w: 200, h: 211, h2: 74, shift: 4};
images_bat4['gift_tile']={pack: 'bat4',x: 606, y: 1262, w: 200, h: 228, h2: 80, shift: 10};
images_bat4['steel_storage']={pack: 'bat4',x: 808, y: 1089, w: 200, h: 229, h2: 81, shift: 11};
images_bat4['eco_storage']={pack: 'bat4',x: 1010, y: 1067, w: 200, h: 245, h2: 86, shift: 16};
images_bat4['pinpoint']={pack: 'bat4',x: 1212, y: 1068, w: 200, h: 200, h2: 70, shift: 0};
images_bat4['mangrove']={pack: 'bat4',x: 1414, y: 1146, w: 200, h: 252, h2: 89, shift: 19};
images_bat4['bambus']={pack: 'bat4',x: 1616, y: 1117, w: 200, h: 225, h2: 79, shift: 9};
images_bat4['water_uran']={pack: 'bat4',x: 1818, y: 1112, w: 200, h: 200, h2: 70, shift: 0};


























const images_flags={};
images_flags['EU']={x: 0, y: 0, w: 64, h: 43};
images_flags['AW']={x: 66, y: 0, w: 64, h: 43};
images_flags['AF']={x: 132, y: 0, w: 64, h: 43};
images_flags['AO']={x: 198, y: 0, w: 64, h: 43};
images_flags['AI']={x: 264, y: 0, w: 64, h: 43};
images_flags['AX']={x: 330, y: 0, w: 64, h: 43};
images_flags['AL']={x: 396, y: 0, w: 64, h: 43};
images_flags['AD']={x: 462, y: 0, w: 64, h: 43};
images_flags['AN']={x: 528, y: 0, w: 64, h: 43};
images_flags['AE']={x: 594, y: 0, w: 64, h: 43};
images_flags['AR']={x: 660, y: 0, w: 64, h: 43};
images_flags['AM']={x: 726, y: 0, w: 64, h: 43};
images_flags['AS']={x: 792, y: 0, w: 64, h: 43};
images_flags['AG']={x: 858, y: 0, w: 64, h: 43};
images_flags['AU']={x: 924, y: 0, w: 64, h: 43};
images_flags['AT']={x: 990, y: 0, w: 64, h: 43};
images_flags['AZ']={x: 1056, y: 0, w: 64, h: 43};
images_flags['BI']={x: 1122, y: 0, w: 64, h: 43};
images_flags['BE']={x: 1188, y: 0, w: 64, h: 43};
images_flags['BJ']={x: 1254, y: 0, w: 64, h: 43};
images_flags['BQ']={x: 0, y: 45, w: 64, h: 43};
images_flags['BF']={x: 66, y: 45, w: 64, h: 43};
images_flags['BD']={x: 132, y: 45, w: 64, h: 43};
images_flags['BG']={x: 198, y: 45, w: 64, h: 43};
images_flags['BH']={x: 264, y: 45, w: 64, h: 43};
images_flags['BS']={x: 330, y: 45, w: 64, h: 43};
images_flags['BA']={x: 396, y: 45, w: 64, h: 43};
images_flags['BL']={x: 462, y: 45, w: 64, h: 43};
images_flags['BY']={x: 528, y: 45, w: 64, h: 43};
images_flags['BZ']={x: 594, y: 45, w: 64, h: 43};
images_flags['BM']={x: 660, y: 45, w: 64, h: 43};
images_flags['BO']={x: 726, y: 45, w: 64, h: 43};
images_flags['BR']={x: 792, y: 45, w: 64, h: 43};
images_flags['BB']={x: 858, y: 45, w: 64, h: 43};
images_flags['BN']={x: 924, y: 45, w: 64, h: 43};
images_flags['BT']={x: 990, y: 45, w: 64, h: 43};
images_flags['BW']={x: 1056, y: 45, w: 64, h: 43};
images_flags['CF']={x: 1122, y: 45, w: 64, h: 43};
images_flags['CA']={x: 1188, y: 45, w: 64, h: 43};
images_flags['CC']={x: 1254, y: 45, w: 64, h: 43};
images_flags['CI']={x: 0, y: 90, w: 64, h: 43};
images_flags['CM']={x: 66, y: 90, w: 64, h: 43};
images_flags['CD']={x: 132, y: 90, w: 64, h: 43};
images_flags['CG']={x: 198, y: 90, w: 64, h: 43};
images_flags['CK']={x: 264, y: 90, w: 64, h: 43};
images_flags['CO']={x: 330, y: 90, w: 64, h: 43};
images_flags['KM']={x: 396, y: 90, w: 64, h: 43};
images_flags['CV']={x: 462, y: 90, w: 64, h: 43};
images_flags['CR']={x: 528, y: 90, w: 64, h: 43};
images_flags['CU']={x: 594, y: 90, w: 64, h: 43};
images_flags['CW']={x: 660, y: 90, w: 64, h: 43};
images_flags['CX']={x: 726, y: 90, w: 64, h: 43};
images_flags['KY']={x: 792, y: 90, w: 64, h: 43};
images_flags['CY']={x: 858, y: 90, w: 64, h: 43};
images_flags['CZ']={x: 924, y: 90, w: 64, h: 43};
images_flags['DE']={x: 990, y: 90, w: 64, h: 43};
images_flags['DJ']={x: 1056, y: 90, w: 64, h: 43};
images_flags['DM']={x: 1122, y: 90, w: 64, h: 43};
images_flags['DK']={x: 1188, y: 90, w: 64, h: 43};
images_flags['DO']={x: 1254, y: 90, w: 64, h: 43};
images_flags['DZ']={x: 0, y: 135, w: 64, h: 43};
images_flags['EC']={x: 66, y: 135, w: 64, h: 43};
images_flags['EG']={x: 132, y: 135, w: 64, h: 43};
images_flags['ER']={x: 198, y: 135, w: 64, h: 43};
images_flags['EH']={x: 264, y: 135, w: 64, h: 43};
images_flags['ES']={x: 330, y: 135, w: 64, h: 43};
images_flags['EE']={x: 396, y: 135, w: 64, h: 43};
images_flags['ET']={x: 462, y: 135, w: 64, h: 43};
images_flags['FI']={x: 528, y: 135, w: 64, h: 43};
images_flags['FJ']={x: 594, y: 135, w: 64, h: 43};
images_flags['FK']={x: 660, y: 135, w: 64, h: 43};
images_flags['FR']={x: 726, y: 135, w: 64, h: 43};
images_flags['FO']={x: 792, y: 135, w: 64, h: 43};
images_flags['FM']={x: 858, y: 135, w: 64, h: 43};
images_flags['GA']={x: 924, y: 135, w: 64, h: 43};
images_flags['GB']={x: 990, y: 135, w: 64, h: 43};
images_flags['GE']={x: 1056, y: 135, w: 64, h: 43};
images_flags['GG']={x: 1122, y: 135, w: 64, h: 43};
images_flags['GH']={x: 1188, y: 135, w: 64, h: 43};
images_flags['GI']={x: 1254, y: 135, w: 64, h: 43};
images_flags['GN']={x: 0, y: 180, w: 64, h: 43};
images_flags['GP']={x: 66, y: 180, w: 64, h: 43};
images_flags['GM']={x: 132, y: 180, w: 64, h: 43};
images_flags['GW']={x: 198, y: 180, w: 64, h: 43};
images_flags['GQ']={x: 264, y: 180, w: 64, h: 43};
images_flags['GR']={x: 330, y: 180, w: 64, h: 43};
images_flags['GD']={x: 396, y: 180, w: 64, h: 43};
images_flags['GL']={x: 462, y: 180, w: 64, h: 43};
images_flags['GT']={x: 528, y: 180, w: 64, h: 43};
images_flags['GF']={x: 594, y: 180, w: 64, h: 43};
images_flags['GU']={x: 660, y: 180, w: 64, h: 43};
images_flags['GY']={x: 726, y: 180, w: 64, h: 43};
images_flags['HK']={x: 792, y: 180, w: 64, h: 43};
images_flags['HN']={x: 858, y: 180, w: 64, h: 43};
images_flags['HR']={x: 924, y: 180, w: 64, h: 43};
images_flags['HT']={x: 990, y: 180, w: 64, h: 43};
images_flags['HU']={x: 1056, y: 180, w: 64, h: 43};
images_flags['CH']={x: 1122, y: 180, w: 64, h: 43};
images_flags['CL']={x: 1188, y: 180, w: 64, h: 43};
images_flags['CN']={x: 1254, y: 180, w: 64, h: 43};
images_flags['ID']={x: 0, y: 225, w: 64, h: 43};
images_flags['IM']={x: 66, y: 225, w: 64, h: 43};
images_flags['IN']={x: 132, y: 225, w: 64, h: 43};
images_flags['IE']={x: 198, y: 225, w: 64, h: 43};
images_flags['IR']={x: 264, y: 225, w: 64, h: 43};
images_flags['IQ']={x: 330, y: 225, w: 64, h: 43};
images_flags['IS']={x: 396, y: 225, w: 64, h: 43};
images_flags['IL']={x: 462, y: 225, w: 64, h: 43};
images_flags['IT']={x: 528, y: 225, w: 64, h: 43};
images_flags['JM']={x: 594, y: 225, w: 64, h: 43};
images_flags['JE']={x: 660, y: 225, w: 64, h: 43};
images_flags['JO']={x: 726, y: 225, w: 64, h: 43};
images_flags['JP']={x: 792, y: 225, w: 64, h: 43};
images_flags['KZ']={x: 858, y: 225, w: 64, h: 43};
images_flags['KE']={x: 924, y: 225, w: 64, h: 43};
images_flags['KG']={x: 990, y: 225, w: 64, h: 43};
images_flags['KH']={x: 1056, y: 225, w: 64, h: 43};
images_flags['KI']={x: 1122, y: 225, w: 64, h: 43};
images_flags['KN']={x: 1188, y: 225, w: 64, h: 43};
images_flags['KR']={x: 1254, y: 225, w: 64, h: 43};
images_flags['KUW']={x: 0, y: 270, w: 64, h: 43};
images_flags['KW']={x: 66, y: 270, w: 64, h: 43};
images_flags['LA']={x: 132, y: 270, w: 64, h: 43};
images_flags['LB']={x: 198, y: 270, w: 64, h: 43};
images_flags['LR']={x: 264, y: 270, w: 64, h: 43};
images_flags['LY']={x: 330, y: 270, w: 64, h: 43};
images_flags['LC']={x: 396, y: 270, w: 64, h: 43};
images_flags['LI']={x: 462, y: 270, w: 64, h: 43};
images_flags['LK']={x: 528, y: 270, w: 64, h: 43};
images_flags['LS']={x: 594, y: 270, w: 64, h: 43};
images_flags['LT']={x: 660, y: 270, w: 64, h: 43};
images_flags['LU']={x: 726, y: 270, w: 64, h: 43};
images_flags['LV']={x: 792, y: 270, w: 64, h: 43};
images_flags['MO']={x: 858, y: 270, w: 64, h: 43};
images_flags['MF']={x: 924, y: 270, w: 64, h: 43};
images_flags['MA']={x: 990, y: 270, w: 64, h: 43};
images_flags['MC']={x: 1056, y: 270, w: 64, h: 43};
images_flags['MD']={x: 1122, y: 270, w: 64, h: 43};
images_flags['MG']={x: 1188, y: 270, w: 64, h: 43};
images_flags['MV']={x: 1254, y: 270, w: 64, h: 43};
images_flags['MX']={x: 0, y: 315, w: 64, h: 43};
images_flags['MH']={x: 66, y: 315, w: 64, h: 43};
images_flags['MK']={x: 132, y: 315, w: 64, h: 43};
images_flags['ML']={x: 198, y: 315, w: 64, h: 43};
images_flags['MT']={x: 264, y: 315, w: 64, h: 43};
images_flags['MM']={x: 330, y: 315, w: 64, h: 43};
images_flags['ME']={x: 396, y: 315, w: 64, h: 43};
images_flags['MN']={x: 462, y: 315, w: 64, h: 43};
images_flags['MP']={x: 528, y: 315, w: 64, h: 43};
images_flags['MZ']={x: 594, y: 315, w: 64, h: 43};
images_flags['MR']={x: 660, y: 315, w: 64, h: 43};
images_flags['MS']={x: 726, y: 315, w: 64, h: 43};
images_flags['MQ']={x: 792, y: 315, w: 64, h: 43};
images_flags['MU']={x: 858, y: 315, w: 64, h: 43};
images_flags['MW']={x: 924, y: 315, w: 64, h: 43};
images_flags['MY']={x: 990, y: 315, w: 64, h: 43};
images_flags['YT']={x: 1056, y: 315, w: 64, h: 43};
images_flags['NA']={x: 1122, y: 315, w: 64, h: 43};
images_flags['NC']={x: 1188, y: 315, w: 64, h: 43};
images_flags['NE']={x: 1254, y: 315, w: 64, h: 43};
images_flags['NF']={x: 0, y: 360, w: 64, h: 43};
images_flags['NG']={x: 66, y: 360, w: 64, h: 43};
images_flags['NI']={x: 132, y: 360, w: 64, h: 43};
images_flags['NU']={x: 198, y: 360, w: 64, h: 43};
images_flags['NL']={x: 264, y: 360, w: 64, h: 43};
images_flags['NO']={x: 330, y: 360, w: 64, h: 43};
images_flags['NP']={x: 396, y: 360, w: 64, h: 43};
images_flags['NR']={x: 462, y: 360, w: 64, h: 43};
images_flags['NZ']={x: 528, y: 360, w: 64, h: 43};
images_flags['OM']={x: 594, y: 360, w: 64, h: 43};
images_flags['PK']={x: 660, y: 360, w: 64, h: 43};
images_flags['PA']={x: 726, y: 360, w: 64, h: 43};
images_flags['PN']={x: 792, y: 360, w: 64, h: 43};
images_flags['PE']={x: 858, y: 360, w: 64, h: 43};
images_flags['PH']={x: 924, y: 360, w: 64, h: 43};
images_flags['PW']={x: 990, y: 360, w: 64, h: 43};
images_flags['PG']={x: 1056, y: 360, w: 64, h: 43};
images_flags['PL']={x: 1122, y: 360, w: 64, h: 43};
images_flags['PR']={x: 1188, y: 360, w: 64, h: 43};
images_flags['KP']={x: 1254, y: 360, w: 64, h: 43};
images_flags['PT']={x: 0, y: 405, w: 64, h: 43};
images_flags['PY']={x: 66, y: 405, w: 64, h: 43};
images_flags['PS']={x: 132, y: 405, w: 64, h: 43};
images_flags['PF']={x: 198, y: 405, w: 64, h: 43};
images_flags['QA']={x: 264, y: 405, w: 64, h: 43};
images_flags['RE']={x: 330, y: 405, w: 64, h: 43};
images_flags['RO']={x: 396, y: 405, w: 64, h: 43};
images_flags['RU']={x: 462, y: 405, w: 64, h: 43};
images_flags['RW']={x: 528, y: 405, w: 64, h: 43};
images_flags['SA']={x: 594, y: 405, w: 64, h: 43};
images_flags['SD']={x: 660, y: 405, w: 64, h: 43};
images_flags['SN']={x: 726, y: 405, w: 64, h: 43};
images_flags['SER']={x: 792, y: 405, w: 64, h: 43};
images_flags['SG']={x: 858, y: 405, w: 64, h: 43};
images_flags['SH']={x: 924, y: 405, w: 64, h: 43};
images_flags['SB']={x: 990, y: 405, w: 64, h: 43};
images_flags['SL']={x: 1056, y: 405, w: 64, h: 43};
images_flags['SV']={x: 1122, y: 405, w: 64, h: 43};
images_flags['SM']={x: 1188, y: 405, w: 64, h: 43};
images_flags['SO']={x: 1254, y: 405, w: 64, h: 43};
images_flags['PM']={x: 0, y: 450, w: 64, h: 43};
images_flags['SS']={x: 66, y: 450, w: 64, h: 43};
images_flags['ST']={x: 132, y: 450, w: 64, h: 43};
images_flags['SR']={x: 198, y: 450, w: 64, h: 43};
images_flags['SK']={x: 264, y: 450, w: 64, h: 43};
images_flags['SVK']={x: 264, y: 450, w: 64, h: 43};
images_flags['SI']={x: 330, y: 450, w: 64, h: 43};
images_flags['SE']={x: 396, y: 450, w: 64, h: 43};
images_flags['SZ']={x: 462, y: 450, w: 64, h: 43};
images_flags['SX']={x: 528, y: 450, w: 64, h: 43};
images_flags['SC']={x: 594, y: 450, w: 64, h: 43};
images_flags['SY']={x: 660, y: 450, w: 64, h: 43};
images_flags['TC']={x: 726, y: 450, w: 64, h: 43};
images_flags['TD']={x: 792, y: 450, w: 64, h: 43};
images_flags['TG']={x: 858, y: 450, w: 64, h: 43};
images_flags['TH']={x: 924, y: 450, w: 64, h: 43};
images_flags['TJ']={x: 990, y: 450, w: 64, h: 43};
images_flags['TK']={x: 1056, y: 450, w: 64, h: 43};
images_flags['TM']={x: 1122, y: 450, w: 64, h: 43};
images_flags['TL']={x: 1188, y: 450, w: 64, h: 43};
images_flags['TO']={x: 1254, y: 450, w: 64, h: 43};
images_flags['TT']={x: 0, y: 495, w: 64, h: 43};
images_flags['TN']={x: 66, y: 495, w: 64, h: 43};
images_flags['TR']={x: 132, y: 495, w: 64, h: 43};
images_flags['TV']={x: 198, y: 495, w: 64, h: 43};
images_flags['TW']={x: 264, y: 495, w: 64, h: 43};
images_flags['TZ']={x: 330, y: 495, w: 64, h: 43};
images_flags['UG']={x: 396, y: 495, w: 64, h: 43};
images_flags['UA']={x: 462, y: 495, w: 64, h: 43};
images_flags['UY']={x: 528, y: 495, w: 64, h: 43};
images_flags['US']={x: 594, y: 495, w: 64, h: 43};
images_flags['UZ']={x: 660, y: 495, w: 64, h: 43};
images_flags['VA']={x: 726, y: 495, w: 64, h: 43};
images_flags['VC']={x: 792, y: 495, w: 64, h: 43};
images_flags['VE']={x: 858, y: 495, w: 64, h: 43};
images_flags['VG']={x: 924, y: 495, w: 64, h: 43};
images_flags['VI']={x: 990, y: 495, w: 64, h: 43};
images_flags['VN']={x: 1056, y: 495, w: 64, h: 43};
images_flags['VU']={x: 1122, y: 495, w: 64, h: 43};
images_flags['WF']={x: 1188, y: 495, w: 64, h: 43};
images_flags['WS']={x: 1254, y: 495, w: 64, h: 43};
images_flags['XK']={x: 0, y: 540, w: 64, h: 43};
images_flags['YE']={x: 66, y: 540, w: 64, h: 43};
images_flags['ZA']={x: 132, y: 540, w: 64, h: 43};
images_flags['ZM']={x: 198, y: 540, w: 64, h: 43};
images_flags['ZW']={x: 264, y: 540, w: 64, h: 43};










const all_images={};
let amountOfImages=0;
for(let i in images_icons){
    all_images[i]=images_icons[i];
    all_images[i].pack_src = 'atlas/icons1';
    all_images[i].dir = 'ui';
    all_images[i].atlas_width = 220*9;
    amountOfImages++;
}
for(let i in images_icons2){
    all_images[i]=images_icons2[i];
    all_images[i].pack_src = 'atlas/icons2';
    all_images[i].dir = 'ui';
    amountOfImages++;
}
for(let i in images_icons3){
    all_images[i]=images_icons3[i];
    all_images[i].pack_src = 'atlas/icons3';
    all_images[i].dir = 'ui';
    amountOfImages++;
}
for(let i in images_roads12){
    all_images[i]=images_roads12[i];
    all_images[i].pack_src = 'atlas/roads12';
    all_images[i].dir = 'streets';
    all_images[i].count_per_line = 6;
    amountOfImages++;
}
for(let i in images_roads34){
    all_images[i]=images_roads34[i];
    all_images[i].pack_src = 'atlas/roads34';
    all_images[i].dir = 'streets';
    all_images[i].count_per_line = 6;
    amountOfImages++;
}
for(let i in images_shores){
    all_images[i]=images_shores[i];
    amountOfImages++;
}
for(let i in images_rivers){
    all_images[i]=images_rivers[i];
    all_images[i].pack_src = 'atlas/rivers';
    all_images[i].count_per_line = 6;
    amountOfImages++;
}
for(let i in images_bat1){
    all_images[i]=images_bat1[i];
    all_images[i].pack_src = 'atlas/bat1';
    amountOfImages++;
}
for(let i in images_bat2){
    all_images[i]=images_bat2[i];
    all_images[i].pack_src = 'atlas/bat2';
    amountOfImages++;
}
for(let i in images_bat3){
    all_images[i]=images_bat3[i];
    all_images[i].pack_src = 'atlas/bat3';
    amountOfImages++;
}
for(let i in images_bat4){
    let _imgname = i;
    if(images_bat4[i].prefix){
        _imgname = images_bat4[i].prefix+'/'+i;
    }
    all_images[_imgname]=images_bat4[i];
    all_images[_imgname].pack_src = 'atlas/bat4';
    amountOfImages++;
}
for(let i in images_waters){
    all_images[i]=images_waters[i];
    all_images[i].pack_src = 'atlas/waters';
    amountOfImages++;
}



const IMAGES_TO_LOAD=[

    {
        id:'polution_cloud',
        src:'effects/polution_cloud'
    },
    {
        id:'mini_fog_effect',
        src:'effects/mini_fog'
    },
    {
        id:'mini_heal_effect',
        src:'effects/mini_heal'
    },
    {
        id:'mini_heal_effect2',
        src:'effects/mini_heal_2'
    },
    {
        id:'mini_gold_effect',
        src:'effects/mini_gold'
    },
    {
        id:'mini_mud_effect',
        src:'effects/mini_mud'
    },

    {
        id:'artifacts/artifact_1',
        src:'artifacts/artifact_1'
    },



    {
        id:'icons',
        src:'atlas/icons1',
        use_jablko_blob:true,
        doImageBitMaps:images_icons,
        
    },
    {
        id:'roads12',
        src:'atlas/roads12',
        doImageBitMaps:images_roads12,
        use_jablko_blob:true,
    },
    {
        id:'shores',
        src:'atlas/shores',
        doImageBitMaps:images_shores,
    },
    {
        id:'rivers',
        src:'atlas/rivers',
        use_jablko_blob:true,
        doImageBitMaps:images_rivers,
    },
    {
        id:'bat1',
        src:'atlas/bat1',
        doImageBitMaps:images_bat1,
    },

];





const IMAGES_TO_LOAD_LATER=[

    {
        id:'click_gem_bg',
        src:'effects/click_gem_bg'
    },
    {
        id:'art_comp',
        src:'art/comp'
    },
    // {
    //     id:'art_black_friday',
    //     src:'art/black_friday'
    // },
    {
        id:'art_christmas_header',
        src:'art/christmas_header'
    },
    {
        id:'art_ms_ship',
        src:'art/ms_ship'
    },
    {
        id:'art_ms_wave',
        src:'art/ms_wave'
    },
    {
        id:'art_fish_splash',
        src:'art/fish_splash'
    },
    {
        id:'icons2',
        src:'atlas/icons2',
        use_jablko_blob:true,
        doImageBitMaps:images_icons2,
    },
    {
        id:'icons3',
        src:'atlas/icons3',
        use_jablko_blob:true,
        doImageBitMaps:images_icons3,
    },

    {
        id:'waters',
        src:'atlas/waters',
        doImageBitMaps:images_waters,
    },
    {
        id:'bat2',
        src:'atlas/bat2',
        doImageBitMaps:images_bat2,
    },
    {
        id:'bat3',
        src:'atlas/bat3',
        doImageBitMaps:images_bat3,
        use_jablko_blob:true,
    },
    {
        id:'bat4',
        src:'atlas/bat4',
        doImageBitMaps:images_bat4,
        use_jablko_blob:true,
    },

    {
        id:'megacity_1',
        src:'megacity_1',
        gridWidth:3,
    },
    {
        id:'megacity_2',
        src:'megacity_2',
        gridWidth:3,
    },
    {
        id:'megacity_3',
        src:'megacity_3',
        gridWidth:3,
    },
    {
        id:'megacity_apo',
        src:'megacity_apo',
        gridWidth:3,
    },
    {
        id:'roads34',
        src:'atlas/roads34',
        doImageBitMaps:images_roads34,
        use_jablko_blob:true,
    },


];


const spriteEffects=[];
function AddBuildEffect(_grid,_max){
    if(!_max)_max = 8;
    if(_max>10)_max=10;
    let _speed=1.5+(_max-4)*0.1;
    let _randRad=MyRand(0,628)*0.01;
    for(let i = 0;i<_max;i++){
        let _dx = Math.cos(_randRad+2*Math.PI*(i/_max))*_speed;
        let _dy = Math.sin(_randRad+2*Math.PI*(i/_max))*_speed;
        AddSingleEffect(_grid,_dx,_dy,_dx*10,_dy*10,'mini_fog_effect');
    }
}
function AddMudEffect(_grid,_max){
    if(!_max)_max = 8;
    if(_max>10)_max=10;
    let _speed=1.5+(_max-4)*0.1;
    let _randRad=MyRand(0,628)*0.01;
    for(let i = 0;i<_max;i++){
        let _dx = Math.cos(_randRad+2*Math.PI*(i/_max))*_speed;
        let _dy = Math.sin(_randRad+2*Math.PI*(i/_max))*_speed;
        AddSingleEffect(_grid,_dx,_dy,_dx*10,_dy*10,'mini_mud_effect',0,0,0,0,0.6);
    }
}
function AddHealEffect(_grid,_max,_size){
    if(!_size)_size=50;
    if(!_max)_max = 6;
    if(_max>2){
        _max=Mce(_max*0.5);
    }
    // let _speed=1.5+(_max-4)*0.1;
    let _speed=3;
    let _randSpread=3;
    if(_max==1)_randSpread=6;
    let _posunX=-_size*0.5;
    const _array=[];
    for(let i=0;i<_max;i++){
        _array[i]=i;
    }
    for(let i=0;i<_max;i++){
        let _dx = 0;
        let _dy = -MyRand(90,110)*0.01*_speed;
        let _randomIndex = PullRandomItemFromArray(_array);
        AddSingleEffect(_grid,_dx,_dy,MyRand(-_randSpread,_randSpread)+_posunX + ((_randomIndex+0.5)/_max)*gridSirka,MyRand(-_randSpread+0,_randSpread+30),(_max==1?'mini_heal_effect':'mini_heal_effect2'),900,_size,_size,i*50,0.8);
    }
}

function AddGoldEffect(_XY,_max,_size){
    if(!_size)_size=50;
    if(!_max)_max = 6;
    // let _speed=1.5+(_max-4)*0.1;
    let _speed=3;
    let _randSpread=3;
    if(_max==1)_randSpread=6;
    let _posunX=-_size*0.5;
    const _array=[];
    for(let i=0;i<_max;i++){
        _array[i]=i;
    }
    for(let i=0;i<_max;i++){
        let _dx = 0;
        let _dy = -MyRand(90,110)*0.01*_speed;
        let _randomIndex = PullRandomItemFromArray(_array);
        AddSingleEffect(_XY,_dx,_dy,MyRand(-_randSpread,_randSpread)+_posunX + ((_randomIndex+0.5)/_max)*gridSirka,MyRand(-_randSpread+0,_randSpread+30),'mini_gold_effect',900,_size,_size,i*50,1);
    }
}



function AddSingleEffect(_XY,_dx,_dy,_shift_x,_shift_y,_sprite_image,_max_time,_w,_h,_delay,_alfa){
    if(experimentalDraw){
        return false;
    }
    let _x=0;
    let _y=0;
    if(!_XY){
        _x=_XY.x;
        _y=_XY.y;
    }else{
        _x=_XY.x;
        _y=_XY.y;
    }
    if(!_max_time)_max_time=1500;
    if(!_delay)_delay=0;
    if(!_alfa)_alfa=0.6;
    if(!_w)_w=gridSirka;
    if(!_h)_h=gridSirka;
    let _newBE={
        time:_max_time,
        max_time:_max_time,
        grid_x:_x,
        grid_y:_y,
        x:_x*gridSirka+_shift_x,
        y:_y*gridSirka+_shift_y,
        dx:_dx,
        dy:_dy,
        w:_w,
        h:_h,
        scale_shift:0,
        rad:0,
        alfa:_alfa,
        alfa2:_alfa,
        delay:_delay,
        sprite_image:_sprite_image,
    };
    spriteEffects.push(_newBE)

}


function DrawSpriteEffect(_be){
    if(_be.time>0 && _be.delay<=0){

        let _x = _be.x;
        let _y = _be.y;
        ctx.globalAlpha = _be.alfa;

        if(_be.dx){
            _x-=_be.scale_shift;
            _y-=_be.scale_shift;
            
            ctx.translate(_x,_y);
            ctx.translate(+_be.w*0.5,+_be.h*0.5);
            ctx.rotate(_be.rad)
            ctx.translate(-_be.w*0.5,-_be.h*0.5);
            
            MyDrawXY(ctx,_be.sprite_image, 0, 0, _be.w, _be.h,0,0);
            ctx.translate(+_be.w*0.5,+_be.h*0.5);
            ctx.rotate(-_be.rad)
            ctx.translate(-_be.w*0.5,-_be.h*0.5);
            ctx.translate(-_x,-_y);
        }else{
            MyDrawXY(ctx,_be.sprite_image, _x, _y, _be.w, _be.h,0,0);
        }
    }
    // _be
    // ctx.draw
}


function ProcessSpriteEffects(){
    let _speed = SEC_FRACTAL;
    if(GetDetails()==2){
        _speed*=3;
    }
    let _removeAny=0;
    for(let _be of spriteEffects){
        if(_be.delay>0){
            _be.delay-=_speed;
        }else if(_be.time>0){
            _be.time-=_speed;
            _be.x += _be.dx;
            _be.y += _be.dy;
            _be.alfa = (_be.time/_be.max_time)*_be.alfa2;
            if(_be.dx){
                _be.scale_shift+=0.5;
                _be.w+=1;
                _be.h+=1;
                _be.rad+=0.02;
            }
        }
        
        if(_be.time<=0){
            _removeAny++;

        }
    }
    if(_removeAny){
        for(let i in spriteEffects){
            if(spriteEffects[i].time<=0){
                spriteEffects.splice(i,1);
                break;
            }
        }
    }
}
function GenerateAllShores(){
    //PART 1
    for(let _x in myGridData){
        for(let _y in myGridData[_x]){
            if(myGridData[_x][_y]){
                let _g = myGridData[_x][_y];
                GenerateSingleShorePart1(_g);
                
            }
        }
    }
    
    //PART 2
    for(let _x in myGridData){
        for(let _y in myGridData[_x]){
            if(myGridData[_x][_y]){
                let _g = myGridData[_x][_y];
                GenerateSingleShorePart2(_g);

            }
        }
    }
}

function GenerateSingleShorePart1(_g){
    if(_g.water){
        _g.shores=[];
        let _g4= GetGridData(_g.x-1,_g.y);
        if(_g4){
            if(_g4.river && (_g4.river==7||_g4.river==1||_g4.river==4||_g4.river==5||_g4.river==11)){
                _g.shores.push({image: 'shore_river', rad: 0 });
                _g.s4=2;
            }else if(!_g4.water){
                _g.shores.push({image: 'shore_straight', rad: 0 });
                _g.s4=1;
            }
        }
        let _g6= GetGridData(_g.x+1,_g.y);
        if(_g6){
            if(_g6.river && (_g6.river==3||_g6.river==6||_g6.river==9||_g6.river==5||_g6.river==11)){
                _g.shores.push({image: 'shore_river', rad: Math.PI });
                _g.s6=2;
            }else if(!_g6.water){
                _g.shores.push({image: 'shore_straight', rad: Math.PI });
                _g.s6=1;
            }
        }
        let _g2= GetGridData(_g.x,_g.y+1);
        if(_g2){
            if(_g2.river && (_g2.river==1||_g2.river==2||_g2.river==3||_g2.river==5||_g2.river==12)){
                _g.shores.push({image: 'shore_river', rad: Math.PI*1.5 });
                _g.s2=2;
            }else if(!_g2.water){
                _g.shores.push({image: 'shore_straight', rad: Math.PI*1.5 });
                _g.s2=1;
            }
        }
        let _g8= GetGridData(_g.x,_g.y-1);
        if(_g8){
            if(_g8.river && (_g8.river==7||_g8.river==8||_g8.river==9||_g8.river==5||_g8.river==12)){
                _g.shores.push({image: 'shore_river', rad: Math.PI*0.5 });
                _g.s8=2;
            }else if(!_g8.water){
                _g.shores.push({image: 'shore_straight', rad: Math.PI*0.5 });
                _g.s8=1;
            }
        }
        if(_g.s2==1 && _g.s4==1){
            _g.shores.push({image: 'shore_inner_corner', is_inner_corner:1, rad: 0 });
        }
        if(_g.s4==1 && _g.s8==1){
            _g.shores.push({image: 'shore_inner_corner', is_inner_corner:1, rad: Math.PI*0.5 });
        }
        if(_g.s8==1 && _g.s6==1){
            _g.shores.push({image: 'shore_inner_corner', is_inner_corner:1, rad: Math.PI*1 });
        }
        if(_g.s6==1 && _g.s2==1){
            _g.shores.push({image: 'shore_inner_corner', is_inner_corner:1, rad: Math.PI*1.5 });
        }
        if(_g.s2==1 && _g.s4==2){
            _g.shores.push({image: 'shore_inner_corner3', is_inner_corner:1, rad: 0 });
        }
        if(_g.s4==1 && _g.s8==2){
            _g.shores.push({image: 'shore_inner_corner3', is_inner_corner:1, rad: Math.PI*0.5 });
        }
        if(_g.s8==1 && _g.s6==2){
            _g.shores.push({image: 'shore_inner_corner3', is_inner_corner:1, rad: Math.PI*1 });
        }
        if(_g.s6==1 && _g.s2==2){
            _g.shores.push({image: 'shore_inner_corner3', is_inner_corner:1, rad: Math.PI*1.5 });
        }
        if(_g.s2==2 && _g.s4==1){
            _g.shores.push({image: 'shore_inner_corner2', is_inner_corner:1, rad: 0 });
        }
        if(_g.s4==2 && _g.s8==1){
            _g.shores.push({image: 'shore_inner_corner2', is_inner_corner:1, rad: Math.PI*0.5 });
        }
        if(_g.s8==2 && _g.s6==1){
            _g.shores.push({image: 'shore_inner_corner2', is_inner_corner:1, rad: Math.PI*1 });
        }
        if(_g.s6==2 && _g.s2==1){
            _g.shores.push({image: 'shore_inner_corner2', is_inner_corner:1, rad: Math.PI*1.5 });
        }
        if(_g.s2==2 && _g.s4==2){
            _g.shores.push({image: 'shore_inner_corner4', is_inner_corner:1, rad: 0 });
        }
        if(_g.s4==2 && _g.s8==2){
            _g.shores.push({image: 'shore_inner_corner4', is_inner_corner:1, rad: Math.PI*0.5 });
        }
        if(_g.s8==2 && _g.s6==2){
            _g.shores.push({image: 'shore_inner_corner4', is_inner_corner:1, rad: Math.PI*1 });
        }
        if(_g.s6==2 && _g.s2==2){
            _g.shores.push({image: 'shore_inner_corner4', is_inner_corner:1, rad: Math.PI*1.5 });
        }
    }
}

                
function GenerateSingleShorePart2(_g){
    if(_g && _g.water){
        let _g2= GetGridData(_g.x,_g.y+1);
        let _g4= GetGridData(_g.x-1,_g.y);
        let _g8= GetGridData(_g.x,_g.y-1);
        let _g6= GetGridData(_g.x+1,_g.y);
        if(_g2 && _g2.s4 && _g4 && _g4.s2){
            _g.shores.push({image: 'shore_outer_corner', rad: 0 });
        }
        if(_g4 && _g4.s8 && _g8 && _g8.s4){
            _g.shores.push({image: 'shore_outer_corner', rad: Math.PI*0.5 });
        }
        if(_g8 && _g8.s6 && _g6 && _g6.s8){
            _g.shores.push({image: 'shore_outer_corner', rad: Math.PI*1 });
        }
        if(_g6 && _g6.s2 && _g2 && _g2.s6){
            _g.shores.push({image: 'shore_outer_corner', rad: Math.PI*1.5 });
        }
    }
}

function GenerateSingleShoreOnly(_g,_also_corners){
    GenerateSingleShorePart1(_g);
    let _g2= GetGridData(_g.x,_g.y+1);
    let _g4= GetGridData(_g.x-1,_g.y);
    let _g8= GetGridData(_g.x,_g.y-1);
    let _g6= GetGridData(_g.x+1,_g.y);
    if(_g2){
        GenerateSingleShorePart1(_g2);
        GenerateSingleShorePart2(_g2);            
    }
    if(_g4){
        GenerateSingleShorePart1(_g4);
        GenerateSingleShorePart2(_g4);            
    }
    if(_g8){
        GenerateSingleShorePart1(_g8);
        GenerateSingleShorePart2(_g8);            
    }
    if(_g6){
        GenerateSingleShorePart1(_g6);
        GenerateSingleShorePart2(_g6);            
    }
    if(_also_corners){
        GenerateSingleShorePart2(GetGridData(_g.x+1,_g.y+1));
        GenerateSingleShorePart2(GetGridData(_g.x-1,_g.y+1));
        GenerateSingleShorePart2(GetGridData(_g.x+1,_g.y-1));
        GenerateSingleShorePart2(GetGridData(_g.x-1,_g.y-1));
    }
    GenerateSingleShorePart2(_g);
}


function DrawGridShores(_ctx,_g,_zoomScale,_gridSirka){
    if(GetDetails()>=2)
    if( _g.shores){ //zoomScale>0.2 &&
        for(let _s of _g.shores){
            if(_s.is_inner_corner && _zoomScale<0.35){
            continue;
            }
            if(_s.rad){
                _ctx.translate((_gridSirka*0.5), (_gridSirka*0.5));
                _ctx.rotate(_s.rad);
                _ctx.translate((-_gridSirka*0.5), (-_gridSirka*0.5));
            }

            if(allBitMaps['shores/'+_s.image+(_g.znecistenie?'_apo':'')]){
                _ctx.drawImage(allBitMaps['shores/'+_s.image+(_g.znecistenie?'_apo':'')],0,0,_gridSirka,_gridSirka);
            }

            if(_s.rad){
                _ctx.translate((_gridSirka*0.5), (_gridSirka*0.5));
                _ctx.rotate(-_s.rad);
                _ctx.translate((-_gridSirka*0.5), (-_gridSirka*0.5));
            }
        }
    }
}


const sdir= getAssetUrl('public/sounds/');
const SOUND_VER=1;

function PlayTap(){
    PlaySound('button_click');
}
function PlayErrorSound(){
    PlaySound('ee3');
}



function SetFlutterSound(){
    sendToFlutter('{ "event": "setSound","enabled": '+(hrac.nastavenia.sound?'true':'false')+' }');
}

function PlaySound(_name){
    // if(testVersion)console.error('sound',_name)
    if(!soundsEnabledByFlutter){
        return false;
    }
    if(!hrac.nastavenia.sound){
        return false;
    }
    if(!_name){
        console.error('missing sound',_name)
    }else{
        if(IS_FLUTTER){
            sendToFlutter('{ "event": "playSound","sound": "'+_name+'" }');
            return true;
        }

        let audio = new Audio(sdir+_name+'.mp3?v='+SOUND_VER);
        audio.volume= (hrac.nastavenia.sound_volume*1) / 100 ;
        audio.play();
        
    }
    
}

function InitFlutterSoundPool(){
    if(FLUTTER_VERSION){
        soundsEnabledByFlutter=false;//nova verzia flutteru pre nu sa to vypne, starsia verzia ani neposiela cislo verzie
    }
    const _fss=[//Flutter Sound Setting
        {name:'win_crowd.mp3', pool:0},
        {name:'achievement.mp3', pool:0},
        {name:'achievement2.mp3', pool:0},
        {name:'achievement3.mp3', pool:0},
        {name:'anvil.mp3', pool:0},
        {name:'artifact.mp3', pool:0},
        {name:'badge_alert.mp3', pool:10},
        {name:'beep.mp3', pool:7},
        {name:'bicycle_bell.mp3', pool:0},
        {name:'book_listing.mp3', pool:7},
        {name:'book_listing2.mp3', pool:0},
        {name:'building_1.mp3', pool:7},
        {name:'building_2.mp3', pool:7},
        {name:'building_3.mp3', pool:7},
        {name:'bulldozer.mp3', pool:7},
        {name:'bunker_connected.mp3', pool:0},
        {name:'bunker_upgrade.mp3', pool:0},
        {name:'button_click.mp3', pool:7},
        {name:'cash1.mp3', pool:0},
        {name:'cash2.mp3', pool:0},
        {name:'cash3.mp3', pool:0},
        {name:'cash4.mp3', pool:0},
        {name:'click_clearing.mp3', pool:10},
        {name:'click_general.mp3', pool:10},
        {name:'click1.mp3', pool:0},
        {name:'click2.mp3', pool:0},
        {name:'click3.mp3', pool:10},
        {name:'click4.mp3', pool:0},
        {name:'click5.mp3', pool:0},
        {name:'click6.mp3', pool:0},
        {name:'click7.mp3', pool:0},
        {name:'click8.mp3', pool:0},
        {name:'close.mp3', pool:0},
        {name:'coin_bunker_earn.mp3', pool:10},
        {name:'coin_fall.mp3', pool:7},
        {name:'coin_storage.mp3', pool:0},
        {name:'construction.mp3', pool:7},
        {name:'destruction.mp3', pool:7},
        {name:'destruction2.mp3', pool:10},
        {name:'destruction3.mp3', pool:7},
        {name:'dialog_close.mp3', pool:0},
        {name:'dingdong1.mp3', pool:0},
        {name:'dingdong2.mp3', pool:0},
        {name:'drug_box.mp3', pool:7},
        {name:'ee.mp3', pool:7},
        {name:'ee_glorious.mp3', pool:0},
        {name:'ee2.mp3', pool:7},
        {name:'ee3.mp3', pool:7},
        {name:'experience.mp3', pool:0},
        {name:'fold_in.mp3', pool:0},
        {name:'fold_out.mp3', pool:0},
        {name:'game_saved.mp3', pool:0},
        {name:'gem_harvest.mp3', pool:7},
        {name:'hammer_big.mp3', pool:0},
        {name:'hammer_hit_1.mp3', pool:0},
        {name:'hammer_hit_2.mp3', pool:0},
        {name:'hammer_hit_3.mp3', pool:0},
        {name:'hammer_hit_4.mp3', pool:0},
        {name:'heal1.mp3', pool:0},
        {name:'heal2.mp3', pool:0},
        {name:'heal3.mp3', pool:0},
        {name:'chop_wood.mp3', pool:7},
        {name:'chua.mp3', pool:0},
        {name:'insuficient_gold.mp3', pool:0},
        {name:'level_up.mp3', pool:0},
        {name:'lose.mp3', pool:0},
        {name:'offer.mp3', pool:0},
        {name:'offline_gold.mp3', pool:0},
        {name:'pickaxe_metal.mp3', pool:7},
        {name:'point.mp3', pool:0},
        {name:'salvage.mp3', pool:7},
        {name:'salvage_2.mp3', pool:7},
        {name:'sawing.mp3', pool:7},
        {name:'ship_send.mp3', pool:7},
        {name:'shop_screen.mp3', pool:0},
        {name:'slide_in_big.mp3', pool:0},
        {name:'sonar1.mp3', pool:0},
        {name:'sonar2.mp3', pool:0},
        {name:'sounds_off.mp3', pool:0},
        {name:'sounds_on.mp3', pool:0},
        {name:'special_location.mp3', pool:0},
        {name:'splash.mp3', pool:7},
        {name:'stash1.mp3', pool:0},
        {name:'stash2.mp3', pool:0},
        {name:'tadaa1.mp3', pool:0},
        {name:'tadaa2.mp3', pool:0},
        {name:'tadaa3.mp3', pool:0},
        {name:'tadaa4.mp3', pool:0},
        {name:'tadaa5.mp3', pool:0},
        {name:'tadaa6.mp3', pool:0},
        {name:'tadaa7.mp3', pool:0},
        {name:'tadaa8.mp3', pool:0},
        {name:'tadaa9.mp3', pool:0},
        {name:'tadaa10.mp3', pool:0},
        {name:'tadaa11.mp3', pool:0},
        {name:'tadaa12.mp3', pool:0},
        {name:'tadaa13.mp3', pool:0},
        {name:'tadaa14.mp3', pool:0},
        {name:'tadaa15.mp3', pool:0},
        {name:'tadaa16.mp3', pool:0},
        {name:'tadaa17.mp3', pool:0},
        {name:'tadaa18.mp3', pool:0},
        {name:'tadaa19.mp3', pool:0},
        {name:'tap.mp3', pool:10},
        {name:'tile_cleaned.mp3', pool:7},
        {name:'tree_leaves.mp3', pool:7},
        {name:'upgrade.mp3', pool:0},
        {name:'visit_friend.mp3', pool:0},
        {name:'water_build.mp3', pool:0},
        {name:'water_drop.mp3', pool:7},
        {name:'water_drop2.mp3', pool:7},
        {name:'win.mp3', pool:0},

        {name:'background_music_v3.mp3', pool:0},
        
        {name:'story_vo_1.mp3', pool:0},
        {name:'story_vo_2.mp3', pool:0}, 
        {name:'story_vo_5.mp3', pool:0}, 
        {name:'story_vo_3.mp3', pool:0}, 
        {name:'story_vo_4.mp3', pool:0},
    ];

    sendToFlutter('{"event": "initMusicPlayer", "soundsConfig": '+JSON.stringify(_fss)+'}');
}

var soundsEnabledByFlutter=true;
function musicPlayerInitialized(){
    soundsEnabledByFlutter=true;
}

let turnOffSoundsFlutterWhenLoading=false;
function turnOffMusicAndSounds(){
    if(hrac?.nastavenia){
        hrac.nastavenia.music=0;
        hrac.nastavenia.sound=0;
        turnOffSoundsFlutterWhenLoading=true;
        SetFlutterMusic();
        SetFlutterSound();
    }
}
function AreTilesAroundAvailableByGrid(_grid,_range){
    return AreTilesAroundAvailable(_grid.x,_grid.y,_range)
}
function AreTilesAroundAvailable(_x,_y,_range){
    for(let i=_x-_range;i<=_x+_range;i++){
        for(let j=_y-_range;j<=_y+_range;j++){
            let _grid = GetGridData(i,j);
            if(!_grid || (_grid && _grid.znecistenie)){
                return false;
            }
        }
    }
    return true;
}
function GetAmountOfClearedNighbourTiles(_grid){
    return 4-GetAmountOfNeighboursOfType(_grid.x,_grid.y,'znecistenie');
}

function IsClearedTileOfTypeAround(_x,_y,_range,_type){ //pozor nerata znecistene
    for(let i=_x-_range;i<=_x+_range;i++){
        for(let j=_y-_range;j<=_y+_range;j++){
            let _grid = GetGridData(i,j);
            if(_grid && !_grid.znecistenie && _grid[_type]){
                return true
            }
        }
    }
    return false;
}

function IsClearedTileOfGroundInWater(_x,_y,_range){ //pozor nerata znecistene
    for(let i=_x-_range;i<=_x+_range;i++){
        for(let j=_y-_range;j<=_y+_range;j++){
            let _grid = GetGridData(i,j);
            if(_grid && !_grid.znecistenie && !_grid.water){
                return true
            }
        }
    }
    return false;
}



function IsAnyOfTheseBuildingsNearBy(_x,_y,_types){
    for(let _t of _types){
        if(IsTileNeighbour(_x,_y,_t)){
            return true;
        }
    }
    return false;
}

function IsGridTileNeighbour(_grid,_type){
    return IsTileNeighbour(_grid.x,_grid.y,_type);
}
function IsTileNeighbour(_x,_y,_type){
    let _g2= GetGridData(_x,_y+1);
    if(_g2 && _g2[_type]) return true;
    let _g8= GetGridData(_x,_y-1);
    if(_g8 && _g8[_type]) return true;
    let _g4= GetGridData(_x-1,_y);
    if(_g4 && _g4[_type]) return true;
    let _g6= GetGridData(_x+1,_y);
    if(_g6 && _g6[_type]) return true;
    return false;
}

function GetAmountOfNeighboursOfType(_x,_y,_type){
    let _amount=0;
    let _g2= GetGridData(_x,_y+1);
    if(_g2 && _g2[_type])_amount++;
    let _g8= GetGridData(_x,_y-1);
    if(_g8 && _g8[_type])_amount++;
    let _g4= GetGridData(_x-1,_y);
    if(_g4 && _g4[_type])_amount++;
    let _g6= GetGridData(_x+1,_y);
    if(_g6 && _g6[_type])_amount++;
    return _amount;
}

function GetGridNeighbours(_grid){
    return [GetGridData(_grid.x,_grid.y+1),GetGridData(_grid.x,_grid.y-1),GetGridData(_grid.x-1,_grid.y),GetGridData(_grid.x+1,_grid.y)];

}

function IsNextToTown(_grid){
    if(_grid.isNextToTown == undefined){
        _grid.isNextToTown = IsTileNeighbour(_grid.x,_grid.y,'mesto');
    }
    if(!_grid.isNextToTown){
        _grid.isNextToTown = IsTileNeighbour(_grid.x,_grid.y,'vidiek');
    }
    return _grid.isNextToTown;
}


const GENERATED_TIME=600;
let justGeneratedGrids=[];
function GetGridData(_x,_y,_init){
    if(!myGridData[_x]){
        myGridData[_x]={};
    }

    let _g = myGridData[_x][_y];
    if(!_g){
        if(_init){
            // console.log(_x,_y)
            _g=GenerateGrid(_x,_y);
            if(_g){
                _g.generatedTime=GENERATED_TIME;
                justGeneratedGrids.push(_g);//the fade in effect
                if(_g.vidiek){
                    ShowFullMegaCity(_g);
                }
            }
            return _g;
        }else{
            return null;
        }
    }
    return _g;
}

function CircularSearchForGridWithAtt(_centerGrid,_att,_max){
    if(!_centerGrid){
        return null;
    }
    if(!_max)_max=250;

    for(let _l=1; _l<=_max;_l++){
        for(let _s =0; _s<4; _s++){
            for(_i = 0; _i< _l*2;_i++){
                if(_s==0){
                    let _x=_centerGrid.x + _i - (_l-1);
                    let _y=_centerGrid.y - _l;
                    let _g = GetGridData(_x,_y);
                    if(_g && _g[_att]){
                        return _g;
                    }
                }
                if(_s==1){
                    let _x=_centerGrid.x + _l;
                    let _y=_centerGrid.y + _i - (_l-1);
                    let _g = GetGridData(_x,_y);
                    if(_g && _g[_att]){
                        return _g;
                    }
                }
                if(_s==2){
                    let _x=_centerGrid.x - _i + (_l-1);
                    let _y=_centerGrid.y + _l;
                    let _g = GetGridData(_x,_y);
                    if(_g && _g[_att]){
                        return _g;
                    }
                }
                if(_s==3){
                    let _x=_centerGrid.x - _l;
                    let _y=_centerGrid.y - _i + (_l-1);
                    let _g = GetGridData(_x,_y);
                    if(_g && _g[_att]){
                        return _g;
                    }
                }
            }
        }
    }

    return null;
}

function GetXInScreenCenter(){
    return Mfl((((camera.x*1/zoomScale2) + ((1/zoomScale2) * window.innerWidth * 0.5))  / gridSirka));
}
function GetYInScreenCenter(){
    return Mfl((((camera.y*1/zoomScale2) + ((1/zoomScale2) * GetWindowHeight() * 0.5))  / gridSirka));
}
function GetGridInScreenCenter(_elseCenter){
    let _x = GetXInScreenCenter();
    let _y = GetYInScreenCenter();

    if(_x< -BOUNDERIES_LEFT){
        _x=-BOUNDERIES_LEFT;
    }
    if(_x> BOUNDERIES_RIGHT){
        _x=BOUNDERIES_RIGHT;
    }
    if(_y< -BOUNDERIES_UP){
        _y=-BOUNDERIES_UP;
    }
    if(_y> BOUNDERIES_DOWN){
        _y=BOUNDERIES_DOWN;
    }

    let _grid = GetGridData(_x, _y);
    if(_grid){
        return _grid;
    }
    if(_elseCenter){
        return GetGridData(0,0);
    }
    return null;
}


function GetIconImage(_image,_maxWidth,_top){
    _image = 'ui/'+_image;
    if(!_maxWidth)_maxWidth=150;
    if(!all_images){
        return '';
    }

    if(all_images[_image] && !singleLoadPictures){
        let _h = _maxWidth;
        let _w = _maxWidth;
        let _scale = _maxWidth / all_images[_image].w;

        let _atlasWidth=all_images[_image].atlas_width?all_images[_image].atlas_width:2020;
        if(all_images[_image].count_per_line){
            _atlasWidth=all_images[_image].count_per_line*202;
        }

        let _out='';
        const imgUrl = getAssetUrl(`public/images/${all_images[_image].pack_src}.png`);
        _out+='<div style="height:'+_h+'px;width:'+_w+'px;'+(_top?'top:'+_top+'px;':'')+'" class="icon-img-div">';
        _out+='<div style="width:'+(_w)+'px;height:'+(_h)+'px; background-size: '+(_scale*_atlasWidth)+'px; background-position: '+(-_scale*all_images[_image].x)+'px '+(-_scale*all_images[_image].y)+'px; background-image: url(\''+ imgUrl +'\');" ></div>';
        _out+='</div>';
        return _out;
    }else{
        if(!singleLoadPictures){
            console.error('icon nieje cez atlas',_image)
        }
        let _h = _maxWidth;
        let _w = _maxWidth;
        const imgUrl = getAssetUrl(`public/images/${_image}.png?`);
        return '<img src="'+ imgUrl +'" style="height:'+_h+'px;width:'+_w+'px;'+(_top?'top:'+_top+'px;':'')+'" class="icon-img-div">';
    }
}

function GetTileImage(_image,_maxWidth,_class,_overflowHidden,_clickFun,_shift){
    if(!_maxWidth)_maxWidth=150;

    if(all_images[_image]){
        let _h = _maxWidth;
        let _w = _maxWidth;
        let _scale = _maxWidth / all_images[_image].w;
        let _ratio = all_images[_image].h / all_images[_image].w;
        let _out='';

        let _atlasWidth=all_images[_image].atlas_width?all_images[_image].atlas_width:2020;
        if(all_images[_image].count_per_line){
            _atlasWidth=all_images[_image].count_per_line*202;
        }
        //top: '+(_ratio==1&&_shift?_shift*_scale:0)+'px; 
        _out+='<div '+(_clickFun?'onclick="'+_clickFun+'";':'')+' style="'+(_overflowHidden?'overflow:hidden;':'')+'height:'+(_h)+'px;width:'+_w+'px;" class="'+(_class!=undefined?(_class?_class:''):'info-tile-img')+'">';
        const imgUrl = getAssetUrl(`public/images/${all_images[_image].pack_src}.png`);
        _out+='<div style="width:'+(_w)+'px;height:'+(_h*_ratio)+'px; background-size: '+(_scale*_atlasWidth)+'px; background-position: '+(-_scale*all_images[_image].x)+'px '+(-_scale*all_images[_image].y)+'px; background-image: url(\''+ imgUrl +'\');" ></div>';
        _out+='</div>';
        
        
        return _out;
    }else{
        console.error('image nieje cez atlas',_image);
        const imgUrl = getAssetUrl(`public/images/${_image}.png`);
        return '<img src="'+ imgUrl +'" style="'+(_maxWidth?'max-height:'+_maxWidth+'px;':'')+'" class="'+(_class?_class:'info-tile-img')+'">';
    }

}

function GetMultiTilesImages(_images,_width,_classSingle,_fun,_shift){
    let _out='';
    _out+='<div class="multi-tile-image-div" style="width:'+_width+'px;height:'+(_width)+'px;">';
    for(let _image of _images){
        _out+=GetTileImage(_image,_width,_classSingle,0,_fun?_fun:'',_shift);
    }
    _out+='</div>';
    return _out;

}


let globalActionZIndex=1000;
let isActionGridView=false; //TOTO JE FUNKCIA KTORU VACSINOU HLADAS
function ActionDiv(_fun,_icon,_text,_label,_floatingRight,_actionCategory,_options){ // chcelo by refaktoro ze aj floatin aj action nech idu do _options      //action button
    if(visitingFriend){
        return '';
    }
    let _images=[];
    if(!_options)_options={};

    if(_options.grid_key){
        if(BUILDINGS_BY_KEYS[_options.grid_key] && BUILDINGS_BY_KEYS[_options.grid_key].upgrades_to && actionButtonsUsed.includes(BUILDINGS_BY_KEYS[_options.grid_key].upgrades_to)){
            anyActionBuildingHiddable=true;
            if(!toggleShowHiddableBuildings){
                return '';
            }
        }
        actionButtonsUsed.push(_options.grid_key);
        if(BUILDINGS_BY_KEYS[_options.grid_key].show_tile_in_build_grid){
            if(Array.isArray(BUILDINGS_BY_KEYS[_options.grid_key].show_tile_in_build_grid)){
                for(let _image of BUILDINGS_BY_KEYS[_options.grid_key].show_tile_in_build_grid){
                    _images.push(_image);
                }
            }else{
                _images.push(BUILDINGS_BY_KEYS[_options.grid_key].show_tile_in_build_grid);
            }
        }
    }

    if(!Array.isArray(_icon)){
        _images.push(_icon)
    }else{
        for(let _image of _icon){
            _images.push(_image);
        }
    }

    let _out='';
    let _bg_class='';
    if(_actionCategory){
        if(_actionCategory==1){
            _bg_class='action_cat_1';
        }
        if(_actionCategory==2){
            _bg_class='#action_cat_2';
        }
    }
    let _disabled = _options.disabled;
    globalActionZIndex--;
    //(_disabled?'':(_bg_color&&_fun?'background-color:'+_bg_color+';':''))
    if(_fun){
        _fun = ' if(grid_menu_opened_time+400 < Date.now()*1){'+_fun+'}';
        // grid_menu_opened_time
    }
    _out+='<div class="action-div '+_bg_class+' '+(_disabled?'disabled':'')+'"  style="z-index:'+globalActionZIndex+';'+(isActionGridView?'display:inline-block;':'')+(_floatingRight?(hrac.nastavenia.leftHanded==2?'float:left;':'float:right;'):'')+(hrac.nastavenia.smallerGridMenu && _floatingRight?'margin-top:15px;':'')+'" >';
    _out+='<table class="action-table" cell-spacing="0" cell-padding="0" border-spacing="0" onclick="'+_fun+'"><tr>';
    if(!isActionGridView){
        _out+='<td style="padding-right:5px;padding-left:5px;">'+_text+'</td>';
    }

    let _size=70;
    if(hrac.nastavenia.smallerGridMenu)_size=55;

    _out+='<td><div class="action-img-div-container" style="'+(_fun?'':'filter: grayscale(1); opacity:0.7;')+' height:'+(_size+2)+'px;width:'+(_size+2)+'px;">';
    for(let _image of _images){
        _out+=GetTileImage(_image,_size+2,'action-img-div',1);
    }
    _out+='</div></td></tr>';
    if(isActionGridView && !hrac.nastavenia.smallerGridMenu){
        // let _letterCount = _label.length;
        let _fontSize = 7;
        // if(_letterCount>99)_fontSize=1;
        // else if(_letterCount>14)_fontSize=9;
        // else if(_letterCount>13)_fontSize=10;
        _out+='<tr><td class="gridActionLabel" style="font-size:'+_fontSize+'px;">'+_label+'</td></tr>';//'+(_letterCount>10?'letter-spacing: -1px;':'')+'
    }
    _out+='</table>';
    _out+='</div>';
    anyActionButtonVisible++;
    return _out;
}

let toggleShowHiddableBuildings=true;
function ToggleAllBuildingsVisibility(){
    toggleShowHiddableBuildings=!toggleShowHiddableBuildings;
    hrac.nastavenia.show_old_buildings=toggleShowHiddableBuildings;//no toto je uz dosmelinovane, toggleShowHiddableBuildings by sa mohlo odstranit uz z processu, refactor
    if(gebi('eyeButDiv2') && HasLevel(BUILDING_EYE_LVL) && !hrac.alreadyPulsedEyeBuilding && gebi('eyeButDiv2').className.includes('pulsableBig')){
        hrac.alreadyPulsedEyeBuilding=true;
        gebi('eyeButDiv2').classList.remove('pulsableBig')
    }
    OpenGridMenu();
    SetInner('eyeButDiv2',`<img src="${getAssetUrl(`public/images/ui/eye_${toggleShowHiddableBuildings ? 'open' : 'closed'}.png`)}">`);
}



function ToggleGridView(){
    isActionGridView=!isActionGridView;
    OpenGridMenu();
    SetInner('gridViewButDiv',`<img src="${getAssetUrl(`public/images/ui/view_${!isActionGridView ? 'grid' : 'line'}.png`)}">`);
}



function CloseGridMenu(){
    ClosePopup('bottomGridMenuPopup');
    AdjustQuickToolY();
    AdjustFPSwindow();
}

function GridIsCenterGrid(_grid){ //pouziva sa lebo niekedy chces info o gride pre budovu a defaultne sa tam hodi cener grid...
    if(_grid && _grid.x == 0 && _grid.y==0){
        return true;
    }
    return false;
}

function IsAnyGridUndefined(_x,_y,_radius){
    for(let _x2=_x*1-_radius;_x2<=_x*1+_radius;_x2++)for(let _y2=_y*1-_radius;_y2<=_y*1+_radius;_y2++)if(!myGridData[_x2] || !myGridData[_x2][_y2]){
        return true;
    }
    return false;
}

function IsAllClearedAround(_x,_y,_radius){
    for(let _x2=_x*1-_radius;_x2<=_x*1+_radius;_x2++)for(let _y2=_y*1-_radius;_y2<=_y*1+_radius;_y2++)if(myGridData[_x2] && myGridData[_x2][_y2]){
        if(myGridData[_x2][_y2].znecistenie){
            // console.log('spinave',_x2,_y2)
            return false;
        }
    }
    return true;
}



function GetRealDistance(_x1,_y1,_x2,_y2){
    let _x = _x2- _x1;
    let _y = _y2- _y1;
    return Math.sqrt((_x*_x) + (_y*_y));
}
function GetSquareDistance(_x1,_y1,_x2,_y2){
    // console.log('x: ',Math.abs(_x1-_x2),'y: ',Math.abs(_y1-_y2))
    return Math.abs(_x1-_x2) + Math.abs(_y1-_y2);
}

function GetVzdialenostOdStredu(_x,_y){
    return Math.abs(_x) + Math.abs(_y);
}

function IsGridInSquareByGrid(_g,_gs,_r){
    return IsGridInSquare(_g,_gs.x,_gs.y,_r);
}
function IsGridInSquare(_g,_x_s,_y_s,_r){
    if(Math.abs(_g.x - _x_s) <= _r && Math.abs(_g.y - _y_s) <= _r ){
        return true;
    }
    return false;
}



function GetTerrainsAround(_x,_y){ //getgridsaround gettilesaround
    let _g1=GetGridData(_x-1,_y);
    let _g2=GetGridData(_x+1,_y);
    let _g3=GetGridData(_x,_y-1);
    let _g4=GetGridData(_x,_y+1);

    return [_g1?_g1:{},_g2?_g2:{},_g3?_g3:{},_g4?_g4:{}];
}

function GetAmountOfTerrainTypeAroundYou(_x,_y,_type){
    let _tiles = GetTerrainsAround(_x,_y);
    let _pocet=0;
    for(let _g of _tiles){
        if(_g && _g[_type]){
            _pocet++;
        }
    }
    return _pocet;
}



function CanBeBuildOnlyOn(_grid,_terrainType){
    if(!_grid || (_grid.x == 0 && _grid.y == 0)){
        return BR+ColorSpan('var(--light-purple)',GetText3('Must be built on terrain type:')+GetText(_terrainType));
    }
    return '';
}

function GetAmountOfTilesInRadius(_grid,_range,_type){
    let _count=0;
    for(let i=_grid.x-_range;i<=_grid.x+_range;i++){
        for(let j=_grid.y-_range;j<=_grid.y+_range;j++){
            let _g = GetGridData(i,j);
            if(_g && _g[_type]){
                _count++;  
            }
        }
    }
    return _count;

}

function GetAmountOfSpecificGridsAroundGrid(_x,_y,_range,_type,_maximumCount,_maximumCountOwnerType){
    let _pocet=0;
    let _types=[];
    if(!Array.isArray(_type)){
        _types.push(_type);
    }else{
        _types=_type;
    }
    
    for(let i=_x-_range;i<=_x+_range;i++){
        for(let j=_y-_range;j<=_y+_range;j++){
            let _grid = GetGridData(i,j);
            
            if(_grid && !_grid.znecistenie){
                let _typeOK=false;
                for(let _t of _types){
                    if(_grid[_t]){
                        _typeOK=true;
                        break;
                    }
                }
                if(_typeOK){
   
                    if(_maximumCount){
                        if(!_grid.countedBy){
                            _grid.countedBy=[];
                        }
                        let _zaratal=false;
                        for(let _p of _grid.countedBy)if(_p){
                            if(_p.x == _x && _p.y == _y){
                                _pocet++;
                                _zaratal=true;
                                break;
                            }
                        }
                        //treba si to vymazavat ownerom
                        if(!_zaratal){
                            if(_grid.countedBy.length < _maximumCount){
                                _pocet++;
                                _zaratal=true;
                                _grid.countedBy.push(GetGridData(_x,_y));
                            }
                        }

                        
                    }else{
                        _pocet++;
                    }
                }

            }
        }
    }
    return _pocet;
}


function TryBasicClearGrid(_grid,_notReady){
    let _ready=true;
    if(_notReady){
        _ready=false;
    }
    if(IsRubble(_grid)){
        _ready = TryClearRubble(_grid);
    }
    if(_grid.sand){
        _ready = TryRevitalise(_grid);
    }
    if(_grid.desert){
        _ready = TryRevitalise(_grid);
    }
    if(_grid.scorched){
        _ready = TryRevitaliseScorched(_grid);
    }
    if(_grid.swamp){
        _ready = TryClearSwamp(_grid.x,_grid.y);
    }
    if(_grid.swamp_rocks){
        _ready = TryClearSwamp(_grid.x,_grid.y,1);
    }
    return _ready;
}

function TryAdvancedClearGrid(_grid){
    if(_grid.znecistenie){
        return false;
    }
    enabledQuicktoolPopup=false;
    let _ready=TryBasicClearGrid(_grid,true);
    if(_grid.water_rocks){
        _ready=ClearRocks(_grid.x,_grid.y);        
    }
    if(_grid.ship_wreck || _grid.ship_wreck_small){
        _ready=SalvageShipWreck(_grid.x,_grid.y);
    }
    if(_grid.broken_power){
        _ready=SalvageBrokenPower(_grid.x,_grid.y);
    }
    if(_grid.airplane_wreck || _grid.broken_city_big_train){
        _ready=SalvageAirplaneWreck(_grid.x,_grid.y);
    }
    if(IsBrokenCity(_grid)){
        _ready=BuildBuilding(_grid.x,_grid.y,52);
        BuildBuilding(_grid.x,_grid.y,49);
    }
    enabledQuicktoolPopup=true;
    return _ready;
}


function StorageOverview(){
    let _out='';
    let _out2='';
    const _small=window.innerWidth<380?1:0;

    if(hrac.storage)
    for(let _t in hrac.storage){
        if(BUILDINGS_BY_KEYS[_t] && hrac.storage[_t]*1>0){
            _out2+='<tr><td>';
            _out2+=PCisloB(hrac.storage[_t])+'x ';
            _out2+=BR;
            _out2+=GetText(BUILDINGS_BY_KEYS[_t].name);
            if(_small && BUILDINGS_BY_KEYS[_t].has_quick_tool){
                _out2+=BR+Button(GetTextCAPS('start quicktool'),'CloseBasicPopup();StartQuickTool(\'b\',\''+_t+'\');',{class:'small'});
            }

            _out2+='</td><td>';
            _out2+=GetBuildingMultiTileImage(BUILDINGS_BY_KEYS[_t],50,'',1);
            if(!_small && BUILDINGS_BY_KEYS[_t].has_quick_tool){
                _out2+='</td><td>';
                _out2+=Button(GetTextCAPS('start quicktool'),'CloseBasicPopup();StartQuickTool(\'b\',\''+_t+'\');',{class:'small'});
            }

            _out2+='</td></tr>';
        }
    }

    if(_out2){
        _out+='<table class="building-overview">'+_out2+'</table>'+BRBR;
    }else{
        _out+="Your storage is empty";
    }
    
    
    DoBasicPopup(_out,GetText("Storage overview"),{centerised:1});
}

function LvlReqStr(_lvl){
    return ' '+GetText('Level {att1} required.',_lvl);
}

function GridBaseInfo(_grid){
    let _tile=null;
    let _tile2=null;
    let _out = '';

    if(_grid.monster){
        return GetMonsterGridInfo(_grid);
    }

    if(!_grid.uranium_cloud)
    if(_grid.building_type && !_grid.is_connected && !_grid.ignores_connection  && !_grid.mesto){
        _out += ColorSpan('red',GetText('Not connected to main settlement!'))+BR;
    }
    
    if( _grid.uranium_field){
        _tile={
            name: GetText('Uranium'), 
            desc: GetText('metallic chemical element in the periodic table, with atomic number 92'), 
        };
    }
    if( _grid.tree_cutted==2){
        _tile={
            name: BR+GetText("Devastated forest"), 
            desc: Bold(ColorSpan('red',GetText("Too many lumber mills around! Have less lumber mills close to each other.")))+BR, 
        };
    }
    if( _grid.palms){
        _tile={
            name: GetText("Palms"), 
            desc: GetText('Generates food and income, also reduces pollution. But woodcutters cant harvest lumber here.'), 
        };
    }
    if( _grid.swamp){
        _tile={
            name: GetText('Swamp'), 
            desc: GetText('unable to build on this soil.')+' '+(HasUpgrade(13)?GetText3('Clay in storage: ')+PMat(hrac.clay,8):'')+GetText('clay_obtaining')+BR+GetText('Some actions only become available at a higher level.')
        };
        if(isActionGridView){
            _tile.desc+= BR+GetText3('Removal cost:')+PMats(CLEAR_SWAMP_COST);
        }
    }
    if( _grid.swamp_rocks){
        _tile={
            name: GetText('Rocky Swamp'), 
            desc: GetText('unable to build on this soil not even bridges.')+''+(HasUpgrade(13)?GetText3('Clay in storage: ')+PMat(hrac.clay,8):'')
        };
        if(isActionGridView){
            _tile.desc+= BR+GetText3('Removal cost:')+PMats(CLEAR_SWAMP_ROCKS_COST);
        }
    }

    if( IsRubble(_grid)){
        _tile={
            name: GetText('Rubble'), 
            desc: GetText('unable to grow forests '+(HasLevel(FARM_REQURED_LEVEL)?'or farmfields here.':'here'))
        };

    }
    if(_grid.farmfield){
        _tile={
            name: GetText('Farm field'), 
            desc: GetText('generates {att1} for nearby farm. These farm fields grow randomly in the {att2} tile range on empty tiles.',[PMat(GetFarmFieldFoodProduction(),'food'),GetFarmRange()])
        };
    }
    if(_grid.farmfield2){
        _tile={
            name: GetText('Advanced Farm field'), 
            desc: GetText('generates {att1} for nearby big farm. These farm fields grow randomly in the {att2} tile range on empty tiles.',[PMat(GetAdvancedFarmFieldFoodProduction(),'food'),GetBigFarmRange()])
        };
    }


    if( _grid.sand){
        _tile={
            name: GetText('Sand'), 
            desc: GetText('unable to grow forests '+(HasLevel(FARM_REQURED_LEVEL)?'or farmfields here.':'here'))
        };
    }
    if( _grid.broken_power){
        _tile={
            name: GetText('Old power generator'), 
        };

        if(HasLevel(REQ_ELECTRICITY_LEVEL)){
            _tile.desc=GetText('Partly broken power generator. Generates {att1} {att2} pollution and {att3} {att4} power',[GetBrokenPowerPollution(),PollutionIcon(),GetBrokenPowerPower(),ElectricityIcon()]);
        }else{
            _tile.desc=GetText('Partly broken power generator. Generates {att1} {att2} pollution.',[GetBrokenPowerPollution(),PollutionIcon()]);

        }
        
    }

    if( _grid.desert){
        _tile={
            name: GetText('Desert'), 
            desc: GetText('unable to grow forests '+(HasLevel(FARM_REQURED_LEVEL)?'or farmfields here.':'here'))
        };
    }

    if(_grid.forest==1){
        _tile={
            name: GetText('Small Forest'),
            desc: GetText('income +{att1} gold {EVERY_X_SECONDS}','1 '+FloatingTextGoldIcon()),
            polution: -1, 
        };
    }
    if(_grid.forest==2){
        _tile={
            name: GetText('Dense Forest'), 
            desc: GetText('income +{att1} gold {EVERY_X_SECONDS}','2 '+FloatingTextGoldIcon()),
            polution: -2, 
        };
    }
    if(_grid.forest==3){
        _tile={
            name: GetText('Deep Forest'), 
            desc: GetText('income +{att1} gold {EVERY_X_SECONDS}',GetForestIncome(3)+' '+FloatingTextGoldIcon()),
            polution: -3, 
        };
    }
    if(_grid.sekvoja){
        _tile={
            name: GetText('Sequoia'), 
            // desc: GetText('generates gold and significantly reduces pollution.'),
        };
    }
    if(_grid.mountain){
        _tile={
            name: GetText('Big mountains'), 
            desc: GetText('More like an obstacle, unable to build roads here, iron and stone is present here.'),
        };
        if(!HasLevel(12) && !_grid.building_type){
            _tile.desc += BR+GetText('At higher level, you will unlock buildings that can only be built on this type of tile.');
        }
    }
    if(_grid.hill){
        _tile={
            name: GetText('Hills'), 
            desc: GetText('Unable to build roads here, iron and stone is present here.'),
        };

        if(!HasLevel(12) && !_grid.building_type){
            _tile.desc += BR+GetText('At higher level, you will unlock buildings that can only be built on this type of tile.');
        }
    }
    if(_grid.broken_city_big_train){
        _tile={
            name: GetText('Old train wreck'), 
            desc: GetText('salvage it to gain some resources.'),
        };
    }
    if(_grid.broken_city_small || _grid.broken_city_medium || _grid.broken_city_big){
        _tile={
            name: GetText('Destroyed building'), 
            desc: GetText('old building, lot of rubble.'),
        };
        if(_grid.broken_city_big){
            _tile.desc+=GetText('Looks like a train depot, there might be a train inside.');
        }
        if(isActionGridView){
            _tile.desc+= BR+GetText3('Removal cost:')+PMats(BUILDINGS_BY_IDS[52].cost);
        }

    }

    if(_grid.chip_factory){
        //nothing
    }else if(_grid.copper_field){
        if(HasLevel(COPPER_LEVEL_REQ)){
            _tile={
                name: GetText('Copper field'), 
                desc: GetText('You can build Chip factory here to construct micro chips.'),
            };
        }else{
            _tile={
                name: GetText('Copper field'), 
                desc: GetText('Here you will be able to harvest copper.')+LvlReqStr(COPPER_LEVEL_REQ),
            };
        }
    }

    if(_grid.gem_field){
        if(!HasLevel(GEM_MINE_LEVEL_REQ)){
            _tile={
                name: GetText('Gem field'), 
                desc: ColorSpan('purple',GetText('Rare gem field. Currently you are not able to harvest gem ores here.')+LvlReqStr(GEM_MINE_LEVEL_REQ)),
            };
        }else{
            _tile={
                name: GetText('Gem field'), 
                desc: GetText('Here you can harvest gem ores with Gem mines.'),
            };
        }
    }
    
    if(_grid.deep_water || _grid.deep_water2){
        _tile={
            name: GetText('Deep water'), 
            desc: GetText('Even cleaner water.')+PPollution(-DEEP_WATER_POLLUTION),
        };
    }

    if(_grid.water_rocks_gem){
        _tile={
            name: GetText('Gem Rock'), 
            desc: GetText('gems are present here.'),
        };
    }else if(_grid.fish_small){
        _tile={
            name: GetText('Small fish spot'), 
            desc: GetText('Ship nearby can harvest here {att1} food {EVERY_X_SECONDS}',GetFishIncome(_grid,1)),
        };
    }
    else if(_grid.fish){
        _tile={
            name: GetText('Medium fish spot'), 
            desc: GetText('Ship nearby can harvest here {att1} food {EVERY_X_SECONDS}',GetFishIncome(_grid,1)),
        };
    }
    else if(_grid.fish_big){
        _tile={
            name: GetText('Big fish spot'), 
            desc: GetText('Ship nearby can harvest here {att1} food {EVERY_X_SECONDS}',GetFishIncome(_grid,1)),
        };
    }
    else if(_grid.fish_huge){
        _tile={
            name: GetText('Huge fish spot'), 
            desc: GetText('Ship nearby can harvest here {att1} food {EVERY_X_SECONDS}',GetFishIncome(_grid,1))+BR+GetText("Only Large Fishing Ships gain the Food yield of this fish tile."),
        };

        if(!HasLevel(BIG_SHIP_LEVEL_REQ)){
            _tile.desc += BR+GetText("Level {att1} required.",BIG_SHIP_LEVEL_REQ);
        }
    }
    else if(_grid.water_rocks){
        _tile={
            name: GetText('Water rocks'), 
            desc: GetText('Unable to sail ship here'),
        };
        if(isActionGridView){
            _tile.desc+= BR+GetText3('Removal cost:')+PMats(_grid.water_rocks==1?REMOVE_WATER_ROCKS_COST:REMOVE_WATER_ROCKS_COST2);
        }

    }
    else if(_grid.thermal){
        _tile={
            name: GetText('Thermal spot'), 
            desc: (HasLevel(THERMAL_POWER_PLANT_LEVEL_REQ)?GetText('You can build thermal power plant here'):GetText('You require level {att1} to be able to build thermal power plant.',THERMAL_POWER_PLANT_LEVEL_REQ)),
        };
    }
    else if(_grid.water && !_grid.deep_water && !_grid.deep_water2){
        _tile={
            name: GetText('Water'), 
            desc: (HasLevel(SHIPYARD_LEVEL_REQ)?GetText('is wet'):GetText('You require {BUNKER_NAME} level {att1} to be able to sail here',SHIPYARD_LEVEL_REQ)),
        };
    }
    if(_grid.ground_oil || _grid.oil){
        _tile={
            name: GetText('Oil'), 
            desc: HasLevel(OIL_LEVEL_REQ)?GetText('Build oil rig to harvest oil here.'):GetText('You require level {att1} to be able to harvest oil here.',OIL_LEVEL_REQ),
        };
    }
    if((_grid.fish_small || _grid.fish || _grid.fish_big || _grid.fish_huge)&& !HasLevel(SHIPYARD_LEVEL_REQ+1)){
        _tile.desc=GetText('You require level {att1} to catch fish',SHIPYARD_LEVEL_REQ+1);
    }
    if(_grid.artifact){
        let _a = ARTIFACTS.find(a=>a.id == _grid.artifact)
        if(_a){
            _tile={
                name: GetText(_a.name), 
                desc: GetText('Artifact')+' '+_grid.artifact+' / 10 '+BR+GetArtifactText(_a),
            };
        }
    }

    if(_grid.ship_food_income && !_grid.ship_big){
        _tile2={
            name: GetText('Fishing ship'), 
            desc: GetText3('food income: ')+PMat(_grid.ship_food_income,'food')+PER_INCOME_SHORT+GetFoodStorageIncomeStr(_grid.ship_food_income) ,
        };
    }
    if(_grid.scorched){
        _tile={
            name: GetText('Scorched Earth'), 
            desc: GetText('unable to build anything here'),
        };
    }
    if(_grid.lava_rift){
        _tile={
            name: GetText('Lava Rift'), 
            desc: GetText('unable to build anything here'),
        };
    }

    if(_grid.river){
        _tile={
            name: GetText('River'), 
        };
        // if(!_grid.river_cleaner && !_grid.has_street){
        //     _tile.desc =GetText('bridge can be built only through straight river');
        // }else{
        // }
        _tile.desc =GetText('it flows.');
    }

    if(_grid.golden_field || _grid.golden_island){
        _tile={
            name: GetText('Gold vein'), 
            desc: GetText('build gold mine to gain gold {EVERY_X_SECONDS}'),
        };
        if(!HasLevel(GOLDEN_MINE_LEVEL_REQ)){
            _tile.desc = GetText('Reach level {att1} to unlock gold mine.',GOLDEN_MINE_LEVEL_REQ);
        }
    }
    if(_grid.ship_wreck || _grid.ship_wreck_small){
        _tile={
            name: GetText('Ship wreck'), 
            desc: GetText('salvage it to gain some resources.'),
        };
        if(!HasLevel(SHIPYARD_LEVEL_REQ)){
            _tile.desc = GetText('Reach level {att1} to unlock ship salvaging.',SHIPYARD_LEVEL_REQ);
        }
    }
    if(_grid.airplane_wreck ){
        _tile={
            name: GetText('Airplane wreck'), 
            desc: GetText('salvage it to gain some resources.'),
        };
    }


    if((_grid.rift || _grid.rift_big)){
        _tile={
            name: _grid.rift?GetText('Rift'):GetText('Greater rift'), 
        };

        if(HasLevel(18)){
            if(GetPlayerUpgradeValue(34)){
                _tile.desc= GetText3('Use clay to remove; Clay in storage: ')+PMat(hrac.clay,8);
            }else{
                _tile.desc= GetText('You also need special upgrade to be able to fill the rift.');
            }
        }else{
            _tile.desc= GetText("Level 18 and a special upgrade are required to fill the rift.");
        }
    }


    if(!_tile && !_grid.mesto && !_grid.building_type){
        _tile = {
            name: GetText('Plain'), 
            desc: GetText('grass, suitable for most buildings.'),
        }
    }

    if(_grid.uranium_barrel){
        _tile={name:GetText('Uranium Barrel')};
        _tile.desc=GetText('these barrels can be removed to clear the surrounded area.')+BR+GetText('This will also remove {att1} pollution',PCislo(GetBarrelPolutionByXY(_grid.x,_grid.y))+PollutionIcon());
        if(isActionGridView){
            _tile.desc+= BR+GetText3('Barrel removal cost: ')+PMats(GetDestroyUraniumBarrelCost(_grid.x,_grid.y));
        }
    }else if(_grid.uranium_cloud){
        if(!_tile)_tile={};
        _tile.desc = BRBR+ColorSpan('red',GetText('Uranium cloud present! We need to find the origin of the cloud first'));
    }



    _out+=GetSalvageTileActions(_grid,1);//je tu dva krat
    if(_tile){
        _out += Bold(_tile.name)+(_grid.uranium_cloud && !_grid.uranium_barrel?'':(_tile.desc?' - ':''))+(_tile.desc?_tile.desc:'');
        if(!_grid.uranium_cloud)
        if(_tile.polution && ExploredPollution()){
            _out+= SPC+PPollution(_tile.polution);
        }
        if(_tile.desc){
            _out+=BR;
        }
    }
    if(_tile2){
        _out += Bold(_tile2.name)+(!_grid.uranium_cloud?' - '+_tile2.desc:'');
        if(!_grid.uranium_cloud)
        if(_tile2.polution && ExploredPollution()){
            _out+= SPC+PPollution(_tile2.polution);
        }
        _out+=BR;
    }

    _out+=GetBuildingDescription(_grid);
    if(_grid.farmfield || _grid.farmfield2 || _grid.farm || _grid.farm_big){
        _out+='<div id="farm_grid_info">'+FarmInfo(_grid)+'</div>';
    }
    _out+=GetSalvageTileActions(_grid,0);//je tu dva krat
    

    return [_out,_tile?_tile.name:''];

}




function GetSalvageTileActions(_grid,_before){
    if(isActionGridView && !_before){
        return '';
    }

    if(!isActionGridView && _before){
        return '';
    }

    let _out='';
    if(_grid.broken_power){
        if(!_grid.uranium_cloud){
            _out+= ActionDiv('SalvageBrokenPower('+_grid.x+','+_grid.y+');','ui/buldoser',GetText('Clear this old power generator.')+' '+GetText3('Cost: ')+PMat(GetBrokenPowerClearGoldCost(),1),GetText('Clear'),isActionGridView,0);
        }
    }
    
    if(_grid.ship_wreck || _grid.ship_wreck_small)if(HasLevel(SHIPYARD_LEVEL_REQ)){
        if(!_grid.uranium_cloud){
            _out+= ActionDiv('SalvageShipWreck('+_grid.x+','+_grid.y+');','ui/salvage',GetText('Salvage this ship for some extra resources.')+' '+GetText3('Cost: ')+PMat(GetShipSalvageCost(_grid),1)+BR+GetText('Small chance that small fishes will appear;'),GetText('Salvage'),isActionGridView,2);
        }
    }
    
    if(_grid.airplane_wreck){
        if(!_grid.uranium_cloud){
            _out+= ActionDiv('SalvageAirplaneWreck('+_grid.x+','+_grid.y+');','ui/salvage',GetText('Salvage this airplane for some extra resources.')+' '+GetText3('Cost: ')+PMat(GetAirplaneSalvageCost(_grid),1),GetText('Salvage'),isActionGridView,2);
        }
    }
    if(_grid.broken_city_big_train){
        if(!_grid.uranium_cloud){
            _out+= ActionDiv('SalvageAirplaneWreck('+_grid.x+','+_grid.y+');','ui/salvage',GetText('Salvage this train wreck for some extra resources.')+' '+GetText3('Cost: ')+PMat(GetAirplaneSalvageCost(_grid),1),GetText('Salvage'),isActionGridView,2);
        }
    }

    _out+=GetRockCleanActions(_grid);

    //refactor? - bud toto dostat do building actions alebo naopak

    return _out;

}



function GetBuildingDescriptionFor_LavaRiftRevit(_grid){
    let _out='';
    _out+=GetText("Turns a tile of type {att1} into a tile of type {att2}.",[GetText('Lava Rift'),GetText('Plain')]);
    
    return _out;
}
function GetBuildingDescriptionFor_LavaRiftToThermal(_grid){
    let _out='';
    _out+=GetText("Turns a tile of type {att1} into a tile of type {att2}.",[GetText('Lava Rift'),GetText('Thermal spot')]);
    
    return _out;

}
const MEGA_CITIES=[
    {
        name: 'Main Town',
        x:0,
        y:0,
    },
    // {
    //     name: 'West coast', //VYMAZAT
    //     x:-87,
    //     y:-10,
    // },
    {
        name: 'Tomaxus',
        x:8,
        y:160,
    },
    {
        name: 'Eastenem',
        x:224,
        y:-8,
    },
    {
        name: 'Western',
        x:-216,
        y:128,
    },
    {
        name: 'Nordorm',
        x:108,
        y:-216,
    },
]

function IsMegaCityTile(_x,_y){
    for(let _mc of MEGA_CITIES){
        if(_mc.x!=0&&_mc.y!=0) if(GetSquareDistance(_mc.x,_mc.y,_x,_y)<=2){
            for(let i=-1;i<=1;i++){
                for(let j=-1;j<=1;j++){
                    if(_mc.x == _x+i && _mc.y == _y+j){
                        return true;
                    }
                }
            }
        }
    }
    return false;
}
function GetMegaCityGridByVidiek(_grid){
    if(_grid.vidiek){
        for(let _mc of MEGA_CITIES){
            if(GetSquareDistance(_mc.x,_mc.y,_grid.x,_grid.y)<=2){
                return GetGridData(_mc.x,_mc.y);
            }

        }
    }
    return null
}


function ShowFullMegaCity(_grid){
    for(let _mc of MEGA_CITIES){
        if(_mc.x!=0&&_mc.y!=0) if(GetSquareDistance(_mc.x,_mc.y,_grid.x,_grid.y)<=2){
            for(let i=-1;i<=1;i++){
                for(let j=-1;j<=1;j++){
                    let _x = _mc.x+i;
                    let _y = _mc.y+j;
                    if(!GetGridData(_x,_y)){
                        let _g=GenerateGrid(_x,_y);
                        if(_g){
                            _g.generatedTime=GENERATED_TIME;
                            justGeneratedGrids.push(_g);//the fade in effect
                        }
                    }
                }
            }
        }
    }
}

function MarkMegaCities(){
    for(let _mc of MEGA_CITIES){
        if(GetGridData(_mc.x,_mc.y)){
            if((_mc.x!=0&&_mc.y!=0) || GetGridData(_mc.x,_mc.y).mesto>=45){
                GetGridData(_mc.x,_mc.y).mega_city = 1;
                let _r=1;
                if(_mc.x==0 && _mc.y==0) //fix na hlavne mesto
                for(let _xx=_mc.x-_r;_xx<=_mc.x+_r;_xx++){
                    for(let _yy=_mc.y-_r;_yy<=_mc.y+_r;_yy++){
                        if(GetGridData(_xx,_yy) && (_mc.x!=_xx || _mc.y!=_yy)){
                            GetGridData(_xx,_yy).vidiek=1;
                            delete(GetGridData(_xx,_yy).tree_cutted);
                        }
                    }
                }
            }
        }
    }
}
        

function ClearMegaCity(_grid){
    let _mc = GetMegaCityGridByVidiek(_grid);
    if(_mc){

        for(let i=-1;i<=1;i++){
            for(let j=-1;j<=1;j++){
                let _x = _mc.x+i;
                let _y = _mc.y+j;
                
                let _g=GetGridData(_x,_y);
                if(_x != _grid.x || _y != _grid.y){
                    if(_g.znecistenie){
                        
                        _g.znecistenie=1;
                        RestoreTheGrid(_g,1,1);
                        // console.log(_mc,_g)
                    }
                }
                
                BuildStreet(_g,2,0,1);
            }
        }
        // _mc.is_connected=true;
        // _mc.is_connected3=true;
    }
    
    // ResetAllRoadConnections();
}


//musim takto lebo inak by som nevidel tie cistiace bary, a je to len na nevycistenych
function DrawApoMegaCities(){
    for(let _mc of MEGA_CITIES){
        let _grid = GetGridData(_mc.x-1,_mc.y-1);
        if(_grid && _grid.znecistenie){
            ctx.translate(_grid.x*gridSirka, _grid.y*gridSirka);
            MyDrawXY(ctx,'megacity_apo',0,0,gridSirka*3,gridSirka*3,0,0);            
            ctx.translate(-_grid.x*gridSirka,-_grid.y*gridSirka);
        }
    }
}

function DrawMegaCities(camera_X,camera_Y,camera_X2,camera_Y2,_1pixelLine,_zoomScale){
    
    for(let _mc of MEGA_CITIES){
        let _grid = GetGridData(_mc.x-1,_mc.y-1);
        let _gridMesto = GetGridData(_mc.x,_mc.y);
        if(_grid && !_grid.znecistenie && _gridMesto && _gridMesto.mega_city){
            if(_grid.x >= camera_X-1 && _grid.y>=camera_Y-1 && _grid.x<camera_X2 && _grid.y<camera_Y2){    
                ctx.translate(_grid.x*gridSirka, _grid.y*gridSirka);

                if(_zoomScale>0.30){
                    ctx.globalAlpha = MinMax(0,1,0+(_zoomScale-0.3)*2 );
                    ctx.beginPath();
                    ctx.lineWidth=_1pixelLine/_zoomScale;
                    // ctx.strokeStyle = "rgba(0,0,0,0.25)";
                    ctx.strokeStyle = "rgba(19,1,1,0.5)";
                    // ctx.strokeStyle = "red";
                    // ctx.strokeStyle = "rgba(255,1,1,1)";
                    ctx.fillRect(-_1pixelLine/_zoomScale, -_1pixelLine/_zoomScale, gridSirka*3+2*_1pixelLine/_zoomScale, gridSirka*3+2*_1pixelLine/_zoomScale);
                    ctx.globalAlpha = 1;
                }
                let _type=1;
                if(_gridMesto.mesto>=50){
                    _type=2;
                }
                if(_gridMesto.mesto>=70){
                    _type=3;
                }

                MyDrawXY(ctx,'megacity_'+_type,0,0,gridSirka*3,gridSirka*3,0,0);            
                DrawGoldenTownBar(ctx,_gridMesto,_zoomScale);
                SettlementBottomLabel(ctx,_gridMesto,gridSirka,_zoomScale);

                ctx.translate(-_grid.x*gridSirka,-_grid.y*gridSirka);
            }
        }
    }
}

function DrawNotConnectedApoMegaCities(){ //red
    for(let _mc of MEGA_CITIES){
        let _grid = GetGridData(_mc.x-1,_mc.y-1);
        if(_grid){
            if(!_isZoomOut && !_grid.is_connected && !_grid.ignores_connection && (_grid.building_type || _grid.has_street)){
                if(_mc.was_connected ){
                    ctx.translate(_grid.x*gridSirka, _grid.y*gridSirka);
                    
                    //just drawing red box
                    ctx.beginPath();
                    ctx.fillStyle = 'rgba(200,0,0,0.7)';//red
                    ctx.fillRect(0, 0, gridSirka*3, gridSirka*3);

                    ctx.translate(-_grid.x*gridSirka,-_grid.y*gridSirka);
                }
            }

        }
    }
}

function ProcessMegaCities(){
    for(let _mc of MEGA_CITIES){
        let _grid = GetGridData(_mc.x,_mc.y);
        if(_grid && _grid.is_connected){
            _mc.was_connected=1;   
        }
    }
}


function TryShowAirplaneMegaCityStory(){
    if(HasLevel(54) && !hrac.tutorial.started_searching_second_mega_city && hrac.stats.pocet_mega_cities<3){
        hrac.tutorial.started_searching_second_mega_city=1;
        let _out=''+GetTileImage('megacity_apo',200)+BR;
        _out+=GetText('megacity_tutorial')+BRBR+GetText('Head East!');
        DoBasicPopup(_out,GetText('Airplane wreck'),{centerised:1});
        return true;
    }
    if(!hrac.started_searching_mega_city && HasLevel(35) && hrac.stats.pocet_mega_cities<=0){
        hrac.started_searching_mega_city=1;
        let _out='';
        _out+=GetText('megacity_tutorial')+BRBR+GetText('Head South!');
        DoBasicPopup(_out,GetText('Airplane wreck'),{centerised:1});
        return true;
    }
    return false;
}
let chests=[];
function ProcessChests(){
    for(let _ch of chests){
        _ch.time+=SEC_FRACTAL;
        if(_ch.grid && _ch.grid.shakeing>0){
            _ch.grid.shakeing-=1;
            if(_ch.grid.shakeing<=0){
                _ch.grid.shakeing=0;
            }
        }
    }
}
function MaxChests(){
    return 2 + GetPlayerUpgradeValue(7);
}

function SalvageChest(_grid){ //open chest

    delete(_grid.chest);
    let _chestGold=6000 + SimplifiedNumber(hrac.income)*MyRand(5,10);
    _chestGold = Mro(_chestGold * ((100+GetPlayerUpgradeValue(35))*0.01));
    _chestGold+=SimplifiedNumber(_grid.was_clear_cost*0.8);

    
    
    hrac.stats.obtained_chests++;

    if(hrac.stats.obtained_chests%50==0 && (KnowsSuperClickers())){
        if(hrac.super_clickers > 1000 && totalSpent<10){
            AddFloatingTextToGrid(_grid,GetText('too many super clickers'),'orange',2,4);
        }else{
            AddMat(5,'super_clickers',0,0);
        }
    }
    if(hrac.stats.obtained_chests%100==25 && AreGemsVisible()){
        AddMat(5,'gems',0,0);
    }
    PlaySound('tadaa5');
    
    AddGold(_chestGold,0,2);
    AddGoldEffect(_grid,10);
    
    let _index=chests.findIndex(c=>c.x==_grid.x && c.y==_grid.y);
    if(_index>=0){
        chests.splice(_index,1);
    }
    RefreshStats();
    TryIncreaseSuperClickerBonusToStarterPack(1);

    if(hrac.stats.obtained_chests%100==50){
        TryLikeThisAppPopop();
    }

    if(testVersion)ShowSpecialChestPopup(_chestGold);
    hrac.stats.found_chests_today++;
    hrac.stats.searching_for_special_chest++;
    if(rewardAdIsReady && hrac.stats.searching_for_special_chest>4+Math.min(10,GetPlayerLevel()*0.2) && hrac.found_special_chest_today<1 && HasLevel(6)){
        if(MyRand100(25)){
            ShowSpecialChestPopup(_chestGold);
        }
    }
}

function ShowSpecialChestPopup(_goldGivenAlready){ //superchest super chest
    let _out='';
    _out+='<div class="offline-overview">';
    _out+=FSize(22,PMat(10,'gems'));
    _out+=SPC+SPC+FSize(22,PMat(30,'super_clickers'));
    _out+=BRBR+FSize(22,PMat(2*GoldForAd(),'gold'));
    _out+='</div>'+BR;
    _out+='<center>';
    _out+=GetText('You have found a very rare chest, but it is locked. Watch an ad to retrieve its content!');

    _out+=WatchOrSkipOut(17);
    if(_goldGivenAlready){
        _out+=BRBR;
        _out+=GetText3('Gold from regular chest already received:')+PMat(_goldGivenAlready,'gold');
        
    }
    _out+='</center>'+BR;

    let _label=GetText("SPECIAL CHEST")+BR;
    let _size = 80;
    if(window.innerWidth<315){
        _size=60;
    }
    _label+=GetIconImage('gems',_size);
    _label+=GetIconImage('super_clickers',_size);
    _label+=GetIconImage('gold',_size);

    
    DoSecondaryPopup(_out,_label,{max_width: GetSmallerPopupWidth(),close_question:[GetText('Are you sure you want to discard this chest?'),GetText('Discard')]});
}

function AddChest(_gridCH){
    _gridCH.chest = 1;
    if(!GetPlayerUpgradeValue(58)){
        _gridCH.znecistenie *= 3;
        _gridCH.znecistenie_max *= 3;
    }
    chests.push({x:_gridCH.x,y:_gridCH.y,enabled:1,time:0});
}

function AddChestToDark(_dirtyBlocks){
    if(!_dirtyBlocks){
        _dirtyBlocks=GetDirtyBlocks();
    }

    let _gridCH = GetRandomItemFromArray(_dirtyBlocks);
    if(testVersion)_gridCH={x:230, y:42}

    if(_gridCH)
    for(let i=0;i<15;i++){
        let _x = _gridCH.x+MyRand(2,5)*RandomZnamienko();
        if(_x < -BOUNDERIES_LEFT) continue;
        if(_x > BOUNDERIES_RIGHT) continue;

        let _y = _gridCH.y+MyRand(2,5)*RandomZnamienko();
        if(_y < -BOUNDERIES_UP) continue;
        if(_y > BOUNDERIES_DOWN) continue;
    
        if(!GetGridData(_x,_y)){
            chests.push({x:_x,y:_y,enabled:1,time:0});
            break;  
            
        }
    }
}


let dirtyBlocks=null;
function AddRandomChest(_floatingTextGrid){
    if(!dirtyBlocks){
        dirtyBlocks=GetDirtyBlocks();
    }
    dirtyBlocks = dirtyBlocks.filter(b=>b.znecistenie==b.znecistenie_max);
    if(dirtyBlocks.length > 0){

        let _gridCH = GetRandomItemFromArray(dirtyBlocks);
        if(_gridCH){
            AddChest(_gridCH);
            if(_floatingTextGrid){
                AddFloatingTextToGrid(_floatingTextGrid,GetText('New chest coordinates'),'#fc0',undefined,4);
            }
            return true;
        }
    }
    return false;
}

function GetDirtyBlocks(){
    const _dirtyBlocks=[];
    for(let _x in myGridData)if(_x%2){
        for(let _y in myGridData[_x]){
            let _g = myGridData[_x][_y];
            if(_g && _g.znecistenie){
                _dirtyBlocks.push(_g);
            }
        }
    }
    return _dirtyBlocks;
}



function HowOftenChest(){
    if(HasLevel(20)) return 15;
    return 9;
}

function GetChestByXY(_x,_y){
    for(let _ch of chests){
        if(_ch.x == _x && _ch.y == _y){
            return _ch;
        }
    }
    return null;
}


function ChangeAllChestsToEasy(){
    for(let _x in myGridData){
        for(let _y in myGridData[_x])if(myGridData[_x][_y]){
            let _grid=myGridData[_x][_y];
            if(_grid.chest){
                _grid.znecistenie=Mro(_grid.znecistenie / 3);
                _grid.znecistenie_max=Mro(_grid.znecistenie_max / 3);
            }
        }
    }
}

function DrawChest(_ctx,_grid,_gridSirka,_1pixelSpace,_1pixelLine){
    let _max_rad = 0.15;
    let _uhol = (_grid.shakeing%6<3?(-_grid.shakeing*0.02):(Math.min(_max_rad,_grid.shakeing)*0.01));
    if(_uhol){
        _ctx.translate(_gridSirka*0.5, _gridSirka*0.5);
        _ctx.rotate(_uhol);
        _ctx.translate(-_gridSirka*0.5, -_gridSirka*0.5);
        MyDraw(_ctx,"chest"+(_grid.water?'_water':''), _gridSirka, _1pixelSpace,_1pixelLine);
        _ctx.translate(_gridSirka*0.5, _gridSirka*0.5);
        _ctx.rotate(-_uhol);
        _ctx.translate(-_gridSirka*0.5, -_gridSirka*0.5);
    }else{
        MyDraw(_ctx,"chest"+(_grid.water?'_water':''), _gridSirka, _1pixelSpace,_1pixelLine);
    }
}

let safeGoldIndex=0;
const SAFE_CHANCE_PERC=20;
function ShowTrezorPopup(){ 
    let _out='';
    if(hrac.found_safe_today>0 && !hrac.taken_safe_today){
        return false;
    }
    hrac.found_safe_today++;
    _out+='<div class="offline-overview">';
    _out+=FSize(22,PMat(5,'gems'));
    safeGoldIndex = MyRand(3,5);
    _out+=BRBR+FSize(24,PMat(safeGoldIndex*GoldForAd(),'gold'));
    _out+='</div>'+BR;
    _out+='<center>';
    _out+=GetText('You have found an undamaged safe, but it is locked. Watch an ad to retrieve its content!');

    _out+=WatchOrSkipOut(14);
    _out+='</center>'+BR;

    const imgUrl = getAssetUrl(`public/images/art/trezor.png?v=${PIC_VERSION}`);
    let _label=GetText('Treasure found')+BR+`<img style="width:70%;margin-bottom:-8px;margin-top:18px;" src="${imgUrl}">`;
    
    DoSecondaryPopup(_out,_label,{avoid_quick_tool_close:1, max_width: GetSmallerPopupWidth(),close_question:[GetText('Are you sure you want to discard this safe?'),GetText('Discard')]});
}


function GetTownIncome(_g){
    return GetTownIncomeByLevel(_g.mesto,_g);
}
function GetTownIncomeByLevel(_lvl,_grid){
    let _income= 10*_lvl;
    if(GridIsCenterGrid(_grid))_income+=50;//main town
    if(_lvl>=3)_income+=5;
    // if(_lvl>=4)_income+=10;
    if(_lvl>=5)_income+=10;
    if(_lvl>=8)_income+=10;
    if(_lvl>=10)_income+=20;
    if(_lvl>=12)_income+=10;
    if(_lvl>=15)_income+=30;
    if(_lvl>=17)_income+=15;
    if(_lvl>=20)_income+=35;
    if(_lvl>=22)_income+=20;
    if(_lvl>=25)_income+=30;
    if(_lvl>=30)_income+=30;
    if(_lvl>=40)_income+=50;
    if(_lvl>=50)_income+=50;
    if(_lvl>=60)_income+=50;
    if(_lvl>=70)_income+=75;
    if(_lvl>=80)_income+=75;
    return (70+_income)*(_grid.mega_city?5:1);
}

function GetRestorationStrengthFromAllMegaCities(){
    let _sum=0;
    for(let _mc of MEGA_CITIES){
        _sum+=GetRestorationStrengthFromOneMegaCity(GetGridData(_mc.x,_mc.y));
    }
    return _sum;
}
function GetRestorationStrengthFromOneMegaCity(_grid,_nextLevel){
    if(_grid && _grid.mega_city){
        return Mfl((_grid.mesto+(_nextLevel?1:0)) / 3);
    }
    return 0;
}


function RadiusClickerInfo(){
    return BRBR+GetText("Radius clicks are generated every hour. +{att1} per hour up to a maximum of {att2}. Your current amount is displayed in town info.",[GetRadiusClicksPerHour(),GetRadiusClicksMax()])
}

function GetRadiusClicksMax(){
    return 200+GetPlayerUpgradeValue(111,0);
}
function GetRadiusClicksPerHour(){
    return 10+GetPlayerUpgradeValue(112,0);
}
function TryGenerateRadiusClicks(){
    let serverTimeMiliSec = new Date(serverTime)*1;
    if(hrac.radius_clicks_date+3600*1000 < serverTimeMiliSec){
        while(hrac.radius_clicks_date+3600*1000 < serverTimeMiliSec){
            hrac.radius_clicks_date+=3600*1000;
            hrac.radius_clicks_amount+=GetRadiusClicksPerHour();
            if(hrac.radius_clicks_amount>GetRadiusClicksMax()){
                hrac.radius_clicks_amount=GetRadiusClicksMax();
                break;
            }
        }

        if(hrac.radius_clicks_date+3600*1000 < serverTimeMiliSec){
            hrac.radius_clicks_date = Mfl(serverTimeMiliSec / (3600*1000))*(3600*1000);
            if(hrac.radius_clicks_date+3600*1000 < serverTimeMiliSec){
                hrac.radius_clicks_date+=3600*1000;
            }
            if(testVersion)console.log('este som musel doladit cas',hrac.radius_clicks_date);
        }
    }
}

function GetRadiusClickDist(){
    return GetPlayerUpgradeValue(104,0);
}


const CLICK_TOWN_LVL_2=40;
const CLICK_TOWN_LVL_3=100;
const CLICK_TOWN_LVL_4=175;
const CLICK_TOWN_LVL_5=300;

const KLIK_MESTO_ZLATO=20;
const GOLD_CLICK_FOR_EACH_TOWN=10;
function GetGoldForDiscovery(){
    return 1000 + hrac.stats.towns*500;
}


const newTownChecks=[];
function CheckNewTowns_part1(_grid){
    newTownChecks.splice(0);
    let _neighbours=GetGridNeighbours(_grid);
    for(let _n of _neighbours) CheckNewTowns_part1b(_n);
    
}
function CheckNewTowns_part1b(_g){
    if(_g && (_g.mesto || _g.vidiek) && !_g.is_connected && !_g.znecistenie){
        newTownChecks.push(_g);
    }
}

function CheckNewTowns_part2(){
    for(let _g of newTownChecks)if(_g && _g.is_connected){
        AddFloatingTextToGrid(_g,'+'+PMat(GetTownPopulation(_g),12)+' '+GetText('Population'),'#72d84c',0,6);
        AddFloatingTextToGrid(_g,GetBunkerTownLabel(_g)+' '+GetText('connected')+' '+FloatingTextIcon('thumbsup'),'#72d84c',1,6); // 'connected' bunker connected town connected
        PlaySound('dingdong2');
        InitGridNeighbours(_g,3);
        AddPing(_g.x,_g.y,0,300,1500,'#72d84c');
        AddPing(_g.x,_g.y,0,600,1200,'#72d84c');
        _g.is_connected3=true;
    }
}


let allTowns=[];
function InitTowns(){
    allTowns=[];
    for(let _x in myGridData) for(let _y in myGridData[_x]){
        if(myGridData[_x][_y] && myGridData[_x][_y].mesto){
            allTowns.push(myGridData[_x][_y]);
        }
    }
}



function GetTownClickGold(_grid){
    let _extra = 0;
    if((_grid.x==0&&_grid.y==0) || GetPlayerUpgradeValue(42)){
        _extra += (hrac.stats.towns_connected-1)*5;
    }
    let _mestoLevel = _grid.mesto;
    if(GetPlayerUpgradeValue(42)){
        _mestoLevel = Math.max(_mestoLevel,GetGridData(0,0).mesto);
    }
    
    let _gold = GetPlayerUpgradeValue(1)+KLIK_MESTO_ZLATO+(_mestoLevel-1)*GOLD_CLICK_FOR_EACH_TOWN+_extra;
    if(hrac.stats.towns_connected>=2)_gold+=25;
    if(hrac.stats.towns_connected>=3)_gold+=15;
    
    if(GetPlayerUpgradeValue(15)){
        _gold*=GetPlayerUpgradeValue(15);
    }
    if(_grid.mega_city || (GetPlayerUpgradeValue(42) && GetGridData(0,0).mega_city)){
        _gold+=500;
    }

    return _gold;
}


function CanBeTownHere(_origin_x,_origin_y){ //istownpossible
    let _okolo = 3;
    let _dist = GetVzdialenostOdStredu(_origin_x,_origin_y);
    if(_dist>200){_okolo = 20;}
    else if(_dist>150){_okolo = 15;}
    else if(_dist>100){_okolo = 12;}
    else if(_dist>40){_okolo = 10;}
    else if(_dist>30){_okolo = 8;}
    else if(_dist>20){_okolo = 6;}
    else if(_dist>12){_okolo = 5;}
    else if(_dist>6){_okolo = 4;}

    for(let _x=_origin_x-_okolo;_x<=_origin_x+_okolo;_x++){
        for(let _y=_origin_y-_okolo;_y<=_origin_y+_okolo;_y++){
            let _g = GetGridData(_x,_y);
            if(_g && _g.mesto){
                return 0;
            }
        }
    }
    for(let _x=_origin_x-_okolo+5;_x<=_origin_x+_okolo+5;_x++){
        for(let _y=_origin_y-_okolo+5;_y<=_origin_y+_okolo+5;_y++){
            let _g = GetGridData(_x,_y);
            if(_g && _g.mesto){
                return 1;
            }
        }
    }
    return 2;
}


function GetTownImageName(_g){
    if(_g.mesto<5)
    return 'bunker';
    // if([1,2].includes(_g.mesto)){
    //     return "town"+_g.mesto;
    // }
    return "town"+Math.min(5,(1+Math.floor((_g.mesto-5) / 5 )));

}

/** 

   XXXXX   XXX     XXXXX   XXXXX   X    X
  XX   XX   X        X    XX   XX  X   X 
  X         X        X    X        X  X  
  X         X        X    X        X X   
  X         X        X    X        XX    
  X         X        X    X        X X   
  X         X        X    X        X  X  
  XX   XX   X   X    X    XX   XX  X   X 
   XXXXX   XXXXXX  XXXXX   XXXXX   X    X

*/

function TownClick(_grid){

    if(_grid.uranium_cloud){
        AddFloatingTextToMousePos(GetText('Uranium cloud present'),'red');    
        return false;
    }

    if(hrac.stats.clears<=3){
        AddFloatingTextToMousePos(GetText('Search for other bunker first'),'#72d84c',-1);    
        return false;
    }

    if(!_grid.is_connected){
        AddFloatingTextToMousePos(GetText('No road connected to main town'),'red');    
        return false;
    }

    if(isMTQuestVisibleCond4 && !isMTQuestVisibleCond3){
        isMTQuestVisibleCond4=false;
        HideDiv('main_town_quest_div');
    }



    let _gold = GetTownClickGold(_grid);
    if(_grid.earn_clicks_available<=0){
        _gold=0;
    }
    if(!_grid.klikov){
        _grid.klikov=0;
    }
            
    let super_click_multi=1;
    let _plusClicks = 1;        

    if(_gold>0){
        let _massiveCount=1;
        if(hrac.enhanced_clicker){
            if(hrac.enhanced_clicker.amount>0){
                super_click_multi=hrac.enhanced_clicker.value;
                UseEnhancedClicker();
                _gold*=super_click_multi;
            }
        }else if(superClickersInUse){
            if(hrac.super_clickers>0){
                super_click_multi=GetSuperClickerValue();
                _massiveCount=GetPlayerUpgradeValue(79,1);
                super_click_multi*=_massiveCount;
                UseSuperClicker(_massiveCount);
                _gold*=super_click_multi;
            }
        }else{
            if(hrac.super_clickers && !hrac.stats.super_clickersUsed && _grid.klikov%5==0){
                AddFloatingTextToMousePos(GetText('Click super clickers {att1} in header bar to try them',FloatingTextIcon('super_clickers')),'#aeffde',-1);
            }
        }

        _grid.earn_clicks_available-=super_click_multi;
        if(_grid.earn_clicks_available<0){
            _grid.earn_clicks_available=0;
        }

        // AddFloatingTextToMousePos(Bold(ColorSpan('#72d84c',FSize(20,'+ ')))+PMat(_gold,1));
        //5980
        if(GetPlayerUpgradeValue(14)){
            _plusClicks=super_click_multi*GetPlayerUpgradeValue(14);
        }else{
            _plusClicks=super_click_multi*1;
        }
    

        if(hrac.radius_clicks_amount > 0){

            let radiusDist = GetRadiusClickDist();
            // console.log(_massiveCount)
            // console.time('townclicks');
            if(radiusDist){
                let _anyClicked=false;
                for(let _t of allTowns){
                    if(_t.earn_clicks_available>0){
                        if(_t.x != _grid.x || _t.y != _grid.y){
                            if(GetSquareDistance(_t.x, _t.y, _grid.x, _grid.y) <= radiusDist ){
                                let _gold2 = GetTownClickGold(_t)*super_click_multi;
                                _gold += _gold2;
                                _anyClicked=true;
                                _t.earn_clicks_available-=super_click_multi;
                                if(_t.earn_clicks_available<0){
                                    _t.earn_clicks_available=0;
                                }
                                if(GetDetails()>=3){
                                    AddGoldEffect(_t,1);
                                    _t.last_clicked_dur=CLICK_EFECT_DURATION;
                                    _t.klikov+=_plusClicks;
                                    clickedGridEffects.push(_t);
                                }
                                // AddFloatingTextToGrid(_t,Bold(ColorSpan('#72d84c',FSize(20,'+ ')))+PMat(_gold2,1));
                            }
                        }
                    }
                }
                if(_anyClicked){
                    hrac.radius_clicks_amount-=_massiveCount;
                    if(hrac.radius_clicks_amount<0){
                        hrac.radius_clicks_amount=0;
                    }
                }
            }
        }
        // console.timeEnd('townclicks');
        AddFloatingTextToMousePos(Bold(ColorSpan('#72d84c',FSize(20,'+ ')))+PMat(_gold,1));

    
        if(gebi('town_clicks_availble') && last_grid_clicked && last_grid_clicked.grid){
            SetInner('town_clicks_availble',PCislo(last_grid_clicked.grid.earn_clicks_available))
        }

        no_ad_in_turns-=0.4;
        hrac.gold += _gold;
        AddGoldEffect(_grid,1);
        // AddFloatingTextToMousePos('+'+PCislo(_gold)+' gold');
        // PlaySound('click1')
        PlaySound('coin_fall');
    }else{
        if(hrac.stats.town_clicks%5==0){
            AddFloatingError(GetBunkerTownLabel()+': '+GetText('is out of gold.'));
        }

    }
    if(hrac.stats.town_clicks %30==29 && _grid.klikov>200 && GetPlayerUpgradeValue(1)<=0 && hrac.gold>10000){
        AddFloatingTextToMousePos(GetText('You can upgrade clicks in bottom menu - upgrades'),'#aeffde',-1);

    }
    _grid.klikov+=_plusClicks;
    if(gebi('total_town_clicks') && last_grid_clicked && last_grid_clicked.grid){
        SetInner('total_town_clicks',PCislo(last_grid_clicked.grid.klikov))
    }
    if(gebi('remaining_radius_clickers') && last_grid_clicked && last_grid_clicked.grid){
        SetInner('remaining_radius_clickers',GetRadiusClickerLeftStr());
    }
    hrac.stats.town_clicks++;
    let _minusClicks=GetPlayerUpgradeValue(8);
    let _townUpgraded=0;
    if(_grid.klikov>=Math.max(5,CLICK_TOWN_LVL_2-_minusClicks)&&_grid.mesto<2){
        _grid.mesto=2;
        _townUpgraded=1;
    }
    // if(_grid.klikov>=Math.max(5,CLICK_TOWN_LVL_3-_minusClicks)&&_grid.mesto<3){
    //     _grid.mesto=3;
    //     _townUpgraded=1;
    // }
    // if(_grid.klikov>=Math.max(5,CLICK_TOWN_LVL_4-_minusClicks)&&_grid.mesto<4){
    //     _grid.mesto=4;
    //     _townUpgraded=1;
    // }
    // if(_grid.klikov>=Math.max(5,CLICK_TOWN_LVL_5-_minusClicks)&&_grid.mesto<5){
    //     _grid.mesto=5;
    //     _townUpgraded=1;
    // }
    // RefreshHeader();

    if(!gebi('bottom_menu_but_2')){
        ShowBottomMenu();
    }

    if(_grid.x==0 && _grid.y==0 && hrac.stats.town_clicks % 45 == 39 && hrac.stats.towns<4){
        AddFloatingText(camera.tapScreen.x,camera.tapScreen.y+40,GetText('Each new {BUNKER_NAME} = +{att1} gold click to main {BUNKER_NAME}',GOLD_CLICK_FOR_EACH_TOWN),{fontSize:18,color:'pink'});
    }

    // CheckAchievemntsAll();
    if(_townUpgraded){
        UpgradeTownAfterFuns(_grid)
    }
    anyActionDone++;
    SetInner('header_gold_span',PCislo(hrac.gold));
    RefreshTownCostInfo();
    if(lastTownCostGrid){
        if(GetTownNumber(lastTownCostGrid) != GetTownNumber(_grid)){
            CloseBottomMenu();
            refreshTownInfoEnabled=true;
        }
    }
    lastTownCostGrid = _grid;
}



let town_test_cost=0;
function GetUpgradeTownCosts(_grid){
    let _pole=[];
    for(let _i in TOWN_UPGRADE_DEF_COSTS[_grid.mesto]){
        _pole[_i]=TOWN_UPGRADE_DEF_COSTS[_grid.mesto][_i];

        if(GetPlayerUpgradeValue(33) && _i=="gold"){
            _pole[_i]=Mro(_pole[_i]*((100-GetPlayerUpgradeValue(33))*0.01));
        }
        if(GetPlayerUpgradeValue(47)){
            _pole[_i]=Mro(_pole[_i]*((100-GetPlayerUpgradeValue(47))*0.01));
        }
        if(_grid.mega_city){
            _pole[_i]=Mro(1.9*_pole[_i]*((100-GetPlayerUpgradeValue(89,0))*0.01));
            
        }
        if(_grid.mesto==44 && _grid.x==0 && _grid.y==0 &&  _i=="gold"){
            _pole[_i]*=3;
        }
        if(town_test_cost){
            _pole[_i]=Mro(_pole[_i]*0.001*town_test_cost);
        }
    }
    
    // console.error(_grid.mesto)
    return _pole;
}

function UpgradeTownAfterFuns(_grid){
    let _plusIncome=hrac.income;
    ReCalculate9BlocksAndStatsByGrid(_grid,1);// ZratajHracStats();
    townJustUpgraded=1;
    _plusIncome = hrac.income - _plusIncome;
    CheckAchievemntsAll();
    RefreshHeader();
    OpenGridMenu();
    // lastTownGridSelectedRadius=0;
    // lastTownGridSelectedRadiusGrid=null;
    PlaySound('construction')
    AddFloatingTextToGrid(_grid,GetBunkerTownLabel(_grid)+' '+GetText('upgraded'),'#72d84c',1);
    AddFloatingTextToGrid(_grid,'+'+PMat(_plusIncome,1)+' '+GetText('income'),'#72d84c',0);
    _grid.earn_clicks_available = GetMaxTownEarnClicks(_grid);

    if(IsTownRequirementSkipped(_grid.x,_grid.y)){
        let _foundIndex = hrac.skippedTownReqs.findIndex(s=>s &&s[0]==_grid.x&&s[1]==_grid.y);
        // console.log('_foundIndex',_foundIndex)
        if(_foundIndex>=0){
            hrac.skippedTownReqs.splice(_foundIndex,1);
        }
    }
    if(zoomScale>0.35){
        AddBuildEffect(_grid);
        AddGoldEffect(_grid,3,45);
    }
    if(zoomScale<=0.5){
        _grid.last_clicked_dur=CLICK_EFECT_DURATION;
        let _found=clickedGridEffects.find(o=>o && o.x==_grid.x && o.y==_grid.y);
        if(!_found){
            clickedGridEffects.push(_grid);
        }
    }
    if(_grid.x == 0 && _grid.y==0){
        if(_grid.mesto == GEMS_LEVEL_REQUIRED){
            ShowBottomMenu();
        }
        if(chests.length<MaxChests()+5){
            AddRandomChest();
            if(_grid.mesto>=30){
                AddRandomChest();
            }
        }

        TryGeneratePremiumUpgrade();

        if(_grid.mesto>=3){
            LevelUpPopup();
        }

        if(_grid.mesto % 5 == 0){
            tryShowLikePopup=1;
        }
    }
    refreshTownInfoEnabled=true;
}


function GetGemTownUpgradeCost(_grid){
    return Math.ceil((20+_grid.mesto*3) /10)*10;
}

const TOWN_GEM_UPGRADE_LVL=15;
function GemUpgradeTownPopup(_x,_y){
    let _grid = GetGridData(_x,_y);
    if(_grid && _grid.mesto>=2){
        const _cost=GetGemTownUpgradeCost(_grid);
        let _out=SpanID('gemupgradediv','');
        _out+=GetText("Some low level settlements can be upgraded for gems instead of materials.");
        _out+=BRBR+FSize(26,GetText3('Cost:')+Bold(PMat(_cost,'gems',36)));
        _out+=BRBR+Button(GetTextCAPS('UPGRADE'),'GemUpgradeTown('+_grid.x+','+_grid.y+');',{super_button:'purple'});
        
        
        DoBasicPopup(_out,GetTextCAPS('UPGRADE'),{centerised:1});
    }

}
function GemUpgradeTown(_x,_y){
    let _grid = GetGridData(_x,_y);
    if(_grid && _grid.mesto>=2){
        if(MamDostMat(GetGemTownUpgradeCost(_grid),'gems',1)){
            hrac.gems_used_upgrade_town+=GetGemTownUpgradeCost(_grid);
            _grid.mesto += 1;
            if(_grid.mesto < GetPlayerLevel()-TOWN_GEM_UPGRADE_LVL ){
                nextGemTownPopupTO=setTimeout(() => {
                    GemUpgradeTownPopup(_x,_y);
                }, 350);
            }
            UpgradeTownAfterFuns(_grid);
            CloseBasicPopup();
        }
    }
}

function UpgradeTown(_x,_y){
    let _grid = GetGridData(_x,_y);
    if(_grid && _grid.mesto>=2){
        if(!_grid.is_connected){
            AddFloatingTextToMousePos(GetText('Not connected to main settlement!'),'red');
            return false;
        }
        if(!GridIsCenterGrid(_grid) && _grid.mesto >= GetPlayerLevel() && _grid.mesto >= 3){
            AddFloatingTextToMousePos(GetText('Upgrade main {BUNKER_NAME} first'),'red');
            return false;
        }
        
        let _nextTownElectricity= GetTownElectricitySpendByLevel(_grid.mesto+1,_grid);
        let _currentTownElectricity= GetTownElectricitySpendByLevel(_grid.mesto,_grid);
        if(_nextTownElectricity>0){

            if(_nextTownElectricity-_currentTownElectricity > hrac.electricity){
                AddFloatingTextToMousePos(GetText('Your power output must be over {att1}+',PCislo(_nextTownElectricity-_currentTownElectricity)+ElectricityIcon()),'red');
                // AddFloatingTextToMousePos('Your electricity production must be at least '+PCislo(_nextTownElectricity-_currentTownElectricity)+ElectricityIcon(),'red');
                return false;
            }else{
                if(_nextTownElectricity-_currentTownElectricity > hrac.electricity - hrac.electricity_minus_2){
                    let _out='';
                    _out+=ElectricityIcon()+GetText('You require higher power output!')+ElectricityIcon();
                    _out+=BRBR+GetText('There are some structures that are currently not connected to the grid. Connect them by road and then try to upgrade your settlement.');
                    DoBasicPopup(_out,GetText('Information'),{centerised:1});
                    // AddFloatingTextToMousePos('Your electricity production must be at least '+PCislo(_nextTownElectricity-_currentTownElectricity)+ElectricityIcon(),'red');
                    return false;
                }
            }
        }

        if(GridIsCenterGrid(_grid)){
            if(_grid.mesto>=30 && _grid.mesto%15==0){
                hrac.stats.bought_starter_packs=[];
            }
            if(_grid.mesto==44){
                if(GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,1,'has_street')>=9){
                    
                }else{
                    AddFloatingTextToMousePos(GetText('All tiles in range 1 must be road'),'red');
                    PlaySound('ee');
                    return false;
                }
            }
        }
    
        if(MamDostMats(GetUpgradeTownCosts(_grid),1)){
            if(_grid.x==0 && _grid.y==0 && _grid.mesto==44){
                _grid.mega_city = 1; //upgradetomegacity
                let _r=1;
                for(let _x=_grid.x-_r;_x<=_grid.x+_r;_x++){
                    for(let _y=_grid.y-_r;_y<=_grid.y+_r;_y++){
                        if(GetGridData(_x,_y) && !GetGridData(_x,_y).mesto){
                            GetGridData(_x,_y).vidiek = 1;
                        }
                    }
                }
            }
            _grid.mesto += 1;
            UpgradeTownAfterFuns(_grid);
            
        }
    }
}

function GetTownEarnClicksPerLevel(){
    return 2;
}

function GetMaxTownEarnClicks(_grid){
    return GetMaxTownEarnClicksByLevel(_grid,_grid.mesto)
}
function GetMaxTownEarnClicksByLevel(_grid,_lvl){
    if(_grid.mega_city){
        return Math.min(125,35+_lvl*GetTownEarnClicksPerLevel());
    }
    if(GridIsCenterGrid(_grid)){
        return Math.min(125,35+_lvl*GetTownEarnClicksPerLevel());
    }
    return Math.min(50,10+_lvl*GetTownEarnClicksPerLevel());
}

function PlusTownEarnClicks(_grid){
    if(_grid.mega_city){
        return 30+Mro(_grid.mesto*0.15);
    }
    if(GridIsCenterGrid(_grid)){
        return 25+Mro(_grid.mesto*0.15);
    }
    return 5+Mro(_grid.mesto*0.05);
}



let showTownUpgradeZone=false;
let nextGemTownPopupTO=0;
function SkipTownUpgradeOptionStr(_grid){
    if(nextGemTownPopupTO){
        clearTimeout(nextGemTownPopupTO);
        if(gebi('gemupgradediv')){
            CloseBasicPopup();
        }
    }
    showTownUpgradeZone=true;
    if(!HasLevel(7)) return '';
    return Button(SPC+SPC+GetText('SPEED UP')+SPC+SPC,'SkipTownUpgradeOptionMenu('+_grid.x+','+_grid.y+');',{color:'blue'});
}

function GetTownUpgSkipCost(_grid){
    if(_grid.mega_city){
        if(_grid.mesto>=60) return 500;
        return 350;
    }
    if(_grid.mesto>=50) return 325;
    if(_grid.mesto==34) return 300;
    if(_grid.mesto>=30) return 200;
    if(_grid.mesto>=20) return 150;
    return 100;
}

function SkipTownUpgradeOptionMenu(_x,_y){
    let _grid = GetGridData(_x,_y);
    if(_grid){
        let _out='';
        PlayTap();
        _out+='<center>'+GetText('Here you can skip {BUNKER_NAME} upgrade requirement - cost: {att1}',PMat(GetTownUpgSkipCost(_grid),2));
        _out+=BRBR+Button(GetText('Skip requirement'),'SkipTownUpgradeOption('+_grid.x+','+_grid.y+');');;
        _out+=BRBR+'</center>';
        

        DoBasicPopup(_out,GetText('Skip requirement'));
    }
}


function SkipTownUpgradeOption(_x,_y,_confirmed){
    let _grid = GetGridData(_x,_y);
    
    if(_grid){
        if(!AreYouSure(_confirmed,GetText('Are you sure you want to continue? Action costs {att1} gems?',PMat(GetTownUpgSkipCost(_grid),2)),GetText('Confirmation'),'SkipTownUpgradeOption('+_x+','+_y+',1);',GetTextCAPS('Continue'))){
            PlayTap();
            return false;
        }
        if(MamDostGemov(GetTownUpgSkipCost(_grid),1)){
            PlaySound('tadaa2');
            hrac.skippedTownReqs.push([_x,_y]);
            CloseBasicPopup();
            OpenGridMenu();
        }
    }
}

function IsTownRequirementSkipped(_x,_y){
    let _found = hrac.skippedTownReqs.find(s=>s &&s[0]==_x&&s[1]==_y);
    if(_found){
        return true;
    }
    return false;

}



function YouHave(_co,_sufix){
    return ' '+GetText('(You have: {att1})',PCislo(_co)+(_sufix?_sufix:''));
}

let addSpeedUpButton=false;
let alredyWroteUpgrradeRequirementLabel=false;
function GetUpgradeRequirementDivInner(_grid,_text){
    let _out='';
    if(!alredyWroteUpgrradeRequirementLabel){
        _out+=Bold(ColorSpan('purple',GetText3('Upgrade requirement: ')))+BR;
        alredyWroteUpgrradeRequirementLabel=true;
    }
    if(gebi('main_town_quest_div_in') && GridIsCenterGrid(_grid)){
        SetInner('main_town_quest_div_in',_text);
        SetLastQuestText();
    }
    _out+=_text+BRBR;
    addSpeedUpButton=true;

    return Center(_out);
}

function TownRequirement_Onlymats(_grid){
    return BR+TownUpradeText(_grid);
}


function TownRequirement_HaveUpgrades(_grid,_target){
    let _out='';
    if(GetPlayerTotalUpgradeLevel() >= _target || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have {att1} upgrades!',PCislo(_target))+YouHave(GetPlayerTotalUpgradeLevel())+BR+Button(GetText('Show me!'),'ClickBottomMenu(2);'));
    }
    return _out;
}

function TownRequirement_TotalAreaCleared(_grid,_target){
    let _out='';
    if(hrac.stats.clears >= _target || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Restore total of {att1} tiles! (you have restored: {att2})',[PCislo(_target),PCislo(hrac.stats.clears)]));
    }
    return _out;
}
function TownRequirement_TotalWaterCleared(_grid,_target){
    let _out='';
    if(hrac.stats.water_tiles+hrac.stats.river_tiles >= _target || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Restore total of {att1} water tiles! (you have restored: {att2})',[PCislo(_target),PCislo(hrac.stats.water_tiles+hrac.stats.river_tiles)]));
    }
    return _out;
}
function TownRequirement_TotalPopulation(_grid,_count){
    let _out='';
    if(hrac.population >= _count || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have population over {att1}!',PCislo(_count))+YouHave(hrac.population));
    }
    return _out;
}
function TownRequirement_MegaCitiesCount(_grid,_count){
    let _out='';
    if(hrac.stats.pocet_mega_cities >= _count || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have found {att1} mega-cities!',_count)+YouHave(hrac.stats.pocet_mega_cities));
    }
    return _out;
}
function TownRequirement_LessCoalPlantsBy(_grid,_minusCount){
    let _out='';
    if(!hrac.coalPlantTownAims[_grid.mesto]){
        hrac.coalPlantTownAims[_grid.mesto] = hrac.buildings.coal_plant-_minusCount;
        if(hrac.coalPlantTownAims[_grid.mesto]<1)hrac.coalPlantTownAims[_grid.mesto]=1;
    }
    if(hrac.buildings.coal_plant < hrac.coalPlantTownAims[_grid.mesto] || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Coal plans have high polution. lets remove some. Have less than {att1} coal power plants!',PCislo(hrac.coalPlantTownAims[_grid.mesto]))+YouHave(hrac.buildings.coal_plant)+(hrac.buildings.coal_plant<10?Button(GetText('Show me'),'ShowMeRandomBuildingOfType(\'coal_plant\');'):''));
    }
    return _out;
}
function TownRequirement_TotalTrees(_grid,_target){
    let _out='';
    if(hrac.stats.forests >= _target || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have total of {att1} forests!',PCislo(_target))+YouHave(hrac.stats.forests));
    }
    return _out;
}

function TownRequirement_ForestIncome(_grid,_target){
    let _out='';
    let _count = Mro(hrac.stats.forest_income);
    if(_count >= _target || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have total of {att1} forest income!',PCislo(_target))+YouHave(_count));
    }
    return _out;
}

function TownRequirement_DeepWater(_grid,_target){
    let _out='';
    if(hrac.stats.deep_water_tiles >= _target || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have total of {att1} deep water cleaned tiles!',PCislo(_target))+YouHave(hrac.stats.deep_water_tiles));
    }
    return _out;
}
function GetAmountOfTownsOfLevel(_targetCount,_level){
    let _count=0;
    for(let _x in myGridData)
    for(let _y in myGridData[_x])
    if(myGridData[_x][_y]&&myGridData[_x][_y].mesto&&myGridData[_x][_y].mesto>=_level){
        _count++;
        if(_count>=_targetCount){
            return _count;
        }
    }
    return _count;
}
function TownRequirement_XtownsOfLevelY(_grid,_targetCount,_level){
    let _out='';
    let _count = GetAmountOfTownsOfLevel(_targetCount,_level);


    if(_count >= _targetCount || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have total of {att1} towns of level {att2}!',[_targetCount,_level])+YouHave(_count));
    }
    return _out;
}
function TownRequirement_PollutionBellow(_grid,_minusPollution){
    let _out='';
    let _targetPollution = GetDefaultPollution() - _minusPollution;
    let _pollution = hrac.polution;


    if(_pollution < _targetPollution || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have pollution under {att1}!',PCislo(_targetPollution)));
    }
    return _out;
}
function TownRequirement_PollutionBellowPermanent(_grid,_minusPollution){
    let _out='';
    let _targetPollution = GetDefaultPollution() - _minusPollution;

    let _pollutionInfo = GetText('This upgrade sets your highest acceptable level of Pollution to {att1} (Previously {att2}), meaning if your pollution is above {att1}, you will receive a penalty for your earnings.',[PCislo(_targetPollution),PCislo(GetBasePollution())]);

    if(_targetPollution > hrac.polution || IsTownRequirementSkipped(_grid.x,_grid.y)){
        if(GridIsCenterGrid(_grid)){
            _out+=TownUpradeText(_grid)+BR+_pollutionInfo;
        }else{
            _out+=TownUpradeText(_grid);
        }
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have pollution under {att1}!',PCislo(_targetPollution)) + ( _targetPollution < GetBasePollution() ? BR + Bold(_pollutionInfo):''));
        
    }
    return _out;
}

let roadCompositionTargetType=0;
function TownRequirement_RoadComposition(_grid,_roadType,_perc){
    let _out='';
    let _totalRoads = hrac.stats.streets;
    let _totalRoadsOfTypeAndHigher = streets.filter(r=>r&&r.type>=_roadType).length;
    let road_composition_perc = 0;
    if(_totalRoads){
        road_composition_perc = Math.floor((_totalRoadsOfTypeAndHigher / _totalRoads)*100);
    }
    
    if(_totalRoads && road_composition_perc >= _perc || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        roadCompositionTargetType=_roadType;
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('{att1}% of roads have to be type: {att2} (or higher)!',[_perc,GetRoadName(_roadType)])+YouHave(road_composition_perc,'%'));
    }
    return _out;
}

function TownRequirement_AreaClearedAround(_grid,_radius){
    let _out=''; 
    lastTownGridSelectedRadiusGrid=_grid;
    lastTownGridSelectedRadius=_radius;
    if(IsAllClearedAround(_grid.x,_grid.y,_radius) || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Restore all tiles in range {att1} of this {att2}!',[_radius,GetBunkerTownLabel(_grid)]));
    }
    return _out;
}

function TownRequirement_TotalTownLevel(_grid,_totalTownLevel){
    let _out='';    
    
    if(hrac.stats.town_levels >= _totalTownLevel || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have total {att1} town or bunker level (sum of all bunker/settlement/town levels).',PCislo(_totalTownLevel))+YouHave(hrac.stats.town_levels));
    }
    return _out;
}

function TownRequirement_ClickTown(_grid,_clicksRequired){
    let _out='';    
    refreshTownInfoEnabled=true;
    _clicksRequired-=GetPlayerUpgradeValue(8);

    if(_grid.klikov >= _clicksRequired || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);

    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Click')+' '+GetBunkerTownLabel(_grid)+' '+FSize(16,PCislo(_grid.klikov)+' / '+PCislo(_clicksRequired))+'.');
    }
    return _out;
}

function TownRequirement_TotalTowns(_grid,_totalTowns){
    let _out='';    
    
    if(hrac.stats.towns >= _totalTowns || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);

    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have total of {att1} towns or bunkers.',_totalTowns)+YouHave(hrac.stats.towns));
    }
    return _out;
}
function TownRequirement_TownsConnected(_grid,_count){
    let _out='';    
    // _out+=BR+'Towns:'+Bold(PCislo(hrac.stats.towns))+' (connected: '+hrac.stats.towns_connected+')';
    if(hrac.stats.towns_connected >= _count || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have total of {att1} towns/bunkers connected with road to main {BUNKER_NAME}.',_count)+YouHave(hrac.stats.towns_connected));
    }
    return _out;
}
function TownRequirement_TotalTreesAround(_grid,_radius,_req_amount){
    let _out='';    
    let _amount = GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,_radius,'forest');
    _amount += GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,_radius,'water');
    _amount += GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,_radius,'river');
    _amount += GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,_radius,'palms');
    _amount += GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,_radius,'sekvoja');
    _amount += GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,_radius,'bambus');
    _amount += GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,_radius,'mangrove');
    // console.log(_amount)
    if(_amount >= _req_amount || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        _out+=GetUpgradeRequirementDivInner(_grid,GetText('Have total of {att1} trees or water in range of {att2} of this {BUNKER_NAME}.',[_req_amount,_radius])+YouHave(_amount));
    }
    return _out;
}

let megaTownsConnected=0;
let townConnectionIndex=0;//TCI
function RecursiveRoadCheck(_grid,_hlbka,_direction){
    if(!_grid) return false;
    // if(_hlbka>500)console.error('nenasiel',_grid);
    
    if(_hlbka>2000) return false;
    if(_grid.tci >= townConnectionIndex) return false;
    _grid.tci=townConnectionIndex;
    if(_grid.mega_city){
        megaTownsConnected++;
    }
    // if(_hlbka%50==0)console.log(_hlbka)

    if(_grid.has_street){
        if(_direction){
            RecursiveRoadCheck(GetGridData(_grid.x+1,_grid.y),_hlbka+1,_direction);
            RecursiveRoadCheck(GetGridData(_grid.x,_grid.y-1),_hlbka+1,_direction);
            RecursiveRoadCheck(GetGridData(_grid.x-1,_grid.y),_hlbka+1,_direction);
            RecursiveRoadCheck(GetGridData(_grid.x,_grid.y+1),_hlbka+1,_direction);
        }else{
            RecursiveRoadCheck(GetGridData(_grid.x,_grid.y+1),_hlbka+1,_direction);
            RecursiveRoadCheck(GetGridData(_grid.x-1,_grid.y),_hlbka+1,_direction);
            RecursiveRoadCheck(GetGridData(_grid.x+1,_grid.y),_hlbka+1,_direction);
            RecursiveRoadCheck(GetGridData(_grid.x,_grid.y-1),_hlbka+1,_direction);
        }
    }
    return true;
}
function TownRequirement_connectRoadToMainTown(_grid,_req_amount){
    let _out='';    
    megaTownsConnected=-1;
    townConnectionIndex++;
    try {
        RecursiveRoadCheck(myGridData[0][0],0);
    } catch (error) {
        try {
            RecursiveRoadCheck(myGridData[0][0],0,1);
        } catch (e2) {
            _out+=GetUpgradeRequirementDivInner(_grid,GetText('Your roads are not optimised to find another Mega-city. Try to build a shorter path.'));
        }
    }
    
    if(megaTownsConnected >= _req_amount || IsTownRequirementSkipped(_grid.x,_grid.y)){
        _out+=TownUpradeText(_grid);
    }else{
        if(_req_amount==1){
            _out+=GetUpgradeRequirementDivInner(_grid,GetText('Connect at least one Mega-city to main town by road - build bridge over sea. (not by ships or shipyards).'));
        }else{
            _out+=GetUpgradeRequirementDivInner(_grid,GetText('Connect at least {att1} Mega-cities to main town by road (not ny ships). Established connections: {att2}',[_req_amount,megaTownsConnected]));

        }
    }
    return _out;
}




function GetNextClickUpgrade(_grid){
    if(_grid.mesto >= 5){
        return 0;
    } 
    let _minusClicks=GetPlayerUpgradeValue(8);
    if(_grid.klikov<Math.max(5,CLICK_TOWN_LVL_2-_minusClicks)){
        return Math.max(5,CLICK_TOWN_LVL_2-_minusClicks);
    } 
    // if(_grid.klikov<Math.max(5,CLICK_TOWN_LVL_3-_minusClicks)) return Math.max(5,CLICK_TOWN_LVL_3-_minusClicks);
    // if(_grid.klikov<Math.max(5,CLICK_TOWN_LVL_4-_minusClicks)) return Math.max(5,CLICK_TOWN_LVL_4-_minusClicks);
    // if(_grid.klikov<CLICK_TOWN_LVL_5-_minusClicks) return Math.max(5,CLICK_TOWN_LVL_5-_minusClicks);
    return 0;
}









function GetBunkerTownLabel(_grid,_writeMegaCityIfPossible){
    if(!_grid)_grid=GetGridData(0,0);
    if(_grid){
        if(_writeMegaCityIfPossible && _grid.mega_city){
            return GetText('Mega-City');
        }
        if(_grid.mesto < 5){
            return GetText('Bunker');
        }
        if(_grid.mesto < 15){
            return GetText('Settlement');
        }
        if(_grid.mesto < 24){
            return GetText('Village');
        }
    }
    return GetText('Town');
    
}

function GetTownPopulation(_grid){
    return GetTownPopulationByLevel(_grid.mesto,_grid);
}
function GetTownPopulationByLevel(_lvl,_grid){
    let _koef = 1;
    if(_grid.mega_city)_koef = 3;
    if(_lvl < 5){
        return _koef*(_lvl*10+25);
    }
    if(_lvl < 15){
        return _koef*(_lvl*80-300);
    }
    if(_lvl < 24){
        return _koef*((_lvl-15)*250+1500);
    }
    if(_lvl < 40){
        return _koef*((_lvl-24)*2000+9000);
    }
    if(_lvl < 50){
        return _koef*((_lvl-40)*10000+50000);
    }
    return _koef*((_lvl-50)*17000+160000);
}


function ChangeTownName(_index){
    hrac.town_names[_index] = GV('town_name').replaceAll('"','').replaceAll('`','').replaceAll("'",'').replaceAll("  ",' ').trim();
    town_label_rect[_index]=null;
    TownLabelRefresh(1);
}

let lastTownGridSelected=null;
let lastTownGridSelectedRadiusGrid=null;
let lastTownGridSelectedRadius=0;
let lastActiveTownTabIndex = 1;
function GetTownTabInner(_x,_y,_tabIndex){

    roadCompositionTargetType=0;
    lastActiveTownTabIndex = _tabIndex;
    let _grid=GetGridData(_x,_y);
    lastTownGridSelected=_grid;
    let _out ='';
    if(!_grid.uranium_cloud)
    if(_grid.building_type && !_grid.is_connected && !_grid.ignores_connection){
        _out += ColorSpan('red',GetText('Not connected to main settlement!'))+BR;
    }
    if(_tabIndex<=1){
        _out += '<div id="town_upgrade_requirement_div">';
        _out+=GetTownUpgradeRequirementInner(_grid);
        _out += '</div>';
        if(gebi('okno_addon')){
            SetY('okno_addon',GetWindowHeight());
        }
        
    }
    if(_tabIndex==2){
        materialAddonVisible=0;
        if(HasLevel(5)){
            if(_grid.x == 0 && _grid.y == 0){
                _out+=GetText3('Town name:')+'<input type="" onfocus="EnterInputMode();" name="town_name" id="town_name" value="'+hrac.town_names[0]+'" maxlength="24" placeholder="'+GetText('enter your town name')+'" oninput="ChangeTownName(0);">'+BR;

            }
        }
        _out+=GetTownInfo(_grid);
    }
    if(_tabIndex==3){
        materialAddonVisible=0;
        let _populationPlus = GetTownPopulationByLevel(_grid.mesto+1,_grid)-GetTownPopulationByLevel(_grid.mesto,_grid);
        _out+=Center(Bold(GetText3('Next level:').toLocaleUpperCase()));
        _out+=GetText3('Population:')+'+'+PMat(_populationPlus,12);
        let _incomePlus = GetTownIncomeByLevel(_grid.mesto+1,_grid)-GetTownIncomeByLevel(_grid.mesto,_grid);
        _incomePlus*=(1+0.01*GetPlayerUpgradeValue(3));
        _incomePlus=Mro(_incomePlus);
        _out+=BR+GetText3('Passive gold income:')+'+'+PMat(_incomePlus,1)+PER_INCOME_SHORT;
        let _plusEarnClicks = GetMaxTownEarnClicksByLevel(_grid,_grid.mesto+1)-GetMaxTownEarnClicksByLevel(_grid,_grid.mesto);
        if(_plusEarnClicks>0){
            _out+=BR+GetText3('Amount of gold clicks:')+'+'+PCislo(_plusEarnClicks);
        }
        if(_grid.mega_city){
            if(GetRestorationStrengthFromOneMegaCity(_grid,1)-GetRestorationStrengthFromOneMegaCity(_grid)>0){
                _out+=BR+GetText('Restoration strength')+': +'+PCislo(GetRestorationStrengthFromOneMegaCity(_grid,1)-GetRestorationStrengthFromOneMegaCity(_grid))+RestorationIcon();
            }
        }

        let _nextTownElectricity= GetTownElectricitySpendByLevel(_grid.mesto+1,_grid);

        if(_nextTownElectricity){
            let _currentTownElectricity= GetTownElectricitySpendByLevel(_grid.mesto,_grid);
            _out+=BR;
            if(!_currentTownElectricity && _nextTownElectricity){
                _out+=Bold(ColorSpan('green',GetTextCAPS('NEW'))+' ');
            }
            _out+=GetText3('Power drain:')+'+'+PCislo(_nextTownElectricity-_currentTownElectricity)+ElectricityIcon();
        }

        let _nextTownPollution= GetTownPollutionByLevel(_grid.mesto+1,_grid);
        if(_nextTownPollution){
            let _currentTownPollution= GetTownPollutionByLevel(_grid.mesto,_grid);
            _out+=BR;
            if(!_currentTownPollution && _nextTownPollution){
                _out+=Bold(ColorSpan('green',GetTextCAPS('NEW'))+' ');
            }
            _out+=GetText('Pollution')+': +'+PCislo(_nextTownPollution-_currentTownPollution)+PollutionIcon();
        }
        // _out+= GetText('Pollution')+': +'+GetTownPollution(_grid)+PollutionIcon(); //town polution
        // _out+= BR+GetText3('Power drain:')+GetTownElectricitySpend(_grid)+ElectricityIcon();
        

        if(_grid.x == 0 && _grid.y == 0){
            let _teas = GetFeatureTeasingInfo(_grid.mesto+1,GetText3('Next level unlocks this:'));
            if(_teas){
                _out+=BR+_teas;
            }
        }
        
        
    }
    if(_tabIndex==2){
        _out+=BR+UpsaleGridMenu(_grid,1,1);
    }
    townJustUpgraded=0;

    return _out;
}

function GetTownInfo(_grid){
    let _out='';
    if(_grid.x==0 && _grid.y==0){
        _out+= Bold(ColorSpan('purple',GetText('Main-{att1}',GetBunkerTownLabel(_grid,1))+' '+GetText3('Level:')+_grid.mesto));
    }else{
        _out+= Bold(''+GetBunkerTownLabel(_grid,1)+' '+GetText3('Level:')+_grid.mesto);
    }
    _out+= ' - '+GetText3('Population:')+PMat(GetTownPopulation(_grid),12);

    if(HasLevel(3)){
        _out+= BR+GetText3('Passive gold income:')+PMat(GetTownIncome(_grid),1)+PER_INCOME_SHORT+BR;
        _out+= GetText3('click produces:')+PMat(GetTownClickGold(_grid),1);
        if(HasLevel(5)){
            _out+= BR+GetText3('Golden clicks available:')+SpanID('town_clicks_availble',PCislo(_grid.earn_clicks_available))+' / '+GetMaxTownEarnClicks(_grid);
        }
        
        if(_grid.earn_clicks_available<=0){
            _out+= ' '+SpanID('outofgoldspan',ColorSpan('red',GetText('(currently out of gold)')));
        }

        if(1){
            _out+=BR+GetText3('Total clicks:')+' '+SpanID('total_town_clicks',PCislo(_grid.klikov));
        }
        if(GetRadiusClickDist()){
            _out+=BR+GetText3('Radius clickers left:')+' '+SpanID('remaining_radius_clickers',GetRadiusClickerLeftStr());
        }

        if(_grid.mega_city){
            _out+=BR+GetText('Restoration strength')+': +'+PCislo(GetRestorationStrengthFromOneMegaCity(_grid))+RestorationIcon();
        }
  
    }
    _out+= BR;
    // console.error(GetNextClickUpgrade(_grid))
    if(ExploredPollution()){
        if(GetTownPollution(_grid)){
            _out+= GetText('Pollution')+': +'+PCislo(GetTownPollution(_grid)+PollutionIcon()); //town polution
        }
        if(GetTownElectricitySpend(_grid)){
            _out+= BR+GetText3('Power drain:')+PCislo(GetTownElectricitySpend(_grid)+ElectricityIcon());
        }

    }
    return _out;
}
function GetRadiusClickerLeftStr(){
    return PCislo(hrac.radius_clicks_amount)+' / '+GetRadiusClicksMax() + (hrac.radius_clicks_amount<=0?' - '+ColorSpan('red',GetText('Out of Radius clickers')):'');
}

function TownInner(_grid){
    let _out='';
    if(_grid.uranium_cloud){
        return '';
    }

    if(HasLevel(5)){
        _out+=InitTabInner('townTabs',[GetTextCAPS('UPGRADE<!--town tab-->'),GetTextCAPS('stats'),GetTextCAPS('NEXT LEVEL<!--town tab-->')],lastActiveTownTabIndex,'GetTownTabInner('+_grid.x+','+_grid.y+',','RefreshBottomPopupPosition();' );
    }else{
        _out += GetTownInfo(_grid);

        _out += BR;
        townJustUpgraded=0;
        _out += GetTownUpgradeRequirementInner(_grid);
    }
    return _out;
}

function GetTownUpgradeRequirementInner(_grid,_inQuest){
    let _out='';
    alredyWroteUpgrradeRequirementLabel=false;
    addSpeedUpButton=false;
    moreTownConditions=0;
    lastTownGridSelectedRadius=0;
    lastTownGridSelectedRadiusGrid=null;

    if(!_inQuest){
        showTownUpgradeZone=false;
    }
    if(HasLevel(11)){
        refreshTownInfoEnabled=false;
    }

    if(GetNextClickUpgrade(_grid)){
        _out+= GetText('Click on this Bunker {att1} times to level it up!',GetNextClickUpgrade(_grid));
        _out+= BR+Center(GetText3('Clicked:')+SPC+FSize(20,Bold(_grid.klikov+' / '+GetNextClickUpgrade(_grid))));
        if(_grid.mesto==1 && GridIsCenterGrid(_grid)){
            SetInner('main_town_quest_div_in',_out);
        }
        refreshTownInfoEnabled=true;
    }


    if(_grid.mesto==2){
        if(GridIsCenterGrid(_grid)){
            _out+=TownRequirement_TotalAreaCleared(_grid,16);
        }else{
            _out+=TownRequirement_HaveUpgrades(_grid,6);
        }
    }
    if(_grid.mesto==3){
        //sem dame upgrade
        _out+=TownRequirement_TownsConnected(_grid,3);
    }
    if(_grid.mesto==4){
        _out+=TownRequirement_TotalTrees(_grid,25);
        // _out+=TownRequirement_TownsConnected(_grid,4);
    }
    if(_grid.mesto==5){
        _out+=TownRequirement_TotalAreaCleared(_grid,80);
    }
    if(_grid.mesto==6){
        _out+=TownRequirement_XtownsOfLevelY(_grid,5,4);
        // _out+=TownRequirement_TotalTowns(_grid,9);
    }
    if(_grid.mesto==7){
        if(GridIsCenterGrid(_grid)){
            _out+=TownRequirement_HaveUpgrades(_grid,10);
        }else{
            _out+=TownRequirement_AreaClearedAround(_grid,4);
        }
    }
    if(_grid.mesto==8){
        if(Math.abs(_grid.x) % 3 == 0)_out+=TownRequirement_XtownsOfLevelY(_grid,7,5);
        else _out+=TownRequirement_ClickTown(_grid,300);
    }
    if(_grid.mesto==9){
        _out+=TownRequirement_TotalTowns(_grid,12);
    }
    if(_grid.mesto==10){
        _out+=TownRequirement_TotalTreesAround(_grid,5,35);
    }
    if(_grid.mesto==11){
        _out+=TownRequirement_TotalAreaCleared(_grid,180);
    }
    if(_grid.mesto==12){
        _out+=TownRequirement_XtownsOfLevelY(_grid,14,7);
    }
    if(_grid.mesto==13){
        _out+=TownRequirement_Onlymats(_grid);
    }
    if(_grid.mesto==14){
        _out+=TownRequirement_RoadComposition(_grid,2,35);
    }
    if(_grid.mesto==15){
        if(Math.abs(_grid.x) % 2 == 0)_out+=TownRequirement_TownsConnected(_grid,18);
        if(Math.abs(_grid.x) % 2 == 1)_out+=TownRequirement_XtownsOfLevelY(_grid,10,12);
    }
    if(_grid.mesto==16){
        _out+=TownRequirement_AreaClearedAround(_grid,6);
    }
    if(_grid.mesto==17){
        if(GridIsCenterGrid(_grid)){
            _out+=TownRequirement_TotalAreaCleared(_grid,350);
        }else{
            _out+=TownRequirement_HaveUpgrades(_grid,25);
        }
    }
    if(_grid.mesto==18){
        if(Math.abs(_grid.x) % 2 == 0)_out+=TownRequirement_TotalTrees(_grid,350);
        if(Math.abs(_grid.x) % 2 == 1)_out+=TownRequirement_TotalWaterCleared(_grid,100);
    }
    if(_grid.mesto==19){
        _out+=TownRequirement_TotalTownLevel(_grid,200);
    }
    if(_grid.mesto==20){
        _out+=TownRequirement_ClickTown(_grid,550);
    }
    if(_grid.mesto==21){
        _out+=TownRequirement_TotalTreesAround(_grid,6,70);
    }
    if(_grid.mesto==22){
        _out+=TownRequirement_TotalTowns(_grid,35);
    }
    if(_grid.mesto==23){
        _out+=TownRequirement_RoadComposition(_grid,2,70);
    }
    if(_grid.mesto==24){
        _out+=TownRequirement_TotalAreaCleared(_grid,2000);
    }
    if(_grid.mesto==25){
        _out+=TownRequirement_TotalTrees(_grid,1000);
    }
    if(_grid.mesto==26){
        _out+=TownRequirement_RoadComposition(_grid,3,25);
    }
    if(_grid.mesto==27){
        _out+=TownRequirement_TotalTownLevel(_grid,600);
    }
    if(_grid.mesto==28){
        _out+=TownRequirement_TownsConnected(_grid,60);
    }
    if(_grid.mesto==29){
        _out+=TownRequirement_TotalAreaCleared(_grid,3500);
    }
    if(_grid.mesto==30){
        _out+=TownRequirement_TotalWaterCleared(_grid,1000);
    }
    if(_grid.mesto==31){
        _out+=TownRequirement_TotalPopulation(_grid,80000);
    }
    if(_grid.mesto==32){
        _out+=TownRequirement_RoadComposition(_grid,3,65);
    }
    if(_grid.mesto==33){
        _out+=TownRequirement_AreaClearedAround(_grid,9);
    }
    if(_grid.mesto==34){
        _out+=TownRequirement_RoadComposition(_grid,4,15);
    }
    if(_grid.mesto==35){
        _out+=TownRequirement_ForestIncome(_grid,5500);
    }
    if(_grid.mesto==36){
        _out+=TownRequirement_XtownsOfLevelY(_grid,5,25);
    }
    if(_grid.mesto==37){
        _out+=TownRequirement_RoadComposition(_grid,3,95);
    }
    if(_grid.mesto==38){
        _out+=TownRequirement_TotalTownLevel(_grid,1500);
    }
    if(_grid.mesto==39){
        _out+=TownRequirement_TotalWaterCleared(_grid,7000);
    }
    if(_grid.mesto==40){
        _out+=TownRequirement_RoadComposition(_grid,4,40);
    }
    if(_grid.mesto==41){
        _out+=TownRequirement_XtownsOfLevelY(_grid,35,20);
    }
    if(_grid.mesto==42){
        _out+=TownRequirement_ForestIncome(_grid,12000);
    }
    if(_grid.mesto==43){
        _out+=TownRequirement_RoadComposition(_grid,4,70);
    }
    if(_grid.mesto==44){
        _out+=TownRequirement_MegaCitiesCount(_grid,1);
    }
    if(_grid.mesto==45){
        _out+=TownRequirement_LessCoalPlantsBy(_grid,25);
    }
    if(_grid.mesto==46){
        _out+=TownRequirement_connectRoadToMainTown(_grid,1);
    }
    if(_grid.mesto==47){
        _out+=TownRequirement_TotalTrees(_grid,10000);
    }
    if(_grid.mesto==48){
        _out+=TownRequirement_XtownsOfLevelY(_grid,35,30);
    }
    if(_grid.mesto==49){
        _out+=TownRequirement_PollutionBellow(_grid,2000);
    }
    if(_grid.mesto==50){
        _out+=TownRequirement_DeepWater(_grid,3000);
    }
    if(_grid.mesto==51){
        _out+=TownRequirement_ForestIncome(_grid,29000);
    }
    if(_grid.mesto==52){
        _out+=TownRequirement_XtownsOfLevelY(_grid,40,40);
    }
    if(_grid.mesto==53){
        _out+=TownRequirement_PollutionBellow(_grid,8000);
    }
    if(_grid.mesto==54){
        _out+=TownRequirement_LessCoalPlantsBy(_grid,40);
    }
    if(_grid.mesto==55){
        _out+=TownRequirement_RoadComposition(_grid,4,95);
    }
    if(_grid.mesto==56){
        _out+=TownRequirement_MegaCitiesCount(_grid,3);
    }
    if(_grid.mesto==57){
        _out+=TownRequirement_PollutionBellowPermanent(_grid,MINUS_BASE_POLLUTION_1);
    }
    if(_grid.mesto==58){
        _out+=TownRequirement_connectRoadToMainTown(_grid,2);
    }
    if(_grid.mesto==59){
        _out+=TownRequirement_DeepWater(_grid,6000);
    }
    if(_grid.mesto==60){
        _out+=TownRequirement_XtownsOfLevelY(_grid,8,60);
    }
    if(_grid.mesto==61){
        _out+=TownRequirement_PollutionBellowPermanent(_grid,MINUS_BASE_POLLUTION_2);
    }
    if(_grid.mesto==62){
        _out+=TownRequirement_RoadComposition(_grid,5,25);
    }
    if(_grid.mesto==63){
        _out+=TownRequirement_TotalWaterCleared(_grid,35000);
    }
    if(_grid.mesto==64){
        _out+=TownRequirement_XtownsOfLevelY(_grid,150,30);
    }
    if(_grid.mesto==65){
        moreTownConditions=1;
        _out+=TownRequirement_ForestIncome(_grid,75000);
        _out+=TownRequirement_DeepWater(_grid,9500);
    }

    if(_grid.mesto==66){
        moreTownConditions=1;
        _out+=TownRequirement_TotalWaterCleared(_grid,40000);
        _out+=TownRequirement_RoadComposition(_grid,5,35);
    }

    if(_grid.mesto==67){
        moreTownConditions=1;
        _out+=TownRequirement_TotalAreaCleared(_grid,90000);
        _out+=TownRequirement_XtownsOfLevelY(_grid,20,50);
    }

    if(_grid.mesto==68){
        moreTownConditions=1;
        _out+=TownRequirement_ForestIncome(_grid,100000);
        _out+=TownRequirement_PollutionBellowPermanent(_grid,MINUS_BASE_POLLUTION_3);
    }

    if(_grid.mesto==69){
        moreTownConditions=1;
        _out+=TownRequirement_RoadComposition(_grid,5,50);
        _out+=TownRequirement_XtownsOfLevelY(_grid,100,40);
    }

    if(_grid.mesto==70){
        moreTownConditions=1;
        _out+=TownRequirement_DeepWater(_grid,11000);
        _out+=TownRequirement_PollutionBellow(_grid,4000);
    }

    if(_grid.mesto==71){
        moreTownConditions=1;
        _out+=TownRequirement_ForestIncome(_grid,130000);
        _out+=TownRequirement_TotalWaterCleared(_grid,50000);
    }

    if(_grid.mesto==72){
        moreTownConditions=1;
        _out+=TownRequirement_RoadComposition(_grid,5,70);
        _out+=TownRequirement_XtownsOfLevelY(_grid,10,70);
    }

    // if(_grid.mesto==70 && testVersion){
    //     moreTownConditions=1;
    //     _out+=TownRequirement_PollutionBellowPermanent(_grid,0);
    //     _out+=TownRequirement_PollutionBellowPermanent(_grid,MINUS_BASE_POLLUTION_3);
    // }


    if(addSpeedUpButton){
        _out+=Center(SkipTownUpgradeOptionStr(_grid));
    }
    if(_grid.mesto>1 && _out==''){
        return BR+Center(Bold(GetText('MAX town level reached!')));
    }

    return _out;
}

let lastTownCostGrid=null;
let moreTownConditions=0;
function TownUpradeText(_grid){
    if(moreTownConditions){
        moreTownConditions--;
        return '';
    }
    return '<div id="town_upgrade_cost_div_'+GetTownNumber(_grid)+'">'+TownUpradeInner(_grid)+'</div>';
}

let townJustUpgraded=0;
function TownUpradeInner(_grid,_onlyLowMats){
    let _costMats = GetUpgradeTownCosts(_grid);
    let _out='';
    let _outM = '';
    let _countRequires=0;
    let _isLowAnyStorage=null;
    let _canSellFood=false;
    
    for(let _i in _costMats){
        let _c = _costMats[_i];
        if(!MamDostMat(_c,_i)){
            if(!_onlyLowMats){
                if(_c > GetMaxMatStorage(_i) && GetMaxMatStorage(_i)>0){
                    _outM+=Bold(ColorSpan('maroon',GetTextCAPS('LOW!')+' '));                
                    _isLowAnyStorage=_i;
                }
            }
            _outM+=SpanID('town_mat_req_'+_i,ColorSpan('red',PCislo(hrac[_i])+' / '+PMat(_c,_i,0,1)))+BR;
            _countRequires++;

            let _foundBoughtMatOffer = hrac.bought_material_packs.find(_p => _p && _p.type == _i && _p.time+GEM_MAT_PACK_HOURS*3600*1000 > Date.now());
            if(!_foundBoughtMatOffer){
                _canSellFood=true;
            }
        }else{
            if(!_onlyLowMats){
                _outM+=PMat(_c,_i,0,1)+BR;
            }
        }
    }
    if(_onlyLowMats){
        if(_outM){
            return [GetText3('Upgrade requires: ')+_outM,_countRequires];
        }else{
            return null;
        }
    }
    if(town_test_cost){
        _outM+=ColorSpan('purple','LOW COST-TEST');
    }
    _out+='<table style="width:100%;min-height:90px;"><tr>';
    _out+='<td style="text-align:right;white-space:nowrap;'+(_grid.mesto>35?'font-size:9px;':'')+'">'+(_countRequires<=3?Bold(GetText3("Cost:")):'')+_outM+'</td>';

    _out+='<td style="text-align:center;position:relative;">';
    
    let _nextTownElectricity= GetTownElectricitySpendByLevel(_grid.mesto+1,_grid);
    let _currentTownElectricity= GetTownElectricitySpendByLevel(_grid.mesto,_grid);
    if(_nextTownElectricity>0)
    if(_nextTownElectricity-_currentTownElectricity > hrac.electricity){
        _out+= BR+ColorSpan('red',GetText('Your power output must be over {att1}+',PCislo(_nextTownElectricity-_currentTownElectricity)+ElectricityIcon()))+BRBR;
    }

    if(townJustUpgraded){
        _out+=TownUpgradeButtonEffect();
    }
    _out+=Button(GetTextCAPS('UPGRADE'),'UpgradeTown('+_grid.x+','+_grid.y+');'); //upgrade town upgrade bunker
    if(HasLevel(40) && !_grid.mega_city && _grid.mesto < GetPlayerLevel()-TOWN_GEM_UPGRADE_LVL && Math.abs(_grid.x)%3!=1){
        // _out+=BR+Button(FloatingTextIcon('gems',22,5)+GetTextCAPS('UPGRADE')+FloatingTextIcon('gems',22,5),'GemUpgradeTownPopup('+_grid.x+','+_grid.y+');',{super_button:'teal'}); 
        _out+=SPC+GetText('or')+BR+Button(GetTextCAPS('PREMIUM UPGRADE'),'GemUpgradeTownPopup('+_grid.x+','+_grid.y+');',{super_button:'purple'}); 
    }
    if(_isLowAnyStorage){
        _out+=BR+Bold(ColorSpan('maroon',GetTextCAPS('LOW!')))+' = '+ColorSpan('maroon',GetText('max storage is not big enough'))+BR;
        if(!HasLevel(50+(testVersion?10:0))){
            let _orStorage='';
            if(HasLevel(STORAGE_CONTAINER_LEVEL_REQ)){
                _orStorage=' '+GetText('or')+' '+GetText("Storage Container");
            }
            if(_isLowAnyStorage=='food'){
                _out+=BR+'('+GetText3("Build more:")+(HasLevel(17)?GetText('fishing ships'):GetText('farm'))+')';
            }
            if(_isLowAnyStorage=='rocks'){
                _out+=BR+'('+GetText3("Build more:")+GetText('Stone Mine')+_orStorage+')';
            }
            if(_isLowAnyStorage=='lumber'){
                _out+=BR+'('+GetText3("Build more:")+GetText('Lumber Mill')+_orStorage+')';
            }
            if(_isLowAnyStorage=='steel'){
                _out+=BR+'('+GetText3("Build more:")+GetText('Iron Mine')+'+'+GetText('Foundry')+_orStorage+')';
            }
            if(_isLowAnyStorage=='chips'){
                _out+=BR+'('+GetText3("Build more:")+GetText('Chip Factory')+_orStorage+')';
            }
            if(_isLowAnyStorage=='oil'){
                _out+=BR+'('+GetText3("Build more:")+GetText('Oil Rigs')+(HasLevel(OIL_STORAGE_LEVEL_REQ)?' '+GetText('or')+' '+GetText('Oil storage'):'')+')';
            }

        }
    }

    if(_canSellFood){
        RequestMaterialAddon(_grid);
    }else{
        materialAddonVisible = 0;
    }
    
    if(GetPlayerLevel() <= FARM_REQURED_LEVEL && _grid.mesto == FARM_REQURED_LEVEL){
        _out+=BRBR+InfoBut_food(GetText('What is food {FOOD_ICON}?'));
    }


    _out+='</td>';

    _out+='</tr></table>';
    return _out;
}

function RefreshTownCostInfo(){
    if(lastTownCostGrid){
        if(gebi('town_upgrade_cost_div_'+GetTownNumber(lastTownCostGrid))){
            SetInner('town_upgrade_cost_div_'+GetTownNumber(lastTownCostGrid),TownUpradeInner(lastTownCostGrid));
        }
    }
}


function TownUpgradeButtonEffect(){
    return '<div class="town-upgrade-button-effect"><div></div></div>';
}



let materialAddonVisible=0;
let materialAddonTO=0;
function RequestMaterialAddon(_grid){
    if(materialAddonTO){
        clearTimeout(materialAddonTO);
    }
    if(materialAddonVisible == GetTownNumber(_grid)){
        return false;
    }
    if(HasLevel(12)){
        materialAddonTO= setTimeout(() => {
            if(materialAddonVisible == GetTownNumber(_grid)){
                return false;
            }
            if(gebi('okno_addon')){
                ShowJS('okno_addon');
                const _rect = GetRect('bottomGridMenuPopup_okno_in');
                if(_rect){
                    let _out='';

                    const goodsImgUrl = getAssetUrl('public/images/art/goods.png');
                    const zobacikImgUrl = getAssetUrl('public/images/ui/zobacik.png');
                    
                    _out+='<div id="okno_addon_in" class="left-part">';
                    _out+=`<img class="goods" src="${goodsImgUrl}">`;
                    _out+=`<img class="zobacik" src="${zobacikImgUrl}">`;
                    _out+='</div>';
                    _out+=Button(GetTextCAPS("GO TO MARKET"),'ClickBottomMenu(3);StartAnimatedScrollTo(\'bottomMenuPopup_okno_in_2\',1950,100);',{color:'teal',class:'small'});

                    SetInner('okno_addon',_out);
                    SetX('okno_addon',(_rect.left+10));
                    SetY('okno_addon',_rect.top-68);
                    materialAddonVisible=GetTownNumber(_grid);
                }
            }
        }, (450));
    }
}

function GetTownNumber(_grid){
    return 10000*(_grid.x+1000)+(_grid.y+1000);
}















const TOWN_UPGRADE_DEF_COSTS=[{},{}];
TOWN_UPGRADE_DEF_COSTS[2]={
    gold:900,
    // lumber:50,
    // food:10,
};
const SCOUT_TOWER_LEVEL_REQ=3;

TOWN_UPGRADE_DEF_COSTS[3]={
    gold:1500,
    // lumber:50,
    // food:10,
};
const QUICK_TOOL_LEVEL=4;

TOWN_UPGRADE_DEF_COSTS[4]={
    gold:2500,
    // lumber:50,
    // food:10,
};
const GOLDEN_MINE_LEVEL_REQ=5;

TOWN_UPGRADE_DEF_COSTS[5]={
    gold:4000,
    // food:60,
    // lumber:50,
};
const FARM_REQURED_LEVEL=6;

TOWN_UPGRADE_DEF_COSTS[6]={
    gold:9000,
    food:50,
    // lumber:50,
};
const CLEAR_RUBBLE_LEVEL_REQ=7;

TOWN_UPGRADE_DEF_COSTS[7]={
    gold:20000,
    food:120,
    // lumber:50,
};
const LUMBER_REQ_LEVEL=8;

TOWN_UPGRADE_DEF_COSTS[8]={
    gold:35000,
    food:250,
    lumber:50,
};
const REVITALISE_REQURED_LEVEL=9;

TOWN_UPGRADE_DEF_COSTS[9]={
    gold:62000,
    food:480,
    lumber:120,
};
const SALVAGE_LEVEL_REQ=10;

TOWN_UPGRADE_DEF_COSTS[10]={
    gold:95000,
    food:800,
    lumber:250,
};
const FOREST_2_LEVEL_REQ=11;

TOWN_UPGRADE_DEF_COSTS[11]={
    gold:130000,
    food:1100,
    lumber:600,
};
const ROCK_LEVEL_REQUIREMENT=12;
const POLLUTION_LEVEL_REQUIREMENT=12;

TOWN_UPGRADE_DEF_COSTS[12]={
    gold:205000,
    food:1400,
    lumber:1100,
};


TOWN_UPGRADE_DEF_COSTS[13]={
    gold:320000,
    food:1700,
    lumber:1800,
    rocks:3000,
};
const LUMBER_STORAGE_LEVEL_REQ=14;

TOWN_UPGRADE_DEF_COSTS[14]={
    gold:405000,
    food:2000,
    lumber:3000,
    rocks:5500,
};
const SHIPYARD_LEVEL_REQ=15;

TOWN_UPGRADE_DEF_COSTS[15]={
    gold:550000,
    food:2400,
    lumber:4200,
    rocks:10000,
};
TOWN_UPGRADE_DEF_COSTS[16]={
    gold:710000,
    food:3000,
    lumber:6000,
    rocks:19000,
};
TOWN_UPGRADE_DEF_COSTS[17]={
    gold:840000,
    food:3600,
    lumber:9000,
    rocks:29000,
};
TOWN_UPGRADE_DEF_COSTS[18]={
    gold:700000,
    food:4200,
    lumber:12000,
    rocks:45000,
};
TOWN_UPGRADE_DEF_COSTS[19]={
    gold:1000000,
    food:5200,
    lumber:15000,
    rocks:65000,
};
const REQ_ELECTRICITY_LEVEL=20;

TOWN_UPGRADE_DEF_COSTS[20]={
    gold:1200000,
    food:5500,
    lumber:19000,
    rocks:90000,
};
const SEA_GENERATOR_LEVEL_REQ=21;

TOWN_UPGRADE_DEF_COSTS[21]={
    gold:1400000,
    food:6000,
    lumber:22000,
    rocks:110000,
};

TOWN_UPGRADE_DEF_COSTS[22]={
    gold:1600000,
    food:6000,
    lumber:25000,
    rocks:135000,
};
const URANIUM_CLEAN_LVL_REQ=23;
const QUICK_TOOL_FOREST_UPGRADE=23;

TOWN_UPGRADE_DEF_COSTS[23]={
    gold:1750000,
    food:7000,
    lumber:10000,
    rocks:185000,
};
const STEEL_LEVEL_REQ=24;

TOWN_UPGRADE_DEF_COSTS[24]={
    gold:2000000,
    food:13000,
    lumber:20000,
    rocks:120000,
    steel:20000,
};
const HEAVY_LUMBER_MILL_LEVEL_REQ=25;

TOWN_UPGRADE_DEF_COSTS[25]={
    gold:2500000,
    food:15000,
    lumber:24000,
    rocks:140000,
    steel:45000,
};
const STREET_LEVEL_REQ=26;

TOWN_UPGRADE_DEF_COSTS[26]={
    gold:2950000,
    food:19000,
    lumber:28000,
    rocks:160000,
    steel:65000,
};
const STORAGE_CONTAINER_LEVEL_REQ=27;

TOWN_UPGRADE_DEF_COSTS[27]={
    gold:3250000,
    food:23000,
    lumber:35000,
    rocks:170000,
    steel:85000,
};
const COPPER_LEVEL_REQ=28;

TOWN_UPGRADE_DEF_COSTS[28]={//ked som 28
    gold:4150000,
    food:28500,
    lumber:45000,
    rocks:190000,
    steel:115000,
    chips:4000,
};
const GEM_MINE_LEVEL_REQ=30;

TOWN_UPGRADE_DEF_COSTS[29]={ //ked som 29
    gold:4400000,
    food:33000,
    lumber:55000,
    rocks:230000,
    steel:130000,
    chips:10000,
};

TOWN_UPGRADE_DEF_COSTS[30]={ //ked som 30
    gold:4800000,
    food:39000,
    lumber:57000,
    rocks:270000,
    steel:155000,
    chips:20000,
};
const GOLD_MINE_2_LEVEL_REQ=31;
const ACTIVISTS_REQURED_LEVEL=31;

TOWN_UPGRADE_DEF_COSTS[31]={ //ked som 31
    gold:5200000,
    food:43000,
    lumber:60000,
    rocks:300000,
    steel:175000,
    chips:38000,
};
const OIL_LEVEL_REQ=32;

TOWN_UPGRADE_DEF_COSTS[32]={ //ked som 32
    gold:5700000,
    food:48000,
    lumber:65000,
    rocks:320000,
    steel:200000,
    chips:75000,
    oil:5000,
};
const DEEP_WATER_LVL_REQ=33;

TOWN_UPGRADE_DEF_COSTS[33]={ //ked som 33
    gold:6200000,
    food:55000,
    lumber:75000,
    rocks:350000,
    steel:215000,
    chips:135000,
    oil:12000,
};

const QUALITY_STREET_LEVEL_REQ=34;

TOWN_UPGRADE_DEF_COSTS[34]={ //ked som 34
    gold:7200000,
    food:60000,
    lumber:85000,
    rocks:370000,
    steel:240000,
    chips:255000,
    oil:15000,
};
const FLATEN_MOUNTAINS_LEVEL_REQ=35;

TOWN_UPGRADE_DEF_COSTS[35]={ //ked som 35
    gold:7500000,
    food:65000,
    lumber:87000,
    rocks:400000,
    steel:270000,
    chips:405000,
    oil:30000,
};
const OIL_STORAGE_LEVEL_REQ=36;

TOWN_UPGRADE_DEF_COSTS[36]={ //ked som 36
    gold:8000000,
    food:70000,
    lumber:90000,
    rocks:420000,
    steel:300000,
    chips:605000,
    oil:55000,
};
const INFRASTRUCTURE_LEVEL_REQUIRED=37;

TOWN_UPGRADE_DEF_COSTS[37]={ //ked som 37
    gold:8400000,
    food:75000,
    lumber:100000,
    rocks:460000,
    steel:350000,
    chips:825000,
    oil:90000,
};
const HEAVY_SHIPYARD_LEVEL_REQUIRED=38;

TOWN_UPGRADE_DEF_COSTS[38]={ //ked som 38
    gold:8600000,
    food:80000,
    lumber:120000,
    rocks:500000,
    steel:400000,
    chips:1150000,
    oil:150000,
};
const WINDMILL_LEVEL_REQUIRED=39;

TOWN_UPGRADE_DEF_COSTS[39]={ //ked som 39
    gold:9200000,
    food:85000,
    lumber:120000,
    rocks:650000,
    steel:470000,
    chips:1350000,
    oil:250000,
};
const WATER_OIL_LEVEL_REQ=40;
//tu je upgrade

TOWN_UPGRADE_DEF_COSTS[40]={ //ked som 40
    gold:10500000,
    food:90000,
    lumber:150000,
    rocks:800000,
    steel:550000,
    chips:1650000,
    oil:320000,
};
const SOLAR_PANEL_LEVEL_REQUIRED=41;

TOWN_UPGRADE_DEF_COSTS[41]={ //ked som 41
    gold:11500000,
    food:95000,
    lumber:170000,
    rocks:1050000,
    steel:650000,
    chips:2000000,
    oil:410000,
};
const TANKERS_LEVEL_REQUIRED=42;

TOWN_UPGRADE_DEF_COSTS[42]={ //ked som 42
    gold: 12500000,
    food: 100000,
    lumber: 175000,
    rocks: 1180000,
    steel: 700000,
    chips: 2200000,
    oil: 550000,
};
const BIGFARMS_LEVEL_REQUIRED=43;


TOWN_UPGRADE_DEF_COSTS[43]={ //ked som 43
    gold: 13000000,
    food: 130000,
    lumber: 180000,
    rocks: 1300000,
    steel: 700000,
    chips: 2400000,
    oil: 650000,
};
const ROCK_MINE2_LEVEL_REQUIRED=44;

TOWN_UPGRADE_DEF_COSTS[44]={ //ked som 44
    gold: 13500000,
    food: 150000,
    lumber: 180000,
    rocks:1500000,
    steel: 800000,
    chips: 2600000,
    oil: 750000,
};
const STORAGE_CRANE_LEVEL_REQ=45;


TOWN_UPGRADE_DEF_COSTS[45]={ //ked som 45
    gold:15500000,
    food:  110000,
    lumber:180000,
    rocks:1600000,
    steel: 900000,
    chips:2800000,
    oil:   600000,
};
const BIG_BRIDGES_LEVEL_REQUIRED=46;
const ACTIVIST_HELP_LEVEL=46;


TOWN_UPGRADE_DEF_COSTS[46]={ //ked som 46
    gold:17500000,
    food:  150000,
    lumber:200000,
    rocks:2400000,
    steel:1100000,
    chips:3300000,
    oil:   850000,
};
const MOUNTAIN_HEALER_LEVEL=47;
const CHIP_FACTORY_STORAGE_UPGRADE_LEVEL=47;


TOWN_UPGRADE_DEF_COSTS[47]={ //ked som 47->48
    gold:19000000,
    food:  180000,
    lumber:230000,
    rocks:2700000,
    steel:1300000,
    chips:3800000,
    oil:  1150000,
};
const REMOVE_WATER_OIL_LEVEL=48;

TOWN_UPGRADE_DEF_COSTS[48]={ //ked som 48->49
    gold:20000000,
    food:  200000,
    lumber:250000,
    rocks:3200000,
    steel:1500000,
    chips:4200000,
    oil:  1550000,
};
const WATER_GEM_HARVEST_LEVEL=49;

TOWN_UPGRADE_DEF_COSTS[49]={ //ked som 49->50
    gold:22000000,
    food:  250000,
    lumber:300000,
    rocks:4000000,
    steel:1750000,
    chips:4500000,
    oil:  2000000,
};
//na levely 50 su predsa upgrades

TOWN_UPGRADE_DEF_COSTS[50]={ //ked som 50->51
    gold:25000000,
    food:  260000,
    lumber:450000,
    rocks:4500000,
    steel:2000000,
    chips:5000000,
    oil:  2400000,
};
const FOREST_3_LEVEL_REQ=51; //tree3 forest3


TOWN_UPGRADE_DEF_COSTS[51]={ //ked som 51->52
    gold:30000000,
    food:  280000,
    lumber:550000,
    rocks:4750000,
    steel:2200000,
    chips:5500000,
    oil:  2700000,
};
const BIG_SHIP_LEVEL_REQ=52;

TOWN_UPGRADE_DEF_COSTS[52]={ //ked som 52->53
    gold:70000000,
    food:  380000,
    lumber:850000,
    rocks:5250000,
    steel:3000000,
    chips:6500000,
    oil:  3200000,
};
const REMOVE_GROUND_OIL_LEVEL=53;

TOWN_UPGRADE_DEF_COSTS[53]={ //ked som 53->54
    gold:110000000,
    food:   450000,
    lumber:1050000,
    rocks: 5800000,
    steel: 4000000,
    chips: 7500000,
    oil:   3500000,
};
const FOUNDRY_2_LEVEL_REQ=54;
TOWN_UPGRADE_DEF_COSTS[54]={ //ked som 54->55
    gold:150000000,
    food:   550000,
    lumber:1450000,
    rocks: 6800000,
    steel: 6000000,
    chips: 8500000,
    oil:   4500000,
};
//este aspon 2 nove upgrady

TOWN_UPGRADE_DEF_COSTS[55]={ //ked som 55->56
    gold:220000000,
    food:   650000,
    lumber:1550000,
    rocks: 7800000,
    steel: 7000000,
    chips: 9500000,
    oil:   5000000,
};
const CHIP_FACTORY_2_LEVEL_REQ=56;

TOWN_UPGRADE_DEF_COSTS[56]={ //ked som 56->57
    gold:300000000,
    food:   700000,
    lumber:1700000,
    rocks: 8500000,
    steel: 8500000,
    chips:13000000,
    oil:   6000000,
};
const THERMAL_POWER_PLANT_LEVEL_REQ=57;

TOWN_UPGRADE_DEF_COSTS[57]={ //ked som 57->58
    gold:400000000,
    food:   750000,
    lumber:2000000,
    rocks: 9500000,
    steel:10500000,
    chips:14000000,
    oil:   6500000,
};
const GOLD_MINE_3_LEVEL_REQ=58;

TOWN_UPGRADE_DEF_COSTS[58]={ //ked som 58->59
    gold:500000000,
    food:   770000,
    lumber:2100000,
    rocks:10000000,
    steel:11000000,
    chips:15000000,
    oil:   7000000,
};
const PREMIUM_GOLD_MINE_2_LEVEL_REQ=59; 

TOWN_UPGRADE_DEF_COSTS[59]={ //ked som 59->60
    gold:600000000,
    food:   800000,
    lumber:2200000,
    rocks:10500000,
    steel:11500000,
    chips:16000000,
    oil:   7500000,
};
//upgrades overall storage upgrade???

TOWN_UPGRADE_DEF_COSTS[60]={ //ked som 60->61
    gold:750000000,
    food:   820000,
    lumber:2250000,
    rocks:11000000,
    steel:11800000,
    chips:16500000,
    oil:   7750000,
};
const SHIPYARD_STORAGE_LEVEL_REQ=61; 

TOWN_UPGRADE_DEF_COSTS[61]={ //ked som 61->62
    gold:850000000,
    food:   850000,
    lumber:2300000,
    rocks:11500000,
    steel:12000000,
    chips:17000000,
    oil:   8000000,
};
const ROAD_TYPE_5_LEVEL_REQ=62; 

TOWN_UPGRADE_DEF_COSTS[62]={ //ked som 62->63
    gold:1000000000,
    food:    870000,
    lumber: 2350000,
    rocks: 11750000,
    steel: 12200000,
    chips: 17300000,
    oil:    8300000,
};
const RIVER_TREES_LEVEL_REQ=63; 

TOWN_UPGRADE_DEF_COSTS[63]={ //ked som 63->64
    gold:1250000000,
    food:    890000,
    lumber: 2400000,
    rocks: 12000000,
    steel: 12500000,
    chips: 17500000,
    oil:    8500000,
};
const CLEAR_THERMAL_TILES_LEVEL_REQ=64;

TOWN_UPGRADE_DEF_COSTS[64]={ //ked som 64->65
    gold:1500000000,
    food:    950000,
    lumber: 2700000,
    rocks: 14000000,
    steel: 15000000,
    chips: 20000000,
    oil:    9000000,
};
const SUPER_FACTORY_LEVEL_REQ=65;

TOWN_UPGRADE_DEF_COSTS[65]={ //ked som 65->66
    gold:3300000000,
    food:   1150000,
    lumber: 2900000,
    rocks: 16000000,
    steel: 17000000,
    chips: 22000000,
    oil:   10000000,
};
// TU NIEJE NIC???

TOWN_UPGRADE_DEF_COSTS[66]={ //ked som 66->67
    gold:4000000000,
    food:   1350000,
    lumber: 3000000,
    rocks: 17000000,
    steel: 20000000,
    chips: 24000000,
    oil:   12000000,
};
const REVITALISE_SCORCHED_REQURED_LEVEL=67;

TOWN_UPGRADE_DEF_COSTS[67]={ //ked som 67->68
    gold:5000000000,
    food:   1500000,
    lumber: 4000000,
    rocks: 18000000,
    steel: 21000000,
    chips: 25000000,
    oil:   12500000,
};
const PREMIUM_STORAGE_2_LEVEL_REQ=68;

TOWN_UPGRADE_DEF_COSTS[68]={ //ked som 68->69
    gold:7000000000,
    food:   1700000,
    lumber: 4200000,
    rocks: 19000000,
    steel: 22000000,
    chips: 26000000,
    oil:   13500000,
};

TOWN_UPGRADE_DEF_COSTS[69]={ //ked som 69->70
    gold: 9000000000,
    food:    2000000,
    lumber:  4500000,
    rocks:  20000000,
    steel:  25000000,
    chips:  27000000,
    oil:    14500000,
};

TOWN_UPGRADE_DEF_COSTS[70]={ //ked som 70->71
    gold:12000000000,
    food:    3000000,
    lumber:  6000000,
    rocks:  25000000,
    steel:  27000000,
    chips:  30000000,
    oil:    16500000,
};

TOWN_UPGRADE_DEF_COSTS[71]={ //ked som 71->72
    gold:15000000000,
    food:    3500000,
    lumber:  7000000,
    rocks:  27000000,
    steel:  29000000,
    chips:  35000000,
    oil:    17500000,
};

TOWN_UPGRADE_DEF_COSTS[72]={ //ked som 72->73
    gold:17500000000,
    food:    4000000,
    lumber:  8000000,
    rocks:  30000000,
    steel:  30000000,
    chips:  38000000,
    oil:    20000000,
};


// const VILA_LEVEL_REQUIRED=48;
//na meste 50 mas zase upgrade na cistenie
// const FOREST_3_LEVEL_REQ=51; //toto som uz pouzil
const SOLAR_UPGRADE_LEVEL_REQ=52;
const PREMIUM_SEABED_LEVEL_REQ=55;
const REVITALISE_LAVA_RIFT_REQURED_LEVEL=75;
//65+ by som siel uranium mechaniky a vlaky
//na meste 60 mas zase upgrade na cistenie




const VOLCANO_LEVEL_REQ=54;//vzdy da 2 zlata a 1 med? // DAT NESKOR
const FILL_SEA_LEVEL_REQ=59; // DAT NESKOR
const DIG_SEA_LEVEL_REQ=61; // DAT NESKOR


//max level je posledne cislo co tu je + 1







let streets = [];


function AllowStreetInGrid(_grid,_type,_floatingText){
    if(!_grid){
        return false;
    }
    if(!_type)_type=1;
    let _is_river=_grid.river;
    let _is_water=_grid.water;
    if(_is_river==11 || _is_river==12){
        if(!_grid.river_cleaner){
            _is_river=0;
        }
    }
    if(_is_water && !_grid.ship && !_grid.water_rocks && !_grid.ship_wreck && !_grid.ship_wreck_small){
        if(_type>=4){
            if(HasLevel(BIG_BRIDGES_LEVEL_REQUIRED)){
                _is_water=0;
            }
        }
    }
    if(_type>=5){
        if(_grid && (IsRubble(_grid) || _grid.ground_oil || _grid.sand || _grid.desert)){
            if(_floatingText){
                AddFloatingTextToGrid(_grid,GetText('Requires plain tile'),'red');
            }
            return false;
        }
    }
    if(_grid && !_grid.znecistenie  && !_is_water && !_is_river && !_grid.swamp_rocks  && !_grid.swamp && !_grid.scorched && !_grid.lava_rift && !_grid.mesto && !_grid.rift&& !_grid.rift_big&& !_grid.thermal && !_grid.mountain && (!_grid.hill || GetPlayerUpgradeValue(37)) && (!_grid.has_street || _grid.has_street<_type) &&  !_grid.uranium_cloud && !_grid.uranium_barrel && IsNoBuilding(_grid,1)) return true;
    return false;
}


function RoadBuildMenu(_grid){
    let _out='';
    let _anyRoadButtonVisible=false;
    if(hrac.stats.towns<10 || HasStreetNearBy(_grid.x,_grid.y,0,undefined,undefined,_grid.water))
    for(let _streetType of [7,6,5,4,3,2,1]){
        if(HasStreetType(_streetType) && AllowStreetInGrid(_grid,_streetType)){
            if(_streetType>=2){
                anyActionBuildingHiddable=true;
            }
            if(!toggleShowHiddableBuildings && _anyRoadButtonVisible){
                break;
            }
            _anyRoadButtonVisible=true;
            if(_grid.forest){
                let _icons= ['grass','streets/street_t'+_streetType+'_8'];
                _out+= ActionDiv('TryBuildStreet('+_grid.x+','+_grid.y+','+_streetType+');',_icons,Bold(GetRoadName(_streetType))+' - '+GetText3('clear forest')+' + '+GetText('build roads to connect towns and structures')+' '+GetRoadName(_streetType)+BR+GetRoadDetail(_streetType)+GetText3('Cost: ')+PMats(GetStreetCost(_grid,_streetType)),GetRoadName(_streetType));
            }else{
                let _isBridge = _grid.river || _grid.swamp || _grid.water;
                let _icons= ['streets/street_t'+_streetType+(_isBridge?'_11_bridge'+(_grid.water?'_big':''):'_8')];
                if(_grid.water){
                    _icons.unshift('water');
                }else{
                    _icons.unshift('grass');

                }
                _out+= ActionDiv('TryBuildStreet('+_grid.x+','+_grid.y+','+_streetType+');',_icons,Bold(GetRoadName(_streetType))+' - '+GetText('build roads to connect towns and structures')+' '+BR+GetRoadDetail(_streetType)+GetText3('Cost: ')+PMats(GetStreetCost(_grid,_streetType)),(_isBridge?GetRoadBridgeName(_streetType):GetRoadName(_streetType)));
            }
        }
    }
    return _out;
}


function HasStreetNearBy(_x,_y,_floatingText,_ignoreX,_ignoreY,_ignoreShipYards){
    
    if(_ignoreX!=_x || _ignoreY!=_y+1){
        let _g2 = GetGridData(_x,_y+1);
        if(_g2 && (!_ignoreShipYards || !_g2.shipyard ) && _g2.has_street && _g2.is_connected && (_g2.otocenie!=11 || (!_g2.river && !_g2.water))) return true;
    }
    if(_ignoreX!=_x-1 || _ignoreY!=_y){
        let _g4 = GetGridData(_x-1,_y);
        if(_g4 && (!_ignoreShipYards || !_g4.shipyard ) && _g4.has_street && _g4.is_connected && (_g4.otocenie!=12 || (!_g4.river && !_g4.water))) return true;
    }
    if(_ignoreX!=_x+1 || _ignoreY!=_y){
        let _g6 = GetGridData(_x+1,_y);
        if(_g6 && (!_ignoreShipYards || !_g6.shipyard ) && _g6.has_street && _g6.is_connected && (_g6.otocenie!=12 || (!_g6.river && !_g6.water))) return true;
    }
    if(_ignoreX!=_x || _ignoreY!=_y-1){
        let _g8 = GetGridData(_x,_y-1);
        if(_g8 && (!_ignoreShipYards || !_g8.shipyard ) && _g8.has_street && _g8.is_connected && (_g8.otocenie!=11 || (!_g8.river && !_g8.water))) return true;
    }
    if(_floatingText){
        AddFloatingError(GetText('Road nearby required'));
    }
    return false;
}

let enabledNoRoadConFloatingText=true;

function TryBuildStreet(_x,_y,_type){
    let _grid = GetGridData(_x,_y);

    if(AllowStreetInGrid(_grid,_type,1)){
        if(HasStreetNearBy(_x,_y))
        {

            if(MamDostMats(GetStreetCost(_grid,_type),1)){
                CheckNewTowns_part1(_grid);
                ConnectTownIfAroundThisTile(_x,_y);

                if(_grid.farmfield||_grid.farmfield2){
                    DestroyAll(_grid.x,_grid.y,1);
                }

                BuildStreet(_grid,_type,0,1);
                TryCutForest(_grid);
                if(_type>=3){
                    delete(_grid.tree_cutted);
                }
                if(_grid.hill && GetPlayerUpgradeValue(37)){
                    TryFlattenHill(_grid.x,_grid.y,1);
                }
                // 
                // OpenGridMenu();
                TryShowQuickTool(1,_type);
                _grid.is_connected=true;
                _grid.is_connected3=true;
                
                ReCalculate9BlocksAndStatsByGrid(_grid,1);// ZratajHracStats();
                RefreshHeader();
                AddBuildEffect(_grid,5);

                PlaySound('hammer_hit_'+MyRand(1,3));

                TryRefreshTownRoadComposition();
                CheckNewTowns_part2(_grid);
                anythingBuiltDestroyed++;
                anyActionDone++;
                lastBuiltRoadGridWithQuicktool=_grid;
                return true;
            }
        }else{
            if(enabledNoRoadConFloatingText){
                AddFloatingError(GetText('no road nearby'));
            }
        }
    }
    return false;
}

function TryRefreshTownRoadComposition(){
    if(lastTownGridSelected && gebi('town_upgrade_requirement_div') && gebi('road_composition_perc')){
        SetInner('town_upgrade_requirement_div',GetTownUpgradeRequirementInner(lastTownGridSelected));
    }
}


function BuildStreet(_grid,_type,_otocenie,_ajokolo){
    let _x=_grid.x;
    let _y=_grid.y;
    if(_type){
        _grid.has_street=_type;
    }
    if((_grid.farmfield||_grid.farmfield2) && _grid.belongs_to_farm){
        if(_grid.belongs_to_farm.has_farmfields)_grid.belongs_to_farm.has_farmfields--;
        if(_grid.belongs_to_farm.has_farmfields2)_grid.belongs_to_farm.has_farmfields2--;
        delete(_grid.belongs_to_farm);
        delete(_grid.farmfield);
        delete(_grid.farmfield2);
    }

// console.log(_type)
    let _g8 = null;
    let _g2 = null;
    let _g4 = null;
    let _g6 = null;
    if(!_otocenie){
        _g8 = GetGridData(_x,_y-1);
        _g2 = GetGridData(_x,_y+1);
        _g4 = GetGridData(_x-1,_y);
        _g6 = GetGridData(_x+1,_y);
        _otocenie=11;
        if(!_g2 || (!_g2.has_street && !HasBuildingThatNeedsRoad(_g2)) || _g2.znecistenie>0)_g2=null;
        if(!_g4 || (!_g4.has_street && !HasBuildingThatNeedsRoad(_g4)) || _g4.znecistenie>0)_g4=null;
        if(!_g6 || (!_g6.has_street && !HasBuildingThatNeedsRoad(_g6)) || _g6.znecistenie>0)_g6=null;
        if(!_g8 || (!_g8.has_street && !HasBuildingThatNeedsRoad(_g8)) || _g8.znecistenie>0)_g8=null;

        {
            if(_g2 && _g2.has_street_connection_from && (_g2.has_street_connection_from.x != _x || _g2.has_street_connection_from.y != _y)){
                _g2=null;
            }
            if(_g2 && _g2.building_type && !_g2.mesto && !_g2.shipyard && !_g2.has_street_connection_from){
                _g2.has_street_connection_from = _grid;
            }

            if(_g4 && _g4.has_street_connection_from && (_g4.has_street_connection_from.x != _x || _g4.has_street_connection_from.y != _y)){
                _g4=null;
            }
            if(_g4 && _g4.building_type && !_g4.mesto && !_g4.shipyard && !_g4.has_street_connection_from){
                _g4.has_street_connection_from = _grid;
            }

            if(_g6 && _g6.has_street_connection_from && (_g6.has_street_connection_from.x != _x || _g6.has_street_connection_from.y != _y)){
                _g6=null;
            }
            if(_g6 && _g6.building_type && !_g6.mesto && !_g6.shipyard && !_g6.has_street_connection_from){
                _g6.has_street_connection_from = _grid;
            }

            if(_g8 && _g8.has_street_connection_from && (_g8.has_street_connection_from.x != _x || _g8.has_street_connection_from.y != _y)){
                _g8=null;
            }
            if(_g8 && _g8.building_type && !_g8.mesto && !_g8.shipyard && !_g8.has_street_connection_from){
                _g8.has_street_connection_from = _grid;
            }
        }
        

        if(_grid.shipyard){
            _otocenie=15;
        }else if(_grid.water && !_grid.shipyard){
            if((_g2 && _g2.has_street && !_g2.shipyard) || (_g8 && _g8.has_street && !_g8.shipyard)) _otocenie=12;
            if((_g4 && _g4.has_street && !_g4.shipyard) || (_g6 && _g6.has_street && !_g6.shipyard)) _otocenie=11;
        }else if((!_g4&&!_g6)||_grid.river==11){
            _otocenie=12;
        }else if((!_g2&&!_g8)||_grid.river==12){
            _otocenie=11;
        }else if(_g2 && _g4 && _g6 && _g8){
            _otocenie=5;
        }else if(_g2 && _g4 && _g6 && !_g8){
            _otocenie=8;
        }else if(_g2 && _g4 && !_g6 && _g8){
            _otocenie=6;
        }else if(_g2 && !_g4 && _g6 && _g8){
            _otocenie=4;
        }else if(!_g2 && _g4 && _g6 && _g8){
            _otocenie=2;

        }else if(!_g2 && _g4 && !_g6 && _g8){
            _otocenie=3;
        }else if(!_g2 && !_g4 && _g6 && _g8){
            _otocenie=1;
        }else if(_g2 && _g4 && !_g6 && !_g8){
            _otocenie=9;
        }else if(_g2 && !_g4 && _g6 && !_g8){
            _otocenie=7;
        }

    }
    
    TryRemoveStreet(_x,_y,1);
    if(_type){

        let _newStreet = {
            x: _x,
            y: _y,
            type: _type,
            grid: _grid,
            otocenie: _otocenie,
        };
        if(_grid.water && !_grid.shipyard){
            _grid.has_bridge  = 1;
        }
        streets.push(_newStreet);
        delete(_grid.farmfield_used);
        _grid.otocenie = _otocenie;
        hrac.stats.streets++;
    }

    if(_ajokolo){
        if(_g2&&_g2.has_street&&!_g2.has_bridge)BuildStreet(_g2,_g2.has_street);
        if(_g4&&_g4.has_street&&!_g4.has_bridge)BuildStreet(_g4,_g4.has_street);
        if(_g6&&_g6.has_street&&!_g6.has_bridge)BuildStreet(_g6,_g6.has_street);
        if(_g8&&_g8.has_street&&!_g8.has_bridge)BuildStreet(_g8,_g8.has_street);
        if(_g2 && _g2.mesto && !_g2.has_street)_g2.has_street=1;
        if(_g4 && _g4.mesto && !_g4.has_street)_g4.has_street=1;
        if(_g6 && _g6.mesto && !_g6.has_street)_g6.has_street=1;
        if(_g8 && _g8.mesto && !_g8.has_street)_g8.has_street=1;
        
    }
    drawSingleFrame=1;
}

function PootacajOkoliteCesty(_grid){
    if(!_grid.has_bridge)BuildStreet(_grid,0,0,1);
    // if(0){
    //     HasBuildingThatNeedsRoad(); //TUTO FNUNCKIU HLADAS A TU DOPLNUJES CESTY
    // }
}


function ConnectTownIfAroundThisTile(_x,_y){
    let _gAround = GetTerrainsAround(_x,_y);
    // gamePaused=1;
    // console.log('_gAround',_gAround);
    for(let _g of _gAround){
        // console.log('_g: ',_g, 'mesto:',_g.mesto, ' znecistenie: ',_g.znecistenie, 'street: ',!_g.has_street,'vidiek:',_g.vidiek);

        if(_g && (_g.mesto||_g.vidiek) && !_g.znecistenie && (!_g.has_street||_g.vidiek)){
            // console.log('_gAround staviam v meste',_g);
            _g.has_street = 1;
            if(!_g.is_connected){
                AddPing(_g.x,_g.y,0,300,1500,'lime');
                AddPing(_g.x,_g.y,0,600,1200,'lime');
            }
            _g.is_connected = true;
            _g.is_connected3 = true;
            _g.connected_to_main_town = 1;
            hrac.stats.towns_connected++;

            if(_g.vidiek){
                let _mc = GetMegaCityGridByVidiek(_g);
                if(_mc){
                    let _r=1;
                    for(let _xx=_mc.x-_r;_xx<=_mc.x+_r;_xx++){
                        for(let _yy=_mc.y-_r;_yy<=_mc.y+_r;_yy++){
                            if(GetGridData(_xx,_yy)){
                                GetGridData(_xx,_yy).is_connected=true;
                                GetGridData(_xx,_yy).is_connected3=true;
                            }
                        }
                    }
                }
            }
        }
        if(_g && _g.mesto && !_g.znecistenie && !_g.is_connected){
            _g.is_connected = true;
            _g.is_connected3 = true;
            _g.connected_to_main_town = 1;
        }
    }
}

function TryRemoveStreet(_x,_y,_onlyFromStreets,_manual,_norecycle){
    let _index = streets.findIndex(s=>s.x == _x&& s.y==_y);
    if(_index>=0){
        if(!_onlyFromStreets)
        if(AnyBuildingIsCut(_x,_y)){
            // RefreshRoadConnections();
        }
        let _type = streets[_index].type;

        streets.splice(_index,1);
        if(!_onlyFromStreets){

            let _grid=GetGridData(_x,_y);
            if(_grid){
                delete(_grid.has_street);
                if(_grid.has_bridge)_grid.has_bridge=0;
                // CloseBottomMenu();
                DeselectGrid();
                // OpenGridMenu();

                let _g2 = GetGridData(_x,_y+1);
                let _g4 = GetGridData(_x-1,_y);
                let _g6 = GetGridData(_x+1,_y);
                let _g8 = GetGridData(_x,_y-1);

                if(_g2 && _g2.has_street && !_g2.has_bridge)BuildStreet(_g2,_g2.has_street);
                if(_g4 && _g4.has_street && !_g4.has_bridge)BuildStreet(_g4,_g4.has_street);
                if(_g6 && _g6.has_street && !_g6.has_bridge)BuildStreet(_g6,_g6.has_street);
                if(_g8 && _g8.has_street && !_g8.has_bridge)BuildStreet(_g8,_g8.has_street);

            }
        }
        if(_manual){
            let _grid=GetGridData(_x,_y);
            if(!_norecycle){
                let _cost = GetStreetCost(_grid,_type);
                // console.log(_cost,_type)
                if(_cost && _cost.steel && GetPlayerUpgradeValue(73)){
                    AddMat(Mro(GetPlayerUpgradeValue(73)*0.01*_cost.steel),'steel',0,0,_grid);
                }
            }

            TryShowQuickTool(9);
            TryRefreshTownRoadComposition();
            hrac.stats.streets--;
            if(_grid){
                AddBuildEffect(_grid,5);
            }
            RemoveRoadTurnsFromBuildingsAroundThisGrid(_grid);
            anythingBuiltDestroyed++;
            anyActionDone++;
            PlaySound('bulldozer');
            drawSingleFrame=1;
            ReCalculate9BlocksAndStatsByGrid(_grid,1,1);
            // ResetReadyStatusOptiBlockByGrid(_grid);
        }
        return true;
    }
    return false;
}

function RemoveRoadTurnsFromBuildingsAroundThisGrid(_grid){
    let _x = _grid.x;
    let _y = _grid.y;
    let _g2 = GetGridData(_x,_y+1);
    let _g4 = GetGridData(_x-1,_y);
    let _g6 = GetGridData(_x+1,_y);
    let _g8 = GetGridData(_x,_y-1);
    if(_g2 && _g2.has_street_connection_from){
        delete(_g2.has_street_connection_from);
    }
    if(_g4 && _g4.has_street_connection_from){
        delete(_g4.has_street_connection_from);
    }
    if(_g6 && _g6.has_street_connection_from){
        delete(_g6.has_street_connection_from);
    }
    if(_g8 && _g8.has_street_connection_from){
        delete(_g8.has_street_connection_from);
    }

}

function InitStreets(){
    for(let _x in myGridData) for(let _y in myGridData[_x]){
        let _g = myGridData[_x][_y];
        if(_g){
            if(_g.rails){
                AutoRotateRails(_g);
            }
            
            {
                if(_g.has_street && _g.water && !_g.shipyard){
                //    delete(_g.has_street); 
                }
                if(_g.has_street){
                    if(!_g.has_bridge)BuildStreet(_g,_g.has_street);
                }
            }
        }
    }
}

function RoadInfo(_grid){
    let _out='';
    if(_grid.has_street && !_grid.mesto && !_grid.shipyard){
        _out += GetText3('Road type: ')+GetRoadName(_grid.has_street)+(_grid.river||_grid.swamp?GetText4(' (bridge)'):'');
        if(!_grid.is_connected){
            _out += BR+ColorSpan('red',GetText('Road is not connected to main town. Roads must be connected to town, shipyard or other road. Connections to normal buildings wont work'));
        }
        if(_grid.has_street){
            _out += BR+GetRoadDetail(_grid.has_street);
        }
    }
    return _out;
}

function GetRoadDetail(_type){
    let _out='';
    let _pollution = GetRoadPollutionByType(_type);
    let _income = GetRoadIncomeByType(_type);
    if(_income){
        _out+= GetTextC1('income +{att1} gold {EVERY_X_SECONDS}',PMat(_income,1))+BR;
    }
    if(_pollution){
        _out+= PPollution(_pollution)+BR;
    }
    
    return _out;
}

function RoadActions(_grid){
    let _out='';
    if(_grid.has_street && !_grid.mesto && !_grid.shipyard){
        _out+= ActionDiv('TryRemoveStreet('+_grid.x+','+_grid.y+',0,1);','ui/buldoser',GetText('Remove road'),GetText('Remove road'));
        if(_grid.has_street>=4 && _grid.has_bridge){
            if(CanBridgeBeRotated(_grid)){
                _out+= ActionDiv('RotateBridge('+_grid.x+','+_grid.y+');',['water','streets/street_t'+_grid.has_street+'_11_bridge_big','ui/rotate_button'],GetText('Rotate bridge'),GetText('Rotate bridge'));
            }
        }
        if(HasLevel(QUICK_TOOL_LEVEL)){
            _out+= ActionDiv('CopyRoad('+_grid.x+','+_grid.y+');',['grass','streets/street_t'+_grid.has_street+'_8'],GetText3('Activate quick tool with this road type: ')+GetRoadName(_grid.has_street)+'',GetText('Copy road'));
        }
        // if(HasLevel(TRAIN_STATION_LEVEL) && CanBuildOverStraightRoad(_grid,BUILDINGS_BY_KEYS['rails'])){
        //     _out+= GetSingleBuildingAction(_grid,'rails');
        // }
        
    }
    return _out;
}

function RotateBridge(_x,_y){
    let _grid = GetGridData(_x,_y);
    if(_grid){
        if(_grid.otocenie==11){
            _grid.otocenie=12;
        }else{
            _grid.otocenie=11;
        }
    }
    CloseBottomMenu();
}

function CanBridgeBeRotated(_grid){
    if(_grid.otocenie==11){
        let _g2=GetGridData(_grid.x,_grid.y-1);
        if(_g2 && _g2.has_street && !_g2.shipyard){
            return true;
        }
        let _g8=GetGridData(_grid.x,_grid.y+1);
        if(_g8 && _g8.has_street && !_g8.shipyard){
            return true;
        }
    }
    if(_grid.otocenie==12){
        let _g4=GetGridData(_grid.x-1,_grid.y);
        if(_g4 && _g4.has_street && !_g4.shipyard){
            return true;
        }
        let _g6=GetGridData(_grid.x+1,_grid.y);
        if(_g6 && _g6.has_street && !_g6.shipyard){
            return true;
        }
    }
}


function CopyRoad(_x,_y){
    let _grid = GetGridData(_x,_y);
    if(_grid && _grid.has_street){
        ShowQuickTool(1,_grid.has_street);
        ToggleQuickTool();
        lastBuiltRoadGridWithQuicktool=_grid;
    }

}

function HasBuildingThatNeedsRoad(_g){
    if(_g && _g.building_type){
        if(!BUILDING_WITHOUT_CONNECTION_REQUIREMENT[_g.building_type]){
            return true;
        }
    }
    return false;
}

function AnyBuildingIsCut(_x,_y){
    
    let _g = GetGridData(_x,_y+1);
    if(_g.saw_mill || _g.heavy_lumber_mill || _g.farm)if(GetPlayerUpgradeValue(28)) return false;
    
    
    if(_g && HasBuildingThatNeedsRoad(_g)){
        // console.log('11111')
        if(!HasStreetNearBy(_x,_y+1,0,_x,_y)){
            return true;
        }
    }
    
    _g = GetGridData(_x,_y-1);
    if(_g && HasBuildingThatNeedsRoad(_g)){
        if(!HasStreetNearBy(_x,_y-1,0,_x,_y)){
            return true;
        }
    }
    
    _g = GetGridData(_x-1,_y);
    if(_g && HasBuildingThatNeedsRoad(_g)){
        if(!HasStreetNearBy(_x-1,_y,0,_x,_y)){
            return true;
        }
    }
    
    _g = GetGridData(_x+1,_y);
    if(_g && HasBuildingThatNeedsRoad(_g)){
        if(!HasStreetNearBy(_x+1,_y,0,_x,_y)){
            return true;
        }
    }
    return false;
}











function GetRoadName(_type){
    if(_type==1) return GetText('Dirt Road');
    if(_type==2) return GetText('Paved Road');
    if(_type==3) return GetText('Basic Road');
    if(_type==4) return GetText('Street Road');
    if(_type==5) return GetText('Fast Street');
    if(_type==6) return GetText('Eco Road');
    if(_type==7) return GetText('Eco Highway');
    if(_type==8) return GetText('Super Highway');
    return 'Road';
}

function GetRoadBridgeName(_type){
    if(_type==1) return GetText('Wooden Bridge');
    if(_type==2) return GetText('Paved Bridge');
    if(_type==3) return GetText('Basic Bridge');
    if(_type==4) return GetText('Quality Bridge');
    if(_type==5) return GetText('Fast Bridge');
    if(_type==6) return GetText('Eco Bridge');
    if(_type==7) return GetText('Highway Bridge');
    if(_type==8) return GetText('Super Bridge');
    return 'Bridge';
}
const PAVED_ROAD_LEVEL_REQ=12;

function HasStreetType(_type){
    if(_type==1) return true;
    if(_type==2){
        if(HasLevel(PAVED_ROAD_LEVEL_REQ)){
            return true;
        }        
    }
    if(_type==3){
        if(HasLevel(STREET_LEVEL_REQ)){
            return true
        }                
    }
    if(_type==4){
        if(HasLevel(QUALITY_STREET_LEVEL_REQ)){
            return true
        }                
    }
    if(_type==5){
        if(HasLevel(ROAD_TYPE_5_LEVEL_REQ)){
            return true
        }                
    }
    return false;
}



function GetRoadPollutionByType(_type){
    if(_type==3) return 1;
    if(_type==4) return 2;
    if(_type==5) return 5;
    if(_type==6) return 3;
    if(_type==7) return 3;
    if(_type==8) return 1;//ulti
    return 0;
}

function GetRoadIncomeByType(_type){
    if(_type==2) return 1;
    if(_type==3) return 2;
    if(_type==4) return 3;
    if(_type==5) return 5;
    if(_type==6) return 5;
    if(_type==7) return 7;
    if(_type==8) return 8;//ulti
    return 0;
}


function GetStreetCost(_grid,_type){
    let _cena={};
    if(_type==1)_cena.gold=300;
    if(_type==2){
        _cena.rocks=50;
        _cena.gold=500;
    }
    if(_type==3){
        _cena.rocks=350;
        _cena.gold=11000;
    }
    if(_type==4){
        _cena.rocks=20000;
        _cena.gold=70000;
    }
    if(_type==5){
        _cena.rocks=40000;
        _cena.gold=550000;
    }
    if(_type==6)_cena.gold=10000000;
    if(_type==7)_cena.gold=20000000;

    if(_grid.river||_grid.swamp){
        _cena.gold=_cena.gold*5+5000;
    }
    if(_grid.water){
        if(_type==5){
            _cena.rocks=_cena.gold*1;
            _cena.steel=_cena.gold*1;
            _cena.gold=_cena.gold*20;
        }else{
            _cena.rocks=_cena.gold*5;
            _cena.steel=_cena.gold*2;
            _cena.gold=_cena.gold*20;
        }
    }
    if(_grid.forest){
        _cena.gold+=200;
    }
    return _cena;
}












function ResetAllRoadConnections(){
    mineConnectionOrigin=[];
    for(let _x in myGridData)
    for(let _y in myGridData[_x]){
        if(!DoesBuildingRequireConnection(myGridData[_x][_y].building_type)){
            myGridData[_x][_y].ignores_connection=true;
            if(BUILDINGS_BY_KEYS[myGridData[_x][_y].building_type]?.isMineConnectionOrigin){
                mineConnectionOrigin.push(myGridData[_x][_y]);
            }
        }
        if(!myGridData[_x][_y].znecistenie){
            if(myGridData[_x][_y].water || myGridData[_x][_y].has_street || myGridData[_x][_y].building_type){
                if(myGridData[_x][_y].mesto){
                    let _susedia = GetGridNeighbours(myGridData[_x][_y]);
                    for(let _s of _susedia){
                        if(_s && _s.has_street){
                            myGridData[_x][_y].is_connected=true;
                            break;
                        }
                    }
                }else{
                    myGridData[_x][_y].is_connected=true;
                }
            }
        }
        myGridData[_x][_y].is_connected2=false;
    }
    myGridData[0][0].is_connected=true;
    myGridData[0][0].is_connected3=true;
}

let anythingBuiltDestroyed=1;
let connectionsToCheck=null;
function TryStartCheckingRoadConnection(_grid){
    if(!anythingBuiltDestroyed){
        return false;
    }
    if(connectionsToCheck || road_check_cycle_count || amount_of_road_checks_in_tick){
        return false;
    }
    anythingBuiltDestroyed=0;

    // console.error('checking started')
    connectionsToCheck=[];
    
    for(let _g of mineConnectionOrigin){
        connectionsToCheck.push([_g,0,1,0,0,0]);
    }
    CheckRoadConnectionRecursive(_grid);   
    
    return true;
}

let mineConnectionOrigin=[];

let amount_of_road_checks_in_tick=0;
let road_check_cycle_count=0;
function CheckMoreConnections(){
    if(visitingFriend){
        return false;
    }
    
    if(connectionsToCheck && connectionsToCheck.length){
        
        while(connectionsToCheck.length > 0 && amount_of_road_checks_in_tick < 500){
            let _o = connectionsToCheck.pop();
            CheckRoadConnectionRecursive(_o[0],0,undefined,_o[1],_o[2],_o[3],_o[4],_o[5]);
        }
        return true;
    }     
    return 0;
}

let roadConnectionEnd_sequenceIndex=0;
let roadConnectionEnd_chunkSize=25;
/**
 * uplne by stacilo aby tato funkcia len presla vsetky gridy a nastavila conncetion podla connection 2, lenze potom uz pri mensej mapke to trvalo 5 milisekund, takze som to rozchunkoval a kazdy tick nieco zbehne
 */
function RoadConnectionEndFuns(){
    if(visitingFriend){
        return false;
    }
    // console.time('roadconend');
    let _order=0;
    let _count=0;
    for(let _x = -BOUNDERIES_LEFT; _x<=BOUNDERIES_RIGHT; _x++){
        _order++;
        if(_order < roadConnectionEnd_sequenceIndex*roadConnectionEnd_chunkSize)continue;
        if(_order >= (roadConnectionEnd_sequenceIndex+1)*roadConnectionEnd_chunkSize)break;
        _count++;
        if(myGridData[_x]){
            for(let _y in myGridData[_x]){
                if(myGridData[_x][_y].is_connected!=undefined && myGridData[_x][_y].is_connected2 != myGridData[_x][_y].is_connected && !myGridData[_x][_y].ignores_connection){
                    if(myGridData[_x][_y].has_street || myGridData[_x][_y].building_type){
                        SetBlocksToRecalculate(myGridData[_x][_y]);
                    }
                    myGridData[_x][_y].is_connected = myGridData[_x][_y].is_connected2;
                }
                if(myGridData[_x][_y].is_connected3){
                    myGridData[_x][_y].is_connected=myGridData[_x][_y].is_connected3;
                    myGridData[_x][_y].is_connected3=false;
                }

                myGridData[_x][_y].is_connected2=false;
                myGridData[_x][_y].is_connected_street=false;
            }
        }
    }
    // console.timeEnd('roadconend');

    if(roadConnectionEnd_sequenceIndex*roadConnectionEnd_chunkSize > BOUNDERIES_DOWN+BOUNDERIES_UP+roadConnectionEnd_chunkSize ){
        road_check_cycle_count=0;
        connectionsToCheck=null;
        roadConnectionEnd_sequenceIndex=0;
    }else{
        roadConnectionEnd_sequenceIndex++;
    }
}

function CheckRoadConnectionRecursive(_grid,_depth,_maxDepth,_checkWater,_checkMines,_checkSame,_goingFromShipYard,_typeComingFrom){
    if(visitingFriend){
        return false;
    }
    if(!_depth)_depth=0;
    if(!_maxDepth)_maxDepth=50;

    if(!_grid){
        return true;
    }

    if(_typeComingFrom===1 && _grid.has_street){ // _typeComingFrom===1 znamena ze je sÃºÅ¡ alebo most
        if(_grid.is_connected_street){
            return true;
        }
    }else if(_grid.is_connected2){
        return true;
    }

    if(_grid.znecistenie){
        return false;
    }

    if(_typeComingFrom && _typeComingFrom!==1){
        if(_grid.building_type && BUILDINGS_BY_KEYS[_grid.building_type] && BUILDINGS_BY_KEYS[_grid.building_type].can_connect_to_these_buildings && BUILDINGS_BY_KEYS[_grid.building_type].can_connect_to_these_buildings.includes(_typeComingFrom)){
            //tak je ok
        }else{
            return false;
        }
    }
    
    if(_checkSame && _grid.building_type != _checkSame && !hasAdvancedInfrastructure){
        return false;
    }
    if(_checkMines && !BUILDINGS_THAT_CAN_CONNECT_TO_MINES[_grid.building_type]){
        return false;
    }
    
    if(_checkWater && !_grid.water && _typeComingFrom!==1 && !_goingFromShipYard){
        return false;
    }

    if(_grid.water && !_grid.shipyard && !_checkWater && !_grid.has_bridge){
        return false;
    }
    
    amount_of_road_checks_in_tick++;
    _depth++;
    if(_depth>=_maxDepth){
        connectionsToCheck.push([_grid,_checkWater,_checkMines,_checkSame,_goingFromShipYard,_typeComingFrom]);
        return false;
    }
    _grid.is_connected2=true;
    if(_typeComingFrom===1 && _grid.has_street)_grid.is_connected_street=true;



    if(_grid.has_street || (_grid.water && _checkWater)){
        let _isWaterOrShipYard = (_grid.water) || _grid.shipyard;
        CheckRoadConnectionRecursive(GetGridData(_grid.x+1,_grid.y),_depth,_maxDepth,_isWaterOrShipYard,0,0,_grid.shipyard,!_grid.water||_grid.has_bridge?1:0);
        CheckRoadConnectionRecursive(GetGridData(_grid.x-1,_grid.y),_depth,_maxDepth,_isWaterOrShipYard,0,0,_grid.shipyard,!_grid.water||_grid.has_bridge?1:0);
        CheckRoadConnectionRecursive(GetGridData(_grid.x,_grid.y+1),_depth,_maxDepth,_isWaterOrShipYard,0,0,_grid.shipyard,!_grid.water||_grid.has_bridge?1:0);
        CheckRoadConnectionRecursive(GetGridData(_grid.x,_grid.y-1),_depth,_maxDepth,_isWaterOrShipYard,0,0,_grid.shipyard,!_grid.water||_grid.has_bridge?1:0);
    }else{        
        let _canConnectToThemSelf=BUILDINGS_THAT_CAN_CONNECT_TO_THEMSELFS[_grid.building_type]?_grid.building_type:0;
        if(_canConnectToThemSelf||(_grid.building_type && hasAdvancedInfrastructure)){
            CheckRoadConnectionRecursive(GetGridData(_grid.x+1,_grid.y),_depth,_maxDepth,0,0,_canConnectToThemSelf,0,null);
            CheckRoadConnectionRecursive(GetGridData(_grid.x-1,_grid.y),_depth,_maxDepth,0,0,_canConnectToThemSelf,0,null);
            CheckRoadConnectionRecursive(GetGridData(_grid.x,_grid.y+1),_depth,_maxDepth,0,0,_canConnectToThemSelf,0,null);
            CheckRoadConnectionRecursive(GetGridData(_grid.x,_grid.y-1),_depth,_maxDepth,0,0,_canConnectToThemSelf,0,null);
        } 
    }

    let _canConnectToMines=BUILDINGS_THAT_MINES_CAN_BE_CONNECTED_TO[_grid.building_type]?_grid.building_type:0;
    if(_canConnectToMines){
        CheckRoadConnectionRecursive(GetGridData(_grid.x+1,_grid.y),_depth,_maxDepth,0,_canConnectToMines,0,null);
        CheckRoadConnectionRecursive(GetGridData(_grid.x-1,_grid.y),_depth,_maxDepth,0,_canConnectToMines,0,null);
        CheckRoadConnectionRecursive(GetGridData(_grid.x,_grid.y+1),_depth,_maxDepth,0,_canConnectToMines,0,null);
        CheckRoadConnectionRecursive(GetGridData(_grid.x,_grid.y-1),_depth,_maxDepth,0,_canConnectToMines,0,null);
    }
    
    if(_grid.building_type){
        CheckRoadConnectionRecursive(GetGridData(_grid.x+1,_grid.y),_depth,_maxDepth,0,0,0,0,_grid.building_type);
        CheckRoadConnectionRecursive(GetGridData(_grid.x-1,_grid.y),_depth,_maxDepth,0,0,0,0,_grid.building_type);
        CheckRoadConnectionRecursive(GetGridData(_grid.x,_grid.y+1),_depth,_maxDepth,0,0,0,0,_grid.building_type);
        CheckRoadConnectionRecursive(GetGridData(_grid.x,_grid.y-1),_depth,_maxDepth,0,0,0,0,_grid.building_type);
    }
}

let rivers=[];
let lastFlow=null;


function River_trees_description(_grid){
    let _out='';
    _out+=GetText("Grow trees on river banks and clean the water with micro cleaners.");
    if(!_grid.river_trees){
        _out+=BR+ColorSpan('var(--light-purple)',GetText("Can't be combined with structure: {att1}",GetText(BUILDINGS_BY_KEYS['river_cleaner'].name)));
    }
    let _income = GetPlayerUpgradeValue(113);
    if(_income){
        _out+=BR+GetText3("Income:")+'+'+PMat(_income,'gold')+GetText('every {att1} seconds',[INCOME_SEC]);
    }
    return _out;
}


function InitRivers(){
    for(let _flow of riverFlows){
        let _dest = _flow.destination;
        lastFlow = _flow;
        let _riverModulo = 2;
        let _algo=_flow.algoritmus?_flow.algoritmus:1;
        let _extraZakrutaChance=0;
        if(_algo==2)_extraZakrutaChance=9;
        if(_algo==3)_riverModulo=3;
        if(_algo==4)_riverModulo=1;
        pseudoIndex = _flow.seed?_flow.seed % pseudoPole.length:0;

        let _x = _flow.origin.x;
        let _y = _flow.origin.y;
        let _dlzka=0;
        let _lastRiver=AddRiver(_flow.origin.x,_flow.origin.y);
        let _lastRiver2=_lastRiver;

        while((_x != _dest.x  || _y != _dest.y) && _dlzka<350){
            _dlzka++;
            let _smer_x = _dest.x-_x;
            let _smer_y = _dest.y-_y;
            let _prev_x = _x;
            let _prev_y = _y;

            if(MyPseudoRand100(50)){
                if(_smer_x>0-_dlzka%_riverModulo ){
                    if(MyPseudoRand100(90+_extraZakrutaChance)){
                        _x+=1;
                    }else{
                        _x-=1;
                    }
                }
                else if(_smer_x<0+_dlzka%_riverModulo){
                    if(MyPseudoRand100(90+_extraZakrutaChance)){
                        _x-=1;
                    }else{
                        _x+=1;
                    }
                }
            }else{
                if(_smer_y>0-_dlzka%_riverModulo ){
                    if(MyPseudoRand100(90+_extraZakrutaChance)){
                        _y+=1;
                    }else{
                        _y-=1;
                    }
                }
                else if(_smer_y<0+_dlzka%_riverModulo){
                    if(MyPseudoRand100(90+_extraZakrutaChance)){
                        _y-=1;
                    }else{
                        _y+=1;
                    }
                }
            }

            if(IsRiverGenerated(_x,_y)){
                _x = _prev_x;
                _y = _prev_y;
            }else{
                _lastRiver.typ = 11;
                if( _lastRiver.y == _y-1 && _lastRiver2.y == _lastRiver.y-1 ){
                    _lastRiver.typ = 12;
                }else if( _lastRiver.y == _y-1 && _lastRiver2.x == _lastRiver.x-1 ){
                    _lastRiver.typ = 9;
                }else if( _lastRiver.y == _y-1 && _lastRiver2.x == _lastRiver.x+1 ){
                    _lastRiver.typ = 7;
                }else if( _lastRiver.x == _x-1 && _lastRiver2.y == _lastRiver.y-1 ){
                    _lastRiver.typ = 1;
                }else if( _lastRiver.x == _x+1 && _lastRiver2.y == _lastRiver.y-1 ){
                    _lastRiver.typ = 3;

                //dohora
                }else if( _lastRiver.y == _y+1 && _lastRiver2.y == _lastRiver.y+1 ){
                    _lastRiver.typ = 12;
                }else if( _lastRiver.y == _y+1 && _lastRiver2.x == _lastRiver.x-1 ){
                    _lastRiver.typ = 3;
                }else if( _lastRiver.y == _y+1 && _lastRiver2.x == _lastRiver.x+1 ){
                    _lastRiver.typ = 1;
                }else if( _lastRiver.x == _x-1 && _lastRiver2.y == _lastRiver.y+1 ){
                    _lastRiver.typ = 7;
                }else if( _lastRiver.x == _x+1 && _lastRiver2.y == _lastRiver.y+1 ){
                    _lastRiver.typ = 9;
                }
                _lastRiver2 = _lastRiver;
                if(_x!=_dest.x || _y!=_dest.y){
                    _lastRiver = AddRiver(_x,_y);
                }
            }
        }
        // console.log(_flow.origin.x,)
        AddRiver(_flow.origin.x,_flow.origin.y,-1);
        AddRiver(_flow.destination.x,_flow.destination.y,-1);
        
        // console.log(_posun_x,_posun_y)
    }

    rivers[203][-23].typ=8; 
    rivers[3][-5].typ=11; 
    rivers[4][-5].typ=2; 
    rivers[-16][-7].typ=6; 
    rivers[-13][-29].typ=6; 
    // rivers[-8][-17].typ=2; 
    // rivers[11][-8].typ=2; 
}


function AddRiver(_x,_y,_typ){
    if(!rivers[_x])rivers[_x]=[];
    rivers[_x][_y]={
        x: _x,
        y: _y,
        typ: _typ?_typ:1,
        flow:lastFlow
    };
    
    return rivers[_x][_y];
}


function IsRiverGenerated(_x,_y){
    if(!rivers[_x])rivers[_x]=[];
    
    // if(rivers[_x][_y] && rivers[_x][_y].startend) return -1;
    return rivers[_x][_y]?rivers[_x][_y].typ:0;
}

let riverFlows=[
    {
        origin:{
            x:9,
            y:-7,
        },
        destination:{
            x:2,
            y:18,
        },
        seed:10,
    },
    {
        origin:{
            x:10,
            y:-8,
        },
        destination:{
            x:30,
            y:-28,
        },
        seed:10,
    },
    {
        origin:{
            x:-32,
            y:11,
        },
        destination:{
            x:-75,
            y:23,
        },
        seed:3,
    },
    {
        origin:{
            x:-31,
            y:-51,
        },
        destination:{
            x:9,
            y:-7,
        },
        seed:24,
    },
    {
        origin:{
            x:-39,
            y:-55,
        },
        destination:{
            x:-74,
            y:-35,
        },
        seed:1,
    },
    {
        origin:{
            x:98,
            y:37,
        },
        destination:{
            x:77,
            y:21,
        },
        seed:2,
    },
    {
        origin:{
            x:48,
            y:121,
        },
        destination:{
            x:83,
            y:100,
        },
        seed:3,
    },
    {
        origin:{
            x:178,
            y:209,
        },
        destination:{
            x:142,
            y:251,
        },
        seed:4,
    },
    {
        origin:{
            x:214,
            y:211,
        },
        destination:{
            x:243,
            y:234,
        },
        seed:4,
    },
    {
        origin:{
            x:205,
            y:202,
        },
        destination:{
            x:245,
            y:129,
        },
        seed:4,
    },
    {
        origin:{
            x:205,
            y:110,
        },
        destination:{
            x:245,
            y:128,
        },
        seed:7,
    },
    {
        origin:{
            x:230,
            y:15,
        },
        destination:{
            x:181,
            y:-47,
        },
        seed:4,
    },
    {
        origin:{
            x:203,
            y:-23,
        },
        destination:{
            x:232,
            y:-41,
        },
        seed:4,
    },
    {
        origin:{
            x:-93,
            y:101,
        },
        destination:{
            x:-45,
            y:96,
        },
        seed:2,
    },
    {
        origin:{
            x:-41,
            y:227,
        },
        destination:{
            x:25,
            y:209,
        },
        seed:5,
    },
    {
        origin:{
            x:-55,
            y:188,
        },
        destination:{
            x:-70,
            y:251,
        },
        seed:6,
    },
    {
        origin:{
            x:-115,
            y:241,
        },
        destination:{
            x:-195,
            y:126,
        },
        seed:6,
    },
    {
        origin:{
            x:-214,
            y:198,
        },
        destination:{
            x:-246,
            y:251,
        },
        seed:6,
    },
    {
        origin:{
            x:-205,
            y:-60,
        },
        destination:{
            x:-192,
            y:33,
        },
        seed:6,
    },
    {
        origin:{
            x:-205,
            y:-60,
        },
        destination:{
            x:-251,
            y:-83,
        },
        seed:7,
    },
    {
        origin:{
            x:-144,
            y:86,
        },
        destination:{
            x:-251,
            y:116,
        },
        seed:7,
    },
    {
        origin:{
            x:-88,
            y:-160,
        },
        destination:{
            x:-94,
            y:-65,
        },
        seed:10,
    },
    {
        origin:{
            x:-117,
            y:-187,
        },
        destination:{
            x:-238,
            y:-225,
        },
        seed:11,
    },
    {
        origin:{
            x:-19,
            y:-63,
        },
        destination:{
            x:12,
            y:-129,
        },
        seed:12,
    },
    {
        origin:{
            x:120,
            y:-216,
        },
        destination:{
            x:12,
            y:-129,
        },
        seed:12,
    },
    {
        origin:{
            x:185,
            y:-80,
        },
        destination:{
            x:206,
            y:-117,
        },
        seed:12,
    },
    {
        origin:{
            x:207,
            y:-118,
        },
        destination:{
            x:236,
            y:-133,
        },
        seed:13,
    },
    {
        origin:{
            x:206,
            y:-118,
        },
        destination:{
            x:190,
            y:-200,
        },
        seed:14,
    },
    {
        origin:{
            x:-82,
            y:-197,
        },
        destination:{
            x:-28,
            y:-251,
        },
        seed:15,
    },
    {
        origin:{
            x:119,
            y:-218,
        },
        destination:{
            x:87,
            y:-251,
        },
        seed:19 ,
    },
    {
        origin:{
            x:195,
            y:200,
        },
        destination:{
            x:160,
            y:168,
        },
        seed:19 ,
    },
    {
        origin:{
            x:-9,
            y:-18,
        },
        destination:{
            x:-31,
            y:10,
        },
        algoritmus:2,
        seed:20 ,
    },
    {
        origin:{
            x:-16,
            y:-7,
        },
        destination:{
            x:-56,
            y:-17,
        },
        algoritmus:3,
        seed:80,
    },
    {
        origin:{
            x:-29,
            y:10,
        },
        destination:{
            x:-20,
            y:22,
        },
        algoritmus:4,
        seed:50,
    },
    {
        origin:{
            x:-13,
            y:-29,
        },
        destination:{
            x:17,
            y:-60,
        },
        algoritmus:4,
        seed:50,
    },
    {
        origin:{
            x:13,
            y:-131,
        },
        destination:{
            x:-17,
            y:-215,
        },
        // algoritmus:4,
        seed:50,
    },
    {
        origin:{
            x:-16,
            y:-217,
        },
        destination:{
            x:12,
            y:-250,
        },
        // algoritmus:4,
        seed:50,
    },
    {
        origin:{
            x:-107,
            y:-201,
        },
        destination:{
            x:-117,
            y:-251,
        },
        // algoritmus:4,
        seed:50,
    },
    {
        origin:{
            x:-91,
            y:-205,
        },
        destination:{
            x:-74,
            y:-251,
        },
        // algoritmus:4,
        seed:50,
    },
    {
        origin:{
            x:-5,
            y:-4,
        },
        destination:{
            x:3,
            y:-5,
        },
        // algoritmus:4,
        seed:50,
    },
];



const pseudoPole=[109,794,94,151,499,1,374,127,771,249,526,743,518,165,86,458,253,382,272,352,567,278,2,441,776,783,105,843,748,677,844,160,580,573,647,943,898,41,349,42,940,286,424,243,700,989,684,870,645,822,944,987,750,81,542,483,529,769,233,57,595,799,842,100,143,510,788,609,648,572,565,73,38,18,854,902,666,775,476,508,752,607,159,645,998,721,583,47,166,655,100,379,147,656,79,14,166,332,915,727,56,77,113,691,315,285,315,34,640,579,288,18,676,417,834,344,108,398,722,382,326,14,242,582,878,686,419,449,427,210,906,866,540,257,285,176,347,681,653,726,804,371,677,96,460,588,134,842,329,875,820,724,115,823,656,271,795,765,41,788,43,361,16,504,839,668,145,72,443,358,327,549,135,209,690,483,36,821,694,601,400,807,420,121,864,318,3,159,608,337,225,278,946,355,968,122,476,433,566,530];
let pseudoIndex=0;

// for(let i=0;i<200;i++){
//     _pole.push(MyRand(0,1000));
// }
// console.log(_pole);

function MyPseudoRand100(_sanca){
    pseudoIndex++;
    if(pseudoIndex>=pseudoPole.length){
        pseudoIndex=0;
    }
    // console.log(pseudoPole[pseudoIndex]%100)
    return ((pseudoPole[pseudoIndex]%100) < _sanca?1:0);

    // return Math.round(Math.random()*(100))<_sanca?1:0;
}




const FJORDY=[
    {
        x:-144,
        y:51,
        radius:25,
        count:45,
        island_size:[2,2,2,3,3,4,5],
        seed:0,
    },
    {
        x:-124,
        y:84,
        radius:20,
        count:40,
        island_size:[2,2,2,3,3,4,5],
        seed:1,
    },
    {
        x:48,
        y:159,
        radius:10,
        count:20,
        island_size:[2,2,2,3,3,4],
        seed:2,
    },
    {
        x:93,
        y:78,
        radius:12,
        count:25,
        island_size:[2,2,2,3,3,3,4,4],
        seed:3,
    },
    {
        x:112,
        y:69,
        radius:12,
        count:20,
        island_size:[2,2,2,3,3,3,4,4],
        seed:3,
    },
    {
        x:231,
        y:92,
        radius:25,
        count:25,
        island_size:[2,2,2,3,3,3,4,4],
        seed:5,
    },
    {
        x:192,
        y:10,
        radius:18,
        count:30,
        island_size:[2,2,3,3,3,4,4],
        seed:4,
    },
    {
        x:175,
        y:-69,
        radius:30,
        count:40,
        island_size:[2,2,3,3,3,4,4],
        seed:4,
    },
    {
        x:-157,
        y:-70,
        radius:30,
        count:45,
        island_size:[2,2,3,3,3,4,4,5],
        seed:6,
    },
    {
        x:-79,
        y:-180,
        radius:20,
        count:35,
        island_size:[2,2,3,3,3,4],
        seed:7,
    },
];
const PREDEFINED_FJORD_GROUNDS=[];

function InitFjords(){

    for(let _o of FJORDY){
        pseudoIndex = _o.seed;
        for(let i = 0; i < _o.count; i++){
            pseudoIndex++;
            if(pseudoIndex>=pseudoPole.length){
                pseudoIndex=0;
            }
            let _x = _o.x + pseudoPole[pseudoIndex]%(_o.radius*2)-_o.radius;
            
            pseudoIndex++;
            if(pseudoIndex>=pseudoPole.length){
                pseudoIndex=0;
            }
            let _y = _o.y + pseudoPole[pseudoIndex]%(_o.radius*2)-_o.radius;
            
            let _r=_o.island_size[pseudoPole[pseudoIndex]%_o.island_size.length];
            for(let _xx=_x;_xx<_x+_r;_xx++){
                for(let _yy=_y;_yy<_y+_r;_yy++){
                    if(!PREDEFINED_FJORD_GROUNDS[_xx])PREDEFINED_FJORD_GROUNDS[_xx]=[];
                    PREDEFINED_FJORD_GROUNDS[_xx][_yy]=1;
                }
            }
        }
    }
}

let offlineTimeOnInit=0;
function GetOfflineGold(){
    return Mro(GetOfflineTimeKoef() * hrac.income_with_polution * (1+0.01*GetPlayerUpgradeValue(57)));
}

function GetOfflineTimeKoef(){
    // if(testVersion) return 0

    if(hrac.stats.clears<=1) return 0;
    if(offlineTimeOnInit) return offlineTimeOnInit;
    return 0; 
}

function GetMaxOfflineTimeSec(){
    // if(testVersion)hrac.upgrades[107]=4;
    // if(1) return 3600+75*60;
    //      1h         8x15 = 2h (gold)               2h gemy                      4x15= 1h (chips/gemy)
    return 3600 + GetPlayerUpgradeValue(4)*60 + GetPlayerUpgradeValue(30,0)*60 + GetPlayerUpgradeValue(107)*60;

}

let offline_food=undefined;
function GetOfflineFood(){
    if(offline_food!=undefined) return offline_food;
    if(hrac.foodIncome){
        let _hracFoonBefore=hrac.food;
        // let _hasU16=GetPlayerUpgradeValue(16);
        // let _hasU32=GetPlayerUpgradeValue(32);
        let _foodIncome = hrac.foodIncome;
        // _foodIncome = Mro(_foodIncome * (1+0.01*GetPlayerUpgradeValue(57)));
        let _cykluses = Mro(GetOfflineTimeKoef() * (1+0.01*GetPlayerUpgradeValue(57)));
        let _storage_min = GetMinimumFoodStorage();
        if(testVersion)_cykluses=150;
        
        for(let i=0;i<_cykluses;i++){
            let _foodSpoilPerc = GetFoodSpoilPerc();
            let _spoiledFood = 0;
            if(hrac.food > hrac.premium_food_storage){
                if(hrac.food > _storage_min){
                    _spoiledFood = (hrac.food-_storage_min) * _foodSpoilPerc;
                }
            }
            if(_spoiledFood<2)_spoiledFood=0;
            _spoiledFood = Mro(_spoiledFood);
            // console.log(-_spoiledFood+_foodIncome,_foodIncome)
            // let _spoiledGoodGold=0;
            // if(_hasU32){
            //     _spoiledGoodGold = Math.ceil(_hasU32*_spoiledFood);
            //     hrac.gold += _spoiledGoodGold;
            // }
            hrac.food-=_spoiledFood;
            hrac.food+=_foodIncome;

            // hrac.food+=_foodIncome;
            // if(hrac.food > _storage_min){
            //     if(_hasU16){
            //         hrac.food=_storage_min+Mro((hrac.food-_storage_min) * 0.99); //spoil
            //     }else{
            //         hrac.food=_storage_min+Mro((hrac.food-_storage_min) * (950+MyRand(-10,10))*0.001); //spoil
            //     }
            // }

            // console.log(PCislo(hrac.food))
        }
        offline_food = hrac.food-_hracFoonBefore;
        if(offline_food<0){
            offline_food=0;
        }
    }
    return offline_food;
}


let offline_lumber=undefined;
function GetOffline_lumber(){
    if(offline_lumber!=undefined) return offline_lumber;
    if(hrac.lumberIncome){
        
        let _pocet = Mro(GetOfflineTimeKoef() * hrac.lumberIncome * (1+0.01*GetPlayerUpgradeValue(57)));
        if(hrac.lumber+_pocet > GetMaxLumberStorage()){
            _pocet =GetMaxLumberStorage()-hrac.lumber;
            if(_pocet<0)_pocet=0;
        }
        offline_lumber=_pocet;
        return offline_lumber;
    }
    return 0;
}



let offline_rocks=undefined;
function GetOffline_rocks(){
    if(offline_rocks!=undefined) return offline_rocks;
    if(hrac.rocksIncome){
        
        // let _pocet = GetOfflineTimeKoef() * hrac.rocksIncome;
        let _pocet = Mro(GetOfflineTimeKoef() * hrac.rocksIncome * (1+0.01*GetPlayerUpgradeValue(57)));
        if(hrac.rocks+_pocet > GetMaxRocksStorage()){
            _pocet =GetMaxRocksStorage()-hrac.rocks;
            if(_pocet<0)_pocet=0;
        }
        offline_rocks=_pocet;
        return offline_rocks;
    }
    return 0;
}

let offline_steel=undefined;
function GetOffline_steel(){
    if(offline_steel!=undefined) return offline_steel;
    if(hrac.steelIncome){
        
        // let _pocet = GetOfflineTimeKoef() * hrac.steelIncome;
        let _pocet = Mro(GetOfflineTimeKoef() * hrac.steelIncome * (1+0.01*GetPlayerUpgradeValue(57)));
        if(hrac.steel+_pocet > GetMaxSteelStorage()){
            _pocet =GetMaxSteelStorage()-hrac.steel;
            if(_pocet<0)_pocet=0;
        }
        offline_steel=_pocet;
        return offline_steel;
    }
    return 0;
}

let offline_chips=undefined;
function GetOffline_chips(){
    if(offline_chips!=undefined) return offline_chips;
    if(hrac.chipsIncome){
        
        // let _pocet = GetOfflineTimeKoef() * hrac.chipsIncome;
        let _pocet = Mro(GetOfflineTimeKoef() * hrac.chipsIncome * (1+0.01*GetPlayerUpgradeValue(57)));
        if(hrac.chips+_pocet > GetMaxChipsStorage()){
            _pocet =GetMaxChipsStorage()-hrac.chips;
            if(_pocet<0)_pocet=0;
        }
        offline_chips=_pocet;
        return offline_chips;
    }
    return 0;
}

let offline_oil=undefined;
function GetOffline_oil(){
    if(offline_oil!=undefined) return offline_oil;
    if(hrac.oilIncome){
        
        // let _pocet = GetOfflineTimeKoef() * hrac.oilIncome;
        let _pocet = Mro(GetOfflineTimeKoef() * hrac.oilIncome * (1+0.01*GetPlayerUpgradeValue(57)));
        if(hrac.oil+_pocet > GetMaxOilStorage()){
            _pocet =GetMaxOilStorage()-hrac.oil;
            if(_pocet<0)_pocet=0;
        }
        offline_oil=_pocet;
        return offline_oil;
    }
    return 0;
}


function WithOfflineBonus(_amount){
    return Mro((1+hrac.offline_perc_bonus*0.01)*_amount);
}

function ClaimOfflineEarning(_manual){
    let _gold = WithOfflineBonus(GetOfflineGold());
    tickCount=1;
    ResetAntiClicker();
    let _lumber = WithOfflineBonus(GetOffline_lumber());
    let _rocks = WithOfflineBonus(GetOffline_rocks());
    let _steel = WithOfflineBonus(GetOffline_steel());
    let _chips = WithOfflineBonus(GetOffline_chips());
    let _oil = WithOfflineBonus(GetOffline_oil());
    let _eventFish=0;
    if(GetEventType()==EVENT_FISH_AND_SHIPS){
        _eventFish = Mro(WithOfflineBonus(GetOfflineTimeKoef() * hrac.event_fish_income * (1+0.01*GetPlayerUpgradeValue(57))));
    }
    let _offlineMilisecDiff = Date.now() - hrac.last_play_time;
    hrac.last_play_time =Date.now(); 
    hrac.last_online_time =Date.now(); 

    let _foodIncome=WithOfflineBonus(GetOfflineFood());
    
    if(hrac.offline_perc_bonus){
        let _foodBonus = _foodIncome-GetOfflineFood();
        AddMat(_foodBonus,'food',0);
    }
    
    //AddMat food sa takto nepridava lebo je v cykle...
    AddMat(_lumber,'lumber',0,0,0,1);
    AddMat(_rocks,'rocks',0);
    AddMat(_steel,'steel',0);
    AddMat(_chips,'chips',0);
    AddMat(_oil,'oil',0);
    AddGold(_gold,1,0);
    if(GetEventType()==EVENT_FISH_AND_SHIPS){
        if(_eventFish){
            AddMat(_eventFish,'event_fish',0);
            hrac.event_fish_total+=_eventFish;
        }
    }


    hrac.offline_perc_bonus=0;

    CloseBasicPopup();

    if(_offlineMilisecDiff>1000*60*60){
        no_ad_in_turns = 30;
    }else{
        if(no_ad_in_turns>25){
            ResetAdDelay();
        }
    }

    // console.log(_offlineMilisecDiff,_offlineMilisecDiff/1000,_offlineMilisecDiff/(1000*60))
    if(hrac.stats.towns_connected > 3){
        if(chests.length<MaxChests()+1 && _offlineMilisecDiff >= 1000*60*45){
            AddRandomChest();
        }
        if(chests.length<MaxChests()+1 && _offlineMilisecDiff >= 1000*60*60*3){
            AddRandomChest();
        }
        if(chests.length<MaxChests()+2 && _offlineMilisecDiff >= 1000*60*60*5){
            AddRandomChest();
        }
        if(chests.length<MaxChests()+3 && _offlineMilisecDiff >= 1000*60*60*10){
            AddRandomChest();
        }
    }

    let _por=1;
    AddFloatingText(window.innerWidth*0.5,130+TOP_PADDING,GetText('Offline earnings')+': '+PCisloB(_gold)+FloatingTextGoldIcon(),{dur:4});
    if(_foodIncome)AddFloatingText(window.innerWidth*0.5,130+TOP_PADDING+40*(_por++),GetText('Offline earnings')+': '+PCisloB(_foodIncome)+FloatingTextIcon('food'),{dur:4});
    if(_lumber)AddFloatingText(window.innerWidth*0.5,130+TOP_PADDING+40*(_por++),GetText('Offline earnings')+': '+PCisloB(_lumber)+FloatingTextIcon('lumber'),{dur:4});
    if(_rocks)AddFloatingText(window.innerWidth*0.5,130+TOP_PADDING+40*(_por++),GetText('Offline earnings')+': '+PCisloB(_rocks)+FloatingTextIcon('rocks'),{dur:4});
    if(_steel)AddFloatingText(window.innerWidth*0.5,130+TOP_PADDING+40*(_por++),GetText('Offline earnings')+': '+PCisloB(_steel)+FloatingTextIcon('steel'),{dur:4});
    if(_chips)AddFloatingText(window.innerWidth*0.5,130+TOP_PADDING+40*(_por++),GetText('Offline earnings')+': '+PCisloB(_chips)+FloatingTextIcon('chips'),{dur:4});
    if(_oil)AddFloatingText(window.innerWidth*0.5,130+TOP_PADDING+40*(_por++),GetText('Offline earnings')+': '+PCisloB(_oil)+FloatingTextIcon('oil'),{dur:4});
    if(_eventFish)AddFloatingText(window.innerWidth*0.5,130+TOP_PADDING+40*(_por++),GetText('Offline earnings')+': '+PCisloB(_eventFish)+FloatingTextIcon('event_fish'),{dur:4});

    if(!hrac.stats.offline_grab_count)hrac.stats.offline_grab_count=0;
    hrac.stats.offline_grab_count++;

    let _koefTownEarns = GetOfflineTimeKoef();
// alert(_koefTownEarns)
    for(let _x in myGridData) for(let _y in myGridData[_x]){
        if(myGridData[_x][_y] && myGridData[_x][_y].mesto){
            let _g = myGridData[_x][_y];
            _g.earn_clicks_available+=_koefTownEarns*PlusTownEarnClicks(_g);
            if(_g.earn_clicks_available>GetMaxTownEarnClicks(_g)){
                _g.earn_clicks_available=GetMaxTownEarnClicks(_g)
            }
        }
    }

    // SaveGame();
    hrac.claimedOfflineEarning=Math.max(1,_gold);
    hrac.last_action=Date.now();

    safeCaptureGameEvent('offline_earning_claimed', { 
        gold: _gold,
        lumber: _lumber,
        rocks: _rocks,
        steel: _steel,
        chips: _chips,
        oil: _oil,
        eventFish: _eventFish,
    });

    if(TryDailyRewardPopup()){
        
    }else{
        if(_manual){
            PlaySound('cash2');
        }
        saveInTicks=5;
        statsCalculatedInThisTick=1;
        anyActionDone=1;
        saveOrderIn9sec=8;
        hrac.stats.income_ticks++;
        if(TryShowPackagePopup()){

        }else{
            setTimeout(() => {
                TryToShowMilestoneRewards();
            }, 500);
        }
    }
    ShowHeader();
    RefreshSpecialOfferLeftBox();
}

let offlineEarnLoadings=0
async function ShowOfflineEarnings(_showLoading){
    if(!backendSaving){
        hrac.claimedOfflineEarning=1;
        ShowHeader();
        return false;
    }

    const oldServerTimeShift = hrac.dateServerShiftSeconds;
    if(_showLoading){
        PleaseWaitPopup();
        offlineEarnLoadings=0;
    }else{
        offlineEarnLoadings++;
    }
    let _loaded = await GetServerTimeShift();
    if(!_loaded){
        setTimeout(() => {
            ShowOfflineEarnings(0);
            let _dots = '';
            for(let i=0;i<offlineEarnLoadings;i++){
                _dots+='.';
            }
            SetInner('loading_dots',_dots);
        }, 5000);
        return false;
    }

    let _shiftDif = hrac.dateServerShiftSeconds-oldServerTimeShift;
    let _offlineTiimeSecs = Mro(Date.now()-hrac.last_play_time) * 0.001 - _shiftDif;
    if(_offlineTiimeSecs > GetMaxOfflineTimeSec()){
        _offlineTiimeSecs = GetMaxOfflineTimeSec();
    }
    offlineTimeOnInit = Mro((_offlineTiimeSecs / INCOME_SEC)*0.1);
    // console.log('time shifts: ',oldServerTimeShift,hrac.dateServerShiftSeconds,_shiftDif,_offlineTiimeSecs)
    if(offlineTimeOnInit<=5){
        offlineTimeOnInit=0;
    }

    let _gold = GetOfflineGold();
    // console.log(_gold)
    if(_gold){
        if(autoOfflineClaim){ //hrac.nastavenia.offlineEarningAutoClaim
            ClaimOfflineEarning();
        }else{

            let _out='';
            _out+='<div class="offline-overview">';
            _out+='<div class="offline-flex-container">';
            _out+='<div>+'+PMat(GetOfflineGold(),'gold')+'</div>';
            if(GetOfflineFood()){
                _out+='<div>+'+PMat(GetOfflineFood(),'food')+'</div>';
            }
            
            let _lumber = GetOffline_lumber();
            if(_lumber){
                _out+='<div>+'+PMat(_lumber,'lumber')+'</div>';
            }
            let _rocks = GetOffline_rocks();
            if(_rocks){
                _out+='<div>+'+PMat(_rocks,'rocks')+'</div>';
            }
            let _steel = GetOffline_steel();
            if(_steel){
                _out+='<div>+'+PMat(_steel,'steel')+'</div>';
            }
            let _chips = GetOffline_chips();
            if(_chips){
                _out+='<div>+'+PMat(_chips,'chips')+'</div>';
            }
            let _oil = GetOffline_oil();
            if(_oil){
                _out+='<div>+'+PMat(_oil,'oil')+'</div>';
            }
            if(GetEventType()==EVENT_FISH_AND_SHIPS){
                let _eventFish = Mro(GetOfflineTimeKoef() * hrac.event_fish_income * (1+0.01*GetPlayerUpgradeValue(57)));
                if(_eventFish){
                    _out+='<div>+'+PMat(_eventFish,'event_fish')+'</div>';
                }
            }
            _out+='</div>';//offline-flex-container
            if(hrac.offline_perc_bonus){
                _out+=Bold(FSize(26,'+'+PCislo(hrac.offline_perc_bonus)+'% '+GetTextCAPS('BONUS')));

            }
            _out+=BR+GetText3('Offline time: ')+PCislo(Mro(((Mro(Date.now()-hrac.last_play_time) * 0.001)-_shiftDif)/60))+' '+GetText('minutes');
            const _offlineMinutes = Mro(GetMaxOfflineTimeSec()/60);
            _out+=BR+GetText('Max offline time: {att1} minutes',_offlineMinutes);
            _out+=' ('+(Mro(GetMaxOfflineTimeSec()/360)*0.1).toFixed(1)+' hours)';
            _out+='</div>';
            
            _out+='<center>';
            _out+=BR+Button(GetTextCAPS('Claim'),'ClaimOfflineEarning(1);');//'<input type="button" value="claim">';
            if( _offlineMinutes>30 && !hrac.offline_perc_bonus){
                _out+=SPC + Button(GetTextCAPS('+{att1}% more',GetOfflineAdBonusPerc()),'OfflineBonusAdPopup();',{super_button:'teal'});//'<input type="button" value="claim">';
            }
            _out+='</center>'+BR;

            // if(testVersion)hrac.upgrades[57]=0;P
            if(HasLevel(10)){
                let _upsalesA=[];

                _upsalesA.push(CheckAndReturnUpgradeUpsale(4));
                _upsalesA.push(CheckAndReturnUpgradeUpsale(30));
                _upsalesA.push(CheckAndReturnUpgradeUpsale(57));
                _upsalesA.push(CheckAndReturnUpgradeUpsale(107));
                _upsalesA = _upsalesA.filter(u=>u!='');
                if(_upsalesA.length){
                    _out+='<div style="width:80%;margin-left:auto;margin-right:auto;">';
                    _out+=GetRandomItemFromArray(_upsalesA);                
                    _out+='</div>';
                }
            }
            const imgUrl = getAssetUrl(`public/images/art/comp.png`);
            DoBasicPopup(_out,GetText('Offline earnings')+'!'+BRBR+`<img style="width:70%;" src="${imgUrl}">`,{noclose:1,max_width:GetSmallerPopupWidth(100)});
            RefreshSuperClickerBonusButton();
        }
    }else{
        
        hrac.last_action=Date.now();
        if(!hrac.enviro && !finished_first_story){

            // let _out='<div style="text-aling:center;">';
            // _out+=Button('fullscreen','FirstStartButton();');
            // _out+='</div>';
            // if(enabledSaving){
            //     DoBasicPopup(_out,'welcome');
            // }
            DoFirstStoryPopups(1);
        }else{
            hrac.claimedOfflineEarning=1;
            ShowHeader();
        }
    }
    CloseLoadingPopup();
    ShowHeader();
    SetY('header_shadow',0);

        
    return true;
    // DoFirstStoryPopups(1);
}



function OfflineBonusAdPopup(){
    let _out='';
    _out+=GetText('Watch AD and increase your offline reward by {att1}%!',Bold(GetOfflineAdBonusPerc()));
    

    _out+=WatchOrSkipOut(16);

    DoSecondaryPopup(_out,GetText('Play AD'),{centerised:1, max_width: GetSmallerPopupWidth()});
}

function GetOfflineAdBonusPerc(){
    return 50;
    // if(HasLevel(50))return 30;
    // if(HasLevel(20))return 50;
    // if(HasLevel(10))return 75;
    // return 100;
}


let DAILY_GEMS=10;
let DAILY_SUPER_CLICKERS=10;
function IsDailyRewardReady(){
    return (hrac.stats.lastDailyRewardPickedDaysAfterReg<Math.floor(hrac.stats.daysAfterRegistration));
}

function TryDailyRewardPopup(){
    if(IsDailyRewardReady()){
        gamePaused=2;
        
        let _out=SpanID('daily_reward_is_visible','');
        if(KnowsSuperClickers()){
            _out+=FSize(40,'+ ')+Bold(FSize(48,PMat(DAILY_GEMS+GetPlayerUpgradeValue(31),2,45)))+BRBR;
            _out+=FSize(40,'+ ')+Bold(FSize(48,PMat(DAILY_SUPER_CLICKERS,6,45)))+BRBR;
        }else{
            _out+=FSize(40,'+ ')+Bold(FSize(48,PMat(2*DAILY_GEMS,2,45)))+BRBR;
        }

        _out+=Button(GetText('Claim'),'TakeDailyReward();',{color:'green'})+BRBR;

        if(HasLevel(10)){
            _out+=CheckAndReturnUpgradeUpsale(31);
        }
        PlaySound('dingdong2');

        DoBasicPopup(_out,GetTextCAPS('DAILY REWARD'),{noclose:1,centerised:1, max_width: GetSmallerPopupWidth()});
        return true;
    }
    return false;
}

function TakeDailyReward(){ //grab daily reward grabdailyreward claimdailyreward
    if(IsDailyRewardReady()){
        hrac.stats.lastDailyRewardPickedDaysAfterReg = Math.floor(hrac.stats.daysAfterRegistration);
        // console.log('daily reward taken')
        gamePaused=0;
        if(KnowsSuperClickers()){
            AddMat(DAILY_GEMS+GetPlayerUpgradeValue(31),'gems',0,2);
            AddMat(DAILY_SUPER_CLICKERS,'super_clickers',1,1,0,1);
        }else{
            AddMat(2*DAILY_GEMS,'gems',0,2);
        }
        hrac.stats.ads_broken_today=0;
        hrac.stats.ads_watched_today=0;
        hrac.stats.ads_discarded_today=0;
        hrac.stats.had_gold_ad_today=0;
        hrac.income_multiplier_taken_today=0;
        if(hrac.found_special_chest_today){
            hrac.found_special_chest_today=0;
            hrac.stats.searching_for_special_chest=0;
        }
        if(hrac.found_safe_today > hrac.taken_safe_today){
            if(MyRand100(60)){
                hrac.found_safe_today=0;
                hrac.taken_safe_today=0;
            }
        }else{
            hrac.found_safe_today=0;
            hrac.taken_safe_today=0;
        }
        hrac.stats.found_chests_today=0;
        hrac.harvested_gems_today=[];
        
        saveInTicks=5;
        statsCalculatedInThisTick=1;
        anyActionDone=1;
        saveOrderIn9sec=8;
        PlaySound('cash1');
        CloseBasicPopup();
        if(TryShowPackagePopup()){
            //ok tak package popup
        }else{
            setTimeout(() => {
                TryToShowMilestoneRewards();
            }, 500);
        }
        RefreshAdButton();
        // OpenFullscreen();    
    }else{
        CloseBasicPopup();
    }
}



let serverTime=0;
async function GetServerTimeShift(){
    try {
        serverTime = await getServerDate();
    } catch (error) {
        return false;
        // serverTime = Date.now();
    }
    const _secondsShift = Mro((Date.now()/1000)-(serverTime.getTime()/1000));
    hrac.dateServerShiftSeconds=_secondsShift;
    return true;
    // console.log('_hrac.dateServerShift',_secondsShift,hrac.dateServerShift,Date.now())
}

async function ReTryOfflineEarnings(){
    if(isAdCurrentlyWatched){
        return false;
    }
    hrac.claimedOfflineEarning=0;
    offlineTimeOnInit=0;
    offline_food=undefined;
    offline_lumber=undefined;
    offline_rocks=undefined;
    offline_steel=undefined;
    offline_chips=undefined;
    offline_oil=undefined;
    ResetAntiClicker();
    await ShowOfflineEarnings(1);
}
let visibleBooks=[];

function IsBookRead(_b){
    if(hrac.books?.includes(_b.x+'_'+_b.y)){
        _b.used=true;
        return true;
        
    }
    return false;
}


function IsThereABook(_grid){
    let _find=BOOKS.find(b=>b.x == _grid.x && b.y == _grid.y);
    if(_find){
        return _find
    }
    return null;
}

function ShowPage(_page,_silent){
    DoBasicPopup('<div id="book_container">'+GetBookInner(_page)+'</div>',GetText('End of world Diary'),{closefun: _silent?'':'CloseBook();'});
}
function ReadBook(_b,_grid){
    if(!_b.used && GetGridData(_b.x,_b.y) && !GetGridData(_b.x,_b.y).znecistenie){
        let _str = GetBookCoorString(_b);
        hrac.books.push(_str);
        if(hrac.book_pages_marked.includes(_str)){
            hrac.book_pages_marked= hrac.book_pages_marked.filter(x=>x && x!=_str);
        }
        visibleBooks=visibleBooks.filter(b=>b && (b.x!=_b.x || b.y!=_b.y));
        _b.used=true;
        delete(_grid.has_book);
        PlaySound('tadaa13');

        ShowPage(hrac.books.length);
        // DoBasicPopup('<div id="book_container">'+GetBookInner(hrac.books.length)+'</div>',GetText('End of world Diary'),{closefun: 'CloseBook();'});
        return true;
    }
    return false;
}
function CloseBook(){
    if(hrac.books.length==100){
        if(IsBookRead({x:-3,y:3})){
            return false;
        }
        let _grid = GetGridData(-3,3);
        _grid.has_book=1;
        visibleBooks.push({
            x:_grid.x,
            y:_grid.y
        });
        ScrollToXY(-3,3,1.3);
        BOOKS.push({
            x:-3,
            y:3
        });
    }
}

function GetBookStoryPicture(_page,_bookIfNothing){
    let _out='';
    if(_page==1){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_1.png')}">`);
    }else if(_page==5){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_2.png')}">`);
    }else if(_page==8){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_3.png')}">`);
    }else if(_page==12){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_4.png')}">`);
    }else if(_page==14){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_5.png')}">`);
    }else if(_page==16){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_6.png')}">`);
    }else if(_page==18){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_7.png')}">`);
    }else if(_page==22){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_8.png')}">`);
    }else if(_page==28){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_9.png')}">`);
    }else if(_page==34){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_10.png')}">`);
    }else if(_page==38){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_11.png')}">`);
    }else if(_page==52){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_12.png')}">`);
    }else if(_page==62){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_13.png')}">`);
    }else if(_page==69){
        _out+=Center(`<img style="width:100%;max-width:500px;" src="${getAssetUrl('public/images/story/story_14.png')}">`);

    }else if(_bookIfNothing){
        _out+=Center(GetTileImage('book',120,''));
        _out+=BRBR;
    }
    if(_bookIfNothing){
    }
    return _out;
}

function GetBookInner(_page){
    let _out='';
    _out+=GetBookStoryPicture(_page,1);
    if(hrac.books.length>0){
        if(_page >= BOOKS.length){
            _page = BOOKS.length;
        }

        _out+=Bold(GetText('Entry {att1}:',_page))+SPC+GetText('story__'+(_page-1))+BRBR;
        _out+='<div id="book_pager">';
        // if(hrac.books.length>5){
        //     if(_page > 1){
        //         _out+=ClickSpan('FIRST PAGE','ShowBookPage('+(1)+');');
        //     }else{
        //         _out+='FIRST PAGE';
        //     }
        //     _out+=' :: ';
        // }
        if(hrac.books.length>2){
            if(_page > 1){
                _out+=ClickSpan(GetTileImage('ui/upsalebut',40,'arrow_left'),'ShowBookPage('+(_page-1)+');');
            }else{
                _out+=GetTileImage('ui/upsalebut',40,'arrow_left disabled');
            }
            _out+=SPC+SPC+SPC+SPC;
            if(_page < hrac.books.length){
                _out+=ClickSpan(GetTileImage('ui/upsalebut',40,'arrow_right'),'ShowBookPage('+(_page+1)+');');
            }else{
                _out+=GetTileImage('ui/upsalebut',40,'arrow_right disabled');
            }
            _out+=BR;

        }
    }else{
        _out+=BRBR+Center(GetText('No diary found yet'));

    }
    _out+='</div>';
    return _out;
}

setTimeout(() => {
    
}, 1500);

function ShowBookPage(_page){
    PlaySound('book_listing');
    SetInner('book_container',GetBookInner(_page));
}



function WholeStory(){
    let _out='';
    if(hrac.books.length>0){
        // _out+=Center(GetTileImage('book',100,''));
        for(let i = 1; i <= hrac.books.length;i++){
            _out+=GetBookStoryPicture(i,0);
            _out+='<div style="padding-top:-5px;padding-bottom:40px;">';
            _out+=Bold(GetText('Entry {att1}:',i))+SPC+ GetText('story__'+(i-1))+BRBR;
            _out+='</div>';
        }
        _out+=BR;
        if(hrac.books.length < BOOKS.length){
            _out+=Center(Bold(GetText('story_ender1'))+BRBR+Button('Find Next Page','ShowPageShop();'));
            
        }else{
            _out+=Center(Bold(GetText('story_ender2')));
        }
        
    }else{
        _out+=BRBR+Center(GetText('No diary found yet'));
    }
    return _out+BRBR;
}

function ShowPageShop(){
    if(!gebi('packs_container')){
        // CloseBasicPopup();
        ClickBottomMenu(3);
        StartAnimatedScrollTo('bottomMenuPopup_okno_in_2',4000,150);//tutorialscroll
    }
}


const BOOKS=[
    {
        x:-1,
        y:6,
        tile:'broken_city_small',
    },
    {
        x:13,
        y:4,
    },
    {
        x:-6,
        y:-3,
        tile:'broken_city_small',
    },
    {
        x:0,
        y:-12,
    },
    {
        x:3,
        y:14,
    },
    {
        x:41,
        y:-4,
    },{
        x:5,
        y:-1,
        tile:'forest',
    },
    {
        x:8,
        y:-5,
        ignore:1,
    },
    {
        x:-11,
        y:15,
        tile: 'airplane_wreck'
    },
    {
        x:-25,
        y:18,
    },
    {
        x:-13,
        y:-10,
    },
    {
        x:-43,
        y:14,
    },{
        x:9,
        y:37,
    },
    {
        x:63,
        y:43,
    },
    {
        x:-53,
        y:29,
    },
    {
        x:1,
        y:-28,
    },{
        x:1,
        y:26,
        tile:'ship_wreck'
    },{
        x:-76,
        y:107,
    },{
        x:18,
        y:-24,
    },{
        x:-39,
        y:-7,
    },{
        x:-70,
        y:21,
    },{
        x:-71,
        y:33,
    },{
        x:-21,
        y:-24,
    },{
        x:-57,
        y:0,
    },{
        x:31,
        y:48,
    },{
        x:43,
        y:124,
    },{
        x:89,
        y:38,
    },{
        x:51,
        y:-56,
    },{
        x:-58,
        y:-86,
    },{
        x:12,
        y:-80,
    },{
        x:-129,
        y:88,
    },{
        x:191,
        y:21,
    },{
        x:164,
        y:31,
    },{
        x:12,
        y:148,
    },{
        x:-53,
        y:71,
    },{
        x:-87,
        y:85,
    },{
        x:63,
        y:-122,
    },{
        x:96,
        y:-28,
    },{
        x:24,
        y:91,
    },{
        x:-111,
        y:-119,
    },{
        x:-95,
        y:45,
    },{
        x:-124,
        y:67,
    },{
        x:-177,
        y:16,
    },{
        x:-189,
        y:80,
    },{
        x:-157,
        y:206,
    },{
        x:-68,
        y:147,
    },{
        x:27,
        y:165,
    },{
        x:-7,
        y:170,
    },{
        x:-5,
        y:181,
    },{
        x:46,
        y:214,
    },{
        x:80,
        y:193,
    },{
        x:91,
        y:116,
    },{
        x:106,
        y:175,
    },{
        x:52,
        y:157,
    },{
        x:191,
        y:168,
    },{
        x:186,
        y:111,
    },{
        x:209,
        y:100,
    },{
        x:181,
        y:81,
    },{
        x:152,
        y:63,
    },{
        x:109,
        y:73,
    },{
        x:212,
        y:-38,
    },{
        x:168,
        y:-41,
    },{
        x:191,
        y:-72,
    },{
        x:204,
        y:-99,
    },{
        x:120,
        y:-123,
    },{
        x:184,
        y:-154,
    },{
        x:131,
        y:-189,
    },{
        x:191,
        y:-201,
    },{
        x:34,
        y:-158,
    },{
        x:13,
        y:-211,
    },{
        x:-66,
        y:-195,
    },{
        x:-84,
        y:-177,
    },{
        x:-144,
        y:-50,
    },{
        x:-199,
        y:-79,
    },{
        x:-179,
        y:-136,
    },{
        x:-155,
        y:-190,
    },{
        x:-209,
        y:-181,
    },{
        x:-53,
        y:-130,
    },{
        x:142,
        y:142,
    },{
        x:-57,
        y:193,
    },{
        x:-164,
        y:133,
    },{
        x:-158,
        y:1,
    },{
        x:99,
        y:-75,
    },{
        x:-193,
        y:159,
    },{
        x:149,
        y:161,
    },{
        x:-46,
        y:-35,
    },{
        x:-62,
        y:-42,
    },{
        x:-48,
        y:-52,
    },{
        x:-30,
        y:-54,
    },{
        x:-16,
        y:-50,
    },{
        x:14,
        y:-41,
    },{
        x:-89,
        y:-11,
    },{
        x:-96,
        y:-39,
    },{
        x:-23,
        y:55,
    },{
        x:79,
        y:-4,
    },{
        x:47,
        y:-27,
    },{
        x:35,
        y:28,
    },{
        x:-17,
        y:97,
    },{
        x:-25,
        y:-78,
    },{
        x:-79,
        y:36,
    },
    
    
    
    
];
for(let _b of BOOKS){
    _b.center_dist = Mro(GetRealDistance(0,0,_b.x,_b.y));
}
BOOKS.sort((a,b)=>a.center_dist - b.center_dist);


function GetBookCoorString(_coor){
    return _coor.x+'_'+_coor.y;
}

function FindNewStoryPage(){
    for(let _coor of BOOKS){
        if((!hrac.books || !hrac.books.includes(GetBookCoorString(_coor)))&& !hrac.book_pages_marked.includes(GetBookCoorString(_coor))){
            return _coor;
        }
    }
    return null;
}

function CheckForBook(_grid){
    let _book=IsThereABook(_grid);
    if(_book && !IsBookRead(_book)){
        _grid.has_book=1;
        visibleBooks.push({
            x:_grid.x,
            y:_grid.y
        });
        let _str = GetBookCoorString(_book);
        if(hrac.book_pages_marked.includes(_str)){
            hrac.book_pages_marked= hrac.book_pages_marked.filter(x=>x && x!=_str);
        }    
    }
}


function FirstStartButton(){
    // OpenFullscreen();
    gebi('intro_div').classList.add('fadeOut')
    // HideDiv('intro_div');

    CloseBasicPopup();
    hrac.claimedOfflineEarning=1;
    hrac.town_names = [GetText('MAIN TOWN')];
    tickCount=1;
    ScrollToMainCity(2,1);
    ShowJS('header');
    RefreshHeader();
    delete(myGridData[0][-1]);
    delete(myGridData[0][1]);
    delete(myGridData[1][0]);
    delete(myGridData[-1][0]);
    myGridData[0][0].klikov = 0;
    camera.zoom = zoomScale2=zoomScale=1.25;
    InitTowns();
    InitCamera();
    camera.desiredzoom=1.75;
    // DoPopupWithOptions({text:'Lets search for <b>another Bunker</b>!',kde:'bottomMenuPopup',refresh_id: 'first_quest',no_bg:1,at_bottom:1,noclose:1});
    setTimeout(() => {
        InitAllGridNeighbours();
    }, 700);
    setTimeout(() => {
        HideDiv('intro_div');
    }, 2000);
    finished_first_story=true;
}

let sotry_button_ready=true;
let storyContinueTO=0;
function DoFirstStoryPopups(_ktory){
    if(_ktory==5){
        clearTimeout(storyContinueTO);
        clearTimeout(printIntroTextTO);
        gebi('storyLight').classList.add('storyLightAnimClass');
        setTimeout(() => {
            FirstStartButton();
        }, 1000);
        // return false;
        return false;
    }
    let _out='';
    let _imgSrc='';
    let _class='';
    let _text='';
    if(_ktory==1){
        _imgSrc=`src="${getAssetUrl('public/images/stories/story'+_ktory+'.jpg')}"`;
        _text=GetText('The nuke was dropped.');
        _class='animatedStory2';
    }
    if(_ktory==2){
        _imgSrc=`src="${getAssetUrl('public/images/stories/story'+_ktory+'.jpg')}"`;
        _text=GetText('The world is broken.');
        _class='animatedStory1';
    }
    if(_ktory==3){
        _imgSrc=`src="${getAssetUrl('public/images/stories/story'+_ktory+'.jpg')}"`;
        _text=GetText('Years passed.');
        _class='animatedStory2';
    }
    if(_ktory==4){
        _imgSrc=`src="${getAssetUrl('public/images/stories/story'+_ktory+'.jpg')}"`;
        _text=GetText("Now it's time to go out!")+'|'+GetText('And restore the world!');
        _class='animatedStory4';
        _butLabel=GetText('Start');
    }else{
        _butLabel=GetText('Continue');
    }

    // if(_ktory==5){
    //     _imgSrc='src="public/images/stories/story'+_ktory+'.png"';
    //     _text=GetText('And restore the world!');
    //     _butLabel=GetText('Start');
    // }else{
    //     _butLabel=GetText('Continue');
    // }
    
    _out+='<div id="story_image_container">';
    _out+='<img id="story_image" class="'+_class+'" '+_imgSrc+'>';
    _out+='<img id="story_image_hack"  '+_imgSrc+'>';
    _out+='</div>';
    _out+='<div id="storyLight"></div>';

    _out+='<div id="story_container" style="'+(_ktory==4?'min-height: 98px;':'')+'"><div id="story_container_in"></div></div>';
    _out+='<div id="story_button" onclick="if(sotry_button_ready)DoFirstStoryPopups('+(_ktory+1)+');">'+_butLabel+'</div>';
    ShowJS('intro_div');
    SetInner('intro_div',_out);
    sotry_button_ready=false;
    setTimeout(() => {
        sotry_button_ready=true;
    }, 500);
    
    beginningOfStoryText=0;
    clearTimeout(printIntroTextTO);
    printIntroTextTO = setTimeout(() => {
        beginningOfStoryText=0;
        PrintIntroText(_text);
    }, _ktory==4?500:1200);

    clearTimeout(storyContinueTO);
    clearTimeout(showStoryButTO);
    storyContinueTO = setTimeout(() => {
        if(finished_first_story) return false;
        DoFirstStoryPopups(_ktory+1);
    }, _ktory==4?11500:9500);
    storyIndex=_ktory;

    // DoBasicPopup(_out,'',{refresh_id:'first_story',noclose:1,max_height_vh:90});
}

let finished_first_story=false;
let printIntroTextTO=0;
let showStoryButTO=0;
let beginningOfStoryText=0;
let storyIndex=0;
let voiceOverTick=0;
function PrintIntroText(_text,_por){
    if(finished_first_story) return false;
    clearTimeout(printIntroTextTO);
    let _delay = 140;
    if(!_por){
        _por=0;
        voiceOverTick=0;
    }
    voiceOverTick++;

    if(voiceOverTick==4){
        if(storyIndex==1)PlaySound('story_vo_1');
        if(storyIndex==2)PlaySound('story_vo_2');
        if(storyIndex==3)PlaySound('story_vo_3');
        if(beginningOfStoryText>0){
            if(storyIndex==4)PlaySound('story_vo_5');
        }else{
            if(storyIndex==4)PlaySound('story_vo_4');
        }
    }


    if(_por==1){
        let _img = GetRect('story_image');
        // gebi('story_image').style.transition = '15s';
        if(!_img.width){
            _por-=1;
        }else{
            // gebi('story_image').style.left = (-_img.width+window.innerWidth)+'px';
        }
    }
    if(_por){
        SetInner('story_container_in',_text.substr(beginningOfStoryText,_por-beginningOfStoryText))
    }
    if(_text[_por]==' '){
        _por++;
    }
    if(_text[_por]=='|'){
        beginningOfStoryText=_por+1;
        voiceOverTick=0;
        _delay=1500;
    }
    if(_por>=_text.length){
        // console.log('TERAZ!')
        showStoryButTO = setTimeout(() => {
            gebi('story_button').style.animationName = 'fadeIN';
            
        }, 500);
        return true;
    }
    printIntroTextTO = setTimeout(() => {
        PrintIntroText(_text,_por+1);
    }, _delay);

}


function InitBooks(){
    if(!Array.isArray(hrac.books)){hrac.books=[];}
    for(let _b of BOOKS)if(_b && !_b.used){
        if(IsBookRead(_b)){
            continue;
        }
        let _x = _b.x;
        let _y = _b.y;
        
        let _grid= GetGridData(_x,_y);
        if(_grid && !_grid.znecistenie){
            _grid.has_book = 1;
            visibleBooks.push({
                x:_grid.x,
                y:_grid.y
            });
        }
    }

}

function BookStrToObj(_str){
    if(_str){
        let _o = _str.split('_');
        let _p={
            x:_o[0]*1,
            y:_o[1]*1,
        }
        return _p;
    }
    return null;
}




















function GetArtifactGoldIncome(_a){
    if(_a.gold_incomes){
        let _which = 0;
        for(let _page in _a.gold_incomes){
            if(_page <= hrac.books.length){
                _which = _page;
            }
        }
        return _a.gold_incomes[_which];
    }
    return 75;
}
function GetArtifactText(_a){
    let _out='';
    let _outBookPages='';
    if(_a.description){
        _out+= GetText(_a.description);
    }else if(_a.descriptions){
        let _which = 0;
        let _index = 0;
        let _maxIndex=0;
        let _pagesToClick=[];
        for(let _page in _a.descriptions){
            if(_page <= hrac.books.length){
                _which = _page;
                _index++;
                if(_page>0){
                    _pagesToClick.push(_page);
                }
            }
            _maxIndex++;

        }
        _out+=GetText('artefact_desc_'+_a.id+'_'+_a.descriptions[_which]);

        if(_which>1){
            _outBookPages+=BRBR+GetText("You have gained more information about this location by progressing to the following steps in the story:");
            // _outBookPages+=_pagesToClick;
            // console.log(_pagesToClick)
            _outBookPages+='<ul style="line-height:24px;">';
            for(let _page of _pagesToClick){
                _outBookPages+='<li>'+GetText("Story Page")+': '+ClickSpan(_page,'ShowPage('+_page+',1);')+'</li>';
            }
            _outBookPages+='</ul>';
        }

        if(_index < _maxIndex){
            _outBookPages+=BRBR+GetText("Progress in the story to reveal more information about this tile.");
        }else{
            
        }
    }
    _out+=BR+GetText3("Passive gold income:")+Bold(PMat(GetArtifactGoldIncome(_a),'gold'));
    if(_outBookPages){
        _out+=_outBookPages;
    }
    return _out;
    
}

function TryShowArtifactFoundInfo(_grid){
    if(_grid.artifact){
        AddPing(_grid.x,_grid.y,0,300,1500,'#debef4');
        AddPing(_grid.x,_grid.y,0,600,1200,'#debef4');
        AddFloatingTextToGrid(_grid,'Artifact found!','#debef4',0,5,24);
        PlaySound('artifact');
    }
}


const ARTIFACTS=[
    {
        id:1,
        name: 'Sky Scraper Ruin',
        descriptions: {
            0: 1,//FINAL
            101: 2,
        },
        x:-3,
        y:3,
        type:1,
        gold_incomes:{
            0: 75,
            101: 5000,
        }
    },
    {
        id:2,
        name: 'Crashed Military Plane',
        descriptions: {
            0: 1,
            25: 2,
            50: 3,
            101: 4,
        },
        x:-64,//final
        y:-6,
        type:2,
        gold_incomes: {
            0: 200,
            25: 250,
            50: 500,
            101: 2000,
        },
    },
    {
        id:3,
        name: 'Old Military Harbor',
        descriptions: {
            0: 1,
            25: 2,
            50: 3,
        },
        water:1,
        x:-81,//final
        y:36,
        type:3,
        gold_incomes: {
            0: 300,
            25: 600,
            50: 900,
        },
    },
    {
        id:4,
        name: 'Derelict Broadcast Tower',
        descriptions: {
            0: 1,
            47: 2,
            61: 3,
        },
        x:53,//final
        y:-23,
        type:4,
        gold_incomes: {
            0: 350,
            47: 900,
            61: 1500,
        },
    },
    {
        id:5,
        name: 'Old Military Base',
        descriptions: {
            0: 1,
            67: 2,
        },
        x:74,//FINAL
        y:104,
        type:5,
        gold_incomes: {
            0: 400,
            67: 1800,
        },
    },
    {
        id:6,
        name: 'Strangely Populated Bunker',
        descriptions: {
            0: 1,
            34: 2,
            101: 3,
        },
        x:-26,//final
        y:-74,
        type:6,
        gold_incomes: {
            0: 450,
            34: 800,
            101: 2500,
        },

    },
    {
        id:7,
        name: 'Broken Door',
        description: "An immensely thick steel door, stuck in the ground. How did this get here?",
        x:178,
        y:-64,
        type:7,
        gold_incomes: {
            0: 500
        }
    },
    {
        id:8,
        name: 'Strange Ship Wreck',
        description: "A ship wreck. It wouldn't be all that remarkable if it wasn't for the fact that it's stuck in the middle of a desert. Quite far from the nearest shore.",
        x:151,
        y:209,
        type:8,
        gold_incomes: {
            0: 750
        }
    },
    {
        id:9,
        name: 'Seed Vault',
        description: "An odd large building, built into the side of a mountain. Inside we found a storage facility for various types of seeds.",
        x:-187,
        y:-104,
        type:9,
        gold_incomes: {
            0: 1500
        }

    },
    {
        id:10,
        name: 'Victory Arch',
        description: "A truly monumental piece of architecture.",
        x:-126,
        y:151,
        type:10,
        gold_incomes: {
            0: 2000
        }
    },
];


const GOLD_ZONES=[
    {
        x:-73,
        y:105,
        radius:2
    },
    {
        x:-30,
        y:-68,
        radius:2
    },
    {
        x:-54,
        y:15,
        radius:1.5
    },
    {
        x:99,
        y:238,
        radius:2
    },
    {
        x:49,
        y:82,
        radius:2
    },
    {
        x:181,
        y:88,
        radius:2.5
    },
    {
        x:204,
        y:-26,
        radius:2.5
    },
    {
        x:169,
        y:-247,
        radius:2.5
    },
    {
        x:-159,
        y:-107,
        radius:2.5
    },
    {
        x:-177,
        y:-249,
        radius:3
    },
    {
        x:-237,
        y:-12,
        radius:3
    },
    {
        x:-174,
        y:248,
        radius:3
    },
    {
        x:135,
        y:-118,
        radius:1,
        randomness:1005
    },
    {
        x:142,
        y:142,
        radius:1,
        randomness:1005
    },
    
];






const WATER_OIL_ZONES=[
    {
        x:128,
        y:157,
        radius:2
    },
    {
        x:217,
        y:80,
        radius:2
    },
    {
        x:-246,
        y:172,
        radius:2.5
    },
    {
        x:192,
        y:213,
        radius:2.5
    },
    {
        x:82,
        y:-58,
        radius:1.5
    },
    {
        x:-245,
        y:20,
        radius:2.5
    },
    {
        x:-217,
        y:-161,
        radius:2
    },
    {
        x:-102,
        y:-192,
        radius:2
    },
    {
        x:-30,
        y:149,
        radius:1.2
    },
    {
        x:-111,
        y:-14,
        radius:1.2
    },
    {
        x:153,
        y:-3,
        radius:1.2
    },
    {
        x:60,
        y:248,
        radius:1.2
    },
];








const FISH_ZONES=[
    {
        x:-32,
        y:74,
        radius:2.5
    },
    {
        x:-33,
        y:-56,
        radius:1.5
    },
    {
        x:48,
        y:27,
        radius:1.5
    },
    {
        x:71,
        y:60,
        radius:1.5
    },
    {
        x:143,
        y:107,
        radius:2.5
    },
    {
        x:204,
        y:49,
        radius:1.5
    },
    {
        x:142,
        y:-53,
        radius:2
    },
    {
        x:-114,
        y:30,
        radius:2
    },
    {
        x:-237,
        y:-190,
        radius:2
    },
    {
        x:-248,
        y:-248,
        radius:3
    },
    {
        x:75,
        y:166,
        radius:3
    },
    {
        x:-54,
        y:183,
        radius:3
    },{
        x:-175,
        y:-77,
        radius:3
    },
    
];








const SMALL_GOLD_ZONES=[
    {
        x:-46,
        y:14,
    },
    {
        x:-96,
        y:46,
    },
    {
        x:24,
        y:69,
    },
    {
        x:97,
        y:81,
    },
    {
        x:247,
        y:92,
    },
    {
        x:182,
        y:231,
    },
    {
        x:118,
        y:210,
    },
    {
        x:85,
        y:211,
    },
    {
        x:-45,
        y:142,
    },
    {
        x:-114,
        y:249,
    },
    {
        x:-165,
        y:137,
    },{
        x:98,
        y:-27,
    },
    {
        x:178,
        y:-73,
    },
    {
        x:148,
        y:-92,
    },
    {
        x:87,
        y:-140,
    },
    {
        x:219,
        y:-223,
    },
    {
        x:233,
        y:-230,
    },
    {
        x:220,
        y:-237,
    },
    {
        x:-87,
        y:-247,
    },
    {
        x:-69,
        y:-129,
    },
    {
        x:-78,
        y:-74,
    },
    {
        x:-154,
        y:-74,
    },
    {
        x:-236,
        y:-102,
    },
    {
        x:-238,
        y:-149,
    },
    {
        x:-223,
        y:-185,
    },
    {
        x:47,
        y:-149,
    },
    {
        x:-143,
        y:-185,
    },
    {
        x:-32,
        y:201,
    },
    {
        x:36,
        y:197,
    },
    {
        x:87,
        y:150,
    },
    {
        x:128,
        y:122,
    },
    {
        x:131,
        y:128,
    },
    {
        x:122,
        y:126,
    },
    {
        x:137,
        y:41,
    },
    
    
    
];

const GEM_FIELDS=[
    {
        x:-8,
        y:8,
    },
    {
        x:244,
        y:246,
    },
    {
        x:240,
        y:57,
    },
    {
        x:131,
        y:-29,
    },
    {
        x:206,
        y:-189,
    },
    {
        x:-32,
        y:-204,
    },
    {
        x:-176,
        y:-193,
    },
    {
        x:-214,
        y:-43,
    },
    {
        x:-143,
        y:176,
    },
    {
        x:-38,
        y:119,
    },
];








const BROKEN_SHIP_ZONES=[
    {
        x:43,
        y:126,
        radius:4
    },
    {
        x:34,
        y:247,
        radius:5
    },
    {
        x:165,
        y:151,
        radius:4
    },
    {
        x:242,
        y:29,
        radius:4.5
    },
    {
        x:116,
        y:-46,
        radius:2.5
    },
    {
        x:-100,
        y:100,
        radius:2.5
    },
    {
        x:-213,
        y:22,
        radius:2.5
    },
    {
        x:-119,
        y:7,
        radius:2.5
    },
    {
        x:-245,
        y:-211,
        radius:3.5
    },
    {
        x:-216,
        y:191,
        radius:3.5
    },
    {
        x:248,
        y:235,
        radius:4.5
    },
];




const SUPER_COPPER_ZONES=[
    {
        x: 110,
        y: -71
    },
    {
        x: 207,
        y: 4
    },
    {
        x: 108,
        y: 174
    },
    {
        x: 224,
        y: 170
    },
    {
        x: 141,
        y: -172
    },
    {
        x: 249,
        y: -104
    },
    {
        x: 113,
        y: -250
    },
    {
        x:8,
        y:-128,
    },{
        x:-131,
        y:-44,
    },{
        x:-92,
        y:-175,
    },
    {
        x:-245,
        y:-171,
    },{
        x:-236,
        y:-250,
    },{
        x:-178,
        y:18,
    },
    {
        x:-250,
        y:97,
    },
    {
        x:-198,
        y:231,
    },
    {
        x:-107,
        y:201,
    },
    {
        x:-23,
        y:165,
    },
    {
        x:-89,
        y:113,
    },
    {
        x:116,
        y:247,
    },
    {
        x:35,
        y:-242,
    },
    {
        x:124,
        y:65,
    },
];

const EXTRA_BUNKERS=[
    {
        x:210,
        y:99,
        t2:{
            x:212,
            y:100,
        },
        t3:{
            x:209,
            y:101,
        },
        t4:{
            x:211,
            y:102,
        },
    },
    
    {
        x:163,
        y:30,
        t2:{
            x:165,
            y:32,
        },
        t3:{
            x:164,
            y:34,
        },
        t4:{
            x:162,
            y:32,
        },
    },



    {
        x:225,
        y:-125,
        t2:{
            x:228,
            y:-124,
        },
        t3:{
            x:226,
            y:-123,
        },
        t4:{
            x:227,
            y:-126,
        },
    },
    
    


    {
        x:-77,
        y:-109,
        t2:{
            x:-75,
            y:-110,
        },
        t3:{
            x:-75,
            y:-108,
        },
        t4:{
            x:-73,
            y:-109,
        },
    },
    
    




    {
        x:-125,
        y:-26,
        t2:{
            x:-122,
            y:-25,
        },
        t3:{
            x:-126,
            y:-23,
        },
        t4:{
            x:-123,
            y:-22,
        },
    },
    





    {
        x:-129,
        y:88,
        t2:{
            x:-127,
            y:87,
        },
        t3:{
            x:-125,
            y:88,
        },
        t4:{
            x:-127,
            y:90,
        },
    },
    




    {
        x:-235,
        y:-147,
        t2:{
            x:-233,
            y:-146,
        },
        t3:{
            x:-236,
            y:-145,
        },
        t4:{
            x:-234,
            y:-144,
        },
    },
    





    {
        x:55,
        y:-184,
        t2:{
            x:58,
            y:-185,
        },
        t3:{
            x:58,
            y:-183,
        },
        t4:{
            x:56,
            y:-182,
        },
    },
    




    {
        x:-59,
        y:248,
        t2:{
            x:-57,
            y:249,
        },
        t3:{
            x:-55,
            y:250,
        },    
        t4:{
            x:-60,
            y:250,
        },
    },



    {
        x:-243,
        y:216,
        t2:{
            x:-241,
            y:217,
        },
        t3:{
            x:-242,
            y:219,
        },
        t4:{
            x:-244,
            y:218,
        },
    },
];



const BROKEN_TOWNS_ZONES=[
    {
        x:-124,
        y:-24,
        ignore_air:true,
        radius:2.5
    },
    {
        x:210,
        y:100,
        ignore_air:true,
        radius:2.5
    },
    {
        x:56,
        y:-183,
        ignore_air:true,
        radius:3.5
    },{
        x:-56,
        y:247,
        ignore_air:true,
        radius:3.5
    },{
        x:23,
        y:187,
        radius:2.5
    },
    {
        x:31,
        y:48,
        radius:2.5
    },{
        x:-21,
        y:-24,
        radius:2.5
    },
    {
        x:-71,
        y:33,
        radius:2.5
    },
    {
        x:-57,
        y:0,
        radius:2.5
    },
    {
        x:51,
        y:-56,
        radius:3
    },{
        x:12,
        y:-80,
        radius:2.5
    },
    {
        x:-58,
        y:-86,
        radius:2.5
    },
    {
        x:-41,
        y:-152,
        radius:2.5
    },
    {
        x:-109,
        y:-170,
        radius:2.5
    },
    {
        x:-111,
        y:-119,
        radius:2.5
    },
    {
        x:231,
        y:-221,
        radius:2.5
    },
    {
        x:216,
        y:-231,
        radius:2.5
    },
    {
        x:170,
        y:-146,
        radius:2.5
    },
    {
        x:234,
        y:-52,
        radius:2.5
    },
    {
        x:191,
        y:21,
        radius:2.5
    },
    {
        x:89,
        y:38,
        radius:2.5
    },
    {
        x:76,
        y:111,
        radius:2.5
    },
    {
        x:90,
        y:207,
        radius:2.5
    },
    {
        x:179,
        y:235,
        radius:2.5
    },
    {
        x:241,
        y:211,
        radius:2.5
    },
    {
        x:229,
        y:142,
        radius:2.5
    },
    {
        x:-21,
        y:236,
        radius:2.5
    },
    {
        x:-143,
        y:228,
        radius:2.5
    },
    {
        x:-158,
        y:133,
        radius:2.5
    },
    {
        x:-94,
        y:147,
        radius:2.5
    },
    {
        x:-199,
        y:79,
        radius:2.5
    },
    {
        x:-236,
        y:247,
        radius:5.5
    },{
        x:-175,
        y:13,
        radius:2.5
    },
    {
        x:-175,
        y:-43,
        radius:2.5
    },
    {
        x:-222,
        y:-46,
        radius:2.5
    },
    {
        x:-205,
        y:-94,
        radius:2.5
    },
    {
        x:140,
        y:-208,
        radius:2.5
    },
    {
        x:12,
        y:-247,
        radius:2.5
    },
    {
        x:63,
        y:-122,
        radius:2.5
    },
];

const MANY_CHESTS_ZONES=[
    {
        x:95,
        y:89,
        radius:1.25
    },{
        x:-58,
        y:-26,
        radius:1.25
    },{
        x:-39,
        y:-112,
        radius:1.25
    },{
        x:-136,
        y:-147,
        radius:1.25
    },{
        x:100,
        y:-180,
        radius:1.25
    },{
        x:244,
        y:-178,
        radius:1.25
    },{
        x:188,
        y:121,
        radius:1.25
    },{
        x:-77,
        y:218,
        radius:1.25
    },{
        x:-169,
        y:75,
        radius:1.25
    },{
        x:-248,
        y:-41,
        radius:1.25
    },{
        x:0,
        y:-178,
        radius:1.25
    },{
        x:-208,
        y:-209,
        radius:1.25
    },{
        x:248,
        y:129,
        radius:1.25
    },{
        x:249,
        y:248,
        radius:1.25
    },{
        x:221,
        y:-62,
        radius:1.25
    },{
        x:-156,
        y:49,
        radius:1.25
    },{
        x:0,
        y:53,
        radius:1.25
    },{
        x:167,
        y:-52,
        radius:1.25
    },
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
];



const PREDDEFINED_TILES=[];
function IsPreDefinedTile(_x,_y){
    if(_x==-13 && _y==-16) return 'copper_field';
    if(_x==-5 && _y==3) return 'mountain';
    if(_x==-3 && _y==-4) return 'broken_city_big';
    if(_x==-3 && _y==0) return 'hill';
    if(_x==-2 && _y==-1) return 'water';
    if(_x==-1 && _y==3) return 'mountain';
    if(_x==-1 && _y==0) return 'forest';
    if(_x==-1 && _y==1) return 'forest';
    if(_x==0 && _y==4) return 'mesto';
    if(_x==0 && _y==-1) return 'grass';
    if(_x==0 && _y==1) return 'grass';
    if(_x==0 && _y==2) return 'forest';
    if(_x==0 && _y==3) return 'forest';
    if(_x==1 && _y==0) return 'rubble2';
    if(_x==1 && _y==1) return 'forest';
    if(_x==1 && _y==2) return 'broken_city_small';
    if(_x==1 && _y==4) return 'hill';
    if(_x==1 && _y==6) return 'water';
    if(_x==3 && _y==1) return 'mountain';
    // if(_x==3 && _y==4) return 'airplane_wreck';
    if(_x==4 && _y==1) return 'hill';
    if(_x==1 && _y==-3) return 'hill';
    if(_x==4 && _y==4) return 'golden_field';
    if(_x==5 && _y==0) return 'broken_power';
    if(_x==8 && _y==-5) return 'ship_wreck';
    if(_x==10 && _y==13) return 'copper_field';
    if(_x==22 && _y==-30) return 'copper_field';

    if(_x==-83 && _y==36) return 'water';
    if(_x==-82 && _y==36) return 'water';
    for(let _pz of ARTIFACTS){
        if(_pz.x == _x && _pz.y == _y){
            return 'artifact_'+_pz.id;
        }
    }
    for(let _pz of PREDDEFINED_TILES){
        if(_pz.x == _x && _pz.y == _y){
            return _pz.tile;
        }
    }
    return null;
}

for(let _cz of BOOKS)if(!_cz.ignore){
    if(!_cz.tile){
        _cz.tile='broken_city_small';
        if(MyRand100(15)) _cz.tile='airplane_wreck';
    }
    PREDDEFINED_TILES.push({
        x:_cz.x,
        y:_cz.y,
        tile:_cz.tile
    });
}
for(let _cz of EXTRA_BUNKERS){
    PREDDEFINED_TILES.push({
        x:_cz.x,
        y:_cz.y,
        tile:'mesto'
    });
    PREDDEFINED_TILES.push({
        x:_cz.t2.x,
        y:_cz.t2.y,
        tile:'mesto'
    });
    PREDDEFINED_TILES.push({
        x:_cz.t3.x,
        y:_cz.t3.y,
        tile:'mesto'
    });
    PREDDEFINED_TILES.push({
        x:_cz.t4.x,
        y:_cz.t4.y,
        tile:'mesto'
    });

}

for(let _cz of SUPER_COPPER_ZONES){
    for (let i = 0; i < 2; i++) {
        for (let j = 0; j < 2; j++) {
            PREDDEFINED_TILES.push({
                x:_cz.x+i,
                y:_cz.y+j,
                tile:'copper_field'
            });
        }
        
    }
}

for(let _cz of SMALL_GOLD_ZONES){
    for (let i = 0; i < 2; i++) {
        for (let j = 0; j < 2; j++) {
            PREDDEFINED_TILES.push({
                x:_cz.x+i,
                y:_cz.y+j,
                tile:'golden_field'
            });
        }
    }
}



const POBREZIE_VYCHOD = 25;
const POBREZIE_ZAPAD = -45;
const POBREZIE_JUH = 15;
const POBREZIE_PRAVO_HORE = -50;



function GenerateGrid(_x,_y){

    if(_x<-BOUNDERIES_LEFT) return false;
    if(_x>BOUNDERIES_RIGHT) return false;
    if(_y<-BOUNDERIES_UP) return false;
    if(_y>BOUNDERIES_DOWN) return false;


    let _znecistenie = 2+(Math.abs(_x)+Math.abs(_y))*0.5;
    let _vzdStred = GetVzdialenostOdStredu(_x,_y);
    if(_vzdStred>=500)_znecistenie*=10000;
    else if(_vzdStred>475)_znecistenie*=2000;
    else if(_vzdStred>450)_znecistenie*=1500;
    else if(_vzdStred>425)_znecistenie*=1150;
    else if(_vzdStred>400)_znecistenie*=850;
    else if(_vzdStred>375)_znecistenie*=650;
    else if(_vzdStred>350)_znecistenie*=500;
    else if(_vzdStred>325)_znecistenie*=400;
    else if(_vzdStred>300)_znecistenie*=300;
    else if(_vzdStred>280)_znecistenie*=225;
    else if(_vzdStred>260)_znecistenie*=170;
    else if(_vzdStred>240)_znecistenie*=130;
    else if(_vzdStred>220)_znecistenie*=100;
    else if(_vzdStred>200)_znecistenie*=75;
    else if(_vzdStred>180)_znecistenie*=50;
    else if(_vzdStred>160)_znecistenie*=30;
    else if(_vzdStred>140)_znecistenie*=20;
    else if(_vzdStred>120)_znecistenie*=15;
    else if(_vzdStred>100)_znecistenie*=13;
    else if(_vzdStred>90)_znecistenie*=11;
    else if(_vzdStred>80)_znecistenie*=9;
    else if(_vzdStred>70)_znecistenie*=7;
    else if(_vzdStred>60)_znecistenie*=5;
    else if(_vzdStred>50)_znecistenie*=4;
    else if(_vzdStred>40)_znecistenie*=3;
    else if(_vzdStred>30)_znecistenie*=2.0;
    else if(_vzdStred>15)_znecistenie*=1.5;
    
    _znecistenie=Math.round(_znecistenie);

    let _is_uranium_cloud=0;

    if(!myGridData[_x])myGridData[_x]={};
    for(let _ub of URANIUM_BARRELS){
        if(_ub.x == _x && _ub.y == _y){
            _znecistenie=Mro(_znecistenie*5);
            myGridData[_x][_y]={
                x: _x,
                y: _y,
                znecistenie: _znecistenie,
                znecistenie_max: _znecistenie,
                uranium_barrel:_ub.radius,
                uranium_cloud:3
            };
            return myGridData[_x][_y];
        }else{
            if(!_ub.cleared){

                let _dist = GetStvorcovaVzdialenost(_x,_y,_ub.x,_ub.y);
                if(_dist < _ub.radius*0.3){
                    _is_uranium_cloud = 3;
                }else if(_dist < _ub.radius*0.7){
                    _is_uranium_cloud = 2;
                }else if(_dist <= _ub.radius){
                    _is_uranium_cloud = 1;
                }
            }
        }
    }
    for(let _gf of GEM_FIELDS){
        if(_gf.x == _x && _gf.y == _y){
            myGridData[_x][_y]={
                x: _x,
                y: _y,
                znecistenie: _znecistenie,
                znecistenie_max: _znecistenie,
                gem_field:1,
            };
            return myGridData[_x][_y];
        }
    }



    let _is_mesto=0; 
    let _is_mega_city=0; 
    let _is_vidiek=0; 
    let _is_forest=0; 
    let _is_hill=0; 
    let _is_rift=0; 
    let _is_mountain=0; 
    let _is_chest=0;
    let _is_water=0;
    let _is_river=0;
    let _is_fish=0;
    let _is_fish_big=0;
    let _is_fish_huge=0;
    let _is_fish_small=0;
    let _is_ground_oil=0;
    let _is_water_rocks=0;
    let _is_swamp=0;
    let _is_swamp_rocks=0;
    let _is_oil=0;
    let _allow_town=1;
    let _is_golden_field=0;
    let _is_copper_field=0; 
    let _is_artifact=0;
    let _is_rubble=0;
    let _is_desert=0;
    let _is_sand=0;
    let _is_thermal=0;
    let _is_tree_cutted=0;
    let _disabledSandDesert=0;
    let _is_ship_wreck=0;
    let _is_ship_wreck_small=0;
    let _is_airplane_wreck=0;
    let _is_broken_city_small=0;
    let _is_broken_city_medium=0;
    let _is_broken_city_big=0;
    let _is_broken_power=0;
    let _is_scorched=0;
    let _is_lava_rift=0;
    let _is_uranium_field=0;

    let _predefinedTile = IsPreDefinedTile(_x,_y);
    if(_predefinedTile){
        if(_predefinedTile=='ship_wreck'){
            _is_water=1;
            _is_ship_wreck=1;
        };
        if(_predefinedTile=='hill')_is_hill=1;
        if(_predefinedTile=='mountain')_is_mountain=1;
        if(_predefinedTile=='water')_is_water=1;
        if(_predefinedTile=='swamp')_is_swamp=1;
        if(_predefinedTile=='mesto')_is_mesto=GetPlayerUpgradeValue(21,1);
        if(_predefinedTile=='rubble1')_is_rubble=1;
        if(_predefinedTile=='rubble2')_is_rubble=2;
        if(_predefinedTile=='rubble3')_is_rubble=3;
        if(_predefinedTile=='rubble4')_is_rubble=4;
        if(_predefinedTile=='broken_power')_is_broken_power=1;
        if(_predefinedTile=='forest')_is_forest=1;
        if(_predefinedTile=='broken_city_small')_is_broken_city_small=1;
        if(_predefinedTile=='broken_city_medium')_is_broken_city_medium=1;
        if(_predefinedTile=='broken_city_big')_is_broken_city_big=1;
        if(_predefinedTile=='airplane_wreck')_is_airplane_wreck=1;
        if(_predefinedTile=='golden_field')_is_golden_field=1;
        if(_predefinedTile=='copper_field')_is_copper_field=1;
        if(_predefinedTile.indexOf('artifact_')===0){
            let _pole = _predefinedTile.split('artifact_');
            _is_artifact=_pole[1]*1;
            let _found=ARTIFACTS.find(a=>a.id == _pole[1]*1);
            if(_found && _found.water){
                _is_water=1;
            }
            _znecistenie*=5;
        }
    }else if(IsMegaCityTile(_x,_y)){
        for(let _mc of MEGA_CITIES){
            if(_mc.x!=0&&_mc.y!=0){
                if(_mc.x == _x && _mc.y == _y){
                    _is_mesto=30;
                    _is_mega_city=1;
                }
            }
        }
        if(!_is_mesto){
            _is_vidiek=1;
        }
    }else{



        if(_x>POBREZIE_VYCHOD){
            if(_y<POBREZIE_PRAVO_HORE-Mro(_x*0.40)){
                if(_y==POBREZIE_PRAVO_HORE-Mro(_x*0.40)-1){
                    _is_water=MyRand100(50)?0:10;
                }else if(_y==POBREZIE_PRAVO_HORE-Mro(_x*0.40)-2){
                    let _grid2 = GetGridData(_x,_y-1)
                    if(MyRand100(80) && _grid2 && !_grid2.water){
                        //neni voda
                    }else{
                        _is_water=10;
                    }
        
                }else{
                    // _is_water=10;
                }
            }else{
                
                if(_x==POBREZIE_VYCHOD+1){
                    _is_water=MyRand100(65)?0:10;
                }else if(_x==POBREZIE_VYCHOD+2){
                    let _grid2 = GetGridData(_x-1,_y)
                    if(MyRand100(30) && _grid2 && !_grid2.water){
                        //neni voda
                    }else{
                        _is_water=10;
                    }
                    
                }else{
                    _is_water=10;
                }
            }
        }
        if(!_is_water)
        if(_x<POBREZIE_ZAPAD+Mro(0.65*_y)){
            if(_x==POBREZIE_ZAPAD+Mro(0.65*_y)-1){
                _is_water=MyRand100(65)?0:10;
            }else if(_x==POBREZIE_ZAPAD+Mro(0.65*_y)-2){
                const _grid2 = GetGridData(_x-1,_y);
                if(MyRand100(30) && _grid2 && !_grid2.water){
                    //neni voda
                }else{
                    _is_water=10;
                }

            }else{
                _is_water=10;
            }
        }
        if(!_is_water)
        if(_y>POBREZIE_JUH-Mro(_x*0.18)){
            if(_y==POBREZIE_JUH-Mro(_x*0.18)+1){
                _is_water=MyRand100(50)?0:10;
            }else if(_y==POBREZIE_JUH-Mro(_x*0.18)+2){
                let _grid2 = GetGridData(_x,_y-1)
                if(MyRand100(20) && _grid2 && !_grid2.water){
                    //neni voda
                }else{
                    _is_water=10;
                }

            }else{
                _is_water=10;
            }
        }


        if(_is_water){
            for(let _o of ISLANDS){
                let _dist = GetRealDistance(_o.x,_o.y,_x,_y);
                if(Math.abs(_dist-_o.radius)<1.5 && MyRand100(5)){
                    _allow_town=0;
                    _is_water=0
                }else{
                    if(_dist < _o.radius){
                        _is_water=0;
                    }
                }
            }
        }

        if(!_is_water){
            for(let _o of LAKES){
                let _dist = GetRealDistance(_o.x,_o.y,_x,_y);
                if(Math.abs(_dist-_o.radius)<1.5 && MyRand100(95)){
                    _is_water=1
                }else{
                    if(_dist < _o.radius){
                        _is_water=1;
                    }
                }
            }
        }

        if(_is_water){
            for(let _o of FISH_ZONES){
                let _dist = GetRealDistance(_o.x,_o.y,_x,_y);
                if(_dist<=_o.radius){
                    if(_o.x==_x  && _o.y==_y){
                        _is_fish_huge=1;
                    }else if(MyRand100(40)){
                        _is_fish_big=1;
                    }else if(MyRand100(60)){
                        _is_fish=1;
                    }else{
                        _is_fish_small=1;
                    }
            
                }
            }
        }




        if(!_is_water)
        if(IsRiverGenerated(_x,_y)){
            _is_river= IsRiverGenerated(_x,_y);
        }
        if(_is_river==-1){
            _is_river=false;
            _is_water=true;
        }else if(_is_river){
            let _waterAroundPocet = GetAmountOfTerrainTypeAroundYou(_x,_y,'water');
            if(_waterAroundPocet>=2){
                _is_river=false;
                _is_water=true;
            }
        }
        if(!_is_water && !_is_river){
            for(let _o of SWAMPS){
                let _dist = GetRealDistance(_o.x,_o.y,_x,_y);
                if(_dist < _o.radius){
                    if(_dist < _o.radius*0.1){
                        _is_swamp=1;
                    }else if(_dist < _o.radius*0.3){
                        if(MyRand100(35)){
                            _is_swamp_rocks=1;
                        }else if(MyRand100(75)){
                            _is_swamp=1;
                        }
                    }else{
                        if(MyRand100(35)){
                            _is_swamp=1;
                        }
                    }
                    _disabledSandDesert=1;
                }
            }
        }
        if(_vzdStred>10)
        if(!_is_water && !_is_river){
            _is_water = MyRand100(0.5);
            if(_is_water){
                for(let _o of DESERTS){
                    let _dist = GetRealDistance(_o.x,_o.y,  _x,_y);
                    if(_dist < _o.radius){
                        _is_water=false;
                        break;
                    }
                }            
            }
        }

        if(_is_water){
            if(PREDEFINED_FJORD_GROUNDS[_x] && PREDEFINED_FJORD_GROUNDS[_x][_y]){
                _is_water=false;
            }
        }

        if(_is_water){
            for(let _o of SEA_SWAMPS){
                let _dist = GetRealDistance(_o.x,_o.y,_x,_y);
                if(_dist < _o.radius){
                    if(_dist <= _o.radius*0.65){
                        _is_swamp=1;
                    }else if(_dist < _o.radius*0.80){
                        if(MyRand100(80)){
                            _is_swamp=1;
                        }
                    }else{
                        if(MyRand100(40)){
                            _is_swamp=1;
                        }
                    }
                    if(_is_swamp){
                        _is_water=0;
                        _is_swamp_rocks = MyRand100(35);
                    }
                    _disabledSandDesert=1;
                }
            }
        }        


        if(_is_water && !_is_fish_big && !_is_fish_huge && !_is_fish){

            let _isSpecialWaterZone=0;
            for(let _o of WATER_OIL_ZONES){
                let _dist = GetRealDistance(_o.x,_o.y,_x,_y);
                if(_dist < _o.radius+5){
                    _isSpecialWaterZone=1;
                    if(_dist < _o.radius){
                        _is_oil=1;
                    }
                }
            }
            for(let _o of BROKEN_SHIP_ZONES){
                let _dist = GetRealDistance(_o.x,_o.y,_x,_y);
            
                if(_dist < _o.radius){
                    _isSpecialWaterZone=1;
                    if(_dist < Math.max(1.2,_o.radius*0.4)){
                        _is_ship_wreck=MyRand100(90+(_o.radius<3?10:0));
                    }else if(_dist < _o.radius){
                        _is_ship_wreck_small=MyRand100(65);
                    }
                    if(!_is_ship_wreck_small && !_is_ship_wreck){
                        _is_water_rocks=MyRand(1,2);
                    }
                }
            }
            if(!_isSpecialWaterZone){

                let _extraKamene=0;
                let _extraKamene2=1;
                if(_y>0 && _x>0){
                    _extraKamene = _x+_y;
                    if(_y>180 && _x>180){
                        _extraKamene2 = 1+0.002*(_x+_y);
                    }
                }
                // if(_vzdStred > 70 && MyRand100(Math.round((_vzdStred+Math.pow(_extraKamene,1.3))/150))){
                if(_vzdStred > 70 && MyRand100(Math.round((_vzdStred+4*_extraKamene2*_extraKamene)/150))){
                    if(_vzdStred > 130 && MyRand100(20+_vzdStred*0.07)){
                        _is_water_rocks=2;

                    }else{
                        _is_water_rocks=1;
                    }
                }else{
                    
                    if( _vzdStred>140 && MyRand100(2)){ 
                        _is_fish_huge=1;
                    }else if( _vzdStred>75 && MyRand100(5)){ 
                        _is_fish_big=1;
                    }else if( MyRand100(20)){
                        _is_fish_small=1;
                    }else if( _vzdStred > 30 && MyRand100(10)){
                        _is_fish=1;
                    }else if(_vzdStred > 50 && MyRand100(4)){
                        _is_oil=1;
                    }else if(MyRand100(1.7)){
                        _is_ship_wreck=1;
                    }
                }
            }
        }
        



        if(!_is_water && !_is_river){
            for(let _o of GOLD_ZONES){
                let _dist = GetRealDistance(_o.x,_o.y,_x,_y);
                if(_dist<=_o.radius){
                    if(MyRand100(_o.randomness?_o.randomness:70)){
                        _is_golden_field=1;
                        _is_swamp=0;
                        _is_swamp_rocks=0;
                    }        
                    break;
                }
            }
        }

        if(!_is_water && !_is_river && !_is_swamp && !_is_swamp_rocks && !_is_golden_field){
            if(!IsTerrainTester())_is_mesto = 0 

            if(GetSquareDistance(_x,_y,0,4)<6){
                _is_mesto=0;
                _allow_town=false;
            }

            if(_allow_town){
                // (hrac.stats.towns==1 || Math.random() < 0.25)
                let _sancaNaMesto = CanBeTownHere(_x,_y);
                // if(hrac.stats.towns==1)_sancaNaMesto==2;
                if(_sancaNaMesto==2 || (_sancaNaMesto==1 && Math.random() < 0.25)){
                    _is_mesto = GetPlayerUpgradeValue(21,1);  //father in law
                    for(let _mc of MEGA_CITIES){
                        if(_mc.x!=0&&_mc.y!=0){
                            if(GetRealDistance(_mc.x,_mc.y,_x,_y)<10){
                                _is_mesto=0;
                            }
                        }
                    }
                    for(let _z of EXTRA_BUNKERS){
                        if(GetRealDistance(_z.x,_z.y,_x,_y)<15){
                            _is_mesto=0;
                        }
                    }

                    if(_is_mesto){
                        if(!HasLevel(FLATEN_MOUNTAINS_LEVEL_REQ))
                        for(let _o of MOUNTAINS_ZONES){
                            if(GetRealDistance(_o.x,_o.y,  _x,_y) <= _o.radius+1){
                                _is_mesto=0;
                                break;
                            }
                        }
                    }


                    if(_is_mesto){
                        for(let _o of URANIUM_FIELDS){
                            if(GetRealDistance(_o.x,_o.y,  _x,_y) <= _o.radius+4){
                                _is_mesto=0;
                                break;
                            }
                        }
                    }

                    if(_is_mesto){
                        for(let _o of GOLD_ZONES){
                            if(GetRealDistance(_o.x,_o.y,  _x,_y) <= _o.radius+1){
                                _is_mesto=0;
                                break;
                            }
                        }
                    }


                    if(_is_mesto){
                        for(let _o of TOWNLESS_ZONES){
                            let _dist = GetRealDistance(_o.x,_o.y,  _x,_y);
                            if(_dist < _o.radius){
                                _is_mesto = 0;
                                break;
                            }
                        }
                    }
                            
                }
            }

            let _wasUraniumField=0;
            for(let _o of URANIUM_FIELDS){
                let _dist = GetRealDistance(_o.x,_o.y,  _x,_y);
                if(_dist < _o.radius+5){
                    _is_mesto=0;
                }
                if(_dist < _o.radius){
                    if(hrac.stats.total_no_uranium_fields*2.5>=hrac.stats.total_uranium_fields && (hrac.stats.total_no_uranium_fields*1.9 > hrac.stats.total_uranium_fields || MyRand100(66)) ){
                        hrac.stats.total_uranium_fields++;
                        _is_uranium_field=1;
                    }else{
                        hrac.stats.total_no_uranium_fields++;
                    }
                    _wasUraniumField=1;
                    break;
                }
            }
            for(let _o of SCORCHED_ZONES){
                let _dist = GetRealDistance(_o.x,_o.y,  _x,_y);
                if(_dist < _o.radius){
                    _is_mesto=0;
                    _is_scorched = MyRand100(95); 
                    if(_dist < 2){
                        _is_scorched=1
                        _is_lava_rift= MyRand100(75); 
                    }else
                    if(!_is_scorched){
                        _is_desert = 1; 
                    }
                    _wasDesertZone=1; //scorched ale ved to je jedno
                }
            }
            if(!_is_scorched && !_is_desert)
            if(!_is_mesto && !_is_uranium_field){
                let _wasBrokenTownZone=0;
                for(let _o of BROKEN_TOWNS_ZONES){
                    let _dist = GetRealDistance(_o.x,_o.y,  _x,_y);
                    if(_dist < _o.radius){
                        _is_broken_city_big = MyRand100(30 + (_dist<=1?999:0)); 
                        if(!_is_broken_city_big){
                            _is_broken_city_medium = MyRand100(40); 
                            if(!_is_broken_city_medium){
                                _is_broken_city_small = MyRand100(60); 
                                if(!_is_broken_city_small){
                                    _is_rubble=(MyRand(1,4000)%4)+1;
                                }
                            }
                        }
                        _wasBrokenTownZone=1;
                        break;
                    }
                }
                if(!_wasBrokenTownZone){
                        
                    

                    let _wasDesertZone=0;
                    for(let _o of DESERTS){
                        let _dist = GetRealDistance(_o.x,_o.y,  _x,_y);
                        if(_dist < _o.radius){
                            if(_o.strong || MyRand100(85)){
                                _is_desert = MyRand100(50); 
                                if(!_is_desert){
                                    _is_sand = 1; 
                                }
                            }
                            _wasDesertZone=1;
                            break;
                            // if(_is_water){
                            //     _is_water=0;
                            //     _is_ship_wreck=0;
                            //     _is_ship_wreck_small=0;
                            //     _is_water_rocks=0;
                            //     _is_fish_big=0;
                            //     _is_fish_small=0;
                            //     _is_fish=0;
                            //     _is_oil=0;
                            //     _is_ship_wreck=0;
                            // }
                        }
                    }

                    

                    
                    if(!_wasUraniumField)
                    if(!_wasDesertZone){
                        let _wasMountainZone=false;
                        for(let _o of MOUNTAINS_ZONES){
                            let _dist = GetRealDistance(_o.x,_o.y,  _x,_y);
                            if(_dist < _o.radius){
                                _is_mountain = MyRand100(85); 
                                if(!_is_mountain){
                                    _is_hill = 1; 
                                }
                                _wasMountainZone=true;
                            }
                        }
    
                        if(!_wasMountainZone){
        
                            if(!_is_swamp && !_is_water && !_is_river){
                                if(_vzdStred > 50 && MyRand100(0.85)){
                                    _is_swamp=1;
                                }else
                                if(_vzdStred > 75 && MyRand100(0.85)){
                                    _is_swamp_rocks=1;
                                }
                                // if(!enabledSaving){
                                //     _is_swamp=MyRand100(30);
                                // }
                            }
                            if(!_is_swamp && !_is_swamp_rocks){
                                
                                if(_vzdStred>25){
                                    _is_forest = Math.random() < 0.15 ? 1 : 0; 
                                } else {
                                    _is_forest = Math.random() < 0.35 ? 1 : 0; 
                                }
                                if(!_is_forest){
                                    if(_vzdStred>85){
                                        _is_thermal = MyRand100(0.6)
                                    }
                                    if(!_is_thermal){

                                        if(_vzdStred > 3 || hrac.stats.towns>1){
                                            
                                            let _hill_chance_koef = 0.5;
                                            if(_x < 0){
                                                _hill_chance_koef = 1+Math.abs(_x*0.011);
                                                if(_y < -150){
                                                    _hill_chance_koef-=Math.abs((150+_y)*0.031);
                                                }
                                            }
                                            if(_y < -100 && _x>100)_hill_chance_koef +=Math.abs((_vzdStred-200)*0.025);
                                            if(_vzdStred < 5)_hill_chance_koef=0.1;
                                            if(_vzdStred < 25)_hill_chance_koef=0.5;
                                            _is_hill = (Math.random() < 0.12*_hill_chance_koef ? 1 : 0); 
                                            if(!_is_hill){
                                                if(hrac.stats.clears > 100 && (hrac.stats.broken_power + hrac.stats.cleared_broken_power) < 100 && (hrac.stats.broken_power + hrac.stats.cleared_broken_power) * 100 < hrac.stats.clears){
                                                    //zo zaciatku
                                                    if(MyRand100(30)){
                                                        _is_broken_power = 1;
                                                        hrac.stats.broken_power++;
                                                    }
                                                }else if(hrac.stats.broken_power + hrac.stats.cleared_broken_power > 70 && (hrac.stats.broken_power + hrac.stats.cleared_broken_power) < 600 && (hrac.stats.broken_power + hrac.stats.cleared_broken_power - 50) * 300 < hrac.stats.clears){
                                                    //neskor v hre
                                                    if(MyRand100(10)){
                                                        _is_broken_power = 1;
                                                        hrac.stats.broken_power++;
                                                    }
                                                }
                                            }
                                            if(!_is_hill && !_is_broken_power){
                                                if(_vzdStred > 30){
                                                    let _moun_chance_koef = 0.5;
                                                    if(_x < 0)_moun_chance_koef = 1+Math.abs(_x*0.007);
                                                    if(_y < 0)_moun_chance_koef+=Math.abs(_vzdStred*0.007);
                                                    _is_mountain = Math.random() < 0.12*_moun_chance_koef ? 1 : 0; 
                                                }
                                                if(_vzdStred > 45 && !_is_mountain){
                                                    let _rift_size=1;
                                                    if(_vzdStred > 65 && MyRand100(5+_vzdStred*0.05))_rift_size=2;
                                                    if(_y>0 && _x < 0){
                                                        _is_rift = Math.random() < 0.045*Math.abs((_vzdStred-200)*0.012) ? _rift_size : 0; 
                                                    }else{
                                                        _is_rift = Math.random() < 0.010 ? _rift_size : 0; 
                                                    }
                                                }
                                                if(!_is_mountain && !_is_rift){

                                                    if(_vzdStred > 50){
                                                        _is_ground_oil = MyRand100(Math.max(0.01,3+_y*0.01-_x*0.015)); 
                                                    }
                                                    if(!_disabledSandDesert && _vzdStred > 50 && !_is_ground_oil){
                                                        _is_desert = MyRand100(8); 
                                                        if(!_is_desert){
                                                            _is_sand = MyRand100(5); 
                                                        }
                                                    }
                                                    if(!_is_ground_oil && !_is_sand && !_is_desert){
                                                        
                                                        // if(!enabledSaving2)_is_scorched = 1; 
                                                        
                                                        if(_vzdStred>250){
                                                            _is_lava_rift = MyRand100(3+(_vzdStred>350?3:0)); 
                                                        }
                                                        if(!_is_lava_rift && _vzdStred>130){
                                                            _is_scorched = MyRand100(7+(_vzdStred>300?10:0)+(_y>170?20:0)); 
                                                        }
                                                        if(!_is_scorched && !_is_lava_rift){

                                                            if(_vzdStred>45){
                                                                _is_rubble = MyRand100(35); 
                                                            }

                                                            if(_is_rubble){
                                                                _is_rubble=(MyRand(1,4000)%4)+1;
                                                            }else{
                                                                
                                                                _is_tree_cutted = MyRand100(30); 
                                                                
                                                                if(!_is_tree_cutted && _vzdStred>5){
                                                                    let _extra_chance = 0;
                                                                    // console.log((hrac.stats.airplane_tiles+hrac.stats.found_airplanes) * 400,hrac.stats.clears)
                                                                    if((hrac.stats.airplane_tiles+hrac.stats.found_airplanes) * 400 < hrac.stats.clears){
                                                                        _extra_chance+=7;
                                                                        // console.log('aaa')
                                                                    }
                                                                    if(_vzdStred>25){
                                                                        _is_airplane_wreck = MyRand100(1+(_is_uranium_cloud>=2?4:_extra_chance)); 
                                                                    }
                                                                    if(!_is_airplane_wreck){
                                                                        _is_broken_city_big = (_vzdStred>65 && MyRand100(5)?1:0); 
                                                                        if(!_is_broken_city_big){
                                                                            _is_broken_city_medium = (_vzdStred>48 && MyRand100(10)?1:0); 
                                                                            if(!_is_broken_city_medium){
                                                                                _is_broken_city_small = (_vzdStred>34&&MyRand100(15)?1:0); 
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        if(!_is_mesto && !_is_river && !_is_water && _vzdStred>18 && !_is_uranium_field){
            if(MyRand100(3) && CanBeGoldenFieldHere(_x,_y)){
                _is_golden_field=1;   
                _is_forest=0;
                _is_hill=0;
                _is_mountain=0;
                _is_rift=0;
            }
        }
        if(!_is_mesto && !_is_river && !_is_water && _vzdStred>45 && !_is_golden_field && !_is_uranium_field){
            if(MyRand100(0.03) && CanBeCopperFieldHere(_x,_y)){
                _is_copper_field=1;   
                _is_forest=0;
                _is_hill=0;
                _is_mountain=0;
                _is_rift=0;
            }
        }
    }


    // if(!IsTester())
    if(chests){
        _is_chest=chests.find(c=>c.x==_x && c.y==_y);
        if(_is_chest){
            // _is_mesto=0;
            // _is_forest=0;
            // _is_hill=0;
            // _is_mountain=0;
            // _is_rift=0;
            // console.error('CHESTA!')
        }
    }

    if(_is_swamp_rocks)_is_swamp=0;
    if(_is_rubble)_znecistenie*=0.85;
    if(_is_broken_city_big)_znecistenie*=1.35;
    if(_is_broken_city_medium)_znecistenie*=1.25;
    if(_is_broken_city_small)_znecistenie*=1.15;
    if(_is_forest)_znecistenie*=1.25;
    if(_is_mesto || _is_vidiek)_znecistenie*=2;
    if(_is_chest && !GetPlayerUpgradeValue(58))_znecistenie*=3;
    if(_is_thermal)_znecistenie*=2;
    if(_is_lava_rift)_znecistenie*=6;
    else if(_is_scorched)_znecistenie*=3;
    if(_is_mountain)_znecistenie*=2.5;
    if(_is_rift)_znecistenie*=2.5*_is_rift;
    if(_is_water)_znecistenie*=2;
    if(_is_river)_znecistenie*=1.5;
    if(_is_water_rocks)_znecistenie*=2;
    if(_is_swamp)_znecistenie*=1.7;
    if(_is_swamp_rocks)_znecistenie*=2.5;
    if(_is_uranium_cloud){
        _znecistenie*=(1+_is_uranium_cloud);
    }
    if(_is_sand)_znecistenie*=0.6;
    if(_is_desert)_znecistenie*=0.6;

    if(_znecistenie<2)_znecistenie=2;
    _znecistenie=Mro(_znecistenie);

    let _grid={
        x: _x,
        y: _y,
        znecistenie: _znecistenie,
        znecistenie_max: _znecistenie,
        klikov:0,
    };

    for(let _o of MANY_CHESTS_ZONES){
        let _dist = GetRealDistance(_o.x,_o.y,_x,_y);
        if(_dist<=_o.radius){
            AddChest(_grid);
            
            break;
        }
    }

    if(_is_vidiek)_grid.vidiek=_is_vidiek;
    if(_is_mesto){
        _grid.mesto=_is_mesto;
        allTowns.push(_grid);
    }
    if(_is_mega_city)_grid.mega_city=_is_mega_city;
    if(_is_mesto)_grid.klikov=0;
    if(_is_uranium_field)_grid.uranium_field=1;
    // if(_is_mesto)_grid.earn_clicks_available=_is_mesto*GetTownEarnClicksPerLevel();
    if(_is_mesto)_grid.earn_clicks_available=GetMaxTownEarnClicks(_grid);
    if(_is_uranium_cloud)_grid.uranium_cloud=_is_uranium_cloud;
    if(_is_chest)_grid.chest=1;


    if(_is_water)_grid.water=_is_water;
    if(_is_fish_big)_grid.fish_big=_is_fish_big;
    else if(_is_fish_huge)_grid.fish_huge=_is_fish_huge;
    else if(_is_fish_small)_grid.fish_small=_is_fish_small;
    else if(_is_fish)_grid.fish=_is_fish;
    else if(_is_oil)_grid.oil=_is_oil;
    else if(_is_water_rocks)_grid.water_rocks=_is_water_rocks;
    else if(_is_ship_wreck)_grid.ship_wreck=_is_ship_wreck;
    else if(_is_ship_wreck_small)_grid.ship_wreck_small=_is_ship_wreck_small;

    if(_is_river)_grid.river=_is_river;
    if(_is_forest)_grid.forest=_is_forest;
    else if(_is_lava_rift)_grid.lava_rift=1;
    else if(_is_scorched)_grid.scorched=_is_scorched;
    else if(_is_hill)_grid.hill=_is_hill;
    else if(_is_rift==1)_grid.rift=_is_rift;
    else if(_is_rift==2)_grid.rift_big=1;
    else if(_is_mountain)_grid.mountain=_is_mountain;
    else if(_is_ground_oil)_grid.ground_oil=_is_ground_oil;
    else if(_is_swamp)_grid.swamp=_is_swamp;
    else if(_is_swamp_rocks){
        _grid.swamp_rocks=_is_swamp_rocks;
        delete(_grid.swamp);
    }
    else if(_is_broken_power){
        _grid.broken_power=1;
        AddBrokenPowerCloud(_grid);
    }
    else if(_is_broken_city_big)_grid.broken_city_big=1;
    else if(_is_broken_city_medium)_grid.broken_city_medium=1;
    else if(_is_broken_city_small)_grid.broken_city_small=1;
    else if(_is_golden_field)_grid.golden_field=1;
    else if(_is_copper_field)_grid.copper_field=1;
    else if(_is_sand)_grid.sand=1;
    else if(_is_desert)_grid.desert=1;
    else if(_is_thermal)_grid.thermal=1;
    else if(_is_rubble){
        if(_is_rubble==1)_grid.rubble1=1;
        if(_is_rubble==2)_grid.rubble2=1;
        if(_is_rubble==3)_grid.rubble3=1;
        if(_is_rubble==4)_grid.rubble4=1;
    }
    else if(_is_airplane_wreck)_grid.airplane_wreck=1;
    else if(!_is_water && _is_tree_cutted)_grid.tree_cutted=1;

    if(_is_artifact)_grid.artifact=_is_artifact;

    myGridData[_x][_y]=_grid;
    ResetReadyStatusOptiBlockByGrid(_grid);
    GenerateSingleShoreOnly(_grid);
    if(_grid.chest)AddBuildEffect(_grid,5);
    return _grid;
}
//_g.generatedTime=GENERATED_TIME; toto hladas, je inde








const ISLANDS=[

    {
        x:10,
        y:15,
        radius:6
    },{
        x:26,
        y:-35,
        radius:6
    },{
        x:78,
        y:-36,
        radius:6
    },{
        x:94,
        y:13,
        radius:5
    },{
        x:47,
        y:9,
        radius:6.5
    },{
        x:29,
        y:48,
        radius:6.5
    },{
        x:-23,
        y:110,
        radius:6.5
    },{
        x:-51,
        y:88,
        radius:5.5
    },{
        x:84,
        y:108,
        radius:4.5
    },{
        x:60,
        y:98,
        radius:4.5
    },{
        x:77,
        y:-67,
        radius:2.5
    },{
        x:98,
        y:-93,
        radius:5.5
    },{
        x:-30,
        y:27,
        radius:3.5
    },{
        x:-72,
        y:15,
        radius:5.5
    },{
        x:-80,
        y:-52,
        radius:3.5
    },{
        x:-136,
        y:8,
        radius:6.5
    },{
        x:-143,
        y:-15,
        radius:7.5
    },{
        x:-89,
        y:-3,
        radius:5.5
    },{
        x:-5,
        y:165,
        radius:6
    },{
        x:-37,
        y:174,
        radius:6.5
    },{
        x:80,
        y:196,
        radius:8.5
    },{
        x:97,
        y:207,
        radius:4.5
    },{
        x:187,
        y:147,
        radius:8.5
    },{
        x:151,
        y:186,
        radius:5.5
    },{
        x:179,
        y:-13,
        radius:9.5
    },{
        x:-182,
        y:-141,
        radius:12.5
    },{
        x:-214,
        y:-113,
        radius:8.5
    },{
        x:-179,
        y:-127,
        radius:7.5
    },{
        x:-205,
        y:-111,
        radius:6
    },{
        x:-81,
        y:68,
        radius:6
    },{
        x:-76,
        y:150,
        radius:6
    },
    {
        x:-67,
        y:147,
        radius:6
    },
    {
        x:151,
        y:88,
        radius:7.5
    },
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    {
        x:32,
        y:-61,
        radius:6
    },{
        x:40,
        y:-5,
        radius:4
    },
    {
        x:45,
        y:3,
        radius:8 
    },
    {
        x:33,
        y:49,
        radius:6 
    },
    {
        x:54,
        y:60,
        radius:4
    },
    {
        x:92,
        y:30,
        radius:15
    },
    {
        x:106,
        y:8,
        radius:11
    },
    {
        x:108,
        y:22,
        radius:5
    },
    {
        x:81,
        y:-33,
        radius:7
    },
    {
        x:50,
        y:-57,
        radius:3
    },
    {
        x:131,
        y:-28,
        radius:2
    },
    {
        x:109,
        y:-71,
        radius:3.5
    },
    {
        x:121,
        y:24,
        radius:3.5
    },
    {
        x:142,
        y:142,
        radius:2.5
    },
    {
        x:134,
        y:66,
        radius:3.5
    },
    {
        x:68,
        y:115,
        radius:18
    },
    {
        x:52,
        y:106,
        radius:12
    },
    {
        x:103,
        y:106,
        radius:5
    },
    {
        x:210,
        y:-160,
        radius:80
    },
    {
        x:152,
        y:-137,
        radius:40
    },
    {
        x:-77,
        y:-190,
        radius:120
    },
    {
        x:-203,
        y:-223,
        radius:30
    },

    {
        x:-203,
        y:-223,
        radius:30
    },
    {
        x:203,
        y:-21,
        radius:30
    },        
    {
        x:211,
        y:-6,
        radius:23
    },    
    {
        x:178,
        y:-64,
        radius:4
    },{
        x:232,
        y:-52,
        radius:6
    },{
        x:181,
        y:84,
        radius:8
    },{
        x:194,
        y:210,
        radius:50
    },{
        x:249,
        y:162,
        radius:65
    },{
        x:157,
        y:225,
        radius:35
    },{
        x:241,
        y:57,
        radius:7
    },{
        x:83,
        y:208,
        radius:15
    },{
        x:98,
        y:240,
        radius:7
    },{
        x:103,
        y:171,
        radius:2.5
    },{
        x:169,
        y:64,
        radius:2
    },{
        x:-187,
        y:214,
        radius:130
    },{
        x:-224,
        y:110,
        radius:80
    },{
        x:-24,
        y:232,
        radius:50
    },{
        x:-45,
        y:168,
        radius:9
    },{
        x:6,
        y:156,
        radius:16
    },{
        x:18,
        y:181,
        radius:12
    },{
        x:-49,
        y:11,
        radius:25
    },{
        x:-83,
        y:-7,
        radius:9
    },{
        x:-18,
        y:101,
        radius:11
    },{
        x:-246,
        y:-60,
        radius:65
    },{
        x:-172,
        y:0,
        radius:35
    },{
        x:-172,
        y:-45,
        radius:11
    },{
        x:-235,
        y:-146,
        radius:7
    },{
        x:-242,
        y:-172,
        radius:5
    },{
        x:-208,
        y:-180,
        radius:5
    },{
        x:-144,
        y:-79,
        radius:5
    },{
        x:-107,
        y:-39,
        radius:5
    },{
        x:-107,
        y:-39,
        radius:5
    },{
        x:-88,
        y:112,
        radius:8
    },{
        x:-70,
        y:96,
        radius:22
    },{
        x:-86,
        y:81,
        radius:15
    },{
        x:47,
        y:242,
        radius:3
    },
    {
        x:-131,
        y:77,
        radius:2
    },{
        x:-222,
        y:17,
        radius:2
    },{
        x:-27,
        y:47,
        radius:5
    },{
        x:-204,
        y:-14,
        radius:25
    },{
        x:24,
        y:20,
        radius:3
    },{
        x:31,
        y:-48,
        radius:3
    },{
        x:51,
        y:135,
        radius:3
    },{
        x:135,
        y:187,
        radius:3
    },{
        x:-95,
        y:46,
        radius:3
    },{
        x:-86,
        y:-40,
        radius:3
    },{
        x:130,
        y:-95,
        radius:3
    },{
        x:-179,
        y:-111,
        radius:3
    },{
        x:-179,
        y:-111,
        radius:3
    },{
        x:-187,
        y:-104,
        radius:3
    },{
        x:-150,
        y:40,
        radius:3
    },{
        x:27,
        y:165,
        radius:3
    },{
        x:91,
        y:116,
        radius:3
    },{
        x:88,
        y:51,
        radius:3
    },{
        x:109,
        y:220,
        radius:3
    },{
        x:109,
        y:220,
        radius:3
    },
    {
        x:243,
        y:246,
        radius:2
    },{
        x:31,
        y:5,
        radius:2
    },{
        x:-39,
        y:40,
        radius:3
    },{
        x:37,
        y:99,
        radius:10
    },{
        x:50,
        y:80,
        radius:7
    },{
        x:163,
        y:32,
        radius:3
    },{
        x:126,
        y:-6,
        radius:3
    },{
        x:62,
        y:43,
        radius:3
    },{
        x:9,
        y:36,
        radius:3
    },{
        x:25,
        y:69,
        radius:3
    },{
        x:-38,
        y:119,
        radius:3
    },{
        x:-49,
        y:61,
        radius:3
    },{
        x:-79,
        y:36,
        radius:3
    },{
        x:-124,
        y:-24,
        radius:3
    },{
        x:-152,
        y:-39,
        radius:3
    },{
        x:56,
        y:194,
        radius:3
    },{
        x:-61,
        y:66,
        radius:4
    },{
        x:-39,
        y:105,
        radius:5
    },{
        x:-55,
        y:49,
        radius:5
    },{
        x:-4,
        y:127,
        radius:6
    },{
        x:29,
        y:126,
        radius:5
    },{
        x:30,
        y:134,
        radius:5
    },{
        x:-8,
        y:122,
        radius:5
    },{
        x:74,
        y:30,
        radius:5
    },{
        x:113,
        y:58,
        radius:6
    },{
        x:153,
        y:81,
        radius:6
    },{
        x:54,
        y:-49,
        radius:5
    },{
        x:150,
        y:62,
        radius:4
    },{
        x:79,
        y:-4,
        radius:3.5
    },{
        x:97,
        y:-27,
        radius:3.5
    },{
        x:74,
        y:-65,
        radius:3.5
    },{
        x:-92,
        y:35,
        radius:3.5
    },{
        x:-101,
        y:19,
        radius:3.5
    },{
        x:-94,
        y:58,
        radius:3.5
    },{
        x:11,
        y:100,
        radius:3.5
    },{
        x:103,
        y:82,
        radius:3.5
    },{
        x:-71,
        y:33,
        radius:3.5
    },{
        x:24,
        y:91,
        radius:4.5
    },{
        x:-1,
        y:74,
        radius:2.5
    },{
        x:-53,
        y:71,
        radius:2.5
    },{
        x:-14,
        y:85,
        radius:2.5
    },{
        x:-19,
        y:63,
        radius:2.5
    },{
        x:-23,
        y:165,
        radius:2.5
    },{
        x:46,
        y:213,
        radius:4.5
    },{
        x:117,
        y:211,
        radius:4.5
    },{
        x:186,
        y:110,
        radius:4.5
    },{
        x:72,
        y:240,
        radius:3.5
    },{
        x:53,
        y:-24,
        radius:4
    },
];













const LAKES=[
    {
        x:9,
        y:-7,
        radius:2
    },{
        x:-239,
        y:180,
        radius:26
    },{
        x:-58,
        y:-13,
        radius:5
    },{
        x:-32,
        y:11,
        radius:3
    },{
        x:98,
        y:37,
        radius:1
    },{
        x:-33,
        y:-56,
        radius:8
    },{
        x:-21,
        y:-61,
        radius:5
    },{
        x:191,
        y:211,
        radius:12
    },{
        x:208,
        y:207,
        radius:8
    },{
        x:174,
        y:206,
        radius:6
    },{
        x:-41,
        y:227,
        radius:2
    },{
        x:-157,
        y:206,
        radius:2
    },{
        x:-195,
        y:126,
        radius:2
    },{
        x:-226,
        y:54,
        radius:2
    },{
        x:-205,
        y:-60,
        radius:2
    },{
        x:-86,
        y:-172,
        radius:15
    },{
        x:248,
        y:129,
        radius:5
    },{
        x:236,
        y:-133,
        radius:4
    },{
        x:206,
        y:-118,
        radius:2
    },{
        x:191,
        y:-201,
        radius:2
    },{
        x:120,
        y:-217,
        radius:2
    },{
        x:-108,
        y:-189,
        radius:13
    },{
        x:-86,
        y:-194,
        radius:8
    },{
        x:-17,
        y:-215,
        radius:2
    },{
        x:-97,
        y:-203,
        radius:6
    },{
        x:-160,
        y:-219,
        radius:2
    },{
        x:-208,
        y:-209,
        radius:2
    },{
        x:13,
        y:-130,
        radius:2
    },{
        x:17,
        y:-60,
        radius:2
    },{
        x:-213,
        y:192,
        radius:8
    },{
        x:-114,
        y:244,
        radius:7
    },
];







const SWAMPS=[
    {
        x:-16,
        y:-51,
        radius:12
    },
    {
        x:-57,
        y:-25,
        radius:5
    },
    {
        x:18,
        y:-24,
        radius:5
    },
    {
        x:-40,
        y:7,
        radius:6
    },
    {
        x:68,
        y:-85,
        radius:15
    },
    {
        x:215,
        y:-127,
        radius:20
    },
    {
        x:-16,
        y:-232,
        radius:28
    },
    {
        x:185,
        y:183,
        radius:11
    },
    {
        x:14,
        y:171,
        radius:8
    },
    {
        x:103,
        y:17,
        radius:13
    },
    
];

const DESERTS=[
{
    x:-10,
    y:16,
    radius:4
},
{
    x:-39,
    y:-7,
    radius:6
},
{
    x:16,
    y:-45,
    radius:7
},
{
    x:-112,
    y:129,
    radius:11
},
{
    x:-91,
    y:224,
    radius:11
},
{
    x:3,
    y:244,
    radius:13
},
{
    x:151,
    y:209,
    radius:8
},
{
    x:138,
    y:234,
    radius:7
},
{
    x:221,
    y:-22,
    radius:7
},
{
    x:50,
    y:-238,
    radius:35
},
{
    x:34,
    y:-101,
    radius:12
},
{
    x:-41,
    y:-108,
    radius:13
},
{
    x:50,
    y:80,
    radius:5
},
{
    x:-71,
    y:107,
    radius:6
},
{
    x:135,
    y:-118,
    radius:5
},{
    x:224,
    y:193,
    radius:9,
    strong:1
},

];

const SEA_SWAMPS=[
    {
        x:155,
        y:-26,
        radius:6,
    },
    {
        x:237,
        y:-66,
        radius:7,
    },
    {
        x:235,
        y:50,
        radius:8,
    },
    {
        x:190,
        y:120,
        radius:10,
    },
    {
        x:107,
        y:175,
        radius:7,
    },
    {
        x:3,
        y:185,
        radius:6,
    },
    {
        x:-44,
        y:143,
        radius:3,
    },
    {
        x:-122,
        y:19,
        radius:3,
    },
    {
        x:-158,
        y:-63,
        radius:4,
    },
    {
        x:-235,
        y:-165,
        radius:9,
    },
];

const SCORCHED_ZONES=[
    {
        x:-112,
        y:169,
        radius:11.5
    },{
        x:-191,
        y:161,
        radius:8.5
    },{
        x:-176,
        y:226,
        radius:7.5
    },{
        x:-49,
        y:209,
        radius:8
    },{
        x:15,
        y:224,
        radius:6.5
    },{
        x:-241,
        y:135,
        radius:7.5
    },{
        x:-205,
        y:57,
        radius:9.5
    },{
        x:204,
        y:244,
        radius:11.5
    },{
        x:244,
        y:189,
        radius:9.5
    },{
        x:203,
        y:160,
        radius:7.5
    },
];

const TOWNLESS_ZONES=[
    {
        x:-38,
        y:-8,
        radius:7.5
    },{
        x:-42,
        y:-108,
        radius:12
    },{
        x:36,
        y:-104,
        radius:9
    },{
        x:61,
        y:-233,
        radius:29
    },{
        x:-236,
        y:-43,
        radius:22
    },{
        x:-41,
        y:-196,
        radius:11
    },{
        x:-132,
        y:-227,
        radius:13
    },{
        x:119,
        y:-120,
        radius:31
    },{
        x:-226,
        y:93,
        radius:25
    },{
        x:147,
        y:222,
        radius:30
    },{
        x:185,
        y:14,
        radius:32
    },{
        x:17,
        y:-45,
        radius:10
    },{
        x:51,
        y:79,
        radius:12
    },{
        x:-72,
        y:-58,
        radius:14
    },{
        x:-91,
        y:224,
        radius:13
    },
    
    
];


const MOUNTAINS_ZONES=[
    {
        x:23,
        y:-58,
        radius:4.5
    },
    {
        x:-42,
        y:-48,
        radius:5.5
    },{
        x:-38,
        y:31,
        radius:3.5
    },{
        x:-1,
        y:74,
        radius:4
    },{
        x:-63,
        y:95,
        radius:4
    },{
        x:-1,
        y:-91,
        radius:5
    },{
        x:118,
        y:-100,
        radius:3.5
    },{
        x:62,
        y:129,
        radius:4
    },{
        x:101,
        y:40,
        radius:5
    },{
        x:81,
        y:-157,
        radius:5
    },{
        x:-96,
        y:-79,
        radius:7
    },{
        x:-2,
        y:146,
        radius:7
    },
    
    
    
    
    
    
    
    
    
    
    
    
];




// setTimeout(() => {
//     ClickBottomMenu(3) 
// }, 500);

const AD_SKIP_LEVEL_REQ=5;
const GEM_MAT_PACK_HOURS=3;


let justBoughtOffers=[];
function GemyOffersInner(){
    let _out='';
    let _pocet=0;
    for(let _o of GEM_OFFRE){
        if( HasLevel(_o.min_town_level))
        if( !_o.min_totalspent || totalSpent >= _o.min_totalspent)
        if(!hrac.kupene_gem_offre.includes(_o.id) || justBoughtOffers.includes(_o.id))
        {
            if(!justBoughtOffers.includes(_o.id)){
                _pocet++;
            }
            if(!_o.max_in_view || _pocet<2){
                _out+=SingleGemOffersInner(_o);
            }
            if(_pocet>=1)continue;
        }
    }
    _out+=BRBR;


    return _out;
}

function KnowsSuperClickers(){
    return (hrac.super_clickers || hrac.stats.super_clickersUsed);
}

function SingleGemOffersInner(_o){
    if(!KnowsSuperClickers() && _o.value_type == 'super_clickers'){
        return '';
    }
    if(_o.requires_upgrade && !HasUpgrade(_o.requires_upgrade)){
        return '';
    }
    if(_o.value_type=='book_page'){
        if(hrac.marked_all_books || hrac.book_pages_marked.length + hrac.books.length + visibleBooks.length>= BOOKS.length){
            return '';
        }
    }
    if(_o.is_event && GetEventType()!=_o.is_event){
        return '';
    }

    let _out='<div class="gem-offer" onclick="BuyOffer('+_o.id+');"><table cellspacing="0"><tr><td rowspan="2" class="gem-offer-image">';

    _out+=GetIconImage(_o.icon?_o.icon:_o.value_type,window.innerWidth<360?60:80);
    if(_o.limit){
        _out+='<div class="gem-offer-limit">';
        _out+=Bold(GetText3('Limit: ')+(justBoughtOffers.includes(_o.id)?1:0)+' / '+_o.limit);//no toto je trochu blbost :D lebo limit potom moze byt max 1
        _out+='</div>';
    }
    
    

    let _value = _o.value;
    if(_o.value_multiplier){
        _value=GetMultipliedIncomeValue(_o);
    }

    _out+='</td><td style="width:100%;">';
    _out+='<div class="gem-offer-value">';
    _out+='+'+PMat(_value,_o.value_type,window.innerWidth<410?20:32);
    _out+='</div>';

    if(_o.description){
        let _desc = GetText(_o.description);
        if(_o.span_id){
            _desc = SpanID(_o.span_id,_desc)
        }
        _desc = _desc.replaceAll('{PACK_HOURS}',GEM_MAT_PACK_HOURS);
        if(_o.description_val){
            _desc = _desc.replaceAll('{att1}',eval(_o.description_val))
        }
        _out+='<div class="gem-offer-desc">';
        if(_o.hourly_limited && IsTimeLimitedPackBought(_o.id)){
            _out+=ColorSpan('maroon',_desc)
        }else{
            _out+=_desc;
        }
        if(_o.hourly_limited && IsTimeLimitedPackBought(_o.id)){
            let _found = hrac.bought_material_packs.find(_p => _p && _p.id == _o.id && _p.time+GEM_MAT_PACK_HOURS*3600*1000 > Date.now());
            if(_found){
                _out+=BR;

                _out+= PDurDate('consumable_pack_'+_o.id,_found.time+GEM_MAT_PACK_HOURS*3600*1000,()=>{ClickBottomMenu(3,1)});
            }
        }
        _out+='</div>';
    }
    
    _out+='</td></tr><tr><td style="width:100%; position:relative;" ><div style="height:26px;">&nbsp;</div>';
    _out+='<div class="gem-offer-cost">';
    if(_o.limit && justBoughtOffers.includes(_o.id) ){
        _out+=GetText3('Bought');
    }else{
        _out+=GetText3('Cost: ')+PMat(_o.cost,_o.cost_type);
    }
    _out+='</div>';

    _out+='</td></tr></table></div>';
    return _out;
}

const BASE_PACK_food=5000;
const BASE_PACK_lumber=30000;
const BASE_PACK_rocks=30000
const BASE_PACK_steel=20000;
const BASE_PACK_chips=50000;
const BASE_PACK_oil=15000;

function GetMultipliedIncomeValue(_o){
    let _value=0;
    if(_o.value_multiplier){
        if(_o.value_type=='gold') _value = 50000 + _o.value_multiplier * hrac.income + GetTownClickGold(GetGridData(0,0)) * _o.value_multiplier * 3;
        if(_o.value_type=='food') _value = BASE_PACK_food + _o.value_multiplier * hrac.foodIncome;
        if(_o.value_type=='food') _value += 0.05*GetMaxFoodStorage();
        if(_o.value_type=='lumber') _value = BASE_PACK_lumber + _o.value_multiplier * hrac.lumberIncome;
        if(_o.value_type=='lumber') _value += 0.05*GetMaxLumberStorage();
        if(_o.value_type=='rocks') _value = BASE_PACK_rocks + _o.value_multiplier * hrac.rocksIncome;
        if(_o.value_type=='rocks') _value += 0.05*GetMaxRocksStorage();
        if(_o.value_type=='steel') _value = BASE_PACK_steel + _o.value_multiplier * hrac.steelIncome;
        if(_o.value_type=='steel') _value += 0.05*GetMaxSteelStorage();
        if(_o.value_type=='chips') _value = BASE_PACK_chips + _o.value_multiplier * hrac.chipsIncome;
        if(_o.value_type=='chips') _value += 0.05*GetMaxChipsStorage();
        if(_o.value_type=='oil') _value = BASE_PACK_oil + _o.value_multiplier * hrac.oilIncome;
        if(_o.value_type=='oil') _value += 0.05*GetMaxOilStorage();
        if(_o.value_type=='event_fish') _value = 500+_o.value_multiplier * hrac.event_fish_income;;
    }
    return SimplifiedNumber(Mro(_value));
}

function IsTimeLimitedPackBought(_id,_popup){
    if(hrac.bought_material_packs){
        let _found = hrac.bought_material_packs.find(_p => _p && _p.id == _id && _p.time+GEM_MAT_PACK_HOURS*3600*1000 > Date.now());
        if(_found){
            if(_popup){
                let _out='';
                _out+=BR+GetText('Try again later');
                
                DoBasicPopup(_out,GetText('Already bought'),{centerised:1});
            }
            return true;
        }
    }
    return false;
}

let confirmedGemCost=[];
function BuyOffer(_id){
    for(let _o of GEM_OFFRE)if(_o.id == _id)if(!IsTimeLimitedPackBought(_id,1)){
        if(!_o.limit || !justBoughtOffers.includes(_o.id)){

            if(!confirmedGemCost[_o.id] && _o.cost_type=='gems'){
                if(!AreYouSure(confirmedGemCost[_o.id],GetText('Are you sure you want to buy this item for {att1} gems?',PMat(_o.cost,2)),GetText('Premium purchase'),'confirmedGemCost['+_o.id+']=1;BuyOffer('+_id+');',GetTextCAPS('BUY'))){
                    PlayTap();
                    return false;
                }
            }

            if(!_o.limit || !hrac.kupene_gem_offre.includes(_id))
            if(MamDostMat(_o.cost,_o.cost_type,1,1)){
                let _reopen=true;
                if(_o.value_type=='book_page'){
                    let _coordinates=FindNewStoryPage();
                    if(_coordinates){
                        ScrollToXY(_coordinates.x,_coordinates.y,1.2,0);         
                        hrac.book_pages_marked.push(GetBookCoorString(_coordinates));
                        CloseBottomMenu();
                        _reopen=false;
                    }else{
                        hrac[_o.cost_type]+=_o.cost
                        PlaySound('ee');
                        CloseBottomMenu();
                        hrac.marked_all_books=true;
                        return false;
                    }
                }

                let _value = _o.value;
                if(_o.value_multiplier){
                    _value=GetMultipliedIncomeValue(_o);
                }
                PlaySound('cash1');

                AddMat(_value,_o.value_type,0,0,0,1)
                if(_o.value_type=='food'){
                    hrac.premium_food_storage = _value+1000;
                }
                if(_o.value_type=='super_clickers'){
                    hrac.stats.super_clickersBought+=_o.value;
                }
                if(_o.value_type=='event_fish'){
                    hrac.event_fish_total+=_value;
                }
                
                if(_o.value_type=='ad_skippers'){
                    hrac.stats.adSkippers_bought+=_o.value;
                }

                if(_o.hourly_limited){
                    hrac.bought_material_packs.push({
                        id: _id,
                        time: Date.now(),
                        type: _o.value_type,
                    })
                }

                if(!hrac.materialsBoughtCount[_o.value_type]){
                    hrac.materialsBoughtCount[_o.value_type]=0;
                }
                hrac.materialsBoughtCount[_o.value_type]++;



                if(_o.limit){
                    hrac.kupene_gem_offre.push(_id);
                }
                // if(_o.cost_type=='gems'){
                //     hrac.stats.gems_spent+=_o.cost;
                // }
                justBoughtOffers.push(_id);
                anyActionDone++;
                RefreshHeader();
                if(_reopen){
                    if(gebi('nosuperclickerpopup')){
                        CloseBasicPopup();
                        ToggleSuperClickers();
                    }else{
                        ClickBottomMenu(3,1); 
                    }
                }
                
                // AddFloatingTextToMousePos('+'+PMat(_value,_o.value_type),'#e63eff');
            }
        }else{
            PlaySound('ee');
            AddFloatingError(GetText('Already bought'));
        }

        return false;
    }
}


function GetSuperClickerValue(){
    return 5*GetPlayerUpgradeValue(20,1);
}

let superClickersInUse=false;
function ToggleSuperClickers(){
    if(hrac.super_clickers<=0 && !superClickersInUse){
        let _out=SpanID('nosuperclickerpopup',' ');
        for(let _o of GEM_OFFRE){
            if( HasLevel(_o.min_town_level) && _o.value_type == 'super_clickers'){
                if(!hrac.kupene_gem_offre.includes(_o.id) || justBoughtOffers.includes(_o.id)){
                    _out+=SingleGemOffersInner(_o);
                }
            }
        }
        CloseBottomMenu();
        DoBasicPopup(ColorSpan('var(--light-color-2)',Bold(GetText('You have no super clickers left')))+BRBR+_out,GetText('no super clickers'),{centerised:1, bg_image:'linear-gradient(to bottom, #733aad, #393c49)'});
        return false;
    }
    if(hrac.enhanced_clicker){
        superClickersInUse=false;
    }else{
        superClickersInUse = !superClickersInUse;
    }
    // highlightedTileKey=null;
    RefreshHeader();
}


function UseSuperClicker(_count){
    if(!_count)_count=1;
    if(hrac.super_clickers>0){

        hrac.stats.super_clickersUsed+=Math.min(_count,hrac.super_clickers);
        hrac.super_clickers-=Math.min(_count,hrac.super_clickers);
        SetInner('header_superclickers_span',PCislo(hrac.super_clickers));
        if( hrac.super_clickers <=0 ){
            superClickersInUse=false;
        }
    }
}


function GetEnhanceClickerInner(){
    return GetIconImage('ad'+GetEnahncedClickerAdIcon(),20)+' '+GetText('{att1} Enhanced clickers',[hrac.enhanced_clicker.amount])+SPC+GetIconImage('ad'+GetEnahncedClickerAdIcon(),20);
}

function UseEnhancedClicker(){
    if(hrac.enhanced_clicker){
        hrac.stats.enhanced_clickersUsed++;
        hrac.enhanced_clicker.amount--;
        if( hrac.enhanced_clicker.amount <=0 ){
            delete(hrac.enhanced_clicker);
        }else{
            SetInner('enhanced_clickers_div',GetEnhanceClickerInner());
        }
    }
}




/** 

  X    X  XXXXX    XXXXX     XXX    XXX     XXXXXX
  X    X  X   XX  XX   XX   XX XX    X      X     
  X    X  X    X  X        XX   XX   X      X     
  X    X  X   XX  XX       X     X   X      X     
  X    X  XXXXX    XXXXX   XXXXXXX   X      XXXXX 
  X    X  X            XX  X     X   X      X     
  X    X  X             X  X     X   X      X     
  X    X  X       XX   XX  X     X   X   X  X     
   XXXX   X        XXXXX   X     X  XXXXXX  XXXXXX

*/

function CheckAndReturnUpgradeUpsale(_id,_extraFun,_showEvenIfMaxed){
    let _u = UPGRADES_BY_ID[_id];
    // let _u = upgrades.find(u=>u.id == _id);
    if(_u && IsUpgradeAvailable(_u,_showEvenIfMaxed?false:true)){
        let _out = '';
        _out+='<div class="upsale-div" onclick="ClickUpsale('+_id+');'+(_extraFun?_extraFun:'')+'">';
        _out+='<div class="upsale-bottom-line"></div>';
        _out+='<div class="upsale-div-but">';
        _out+=GetTileImage('ui/upsalebut',40,' pulsableSmall');
        _out+='</div>';
        if(_u.icon){
            let _size=40;
            _out+='<div style="float:left;display:inline-block;padding-right:7px;">'+GetTileImage(_u.icon,_size,'')+'</div>';
        }
        _out+=Bold(GetText(_u.label)+(_u.label_sufix?' '+_u.label_sufix:''))+BR;
        _out+=GetUpgradeDescription(_u);

        _out+='</div>';
        
        return _out;
    }
    return '';
}

function ClickUpsale(_id){
    // console.error(GetRect('bottomGridMenuPopup_okno').top,GetDesiredBottomPopupY(GetRect('bottomGridMenuPopup_okno'),1))
    // // console.error(GetDesiredBottomPopupY(GetRect('bottomMenuPopup_okno'),1),Math.abs(GetDesiredBottomPopupY(GetRect('bottomMenuPopup_okno'),1) - GetRect('bottomMenuPopup_okno').top),GetRect('bottomMenuPopup_okno').top)
    // if(Math.abs(GetDesiredBottomPopupY(GetRect('bottomGridMenuPopup_okno'),1) - GetRect('bottomGridMenuPopup_okno').top)>15 ){
    //     return false;
    // }

    //HACK
    PlaySound('book_listing');
    if(!hrac.claimedOfflineEarning){
        ClaimOfflineEarning(1);
    }
    if(gebi('daily_reward_is_visible')){
        TakeDailyReward();
    }

    highlightUpgradeId=_id;
    // isResearchedVisible=true;
    lastUpgradeScroll2=0;
    CloseGridMenu();
    ClickBottomMenu(2,1);
        
    if(gebi('bottomMenuPopup_okno_in_2')){
        gebi('bottomMenuPopup_okno_in_2').scrollTop = 0;
    }
    let _rect = GetRect('upgrade_div_'+_id);
    let _rect2 = GetRect('bottomMenuPopup_okno');
    

    // let _rozdiel = _rect2.top - GetDesiredBottomPopupY(GetRect('bottomMenuPopup_okno'),1);
    // console.log(_rozdiel,)
    if(gebi('bottomMenuPopup_okno_in_2') && _rect && _rect2){
        // gebi('bottomMenuPopup_okno_in').scrollTop = _rect.top-_rect2.height-_rect.height-_rozdiel;
        gebi('bottomMenuPopup_okno_in_2').style.overflowY='auto';
        gebi('bottomMenuPopup_okno_in_2').scrollTop = _rect.top-GetWindowHeight()-_rect2.height*0.5+_rect.height*0.5;
    }

}

function UpsaleGridMenu(_grid,_doBR,_force,_onlyReturnArray){
    if(!HasLevel(7) && !_grid.hill){
        return '';
    }
    if(_grid.mesto && !_force){
        return '';
    }
    
    let _out='';
    let _outA=[];
    if(_grid.znecistenie){
        // _outA.push(CheckAndReturnUpgradeUpsale(6));
        // _outA.push(CheckAndReturnUpgradeUpsale(38));
        // _outA.push(CheckAndReturnUpgradeUpsale(43));
        // _outA.push(CheckAndReturnUpgradeUpsale(44));
        // _outA.push(CheckAndReturnUpgradeUpsale(53));
        if(_grid.chest){
            _outA.push(CheckAndReturnUpgradeUpsale(58));
        }else{
   
            for(let _id of CLEANING_UPGRADES){
                _outA.push(CheckAndReturnUpgradeUpsale(_id));
            }
            if(_grid.mountain){
                _outA.push(CheckAndReturnUpgradeUpsale(69));
            }
            if(_grid.activists){
                _outA.push(CheckAndReturnUpgradeUpsale(70));
            }
            _outA.push(CheckAndReturnUpgradeUpsale(19));
            _outA.push(CheckAndReturnUpgradeUpsale(48));
            _outA.push(CheckAndReturnUpgradeUpsale(10));
            _outA.push(CheckAndReturnUpgradeUpsale(50));
            // _outA.push(CheckAndReturnUpgradeUpsale(79));//massive super clicke
        }
    
    }
    else if(!_grid.artifact){

        // if(_grid.swamp){
        //     _outA.push(CheckAndReturnUpgradeUpsale(13));
        // }
        if(_grid.hill){
            _outA.push(CheckAndReturnUpgradeUpsale(13));
            _outA.push(CheckAndReturnUpgradeUpsale(25));
        }
        if(_grid.rock_mine || _grid.rock_mine2){
            _outA.push(CheckAndReturnUpgradeUpsale(22));
            _outA.push(CheckAndReturnUpgradeUpsale(39));
            _outA.push(CheckAndReturnUpgradeUpsale(51));
        }
        if(_grid.iron_mine || _grid.foundry || _grid.premium_iron_mine){
            _outA.push(CheckAndReturnUpgradeUpsale(36));
        }
        if(_grid.golden_mine || _grid.golden_mine_premium || _grid.golden_mine_2){
            _outA.push(CheckAndReturnUpgradeUpsale(27));
        }
        if(_grid.river_cleaner){
            _outA.push(CheckAndReturnUpgradeUpsale(49));
        }
        if(_grid.water){
            _outA.push(CheckAndReturnUpgradeUpsale(64));
        }
        if(_grid.shipyard){
            _outA.push(CheckAndReturnUpgradeUpsale(29));
        }
        if(_grid.saw_mill||_grid.heavy_lumber_mill){
            _outA.push(CheckAndReturnUpgradeUpsale(23));
            _outA.push(CheckAndReturnUpgradeUpsale(28));
            _outA.push(CheckAndReturnUpgradeUpsale(12));
        }
        if(_grid.wood_storage){
            _outA.push(CheckAndReturnUpgradeUpsale(24));
        }
        if(_grid.farm || _grid.farm_big){
            _outA.push(CheckAndReturnUpgradeUpsale(16));
            _outA.push(CheckAndReturnUpgradeUpsale(17));
            _outA.push(CheckAndReturnUpgradeUpsale(18));
            _outA.push(CheckAndReturnUpgradeUpsale(28));
            _outA.push(CheckAndReturnUpgradeUpsale(32));
            _outA.push(CheckAndReturnUpgradeUpsale(45));
        }
        if(_grid.ship || _grid.ship_big){
            _outA.push(CheckAndReturnUpgradeUpsale(26));
            _outA.push(CheckAndReturnUpgradeUpsale(29));
        }
        if(_grid.chip_factory){
            _outA.push(CheckAndReturnUpgradeUpsale(40));
            _outA.push(CheckAndReturnUpgradeUpsale(41));
            _outA.push(CheckAndReturnUpgradeUpsale(46));
            _outA.push(CheckAndReturnUpgradeUpsale(51));
            _outA.push(CheckAndReturnUpgradeUpsale(71));
        }
        if(_grid.rift || _grid.rift_big){
            _outA.push(CheckAndReturnUpgradeUpsale(34));
        }
        if((_grid.deep_water || _grid.deep_water2) &&  _grid.fish_small){
            _outA.push(CheckAndReturnUpgradeUpsale(72));
        }
        if(_grid.mountain && !_grid.building_type){
            // _outA.push(CheckAndReturnUpgradeUpsale(48));
        }
        if(_grid.solarpanels){
            _outA.push(CheckAndReturnUpgradeUpsale(84));
        }
        if(_grid.thermal_plant){
            _outA.push(CheckAndReturnUpgradeUpsale(85));
            _outA.push(CheckAndReturnUpgradeUpsale(105));
        }
        if(_grid.rock_mine2){
            _outA.push(CheckAndReturnUpgradeUpsale(86));
        }
        if(_grid.steel_storage){
            _outA.push(CheckAndReturnUpgradeUpsale(106));
        }
        if(_grid.oil_storage){
            _outA.push(CheckAndReturnUpgradeUpsale(110));
        }
        if(_grid.mega_city){
            _outA.push(CheckAndReturnUpgradeUpsale(89));
        }
        if(_grid.mesto){
            _outA.push(CheckAndReturnUpgradeUpsale(112));
            _outA.push(CheckAndReturnUpgradeUpsale(111));
            _outA.push(CheckAndReturnUpgradeUpsale(104));
            _outA.push(CheckAndReturnUpgradeUpsale(79));
            _outA.push(CheckAndReturnUpgradeUpsale(67));
            _outA.push(CheckAndReturnUpgradeUpsale(66));
            _outA.push(CheckAndReturnUpgradeUpsale(48));
            _outA.push(CheckAndReturnUpgradeUpsale(47));
            _outA.push(CheckAndReturnUpgradeUpsale(42));
            _outA.push(CheckAndReturnUpgradeUpsale(33));
            _outA.push(CheckAndReturnUpgradeUpsale(15));
            _outA.push(CheckAndReturnUpgradeUpsale(14));
            _outA.push(CheckAndReturnUpgradeUpsale(8));
            _outA.push(CheckAndReturnUpgradeUpsale(1));
        }
        if(_grid.oil_rig_ground || _grid.oil_storage || _grid.rift_miner){
            _outA.push(CheckAndReturnUpgradeUpsale(52));
        }
        if(_grid.oil_rig_ground || _grid.oil_rig){
            _outA.push(CheckAndReturnUpgradeUpsale(68));
        }
        if(_grid.oil_rig){
            _outA.push(CheckAndReturnUpgradeUpsale(56));
            _outA.push(CheckAndReturnUpgradeUpsale(65));
            
        }
        if(_grid.oil_rig_ground || _grid.rift_miner){
            _outA.push(CheckAndReturnUpgradeUpsale(54));
        }
        if(_grid.river_trees){
            _outA.push(CheckAndReturnUpgradeUpsale(109));
            _outA.push(CheckAndReturnUpgradeUpsale(113));
        }
        if(_grid.oil_rig_ground || _grid.oil_storage || _grid.storage_container || _grid.iron_mine || _grid.foundry){
            _outA.push(CheckAndReturnUpgradeUpsale(51));
        }
        if(_grid.forest == 1){
            _outA.push(CheckAndReturnUpgradeUpsale(9));
        }
        if(_grid.deep_water ||_grid.deep_water2 || _grid.forest){
            _outA.push(CheckAndReturnUpgradeUpsale(80));
        }
        if(_grid.tanker){
            _outA.push(CheckAndReturnUpgradeUpsale(56));
        }
        if(_grid.oil_storage){
            _outA.push(CheckAndReturnUpgradeUpsale(91));
        }
        if(_grid.premium_storage){
            _outA.push(CheckAndReturnUpgradeUpsale(90));
        }
        if(_grid.premium_storage || _grid.oil_storage || _grid.storage_container || _grid.storage_crane || _grid.storage_shipyard){
            _outA.push(CheckAndReturnUpgradeUpsale(87));
        }
        if(_grid.golden_mine_premium_2){
            _outA.push(CheckAndReturnUpgradeUpsale(88));
        }
        if(_grid.water_rocks_gem){
            _outA.push(CheckAndReturnUpgradeUpsale(78));
        }
        if(_grid.event_ship){
            for(let _i of [94,95,96,97]){
                _outA.push(CheckAndReturnUpgradeUpsale(_i));
            }
        }
    }

    _outA = _outA.filter(o=>o);
    if(upsaleItems.length==0){
        upsaleItems.push(PullRandomItemFromArray(_outA));
        if(!hrac.nastavenia.smallerGridMenu && _outA.length)upsaleItems.push(PullRandomItemFromArray(_outA));
        upsaleItems = upsaleItems.filter(o=>o);
    }

    if(upsaleItems.length){
        if(_onlyReturnArray){
            return upsaleItems;
        }
        return (hrac.nastavenia.smallerGridMenu?'':(_grid.mesto || isActionGridView?BR:'')+'<span class="possible-upgrades-label">'+GetTextCAPS('POSSIBLE UPGRADES')+': ')+'</span>'+(_doBR?BR:'')+_out+upsaleItems.join('');
    }
    return '';
}

let upsaleItems=[];

function AreGemsVisible(){
    return HasLevel(GEMS_LEVEL_REQUIRED);
}



function GetGemProduction(_grid){
    if(_grid.x==-8) return 5;
    if(_grid.x==244) return 5;
    if(_grid.x==240) return 3;
    if(_grid.x==131) return 2;
    if(_grid.x==206) return 1;
    if(_grid.x==-32) return 3;
    if(_grid.x==-176) return 1;
    if(_grid.x==-214) return 4;
    if(_grid.x==-143) return 2;
    if(_grid.x==-38) return 4;
    return 5;
}

function GetSCProduction(_grid){
    if(_grid.x==-8) return 3;
    if(_grid.x==244) return 3;
    if(_grid.x==240) return 4;
    if(_grid.x==131) return 5;
    if(_grid.x==206) return 8;
    if(_grid.x==-32) return 4;
    if(_grid.x==-176) return 10;
    if(_grid.x==-214) return 4;
    if(_grid.x==-143) return 7;
    if(_grid.x==-38) return 5;
    return 5;
}

const SUPER_FACTORY_INCOME=5000;
function GetSuperFactoryDesc(_grid){
    let _out = GetText('Produces {att1} every day.',GridIsCenterGrid(_grid)?GetText('gems'):PMat(GetGemProduction(_grid),2))+BR+GetText('Produces {att1} every day.',GridIsCenterGrid(_grid)?GetText('Super Clickers'):PMat(GetSCProduction(_grid),'super_clickers'))+BR+GetText3('Produces:')+PMat(SUPER_FACTORY_INCOME,'gold')+PER_INCOME_SHORT;
    if(!GridIsCenterGrid(_grid)){
        _out += BR+GetText('You have total of {att1} / {att2} gem fields used.',[hrac.buildings.gem_mine+hrac.buildings.super_factory,10]);
    }
    return _out;
}
function GetGemMineDesc(_grid){
    return GetText('Produces {att1} every day.',GridIsCenterGrid(_grid)?GetText('gems'):PMat(GetGemProduction(_grid),2))+(GridIsCenterGrid(_grid)?'':BR+GetText('You have total of {att1} / {att2} gem fields used.',[hrac.buildings.gem_mine+hrac.buildings.super_factory,10]));
}
function IsGemHarvested(_grid){
    return hrac.harvested_gems_today.find(g=>g.x==_grid.x && g.y==_grid.y);
}
function TryCollectHarvestedGem(_grid){
    if(_grid.gem_mine||_grid.super_factory){
        if(!IsGemHarvested(_grid)){
            hrac.harvested_gems_today.push({x:_grid.x,y:_grid.y});
            hrac.stats.harvested_gems+=GetGemProduction(_grid);
            AddMat(GetGemProduction(_grid),'gems',1,1);
            if(_grid.super_factory){
                AddMat(GetSCProduction(_grid),'super_clickers',1,0);

            }
            PlaySound('pickaxe_metal');
            return true;
        }
    }
    return false;
}


function InitCollectableGems(){
    drawCollectableGems=[];
    if(!visitingFriend){
        for(let _x in myGridData) for(let _y in myGridData[_x]){
            AddCollectableGemLocation(myGridData[_x][_y]);
        }    
    }
}

function AddCollectableGemLocation(_grid){
    if(_grid && (_grid.gem_mine || _grid.super_factory)){
        drawCollectableGems.push(_grid);
    }
}

function DrawCollectableGems(){
    if(!visitingFriend){
        let _sirka=Math.max(gridSirka,gridSirka/(zoomScale*1.5));
        let _sirkaBG=Math.max(gridSirka*2.5,(gridSirka*2.5)/(zoomScale*1.5));
        if(drawCollectableGems)
        for(let _g of drawCollectableGems){
            let _found=hrac.harvested_gems_today.find(g=>g.x==_g.x && g.y==_g.y);
            if(!_found){
                let _x = _g.x;
                let _y = _g.y;
                MyDrawXY(ctx,'click_gem_bg', (_x+0.5)*gridSirka-_sirkaBG*0.5, (_y+0.5)*gridSirka-_sirkaBG*0.5, _sirkaBG, _sirkaBG,0,0);
                MyDrawXY(ctx,'gems', (_x+0.5)*gridSirka-_sirka*0.5, (_y+0.5)*gridSirka-_sirka*0.5, _sirka, _sirka,0,0);
            }
        }
    }
}



















function ShowAdSkipperBasicPacks(){
    CloseBasicPopup();
    ClickBottomMenu(3);
    allGoodsVisible=false;
    RefreshHeader();
    setTimeout(() => {
        let _rect = GetRect('ad_skipper_div');
        if(_rect){
            let _rect2 = GetRect('bottomMenuPopup_okno_in_2');
            gebi('bottomMenuPopup_okno_in_2').style.overflowY='auto';
            gebi('bottomMenuPopup_okno_in_2').scrollTop = _rect.top - _rect2.top-40;
        }
        
    }, 150);

}

let GEMID=1;
const GEM_OFFRE=[
    {
        cost:10000,
        cost_type:'gold',
        value:45,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:30000,
        cost_type:'gold',
        value:50,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:25000,
        cost_type:'gold',
        description: 'Super clickers_popiska',
        description_val: 'GetSuperClickerValue()',
        value:20,
        value_type:'super_clickers',
        limit:1,
        max_in_view:true,
        min_town_level:4,
        id:GEMID++
    },
    {
        cost:50000,
        cost_type:'gold',
        value:55,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:100000,
        cost_type:'gold',
        value:60,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:200000,
        cost_type:'gold',
        value:65,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:300000,
        cost_type:'gold',
        value:70,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:500000,
        cost_type:'gold',
        value:75,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:750000,
        cost_type:'gold',
        value:80,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:1000000,
        cost_type:'gold',
        value:85,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:2000000,
        cost_type:'gold',
        value:90,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:5000000,
        cost_type:'gold',
        value:95,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:10000000,
        cost_type:'gold',
        value:100,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:30000000,
        cost_type:'gold',
        value:105,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:60000000,
        cost_type:'gold',
        value:110,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:100000000,
        cost_type:'gold',
        value:115,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:200000000,
        cost_type:'gold',
        value:120,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:500000000,
        cost_type:'gold',
        value:125,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:1000000000,
        cost_type:'gold',
        value:130,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:2000000000,
        cost_type:'gold',
        value:135,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:5000000000,
        cost_type:'gold',
        value:140,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:10000000000,
        cost_type:'gold',
        value:150,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:20000000000,
        cost_type:'gold',
        value:175,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:50000000000,
        cost_type:'gold',
        value:200,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:100000000000,
        cost_type:'gold',
        value:250,
        value_type:'gems',
        limit:1,
        max_in_view:true,
        min_town_level:1,
        id:GEMID++
    },
    {
        cost:1,
        cost_type:'gems',
        description: 'Super clickers_popiska',
        description_val: 'GetSuperClickerValue()',
        value:80,
        value_type:'super_clickers',
        min_town_level:4,
        id:GEMID+=1000
    },
    {
        cost:1,
        cost_type:'gems',
        description: 'Super clickers_popiska',
        description_val: 'GetSuperClickerValue()',
        value:500,
        value_type:'super_clickers',
        min_town_level:5,
        id:GEMID+=1
    },


    
    {
        cost:1,
        cost_type:'gems',
        span_id: 'ad_skipper_div',
        description: 'Each AD skipper can skip one AD.',
        value:20,
        value_type:'ad_skippers',
        min_town_level:AD_SKIP_LEVEL_REQ,
        id:GEMID+=1
    },
    {
        cost:1,
        cost_type:'gems',
        description: 'Each AD skipper can skip one AD.',
        value:250,
        value_type:'ad_skippers',
        min_town_level:AD_SKIP_LEVEL_REQ,
        id:GEMID+=1
    },



    {
        cost:1,
        cost_type:'gems',
        hourly_limited:false,
        description: 'can be bought max once every {PACK_HOURS} hours',
        value_multiplier:20,
        value_type:'food',
        min_town_level:FARM_REQURED_LEVEL,
        id:GEMID+=1
    },
    {
        cost:1,
        cost_type:'gems',
        hourly_limited:false,
        description: 'can be bought max once every {PACK_HOURS} hours',
        value:300,
        value_type:'clay',
        requires_upgrade:13,
        min_town_level:FARM_REQURED_LEVEL,
        id:GEMID+=1
    },
    {
        cost:1,
        cost_type:'gems',
        hourly_limited:false,
        description: 'can be bought max once every {PACK_HOURS} hours',
        value_multiplier:100,
        value_type:'lumber',
        min_town_level:LUMBER_REQ_LEVEL,
        id:GEMID+=1
    },
    {
        cost:1,
        cost_type:'gems',
        hourly_limited:false,
        description: 'can be bought max once every {PACK_HOURS} hours',
        value_multiplier:100,
        value_type:'rocks',
        min_town_level:ROCK_LEVEL_REQUIREMENT,
        id:GEMID+=1
    },
    {
        cost:1,
        cost_type:'gems',
        hourly_limited:false,
        description: 'can be bought max once every {PACK_HOURS} hours',
        value_multiplier:100,
        value_type:'steel',
        min_town_level:STEEL_LEVEL_REQ,
        id:GEMID+=1
    },
    {
        cost:1,
        cost_type:'gems',
        hourly_limited:false,
        description: 'can be bought max once every {PACK_HOURS} hours',
        value_multiplier:100,
        value_type:'chips',
        min_town_level:COPPER_LEVEL_REQ,
        id:GEMID+=1
    },
    {
        cost:1,
        cost_type:'gems',
        hourly_limited:false,
        description: 'can be bought max once every {PACK_HOURS} hours',
        value_multiplier:100,
        value_type:'oil',
        min_town_level:OIL_LEVEL_REQ,
        id:GEMID+=1
    },
    {
        cost:1,
        cost_type:'gems',
        hourly_limited:false,
        description: 'can be bought max once every {PACK_HOURS} hours',
        value_multiplier:200,
        value_type:'gold',
        min_town_level:FARM_REQURED_LEVEL,
        id:GEMID+=100
    },
    {
        cost:1,
        cost_type:'gems',
        hourly_limited:false,
        description: 'can be bought max once every {PACK_HOURS} hours',
        value_multiplier:1000,
        value_type:'gold',
        // icon:'gold_pile',
        min_town_level:FARM_REQURED_LEVEL,
        id:GEMID+=100
    },
    {
        cost:1,
        cost_type:'gems',
        hourly_limited:false,
        description: 'can be bought max once every {PACK_HOURS} hours',
        value_multiplier:2500,
        value_type:'gold',
        // icon:'gold_pile',
        min_town_level:FARM_REQURED_LEVEL,
        min_totalspent:5,
        id:GEMID+=1
    },
    {
        cost:1,
        cost_type:'gems',
        description: 'Shows you coordinates to the next page of the Journal.',
        value:1,
        value_type:'book_page',
        // icon:'gold_pile',
        min_town_level:10,
        id:GEMID+=19
    },
    {
        cost:1,
        cost_type:'gems',
        hourly_limited:false,
        description: 'can be bought max once every {PACK_HOURS} hours',
        value_multiplier:100,
        value_type:'event_fish',
        is_event:EVENT_FISH_AND_SHIPS,
        // icon:'gold_pile',
        min_town_level:SHIP_EVENT_LEVEL_REQ,
        id:GEMID+=20
    },

];


function RefreshUpgradesLeftbox(){
    let _y=25+headerHeight+TOP_PADDING;
    if(playerPackages && playerPackages.length){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace();
    }
    if(IsRewardAdVisible()){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace();
    }
    if(GetSpecialOfferPack()){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace()+25;
    }

    if(HasUpgradesLeftBox()){
        let _out='';
        _out+=GetIconImage('research',GetLeftBoxIconSize()-5)+BR;
        _out+=FSize(IsLessThanHour(hrac.premiumUpgrade.time)?14:10,PDurDate('premium_left_box_timer',hrac.premiumUpgrade.time,()=>{RefreshUpgradesLeftbox(); }));

        SetInner('upgrades_left_box','<div class="left_box_in" id="upgrades_left_box_in" ontouchstart="SliderLeftBoxStarted(event,this);" ontouchmove="SlidingleftBox(event,this);"  ontouchend="if(IsSlidedLeftBox(this))return false;PlayTap();OpenPremiumUpgradePopup();">'+_out+'</div>');
        SetXY('upgrades_left_box',10,_y);
        SetWidth('upgrades_left_box',GetLeftBoxIconSize());
        SetWidth('upgrades_left_box_in',GetLeftBoxIconSize());
    }else{
        SetXY('upgrades_left_box',-150,_y);
    }

    RefreshBuildingsLeftbox();
}

function HasUpgradesLeftBox(){
    // if(testVersion)return 1;
    return HasLevel(4) && isPremiumUpgradeVisible && hrac.premiumUpgrade && hrac.premiumUpgrade.upgrade_id && hrac.premiumUpgrade.time > new Date()*1 && IsUpgradeAvailableById(hrac.premiumUpgrade.upgrade_id,1,10);
}

function ResetPremiumUpgrade(){
    hrac.premiumUpgrade = {
        time: new Date()*1,
    }
    RefreshUpgradesLeftbox()
}
function TryGeneratePremiumUpgrade(_now,_forceType){
    if(!hrac.premiumUpgrade){
        ResetPremiumUpgrade();
    }
    // console.log(hrac.premiumUpgrade,hrac.premiumUpgrade?.time<new Date()*1 + (_now?0:1000*60*60))
    if(testVersion||hrac.premiumUpgrade && (hrac.premiumUpgrade.time + (_now?-100000000:1000*3600*12) < new Date()*1)){
        // console.log(hrac.premiumUpgrade,hrac.premiumUpgrade?.time<new Date()*1 + (_now?0:1000*60*60))
        let _uid = GetRandomUpgradeID(!HasLevel(20));
        if(_forceType){
            _uid = _forceType;
        }
        let _cost = 800;
        let _perc= MyRand(1,3)*3+5;
        if(_uid){
            let _u = upgrades.find(u=>u.id == _uid);
            if(_u){
                if(_u.gems){
                    if(_u.min_town_level+10 < hrac.stats.main_town_level){
                        _perc= MyRand(1,3)*5+25;
                    }
                    _cost = Mfl(GetUpgradeGemCost(_u) * (100-_perc) * 0.01);
                }else{
                    _cost = 200 + _u.min_town_level*15;
                    if(hrac.upgrades[_uid]){
                        _cost*=(1+hrac.upgrades[_uid]*0.05);
                    }
                    _cost = Mro(_cost);
                    _perc = 0;
                }
            }
        }
        hrac.premiumUpgrade = {
            time: new Date()*1 + 60*60*1000-1,//1 hour
            upgrade_id: _uid,
            cost: _cost,
            salePerc: _perc
        }

    }
    RefreshUpgradesLeftbox();
}

function GetRandomUpgradeID(_onlyGemCost){
    let _array=[];
    for(let _u of upgrades) if(_u){
        if(IsUpgradeAvailable(_u,1,_u.early_minus?_u.early_minus:0)){
            if(GetPlayerUpgrade(_u) < _u.max_level){
                if(!_onlyGemCost || _u.gems){
                    _array.push(_u.id);
                }
            }
        }
    }
    if(_array.length==0){
        return 0;
    }
    // if(testVersion)return 24;
    return GetRandomItemFromArray(_array);
}

function OpenPremiumUpgradePopup(){
    if(hrac.premiumUpgrade?.upgrade_id){
        CloseBottomMenu();

        let _u = upgrades.find(u=>u.id == hrac.premiumUpgrade?.upgrade_id);
        if(GetPlayerUpgrade(_u) >= _u.max_level){
            RefreshUpgradesLeftbox();
            return false;
        }
        
        let _out='';
        _out+='<table class="auto-margin premium-upgrade-table" ><tr>';
        _out+='<td>'+GetIconImage('research',80)+'</td>';
        _out+='<td>';
        _out+=FSize(18,Bold(GetText(_u.label)+(_u.label_sufix?_u.label_sufix:'')));
        _out+=BR+GetUpgradeDescription(_u);
        if(!HasLevel(_u.min_town_level)){
            _out+=BR+ColorSpan('var(--light-purple-3)',GetText('This upgrade is normally available from level {att1}',_u.min_town_level));
        }
        _out+='</td>';

        _out+='<table class="auto-margin" style="width:90%;"><tr>';
        _out+='<td style="width:50%;">';
        _out+=BRBR+FSize(16,GetText3('Original price:'))+BR+FSize(24,'<span style="text-decoration:line-through;color:red;">'+ColorSpan('var(--darker-color)',(_u.gems?PMat(GetUpgradeGemCost(_u),'gems'):PMats(GetUpgradeCosts(_u))))+'</span>');
        _out+='</td><td style="width:50%">';
        _out+=BRBR+FSize(16,GetText3('New price:'))+BR+FSize(32,Bold(PMat(hrac.premiumUpgrade.cost,'gems',32)));
        _out+='</td></tr></table>';
        _out+=BRBR+Button(GetTextCAPS('BUY'),'BuyPremiumUpgrade();',{color:'teal'});
        _out+=SPC+Button(GetTextCAPS('HIDE'),'HidePremiumUpgrade();');
        _out+=DivClass('expires-in',GetText3('Offer expires in:')+Bold(PDurDate('premium_upgrade_popup_timer',hrac.premiumUpgrade.time,()=>{CloseBasicPopup();})));
        

        
        DoBasicPopup(_out,GetTextCAPS('Premium research'),{centerised:1,max_width: GetSmallerPopupWidth(150,400)});
    }else{
        RefreshUpgradesLeftbox();
    }
}

function BuyPremiumUpgrade(_confirm){
    if(!AreYouSure(_confirm,GetText('Are you sure you want to buy this upgrade for gems?'),GetText('Premium purchase'),'BuyPremiumUpgrade(1);',GetTextCAPS('BUY'),{color: 'teal'})){
        return false;
    }
    let _u = upgrades.find(u=>u.id == hrac.premiumUpgrade?.upgrade_id);
    if(_u){
        if(GetPlayerUpgrade(_u) < _u.max_level)
        if(MamDostGemov(hrac.premiumUpgrade.cost,1)){
            BuyUpgradeAfterEffects(_u);
            hrac.stats.premium_upg_bought++;
            
            CloseBasicPopup();
            ResetPremiumUpgrade();
        }
    }
}

let isPremiumUpgradeVisible=true;
function HidePremiumUpgrade(){
    isPremiumUpgradeVisible=false;
    RefreshUpgradesLeftbox();
    CloseBasicPopup();
}


















/// BUDOVY
/// BUDOVY
/// BUDOVY

function RefreshBuildingsLeftbox(){
    let _y=25+headerHeight+TOP_PADDING;
    if(playerPackages && playerPackages.length){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace();
    }
    if(IsRewardAdVisible()){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace();
    }

    if(GetSpecialOfferPack()){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace()+25;
    }

    if(HasUpgradesLeftBox()){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace()+25;
    }

    if(HasBuildingsLeftBox()){
        let _out='';
        
        _out+=GetBuildingMultiTileImage(BUILDINGS_BY_IDS[hrac.buildingLeftBox.building_id],GetLeftBoxIconSize()-3,'premium_building_img')+BR;
        _out+=FSize(IsLessThanHour(hrac.buildingLeftBox.time)?14:10,PDurDate('building_left_box_timer',hrac.buildingLeftBox.time,()=>{RefreshBuildingsLeftbox(); }));

        SetInner('buildings_left_box','<div class="left_box_in" id="buildings_left_box_in"  ontouchstart="SliderLeftBoxStarted(event,this);" ontouchmove="SlidingleftBox(event,this);"  ontouchend="if(IsSlidedLeftBox(this))return false;PlayTap();OpenPremiumBuildingPopup();">'+_out+'</div>');
        SetXY('buildings_left_box',10,_y);
        SetWidth('buildings_left_box',GetLeftBoxIconSize());
        SetWidth('buildings_left_box_in',GetLeftBoxIconSize());
    }else{
        SetXY('buildings_left_box',-150,_y);
    }
    
    RefreshSuperClickerBonusButton();
}

function HasBuildingsLeftBox(){
    return HasLevel(7) &&  isBuildingLeftBoxVisible && hrac.buildingLeftBox && hrac.buildingLeftBox.building_id && hrac.buildingLeftBox.time > new Date()*1;
}


function ResetBuildingLeftBox(){
    hrac.buildingLeftBox = {
        time: new Date()*1,
    }
    RefreshBuildingsLeftbox()
   
}

const LEFT_BOX_BUILDINGS_HOURS=6;

function TryGenerateBuildingLeftBox(_now,_type){
    if(!hrac.buildingLeftBox){
        ResetBuildingLeftBox();
        hrac.buildingLeftBox.time -= 24*3600*1000;
    }
    
    if(hrac.buildingLeftBox && (_now || hrac.buildingLeftBox.time + (1000*3600*(LEFT_BOX_BUILDINGS_HOURS+2)) < new Date()*1)){
        let _bo = GetRandomPremiumBuildingID();
        if(_type){
            _bo = possiblePremiumBuildings.find(x=>x.id == _type);
        }
        if(!_bo)return false;
        let _bid = _bo.id;

        let _cost = 1100+MyRand(0,12)*50;
        if(_cost>hrac.gems){
            _cost = (Mro(hrac.gems/50)*50)+125+MyRand(0,10)*5;
        }else{

            if(_bo.smaller){
                _cost =  MyRand(0,10)*20+300;
            }
        }
        if(_cost < 400){
            _cost = 400;
        }
        let _cost2 = _cost;
        
        if(_bid){
            let _b = BUILDINGS_BY_IDS[_bid];
            if(_b){
                let _amount = Math.max(1,Mfl(Math.min(_bo.max, (_cost*0.7) / _bo.cost)));
                _cost2-=_amount*_bo.cost;
                let _super_clickers = 0;
                let _ad_skippers = 0;

                if(_cost2<50){
                    _super_clickers=75;
                }else if(_cost2>0){
                    let _percSC=MyRand(30,55);
                    if(hrac.ad_skippers>20 ){
                        _percSC=MyRand(70,90);
                    }
                    let _cost_per_sc=1.4;//super clickers
                    if(hrac.super_clickers > 1000){
                        _cost_per_sc=1.1;
                    }
                    let _cost_per_askip=18;//ad skipper

                    _super_clickers = Mce(((_cost2*_percSC*0.01) / _cost_per_sc)/5)*5;
                    _ad_skippers = Mce(((_cost2*(100-_percSC)*0.01) / _cost_per_askip));


                }

                hrac.buildingLeftBox = {
                    time: new Date()*1 + LEFT_BOX_BUILDINGS_HOURS*60*60*1000-1,//6 hours
                    building_id: _bid,
                    amount: _amount,
                    cost: _cost,
                    super_clickers:_super_clickers,
                    ad_skippers:_ad_skippers,
                }

                // if(testVersion)hrac.buildingLeftBox.time = new Date()*1 + 120*1000-1;

            }
        }

    }
    RefreshBuildingsLeftbox();
}



function OpenPremiumBuildingPopup(){
    if(!HasBuildingsLeftBox() || !hrac.buildingLeftBox.building_id){
        return false;
    }
    let _b=BUILDINGS_BY_IDS[hrac.buildingLeftBox.building_id]
    if(_b){
        CloseBottomMenu();
        
        let _grid=GetGridData(0,0);
        let _desc=GetFullBuildingDescription(_grid,_b,1,1);
        if(_b.level_up_info){
            _desc+=ColorSpan('var(--light-purple-3)',_b.level_up_info())
        }
        
        let _ppb = possiblePremiumBuildings.find(o=>o?.id == hrac.buildingLeftBox.building_id);
        
        let _out='';
        // _out+=Bold(GetText(_b.name));
        if(GetWindowHeight()>900){
            if(_ppb.text){
                _out+=Bold(GetText(_ppb.text));
            }
        }
        _out+='<table class="premium-building-table" cellspacing="5"><tr>';
        _out+='<td>'+GetBuildingMultiTileImage(_b,85,'')+'</td>';
        _out+='<td style="text-align:left;"><span style="line-height:24px;">'+Bold(FSize(64,hrac.buildingLeftBox.amount+'x'))+'</span>'+BR+Bold(FSize(18,GetText(_b.name)))+'</td></tr></table>';
        //
        //
        _out+=DivClass('popup-in-block',_desc);
        _out+=BR+Bold(FSize(24,'+'+PMat(hrac.buildingLeftBox.super_clickers,'super_clickers',28,1)));
        if(hrac.buildingLeftBox.ad_skippers>0){
            _out+=SPC+SPC+SPC+Bold(FSize(24,'+'+PMat(hrac.buildingLeftBox.ad_skippers,'ad_skippers',28,1)));
        }
        _out+=BRBR+HRp;
        if(window.innerWidth > 300){
            _out+=FSize(14,GetText3('Price:'))+BR;
        }
        _out+=FSize(40,Bold(PMat(hrac.buildingLeftBox.cost,'gems',40)))
        _out+=BRBR+Button(GetTextCAPS('BUY'),'BuyBuildingFromLeftbox();',{super_button:'teal'});
        _out+=SPC+Button(GetTextCAPS('HIDE'),'HideBuildingLeftBox();');
        _out+=DivClass('expires-in',GetText3('Offer expires in:')+Bold(PDurDate('building_popup_timer',hrac.buildingLeftBox.time,()=>{CloseBasicPopup(); })));
        
        DoBasicPopup(_out,GetTextCAPS('SALE'),{centerised:1,max_height_vh:92, max_width: GetSmallerPopupWidth(150,400)});
    }
}

let isBuildingLeftBoxVisible=true;
function HideBuildingLeftBox(){
    isBuildingLeftBoxVisible=false;
    RefreshBuildingsLeftbox();
    CloseBasicPopup();
}


function BuyBuildingFromLeftbox(_confirm){
    if(!AreYouSure(_confirm,GetText('Are you sure you want to buy this structure for gems?'),GetText('Premium purchase'),'BuyBuildingFromLeftbox(1);',GetTextCAPS('BUY'),{color: 'teal'})){
        return false;
    }
    let _b=BUILDINGS_BY_IDS[hrac.buildingLeftBox.building_id];
    if(_b){
        if(MamDostGemov(hrac.buildingLeftBox.cost,1)){
            PlaySound('cash1');
            hrac.stats.premium_build_bought++;
            AddMat(hrac.buildingLeftBox.super_clickers,'super_clickers',0,0,0,1);
            AddMat(hrac.buildingLeftBox.ad_skippers,'ad_skippers',1,1);
            let _bkey = _b.grid_key;
            if(hrac.storage[_bkey]){
                hrac.storage[_bkey]+=hrac.buildingLeftBox.amount;
            }else{
                hrac.storage[_bkey]=hrac.buildingLeftBox.amount;
            }
            
            CloseBasicPopup();
            ResetBuildingLeftBox();
        }
    }

}


function GetRandomPremiumBuildingID(){
    let _array=[];
    for(let _o of possiblePremiumBuildings) if(_o){
        if(HasLevel(_o.min_level) && !HasLevel(_o.max_level)){
            if(!hrac.buildingLeftBox || !hrac.buildingLeftBox.building_id || hrac.buildingLeftBox.building_id != _o.id){
                if(!_o.chance_perc)_o.chance_perc=100;
                let _chance = Mro(_o.chance_perc/25);
                for(let ch = 0;ch<_chance;ch++){
                    _array.push(_o);
                }
            }
        }
    }
    if(_array.length==0){
        return 0;
    }
    // if(testVersion)return possiblePremiumBuildings[2]
    return GetRandomItemFromArray(_array);
}

const possiblePremiumBuildings=[
    {
        //premium lumber mill
        id:63,
        max:7,
        cost:100,
        min_level:LUMBER_REQ_LEVEL,
        max_level:60,
        text: 'If you need lumber, this is the perfect choice for you!',
        smaller:1,
        chance_perc:75,
    },
    {
        //sea generator
        id:15,
        max:20,
        cost:35,
        min_level:20,
        max_level:40,
        text: 'Best way to produce electricity! It even reduces pollution!',
        chance_perc:150,
    },
    {
        //premium storage
        id:50,
        max:30,
        cost:25,
        min_level:STEEL_LEVEL_REQ,
        max_level:OIL_LEVEL_REQ+5+999,
        text: 'Need storage? More materials?',
        chance_perc:150,
    },
    {
        //advanced rock miner
        id:57,
        max:20,
        cost:25,
        min_level:21,
        max_level:ROCK_MINE2_LEVEL_REQUIRED-2,
        text: 'Faster stone mining?',
        chance_perc:50,
        
    },
    {
        //solar plants
        id:3,
        max:30,
        cost:25,
        min_level:21,
        max_level:SOLAR_PANEL_LEVEL_REQUIRED-1,
        text: 'More electricity? We got you covered!'
    },
    {
        //palms
        id:64,
        max:30,
        cost:10,
        min_level:10,
        max_level:999,
        text: 'Trees with food!',
        chance_perc:250,
    },
    {
        //rift harvester
        id:48,
        max:5,
        smaller:1,
        cost:25,
        min_level:OIL_LEVEL_REQ,
        max_level:OIL_LEVEL_REQ+10,
        text: 'Oil from rifts!',
        chance_perc:50,
    },
    {
        //big fishing ship
        id:62,
        max:5,
        smaller:1,
        cost:20,
        min_level:18,
        max_level:BIG_SHIP_LEVEL_REQ-2,
        text: ''
    },

    {
        //advanced iron mine
        id:41,
        max:20,
        cost:27,
        min_level:STEEL_LEVEL_REQ,
        max_level:STEEL_LEVEL_REQ+10,
        text: "Iron without hills! Iron everywhere!"
    },
    {
        //rock boost
        id:47,
        max:10,
        cost:20,
        min_level:ROCK_LEVEL_REQUIREMENT,
        max_level:999,
        text: "Boost your stone mines!"
    },
    {
        //super gem gold min
        id:72,
        max:10,
        cost:65,
        min_level:21,
        max_level:PREMIUM_GOLD_MINE_2_LEVEL_REQ,
        text: "Maximum gold mining!"
    },
    {
        //heavy gold mine
        id:70,
        max:5,
        cost:45,
        min_level:30,
        max_level:GOLD_MINE_3_LEVEL_REQ-3,
        smaller:1,
        text: "Maximum gold mining!"
    },
    {
        //heavy chip factory
        id:68,
        max:3,
        cost:50,
        min_level:COPPER_LEVEL_REQ+2,
        max_level:CHIP_FACTORY_2_LEVEL_REQ-3,
        smaller:1,
        text: ""
    },
    {
        //thermal plant
        id:69,
        max:5,
        cost:80,
        min_level:40,
        max_level:THERMAL_POWER_PLANT_LEVEL_REQ-3,
        smaller:1,
        text: 'More electricity? We got you covered!'
    },
    {
        //shipyard market
        id:77,
        max:4,
        cost:90,
        min_level:40,
        max_level:999,
        text: '',
        chance_perc:150,
    },
    {
        //sekvoje
        id:78,
        max:25,
        cost:13,
        min_level:30,
        max_level:999,
        text: 'The biggest trees that there are',
        chance_perc:200,
    },
    {
        //eco storage
        id:80,
        max:8,
        cost:110,
        min_level:40,
        max_level:PREMIUM_STORAGE_2_LEVEL_REQ-3,
        text: '',
        chance_perc:150,
    },
    {
        //bambus
        id:86,
        max:15,
        cost:35,
        min_level:40,
        max_level:999,
        text: 'material of the future! Generates gold, reduces pollution and increases restoration strength.',
        chance_perc:175,
    },
    {
        //mangrove
        id:85,
        max:25,
        cost:13,
        min_level:35,
        max_level:999,
        text: 'Trees on water!',
        chance_perc:120,
    },

    //TryGenerateBuildingLeftBox(1,78);




    // pridat este: biodom, thermal elektrarne, lepsia zlata bana, eco foundry
    // pridat este:   
];





let slideStartX=0;
let slidedLeftBox=false;
function SliderLeftBoxStarted(_eve,_this){
    slidedLeftBox=false;
    if(_eve.touches && _eve.touches[0]){
        slideStartX = _eve.touches[0].clientX;
    }
}
function IsSlidedLeftBox(_this){
    if(!slidedLeftBox){
        if(_this)_this.style.transform = 'translate(0px, 0px)';
    }
    return slidedLeftBox;
}

function SlidingleftBox(_eve,_this){
    if(_eve.touches && _eve.touches[0] && slideStartX){
        if(_eve.touches[0].clientX-slideStartX<0){
            if(_this)_this.style.transform = 'translate('+(_eve.touches[0].clientX-slideStartX)+'px, 0px)';
        }
        if(_eve.touches[0].clientX < slideStartX-30){
            if(_this.id == 'scb_div_in'){
                super_clicker_bonus_hide_value=GetSuperClickerStarterPackDisplayBonus();//toto je hide vlastne
                RefreshSuperClickerBonusButton();
            }
            if(_this.id == 'special_offer_left_box_in'){
                HideSpecialOffer();
            }
            if(_this.id == 'upgrades_left_box_in'){
                HidePremiumUpgrade();
            }
            if(_this.id == 'buildings_left_box_in'){
                HideBuildingLeftBox();
            }
            if(_this.id == 'ad_img_inner'){
                DiscardAd();
            }
            if(_this.id == 'pool_left_box_in' && HasPoolVisible()){
                DiscardPool();
            }
              
            slidedLeftBox=true;
            return true;
        }
    }
    return false;
}















// pool_left_box



function RefreshPoolLeftBoxButton(){
    return false; //uz neni anketa

    let _y=25+headerHeight+TOP_PADDING;
    if(playerPackages && playerPackages.length){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace();
    }
    if(hrac.currentAdId){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace();
    }
    if(GetSpecialOfferPack()){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace()+25;
    }
    if(HasUpgradesLeftBox()){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace()+25;
    }
    if(HasBuildingsLeftBox()){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace()+25;
    }
    if(HasStarterPacks()){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace()+25;
    }



    if(HasPoolVisible()){
        let _out='';
        _out+=GetIconImage('pool',GetLeftBoxIconSize()-5)+BR;
        _out+=GetText('Survey');

        SetInner('pool_left_box','<div id="pool_left_box_in" class="left_box_in" ontouchstart="SliderLeftBoxStarted(event,this);" ontouchmove="SlidingleftBox(event,this);" ontouchend="if(IsSlidedLeftBox(this))return false; PlayTap();PoolPopup();">'+_out+'</div>');
        SetWidth('pool_left_box',GetLeftBoxIconSize());
        SetWidth('pool_left_box_in',GetLeftBoxIconSize());
        SetXY('pool_left_box',10,_y);
    }else{
        SetXY('pool_left_box',-150,_y);
    }
    
}

function HasPoolVisible(){
    return (!hrac.pool_spinoff && !poolHidden && HasLevel(10))
}

const GEMS_FOR_POOL=75;
let poolHidden=false;
function PoolPopup(){
    if(!HasPoolVisible()){
        return false;
    }
    let _out='';
    _out+=GetText('We would like to hear your opinion about the game. Help us by answering a few questions in our survey and earn {att1} gems in the process!',PMat(GEMS_FOR_POOL,'gems'));
    if(totalSpent>0){
        _out+=BRBR+Button(GetText('Survey'),'PoolSuccesPopup();',{color: 'teal', link: 'https://forms.gle/UepWMX5kNcZzBdKV6'});
    }else{
        _out+=BRBR+Button(GetText('Survey'),'PoolSuccesPopup();',{color: 'teal', link: 'https://forms.gle/XynySPcisRufGjyz9'});
    }

    _out+=BRBR+Button(GetText('Discard'),'DiscardPool(); CloseBasicPopup();');
    DoBasicPopup(_out,GetText('Tell us your opinion'),{centerised:1});
}

function PoolSuccesPopup(){
    let _out=GetText3('Reward:')+BRBR+FSize(20,PMat(GEMS_FOR_POOL,'gems',24));
    _out+=BRBR+Button(GetText('Claim'),'ClaimPoolReward();');
    DoInfoPopupWithOptions(_out,GetText('Thank you')+'!',{centerised:1, noclose:1});
    
}

function ClaimPoolReward(){
    hrac.pool_spinoff=1;
    AddMat(GEMS_FOR_POOL,'gems',1,0);
    RefreshPoolLeftBoxButton();
    ClosePopup('infoPopup');
    CloseBasicPopup();
    PlaySound('cash1');
}

function DiscardPool(){
    poolHidden=true;
    RefreshPoolLeftBoxButton();
}

let giveIncomeInTicks=0;
let calculateAchievementsInTicks=0;
function ProcessIncome(){
    if(visitingFriend){
        return false;
    }


    if(IsIncomeHappening()){
        if(totalProcessGameTime-lastIncomeTime>=MAX_INCOME_TIME){
            if(!ratamIncome){
                lastIncomeTime=totalProcessGameTime;
                ZratajHracStatsCezBlocks();//ZratajHracStats();
                giveIncomeInTicks=1; 
                calculateAchievementsInTicks=3;           
                RefreshAdButton();
                // GiveIncome(0);
            }
        }
    }
}

function GetModifiedIncome(_income){
    
    if(GetPolutionPerc()){
        _income*=GetPolutionPerc();
    }
    return Mro(_income)
}

// here!!
function GiveIncome(_onBackground){
    if(visitingFriend){
        return false;
    }

    if(hrac.gems <= 3000){
        hrac.gems += 30
    }

    if(hrac.super_clickers <= 250){
        hrac.super_clickers += 20
    }

    let _income=GetModifiedIncome(hrac.income);
    hrac.income_with_polution = _income;
    let _multiplier = 100 //GetIncomeMultiplier();
    
    AddGold(_income*_multiplier,1);
    // AddGold(_income*100,1);
    let showFloatingTextLumber=false;
    if(hrac.lumber<GetMaxLumberStorage()){
        showFloatingTextLumber=true;
        hrac.lumber+=hrac.lumberIncome*_multiplier;
        if(hrac.lumber>GetMaxLumberStorage())hrac.lumber=GetMaxLumberStorage();
    }
    let showFloatingTextRocks=false;
    if(hrac.rocks<GetMaxRocksStorage()){
        showFloatingTextRocks=true;
        hrac.rocks+=hrac.rocksIncome*_multiplier;
        if(hrac.rocks>GetMaxRocksStorage())hrac.rocks=GetMaxRocksStorage();
    }
    let showFloatingTextSteel=false;
    if(hrac.steel<GetMaxSteelStorage()){
        showFloatingTextSteel=true;
        hrac.steel+=hrac.steelIncome*_multiplier;
        if(hrac.steel>GetMaxSteelStorage())hrac.steel=GetMaxSteelStorage();
    }
    let showFloatingTextChips=false;
    if(hrac.chips<GetMaxChipsStorage()){
        showFloatingTextChips=true;
        hrac.chips+=hrac.chipsIncome*_multiplier;
        if(hrac.chips>GetMaxChipsStorage())hrac.chips=GetMaxChipsStorage();
    }
    let showFloatingTextOil=false;
    if(hrac.oil<GetMaxOilStorage()){
        showFloatingTextOil=true;
        hrac.oil+=hrac.oilIncome*_multiplier;
        if(hrac.oil>GetMaxOilStorage())hrac.oil=GetMaxOilStorage();
    }
    let _fishIncome = 0;
    if(IsEvent()){
        _fishIncome = Mro((GetTotalEventFishPercBonus()+100)*0.01*hrac.event_fish_income*_multiplier);
        hrac.event_fish+=_fishIncome;
        hrac.event_fish_total += _fishIncome;
        UpdateMyMSLimitPos();
    }

    let _oldFood = hrac.food;
    let _spoiledFood = 0;
    if(hrac.food > hrac.premium_food_storage){
        if(hrac.food > GetMinimumFoodStorage()){
            _spoiledFood = Mro((hrac.food-GetMinimumFoodStorage()) * GetFoodSpoilPerc());
            if(_spoiledFood<0)_spoiledFood=0;
        }
    }

    if(_spoiledFood<2)_spoiledFood=0;
    let _spoiledGoodGold=0;
    if(GetPlayerUpgradeValue(32)){
        _spoiledGoodGold = Math.ceil(GetPlayerUpgradeValue(32)*_spoiledFood);
        hrac.gold += _spoiledGoodGold;
    }
    hrac.food-=_spoiledFood;
    if(hrac.food < 7000000){
        hrac.food+=hrac.foodIncome*10;
    }
    // hrac.food+=hrac.foodIncome*_multiplier;
    let _plusFood = hrac.food-_oldFood;
    hrac.stats.income_ticks++;
    saveOrderIn9sec=0;
    if(hrac.nastavenia.showIncome){
        let _posun_x = 0;
        if(allGoodsVisible){
            let _rect = GetRect('goodsOverview');
            if(_rect){

                _posun_x=_rect.width+50;
                let _por = 2;
                if(!_onBackground){
                    if(_plusFood)AddFloatingText(window.innerWidth*0.95-_posun_x,40+120+35*1,'+'+PMat(hrac.foodIncome*_multiplier,4)+(_spoiledFood?'-'+PCislo(_spoiledFood):''),{fontSize:14});
                    if(showFloatingTextLumber &&hrac.lumberIncome)AddFloatingText(window.innerWidth*0.95-_posun_x,40+120+35*(_por++),'+'+PMat(hrac.lumberIncome*_multiplier,3),{fontSize:14});
                    if(showFloatingTextRocks &&hrac.rocksIncome)AddFloatingText(window.innerWidth*0.95-_posun_x,40+120+35*(_por++),'+'+PMat(hrac.rocksIncome*_multiplier,5),{fontSize:14});
                    if(showFloatingTextSteel &&hrac.steelIncome)AddFloatingText(window.innerWidth*0.95-_posun_x,40+120+35*(_por++),'+'+PMat(hrac.steelIncome*_multiplier,9),{fontSize:14});
                    if(showFloatingTextChips && hrac.chipsIncome)AddFloatingText(window.innerWidth*0.95-_posun_x,40+120+35*(_por++),'+'+PMat(hrac.chipsIncome*_multiplier,10),{fontSize:14});
                    if(showFloatingTextOil && hrac.oilIncome)AddFloatingText(window.innerWidth*0.95-_posun_x,40+120+35*(_por++),'+'+PMat(hrac.oilIncome*_multiplier,'oil'),{fontSize:14});
                    if(_fishIncome)AddFloatingText(window.innerWidth*0.95-_posun_x,40+120+35*(_por++),'+'+PMat(_fishIncome,'event_fish'),{fontSize:14});
                }
            }
        }

        let _bigHeaderShift  = (hrac.nastavenia.show_pollution_in_header?150:0);
        if(!_onBackground){
            if(!IsGoldIncomeOverGrids()){
                AddFloatingText(window.innerWidth*0.95,40+_bigHeaderShift,'+'+PMat(_income*_multiplier,1),{fontSize:14});
            }             
            if(_spoiledGoodGold){
                AddFloatingText(window.innerWidth*0.95-_posun_x-(allGoodsVisible?90:0),40+40+_bigHeaderShift,'+'+PMat(_spoiledGoodGold,1)+' / '+FloatingTextIcon('food'),{fontSize:14});
            }
            
            if(hrac.stats.towns>1 && hrac.stats.towns<4 && hrac.stats.income_ticks%3==0){
                if( GetPlayerUpgradeValue(1)<=0 && hrac.gold>500){
                    
                }else{
                    AddFloatingText(window.innerWidth*0.5,120+60,GetText('More towns and forests = bigger income'),{fontSize:18,color:'yellow'});
                }
            }
        }
    }

    for(let _g of allTowns){
        _g.earn_clicks_available+=PlusTownEarnClicks(_g);
        if(_g.earn_clicks_available>GetMaxTownEarnClicks(_g)){
            _g.earn_clicks_available=GetMaxTownEarnClicks(_g);
        }

    }

    if(!_onBackground){

        // SaveGame();
        saveInTicks=5;
        RefreshStats();
        RefreshHeader();
        RefreshTownCostInfo();
        if(gebi('town_clicks_availble') && last_grid_clicked && last_grid_clicked.grid){
            SetInner('town_clicks_availble',PCislo(last_grid_clicked.grid.earn_clicks_available))
        }
        HideDiv('outofgoldspan');
        if(IsGoldIncomeOverGrids()){
            doGridIncomesFT=true;
        }
    }
}

doGridIncomesFT=false;
function IsGoldIncomeOverGrids(){
    if(HasLevel(10) || zoomScale < 0.8 || popupsVisible.bottomMenuPopup){
        return false;
    }
    return true;
}


/** 

  XXXXXX   XXX      XXXXX    XXXXX   X    X   XXXXX 
   X   XX   X      XX   XX  XX   XX  X   X   XX   XX
   X    X   X      X     X  X        X  X    X      
   X   XX   X      X     X  X        X X     XX     
   XXXXX    X      X     X  X        XX       XXXXX 
   X   XX   X      X     X  X        X X          XX
   X    X   X      X     X  X        X  X          X
   X   XX   X   X  XX   XX  XX   XX  X   X   XX   XX
  XXXXXX   XXXXXX   XXXXX    XXXXX   X    X   XXXXX 

*/


let blocks={};

function CalculateBlock(_i,_j,_console){
    blockCalculations++;
    if(!blocks[_i])blocks[_i]={};
    if(!blocks[_i][_j])blocks[_i][_j]={i: _i, j:_j};
    let _block = blocks[_i][_j];
    _block.buildings={};
    _block.buildings_el={};
    _block.buildings_pollution={};
    for(let _kb in BUILDINGS_BY_KEYS){
        _block.buildings[_kb]=0;
        _block.buildings_el[_kb]=0;
        _block.buildings_pollution[_kb]=0;
    }
    if(blocks[_i][_j].force_recalculate){
        blocks[_i][_j].force_recalculate=false;
    }
    _block.total_tanker_boosts=0;
    _block.population=0;
    _block.foodIncome=0;
    _block.lumberIncome=0;
    _block.rocksIncome=0;
    _block.steelIncome=0;
    _block.chipsIncome=0;
    _block.oilIncome=0;
    _block.event_fish_income=0;

    _block.stats={};
    _block.stats.towns_all=0;
    _block.stats.broken_power=0;
    _block.stats.electricity=0;
    _block.stats.electricity_plus=0;
    _block.stats.electricity_minus=0;
    _block.stats.electricity_minus_2=0;
    _block.stats.airplane_tiles=0;
    _block.stats.clears=0;
    _block.stats.water_tiles=0;
    _block.stats.river_tiles=0;
    _block.stats.deep_water_tiles=0;
    _block.stats.income=0;
    _block.stats.income_shipyard_heavy=0;
    _block.stats.income_gold_mine=0;
    _block.stats.forests=0;
    _block.stats.pollution=0;
    _block.stats.forest_income=0;
    _block.stats.found_artifacts=0;
    _block.stats.pocet_mega_cities=0;
    _block.stats.towns_income=0;
    _block.stats.towns_connected=0;
    _block.stats.town_clicks=0;
    _block.stats.main_town_clicks=0;
    _block.stats.main_town_level=0;
    _block.stats.towns=0;
    _block.stats.town_levels=0;
    _block.stats.total_foundry_with_mines=0;
    _block.stats.totalFarmFields=0;
    _block.stats.totalFarmFields2=0;
    _block.stats.ships_used=0;
    _block.stats.shipsFoodIncome=0;
    _block.stats.total_working_chip_factories=0;
    _block.stats.storage_container_rock=0;
    _block.stats.storage_container_steel=0;
    _block.stats.storage_container_chips=0;
    _block.stats.streets=0;
    _block.stats.activists=0;
    _block.stats.total_woodStorages=0;
    _block.stats.total_uranium_fields=0;
    _block.stats.water_rocks_gem=0;
    _block.stats.income_roads=0;
    _block.stats.other_income=0;
    _block.stats.working_storage_shipyard=0;
    _block.stats.restoration_strength=0;

    let _hasFoundry = GetPlayerUpgradeValue(46,1);
    let _hasDoubleIronOre = GetPlayerUpgradeValue(36,1);
    let _lumberCutBonus = GetPlayerUpgradeValue(23,1);
    let _tankerRadius = GetTankerRadius();


    //doriesit _income
    //doriesit _polution
    //doriesit _income_shipyard_heavy


    let _r=BLOCK_SIZE;
    for(let _x=_i;_x<_i+_r;_x++){
        for(let _y=_j;_y<_j+_r;_y++){
            let _g = GetGridData(_x,_y);
            if(_console)console.log(_g,_x,_y)
            
            if(_g){

                let _is_connected = _g.ignores_connection || _g.is_connected;
                // if(_is_connected){
                //     for(let _kb in BUILDINGS_BY_KEYS){
                //         if(_g[_kb]){
                //             _block.buildings[_kb]++;
                //             // delete(myGridData[_x][_y])
                //         }
                //     }
                // }
                if(_g.mesto){
                    _block.stats.towns_all++;
                }
                if(_g.broken_power){
                    _block.stats.broken_power++;
                }
                if(_g.airplane_wreck){
                    _block.stats.airplane_tiles++;
                }
                if(_g.uranium_field){
                    _block.stats.total_uranium_fields++;
                }
                if(!_g.znecistenie){
                    _block.stats.clears++;
                    if(_g.broken_power){
                        _block.stats.electricity+=GetBrokenPowerPower();
                        _block.stats.electricity_plus+=GetBrokenPowerPower();
                    }
                    if(_g.water){
                        _block.stats.water_tiles++;
                    }
                    if(_g.river){
                        _block.stats.river_tiles++;
                    }
                    if(_g.deep_water||_g.deep_water2){
                        _block.stats.deep_water_tiles++;
                    }
                    if(_g.forest && !_g.uranium_cloud){
                        _block.stats.income += GetForestIncome(_g.forest);
                        _block.stats.forests++;
                        _block.stats.pollution-=_g.forest;
                        _block.stats.forest_income += GetForestIncome(_g.forest);
                    }
                    if(_g.super_factory){
                        _block.stats.other_income += SUPER_FACTORY_INCOME;
                    }
                    if(_g.palms){
                        _block.stats.income += BUILDINGS_BY_KEYS['palms'].gold_income;
                        _block.stats.forests++;
                        _block.foodIncome += BUILDINGS_BY_KEYS['palms'].food_income;
                        _block.stats.forest_income += BUILDINGS_BY_KEYS['palms'].gold_income;
                    }
                    if(_g.sekvoja){
                        _block.stats.income += BUILDINGS_BY_KEYS['sekvoja'].gold_income;
                        _block.stats.forests++;
                        _block.stats.forest_income += BUILDINGS_BY_KEYS['sekvoja'].gold_income;
                    }
                    if(_g.bambus){
                        _block.stats.income += BUILDINGS_BY_KEYS['bambus'].gold_income;
                        _block.stats.forests++;
                        _block.stats.restoration_strength+=BUILDINGS_BY_KEYS['bambus'].restoration_strength;
                        _block.stats.forest_income += BUILDINGS_BY_KEYS['bambus'].gold_income;
                    }
                    if(_g.mangrove){
                        _block.stats.income += BUILDINGS_BY_KEYS['sekvoja'].gold_income;
                        _block.stats.forests++;
                        _block.stats.forest_income += BUILDINGS_BY_KEYS['sekvoja'].gold_income;
                    }
                    if(_g.artifact){
                        _block.stats.found_artifacts++;
                    }
                    if(_g.water_rocks_gem){
                        _block.stats.water_rocks_gem++;
                    }
                    if(_g.tanker){
                        _g.boosted_oil_rigs=GetAmountOfSpecificGridsAroundGrid(_g.x,_g.y,_tankerRadius,'oil_rig',1);
                        _block.total_tanker_boosts += _g.boosted_oil_rigs;
                    }
                    if(_g.mesto){
                        if(_g.mega_city){
                            _block.stats.pocet_mega_cities++;
                        }
                        let _income1 = GetTownIncome(_g);
                        if(_is_connected){
                            _block.stats.income += _income1;
                            _block.stats.towns_income += _income1;
                        }
                        if(_is_connected){
                            _block.population+=GetTownPopulation(_g);
                            _block.stats.towns_connected++;
                        }
                    
                        if(_x==0 && _y==0){
                            hrac.stats.main_town_clicks=_g.klikov?_g.klikov:0;
                            hrac.stats.main_town_level=_g.mesto;
                        }
                        _block.stats.towns++;
                        _block.stats.town_levels+=_g.mesto;
                        _block.stats.pollution+=GetTownPollution(_g);
                        let _el = GetTownElectricitySpend(_g);
                        _block.stats.electricity-=_el;
                        _block.stats.electricity_minus+=_el;
                    }
                    if(_is_connected){
                        if(_g.ship){
                            _g.ship_food_income = GetAmountOfFishIncomeForShipXY(_g.x,_g.y,0);
                            _block.foodIncome+=_g.ship_food_income;
                            _block.stats.ships_used++;
                            _block.stats.shipsFoodIncome+=_g.ship_food_income;
                        }else if(_g.ship_big){
                            _g.ship_food_income = GetAmountOfFishIncomeForShipXY(_g.x,_g.y,1);
                            _block.foodIncome+=_g.ship_food_income;
                            _block.stats.shipsFoodIncome+=_g.ship_food_income;
                        }else if(_g.event_ship){
                            _g.event_fish_income = GetEventSingleShipIncome(_g);
                            _block.event_fish_income+=_g.event_fish_income;
                            // console.log('_block.event_fish_income',_block.event_fish_income)
                        }else if(_g.saw_mill){
                            _g.saw_mill_plus=_lumberCutBonus*GetAmountOfSpecificGridsAroundGrid(_g.x,_g.y,BUILDINGS_BY_IDS[4].draw_radius_rect,'forest');
                            _block.lumberIncome+=_g.saw_mill_plus;
                        } else if(_g.heavy_lumber_mill){
                            _g.saw_mill_plus=_lumberCutBonus*2*GetAmountOfSpecificGridsAroundGrid(_g.x,_g.y,BUILDINGS_BY_IDS[19].draw_radius_rect,'forest');
                            _block.lumberIncome+=_g.saw_mill_plus;
                        } else if(_g.premium_lumber_mill){
                            _g.saw_mill_plus=_lumberCutBonus*premium_lumber_mill_POWER*GetAmountOfSpecificGridsAroundGrid(_g.x,_g.y,BUILDINGS_BY_IDS[19].draw_radius_rect,'forest');
                            _block.lumberIncome+=_g.saw_mill_plus;
                        } else if(_g.rock_mine){
                            _g.rocks_mine_plus=GetRocksProduction(_g);
                            _block.rocksIncome+=_g.rocks_mine_plus;
                        } else if(_g.rock_mine2){
                            _g.rocks_mine_plus=GetRocksProduction2(_g);
                            _block.rocksIncome+=_g.rocks_mine_plus;
                        } else if(_g.foundry){
                            _g.has_mines = GetAmountOfSpecificGridsAroundGrid(_g.x,_g.y,GetFoundryRange(),['iron_mine'],_hasDoubleIronOre);
                            _g.has_adv_mines = GetAmountOfSpecificGridsAroundGrid(_g.x,_g.y,GetFoundryRange(),['premium_iron_mine'],_hasDoubleIronOre);
                            _block.stats.total_foundry_with_mines+=_g.has_mines+3*_g.has_adv_mines;
                        } else if(_g.foundry_big){
                            _g.has_mines = GetAmountOfSpecificGridsAroundGrid(_g.x,_g.y,GetFoundryRange(),['iron_mine'],_hasDoubleIronOre);
                            _g.has_adv_mines = GetAmountOfSpecificGridsAroundGrid(_g.x,_g.y,GetFoundryRange(),['premium_iron_mine'],_hasDoubleIronOre);
                            _block.stats.total_foundry_with_mines+=3*(_g.has_mines+3*_g.has_adv_mines);
                        } else if(_g.farm){
                            _block.stats.totalFarmFields+=_g.has_farmfields;
                        } else if(_g.farm_big){
                            _block.stats.totalFarmFields2+=_g.has_farmfields2;
                        } else if(_g.shipyard_heavy){
                            if(IsNextToTown(_g)){
                                _block.stats.income_shipyard_heavy += GetGoldPerHeavyShipYardNearTown();
                            }
                        } else if(_g.shipyard_market){
                            if(IsNextToTown(_g)){
                                _block.stats.income_shipyard_heavy += GetGoldPerShipyardMarketNearTown();
                            }
                        } else if(_g.storage_shipyard){
                            if(IsGridTileNeighbour(_g,'shipyard_heavy')||IsGridTileNeighbour(_g,'shipyard_market')){
                                _block.stats.working_storage_shipyard += 1;
                            }
                        } else if(_g.chip_factory){
                            _g.chip_has_foundry=_hasFoundry?1:GetAmountOfSpecificGridsAroundGrid(_g.x,_g.y,GetChipFoundryDistance(_g),'foundry');
                            if(_g.chip_has_foundry){
                                _block.stats.total_working_chip_factories++;
                                _block.chipsIncome+=GetChipFactoryProduction(_g,17);
                            }
                        } else if(_g.chip_factory_big){
                            _g.chip_has_foundry=_hasFoundry?1:GetAmountOfSpecificGridsAroundGrid(_g.x,_g.y,GetChipFoundryDistance(_g),'foundry');
                            if(_g.chip_has_foundry){
                                _block.stats.total_working_chip_factories++;
                                _block.chipsIncome+=GetChipFactoryProduction(_g,68);
                            }
                        } else if(_g.storage_container){
                            let _bonus = GetAmountOfNeighboursOfType(_g.x,_g.y,'storage_container')+GetAmountOfNeighboursOfType(_g.x,_g.y,'storage_crane');
                            _block.stats.storage_container_rock+=1+_bonus;
                            _block.stats.storage_container_steel+=1+_bonus;
                            _block.stats.storage_container_chips+=1+_bonus;
                            _g.same_neighbours=_bonus;
                        }
                        
                        if(!_g.mesto && !_g.ship && !_g.farmfield && !_g.farmfield2){
                            if(_g.building_type){
                                _block.buildings[_g.building_type]++;
                            }
                        }

                    }else{
                        if(!_g.mesto && !_g.ship && !_g.farmfield && !_g.farmfield2){
                            if(_g.building_type){
                                _block.buildings_el[_g.building_type]++;
                            }
                        }
                    }
                    if(!_g.mesto && !_g.ship && !_g.farmfield && !_g.farmfield2){
                        if(_g.building_type){
                            _block.buildings_pollution[_g.building_type]++;
                        }
                    }

                    if(_g.has_street && !_g.mesto && !_g.shipyard){
                        _block.stats.pollution+=GetRoadPollutionByType(_g.has_street);
                        _block.stats.income_roads+=GetRoadIncomeByType(_g.has_street);
                        _block.stats.streets+=1;
                    }
                }else{
                    if(_g.activists){
                        _block.stats.activists++;
                    }
                }
            }


        }
    }


    for(let _kb in _block.buildings){
        // if(!BUILDINGS_BY_KEYS[_kb])console.log(_kb)
        if(BUILDINGS_BY_KEYS[_kb]){
            if(BUILDINGS_BY_KEYS[_kb].polution){
                // _block.stats.pollution+=_block.buildings[_kb]*BUILDINGS_BY_KEYS[_kb].polution;
                if(BUILDINGS_BY_KEYS[_kb].polution>0){
                    _block.stats.pollution+=_block.buildings_pollution[_kb]*BUILDINGS_BY_KEYS[_kb].polution;
                }else{
                    _block.stats.pollution+=_block.buildings[_kb]*BUILDINGS_BY_KEYS[_kb].polution;
                }
            }
            if(BUILDINGS_BY_KEYS[_kb].electricity>0){
                _block.stats.electricity+=_block.buildings[_kb]*BUILDINGS_BY_KEYS[_kb].electricity;
                _block.stats.electricity_plus+=_block.buildings[_kb]*BUILDINGS_BY_KEYS[_kb].electricity;
            }
            if(BUILDINGS_BY_KEYS[_kb].electricity<0){
                _block.stats.electricity+=_block.buildings[_kb]*BUILDINGS_BY_KEYS[_kb].electricity;
                _block.stats.electricity_minus-=_block.buildings[_kb]*BUILDINGS_BY_KEYS[_kb].electricity;
                _block.stats.electricity_minus_2-=_block.buildings_el[_kb]*BUILDINGS_BY_KEYS[_kb].electricity;
            }
        }
        if(_kb=='golden_mine_premium'){
            _block.stats.income_gold_mine+=_block.buildings[_kb]*GetGoldenPremiumMineProduction();
        } else if(_kb=='golden_mine_premium_2'){
            _block.stats.income_gold_mine+=_block.buildings[_kb]*GetGoldenPremium2MineProduction();
        } else if(_kb=='golden_mine_2'){
            _block.stats.income_gold_mine+=_block.buildings[_kb]*GetAdvancedGoldMineProduction();
        } else if(_kb=='golden_mine_3'){
            _block.stats.income_gold_mine+=_block.buildings[_kb]*GetHeavyGoldMineProduction();
        } else if(_kb=='golden_mine'){
            _block.stats.income_gold_mine+=_block.buildings[_kb]*GetGoldenMineProduction();
        } else if(_kb=='oil_rig_ground'){
            _block.oilIncome+=_block.buildings[_kb]*GetGroundOilRigProduction();
        } else if(_kb=='oil_rig'){
            _block.oilIncome+=_block.buildings[_kb]*GetWaterOilRigProduction();
        } else if(_kb=='rift_miner'){
            _block.oilIncome+=_block.buildings[_kb]*GetRiftMinerProduction();
        } else if(_kb=='tanker'){
            _block.oilIncome+=_block.total_tanker_boosts * GetWaterOilRigProduction();
        } else if(_kb=='wood_storage'){
            _block.stats.total_woodStorages=_block.buildings[_kb];
        }
    }



    
    _block.stats.pollution-=_block.stats.deep_water_tiles*DEEP_WATER_POLLUTION;

    _block.foodIncome += GetPlayerUpgradeValue(18,1)*(_block.stats.totalFarmFields*(GetFarmFieldFoodProduction()));
    _block.foodIncome += GetPlayerUpgradeValue(18,1)*(_block.stats.totalFarmFields2*(GetAdvancedFarmFieldFoodProduction()));
    _block.steelIncome = _block.stats.total_foundry_with_mines*GetSteelProductionPerIronMine();
    _block.stats.storage_container_rock*=GetStorageContainerRocks();
    _block.stats.storage_container_steel*=GetStorageContainerSteel();
    _block.stats.storage_container_chips*=GetStorageContainerChips();

    _block.income = (_block.stats.towns_income*(1+0.01*GetPlayerUpgradeValue(3)))+ _block.stats.income_gold_mine + _block.stats.income_roads + _block.stats.income_shipyard_heavy + _block.stats.forest_income;
}



const BLOCK_SIZE=20;

function ReCalculate9BlocksAndStatsByGrid(_grid,_onlySingleBlock,_zratajHracStats){
    // console.time('recalc');
    let _i = Mfl((_grid.x + (BOUNDERIES_LEFT % BLOCK_SIZE)) / BLOCK_SIZE)*BLOCK_SIZE - ( BOUNDERIES_LEFT % BLOCK_SIZE);
    let _j = Mfl((_grid.y + (BOUNDERIES_UP % BLOCK_SIZE)) / BLOCK_SIZE)*BLOCK_SIZE - ( BOUNDERIES_UP % BLOCK_SIZE);
    if(_onlySingleBlock){
        CalculateBlock(_i,_j);
    }else{
        CalculateBlockAndArounds(_i,_j);
    }
    
    
    if(_zratajHracStats==undefined){
        _zratajHracStats=1;
    }
    // console.timeEnd('recalc',_i,_j);
    // console.time('recalc2');
    if(_zratajHracStats){
        ZratajHracStatsCezBlocks();
    }
    ResetReadyStatusOptiBlockByGrid(_grid);
    // console.timeEnd('recalc2');
}


/**
 * 
 * ze ked sa pojdu ratat stats tak tieto bloky zrecalculuje, je tu hned aj okolie
 */
function SetBlocksToRecalculate(_grid){
    let _i = Mfl((_grid.x + (BOUNDERIES_LEFT % BLOCK_SIZE)) / BLOCK_SIZE)*BLOCK_SIZE - ( BOUNDERIES_LEFT % BLOCK_SIZE);
    let _j = Mfl((_grid.y + (BOUNDERIES_UP % BLOCK_SIZE)) / BLOCK_SIZE)*BLOCK_SIZE - ( BOUNDERIES_UP % BLOCK_SIZE);

    let _r=1;
    for(let _xx=_i-_r*BLOCK_SIZE;_xx<=_i+_r*BLOCK_SIZE;_xx+=BLOCK_SIZE){
        for(let _yy=_j-_r*BLOCK_SIZE;_yy<=_j+_r*BLOCK_SIZE;_yy+=BLOCK_SIZE){
            blocks[_i][_j].force_recalculate = true;
        }
    }
    ResetReadyStatusOptiBlockByGrid(_grid);

}




function CalculateBlockAndArounds(_i,_j){
    let _r=1;
    for(let _xx=_i-_r*BLOCK_SIZE;_xx<=_i+_r*BLOCK_SIZE;_xx+=BLOCK_SIZE){
        for(let _yy=_j-_r*BLOCK_SIZE;_yy<=_j+_r*BLOCK_SIZE;_yy+=BLOCK_SIZE){
            CalculateBlock(_xx,_yy);
            // console.error('block recalculated')
        }
    }
    // console.log(blocks[_i][_j])
}








function ZratajHracStatsCezBlocks(){
    if(visitingFriend){
        return false;
    }
    let _timeStart = performance.now();
    
    statsCalculatedInThisTick=1;
    ratamIncome=1;
    let _income=0;
    let _pollution=0;
    

    hrac.population=0;
    hrac.foodIncome=0;
    hrac.lumberIncome=0;
    hrac.rocksIncome=0;
    hrac.steelIncome=0;
    hrac.chipsIncome=0;
    hrac.oilIncome=0;


    hrac.buildings={};
    for(let _kb in BUILDINGS_BY_KEYS){
        hrac.buildings[_kb]=0;
    }
    

    hrac.stats.total_uranium_fields = 0;
    hrac.stats.forests = 0;
    hrac.stats.towns = 0;
    hrac.stats.towns_connected = 0;
    hrac.stats.towns_all = 0;
    hrac.stats.towns_income = 0;
    hrac.stats.town_levels = 0;
    hrac.stats.total_woodStorages = 0;
    hrac.stats.forest_income = 0;
    hrac.stats.clears = 0;
    hrac.stats.streets = 0;
    hrac.stats.activists = 0;
    hrac.stats.electricity=0;
    hrac.stats.electricity_plus=0;
    hrac.stats.electricity_minus=0;
    hrac.stats.electricity_minus_2=0;
    hrac.stats.ships_used=0;
    hrac.stats.shipsFoodIncome=0;
    hrac.stats.total_foundry_with_mines=0;
    hrac.stats.total_working_chip_factories=0;
    hrac.stats.storage_container_rock=0;
    hrac.stats.storage_container_steel=0;
    hrac.stats.storage_container_chips=0;
    hrac.stats.found_artifacts=0;
    hrac.stats.water_tiles=0;
    hrac.stats.river_tiles=0;
    hrac.stats.deep_water_tiles=0;
    hrac.stats.totalFarmFields=0;
    hrac.stats.totalFarmFields2=0;
    hrac.stats.pocet_mega_cities=0;
    hrac.stats.broken_power=0;
    hrac.stats.airplane_tiles=0;
    hrac.stats.income_shipyard_heavy=0;
    hrac.stats.income_gold_mine=0;
    hrac.stats.water_rocks_gem=0;
    hrac.stats.income_roads=0;
    hrac.stats.other_income=0;
    hrac.stats.working_storage_shipyard=0;
    hrac.event_fish_income=0;
    hrac.restoration_strength_by_buildings=0;
    
    
    for(let _i=-BOUNDERIES_LEFT;_i<=BOUNDERIES_RIGHT;_i+=BLOCK_SIZE){
        for(let _j=-BOUNDERIES_UP;_j<=BOUNDERIES_DOWN;_j+=BLOCK_SIZE){
            if(blocks[_i][_j].force_recalculate){
                CalculateBlock(_i,_j);
            }
            let _block = blocks[_i][_j];
            
            hrac.foodIncome += _block.foodIncome;
            hrac.lumberIncome += _block.lumberIncome;
            hrac.rocksIncome += _block.rocksIncome;
            hrac.steelIncome += _block.steelIncome;
            hrac.chipsIncome += _block.chipsIncome;
            hrac.oilIncome += _block.oilIncome;
            hrac.event_fish_income += _block.event_fish_income;
            
            hrac.population += _block.population;
            _income += _block.income;
            _pollution += _block.stats.pollution;


            for(let _kb in BUILDINGS_BY_KEYS){
                hrac.buildings[_kb] += _block.buildings[_kb];
            }
            hrac.stats.working_storage_shipyard += _block.stats.working_storage_shipyard;
            hrac.stats.total_uranium_fields += _block.stats.total_uranium_fields;
            hrac.stats.income_roads += _block.stats.income_roads;
            hrac.stats.income_gold_mine += _block.stats.income_gold_mine;
            hrac.stats.income_shipyard_heavy += _block.stats.income_shipyard_heavy;
            hrac.stats.forests += _block.stats.forests;
            hrac.stats.towns += _block.stats.towns;
            hrac.stats.towns_connected += _block.stats.towns_connected;
            hrac.stats.towns_all += _block.stats.towns_all;
            hrac.stats.towns_income += _block.stats.towns_income;
            hrac.stats.town_levels += _block.stats.town_levels;
            hrac.stats.total_woodStorages += _block.stats.total_woodStorages;
            hrac.stats.forest_income += _block.stats.forest_income;
            hrac.stats.clears += _block.stats.clears;
            hrac.stats.water_rocks_gem+= _block.stats.water_rocks_gem;
            hrac.stats.streets += _block.stats.streets;
            hrac.stats.activists += _block.stats.activists;
            hrac.stats.electricity += _block.stats.electricity;
            hrac.stats.electricity_plus += _block.stats.electricity_plus;
            hrac.stats.electricity_minus += _block.stats.electricity_minus;
            hrac.stats.electricity_minus_2 += _block.stats.electricity_minus_2;
            hrac.stats.ships_used += _block.stats.ships_used;
            hrac.stats.other_income += _block.stats.other_income;
            hrac.stats.shipsFoodIncome += _block.stats.shipsFoodIncome;
            hrac.stats.total_foundry_with_mines += _block.stats.total_foundry_with_mines;
            hrac.stats.total_working_chip_factories += _block.stats.total_working_chip_factories;
            hrac.stats.storage_container_rock += _block.stats.storage_container_rock;
            hrac.stats.storage_container_steel += _block.stats.storage_container_steel;
            hrac.stats.storage_container_chips += _block.stats.storage_container_chips;
            hrac.stats.found_artifacts += _block.stats.found_artifacts;
            hrac.stats.water_tiles += _block.stats.water_tiles;
            hrac.stats.river_tiles += _block.stats.river_tiles;
            hrac.stats.deep_water_tiles += _block.stats.deep_water_tiles;
            hrac.stats.totalFarmFields += _block.stats.totalFarmFields;
            hrac.stats.totalFarmFields2 += _block.stats.totalFarmFields2;
            hrac.stats.pocet_mega_cities += _block.stats.pocet_mega_cities;
            hrac.stats.broken_power += _block.stats.broken_power;
            hrac.stats.airplane_tiles += _block.stats.airplane_tiles;
            hrac.restoration_strength_by_buildings += _block.stats.restoration_strength;

        }
    }

    
    hrac.electricity = hrac.stats.electricity;
    hrac.electricity_plus = hrac.stats.electricity_plus;
    hrac.electricity+= GetPlayerUpgradeValue(100)+hrac.extra_electricity;
    hrac.electricity_plus+= GetPlayerUpgradeValue(100)+hrac.extra_electricity;
    hrac.electricity_minus = hrac.stats.electricity_minus;
    hrac.electricity_minus_2 = hrac.stats.electricity_minus_2;

    
    _pollution-=hrac.stats.cleared_broken_power*GetBrokenPowerPollution();
    _pollution-=hrac.stats.uranium_barrels_polution_bonus;
    _pollution-=hrac.stats.ground_oil_removal * POLLUTION_PER_GROUND_OIL;
    _pollution+=hrac.stats.new_ground_oil * POLLUTION_PER_GROUND_OIL;
    _pollution+=BASE_POLLUTION+BASE_POLLUTION_start;
    if(hrac.map_size>=250)_pollution+=EXPAND_POLLUTION_1;
    

    _pollution-=Math.abs(hrac.stats.removed_water_oils * BUILDINGS_BY_KEYS['remove_water_oil_notsaved'].polution);
    if(_pollution<0){
        _pollution=0;
    }
    hrac.polution = _pollution;

    
    if(!visitingFriend){
        umelyPolomerObjavenia = Math.pow(hrac.stats.clears,0.5)*0.5;//odmocnina
        if(HasLevel(40)){
            umelyPolomerObjavenia*=1.35;
        }
    }
    
    hrac.stats.forest_income+=hrac.buildings['river_trees']*GetPlayerUpgradeValue(113);
    _income+=hrac.buildings['river_trees']*GetPlayerUpgradeValue(113);
    
    hrac.stats.gold_from_artifacts = 0;
    for(let _a of ARTIFACTS){
        if(GetGridData(_a.x,_a.y) && !GetGridData(_a.x,_a.y).znecistenie){
            hrac.stats.gold_from_artifacts += GetArtifactGoldIncome(_a);
        }
    }
    _income+=hrac.stats.gold_from_artifacts+hrac.stats.other_income;

    hrac.income = _income;
    hrac.income_with_polution = Mro(hrac.income*(GetPolutionPerc()?GetPolutionPerc():1));

    ratamIncome=0;
    let _timeEnd = performance.now();
    hrac.stats.timer_stats = _timeEnd-_timeStart;
    return true;
}




function HardRecalculateAllStats(){
    for(let _i=-BOUNDERIES_LEFT;_i<=BOUNDERIES_RIGHT;_i+=BLOCK_SIZE){
        for(let _j=-BOUNDERIES_UP;_j<=BOUNDERIES_DOWN;_j+=BLOCK_SIZE){
            CalculateBlock(_i,_j);
        }
    }
    ZratajHracStatsCezBlocks();// ZratajHracStats();    
}



/** 

   XXXXX   XXXXXXX    XXX    XXXXXXX   XXXXX 
  XX   XX     X      XX XX      X     XX   XX
  X           X     XX   XX     X     X      
  XX          X     X     X     X     XX     
   XXXXX      X     XXXXXXX     X      XXXXX 
       XX     X     X     X     X          XX
        X     X     X     X     X           X
  XX   XX     X     X     X     X     XX   XX
   XXXXX      X     X     X     X      XXXXX 

*/
let umelyPolomerObjavenia=1;
let ratamIncome=0;
let statsCalculatedInThisTick=0;
function ZratajHracStats(_alsoAdd){ // POJDE DO PREC

}



function IsIncomeHappening(){
    if(Date.now() - hrac.last_action < 1000*60*(MAX_OFFLINE_TIME_MINUTES+5) )
    if(hrac.claimedOfflineEarning)//proste ticker gold len ak claimnes rewardu
    return true;
    // return false;

}


function Restart(_confirmed,_confirmed2){ //restart()
    if(!AreYouSure(_confirmed,'Are you sure you want to restart the game and its progress?','RESTART?','Restart(1);','Reset Progress')){
        return false;
    }
    if(!AreYouSure(_confirmed2,'REALLY restart the game and its progress? You will lose all you have built!','RESTART?','Restart(1,1);','Reset Progress')){
        return false;
    }

    {
        // CALL API TO RESTART GAME AND DO SOME BACKUP/LOGGING
        restartGameProgress().then(() => {
            InitPlayer()
            SaveGame(undefined, true);
            
            hrac.claimedOfflineEarning=1;
            tickCount=1;
            last_grid_clicked=null;
            chests=[];
            RefreshHeader();
            ShowBottomMenu();
            
            InitAllGridNeighbours();
            CloseBottomMenu();

            FirstStartButton();
            TryRefreshFarmInfo();

            InitStreets();
            InitFarmFields();
            InitUBarrelclouds();
            MarkMegaCities();
            InitTowns();
            InitCollectableGems();
            InitGridClouds();
            GenerateAllShores();

            ResetAllRoadConnections();
            ZratajUraniumBarrelPollution();
            HardRecalculateAllStats();
            InitBooks();
            InitOptimisedBlocks();

            
        }).catch(err => {
            console.error(err);
            // TODO: mozno zobraz error ? ale aj ked to neprejde tak sa nic nestane, len sa nesavne snapshot starych dat
        })

        
    }

}

function ResetGame(_confirmed, _confirmed2) {
    if(!AreYouSure(_confirmed,GetText('Are you sure you want to reset the game and its progress? Use this only if you want to delete your account and uninstall the app'),GetTextCAPS('RESET?'),'ResetGame(true);',GetTextCAPS('DELETE ME'))){
        return false;
    }
    if(!AreYouSure(_confirmed2,GetText('REALLY reset the game and its progress?'),GetTextCAPS('RESET?'),'ResetGame(true, true);',GetTextCAPS('DELETE ME'))){
        return false;
    }

    deactivateUserCall().then(() => {
        if (IS_FLUTTER) {
            SendFlutterReset();
        } else {
            localStorage.clear();
            location.reload();
        }
    }).catch(err => {
        console.error(err);
    });
}

// HERE!
function InitPlayer(){
    zoomScale=1.0;
    InitCamera();
    
    hrac={
        enviro:0,
        gold:9000,        
        last_play_time: Date.now(),
        last_action: Date.now(),
        food:0,
        lumber:0,
        rocks:0,
        steel:0,
        gems:10,
        clay:0,
        chips:0,
        oil:0,
        event_fish:0,

        
        income:20,
        foodIncome:0,
        lumberIncome:0,
        rocksIncome:0,
        steelIncome:0,
        chipsIncome:0,
        oilIncome:0,
        event_fish_income:0,
        event_fish_total:-1,
        event_fish_perc_bonus:0,
        event_mile_picked:0,
        extra_electricity:0,
        book_page:0,
        income_multiplier:1,
        income_multiplier_date:0,
        income_multiplier_taken_today:0,
        income_multiplier_taken_total:0,
        last_special_offer_popup_date:0,
        last_starter_offer_popup_date:0,
        restoration_offer_bonus:0,
        extra_restoration_strength:0,
        registered_country:'',
        map_size:230,

        radius_clicks_amount:100,
        radius_clicks_date:serverTime,
        
        xmas_last_gift_date:0,
        found_xmas_gifts:0,
        // xmas_gifts:[],

        had_gold_ad_today:0,
        premium_food_storage:0,
        bought_material_packs:[],
        super_clickers:0,
        verzia:GAME_VERSION,
        special_places_radar:[],
        barrels_cleared:[],
        kupene_gem_offre:[],
        achievement_ids_done:[],
        skippedTownReqs:[],
        book_pages_marked:[],
        storage:{},
        started_searching_mega_city:0,
        lastNewsTime:0,
        save_type:0,
        saved_camera:{
            x:0,
            y:0,
            zoom:1,
        },
        tutorial:{
            income_button:0,
            island_gold_mine:0,
        },
        nastavenia:{
            details:IsJablko()?3:2,
            show_old_buildings:1,
            showIncome:1,
            offlineEarningAutoClaim:0,
            buildingsUnderlight:0,
            biggerBottomMenu:1,
            displayMainTownLabel:1,
            music:1,
            sound:1,
            bigTownNumbers:1,
            show_pollution_in_header:0,
            leftHanded:0,
            bar_position:2,
            music_volume:50,
            sound_volume:50,
            show_save_notify:1,
            restoration_info:0,
            show_clay:1,
            auto_multitool:0,
            super_gardening:0,
            hide_chests_on_big_zoom:0,
        },
        books:[],
        pinpoints:[],
        buildings:{

        },
        harvested_gems_today:[],
        town_names:['MAIN TOWN'],
        coalPlantTownAims:{},
        materialsBoughtCount:{},
        gems_used_upgrade_town:0,
        gems_used_upgrade_buildings:0,
        bonus_superClickers_to_starter_pack:0,
        goods_overview_clicked:0,
        ad_skippers:0,
        offline_perc_bonus:0,
        found_special_chest_today:0,
        found_safe_today:0,
        taken_safe_today:0,
        fps:0,
        recentlyVisited:[],
        stats:{
            thermal_spots_removed:0,
            working_storage_shipyard:0,
            new_ground_oil:0,
            ground_oil_removal:0,
            found_chests_today:0,
            searching_for_special_chest:0,
            premium_upg_bought:0,
            premium_build_bought:0,
            cleared_perc:0,
            income_roads:0,
            removed_water_oils:0,
            total_uranium_fields:0,
            total_no_uranium_fields:0,
            still_active_count:0,
            still_active_claimed:0,
            cleared_water_rocks_gem:0,
            adSkippers_bought:0,
            adSkippers_used:0,
            harvested_gems:0,
            ads_broken_today:0,
            ads_last_ad_start_date:new Date()*1,
            ads_watched_today:0,
            ads_discarded_today:0,
            ads_watched_total:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            skipped_ads:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            lastDailyRewardPickedDaysAfterReg:0,
            daysAfterRegistration:0,
            allowNameChange:true,
            cleared_swamps:0,
            cleared_hills:0,
            cleared_rifts:0,
            cleared_cities_1:0,
            cleared_cities_2:0,
            cleared_cities_3:0,
            found_airplanes:0,
            pocet_mega_cities:0,
            streets:0,
            total_clicks:0,
            big_wrecks_salvaged:0,
            small_wrecks_salvaged:0,
            gems_spent:0,
            cleaning_clicks:0,
            income_ticks:1,
            super_clickersUsed:0,
            super_clickersBought:0,
            enhanced_clickersUsed:0,
            uranium_cleared:0,
            timer_stats:0,
            timer_save:0,
            main_town_level:1,
            obtained_chests:0,
            uranium_barrels_polution_bonus:0,
            cleared_broken_power:0,
            activists_cleared:0,
            highest_starter_pack_bought:0,
            bought_starter_packs:[]
        },
    };

    streets=[];
    myGridData={};
    myGridData[0]={};
    myGridData[0][0]={
        znecistenie:0,
        cleared:1,
        mesto:1,
        has_street:1,
        is_connected:true,
        x:0,
        y:0,
    };

    HardRecalculateAllStats();//ZratajHracStats();
}





let lastActiveHracTabIndex=2;
function GetHracTabInner(_index){
    let _out = '';
    if(_index==1){
        _out+='<div id="leader_boards_container">'+GetLeaderBoardsInner()+'</div>';
        
        setTimeout(() => {
            if(!hrac.tutorial_lb && gebi('ladder_table')){
                hrac.tutorial_lb=true;
                setTimeout(() => {
                    StartAnimatedScrollTo('bottom_stats_container',1200,30);
                }, 500); 
                setTimeout(() => {
                    StartAnimatedScrollTo('bottom_stats_container',0,45);
                }, 1500); 
            }
        }, 250);

    }
    if(_index==2){
        _out+=HracStatsInner();
    }
    if(_index==3){
        _out+=AchievementsInner();
    }

    if(_index==4){
        _out+=HracIncomesInner();
    }
    if(_index==5){
        _out+=Center(LabelSpan(GetText('End of world Diary')+':'))+'<div id="book_container">'+WholeStory()+'</div>';
    }
    if(_index==6){
        _out+=AllNewsInner();
    }
    lastActiveHracTabIndex = _index;
    
    return '<div id="bottom_stats_container" class="bottom_stats_container" style="max-height:calc(70vh - '+(80+TOP_PADDING+BOTTOM_PADDING)+'px );">'+_out+'</div>';
}


function HracStatsInner(_player,_isVisit){
    if(!_player)_player=hrac;
    let _out='';

    _out+=LabelSpan(GetText('PLAYER STATS')+':')+' <span id="player_stats"></span>'+BR;

    // _out+=BR+_player.town_names[0];
    _out+=BR+GetText3('Player level:')+Bold(PCislo(_player.stats.main_town_level))+' ('+GetText('Same as main {BUNKER_NAME}')+')';
    _out+=BR+GetText3('Towns:')+Bold(PCislo(_player.stats.towns))+' ('+GetText2('connected')+_player.stats.towns_connected+')';
    if(_player.stats.towns>1){
        _out+=BR+GetText3('Total town levels:')+Bold(PCislo(_player.stats.town_levels));
    }
    if(HasLevel(4) || _isVisit){
        _out+=BR+GetText3('Forests tiles:')+Bold(PCislo(_player.stats.forests));
        _out+=BR+GetText3('Water tiles:')+Bold(PCislo(_player.stats.water_tiles));
        if(_player.stats.deep_water_tiles){
            _out+=BR+GetText3('Deep water tiles:')+Bold(PCislo(_player.stats.deep_water_tiles));
        }
        
    }
    _out+=BR+GetText3('Cleared area:')+Bold(PCislo(_player.stats.clears));
    if(GetPlayerTotalUpgradeLevel()<20){
        _out+=SPC+ColorSpan('var(--light-purple)',GetText('Cleaning costs less when closer to main {BUNKER_NAME}.'));
    }else{
        _out+=SPC+'('+GetClearedPerc(_player).toFixed(1)+'%)';

    }
    if(HasLevel(4) || _isVisit){
        _out+=BR+GetText2('Roads')+PCisloB(_player.stats.streets);
    }
    if(_player.population){
        _out+=BR+GetText2('Population')+PCisloB(_player.population);
    }
    if(ExploredPollution()){
        if(HasLevel(REQ_ELECTRICITY_LEVEL)){
            _out+=BR+GetText2('Power')+PCisloB(Math.max(0,_player.electricity))+SPC+'('+GetText3('Pluses:')+PCislo(_player.electricity_plus)+SPC+GetText3('Minuses:')+PCislo(_player.electricity_minus)+' )';
            if(testVersion){
                if(_player.electricity_plus - _player.electricity_minus != _player.electricity){
                    _out+=BR+'NESEDI ELEKTRIKA: '+(_player.electricity_plus - _player.electricity_minus);
                }
            }
        }
        _out+=BR+GetText2('Pollution')+PCisloB(_player.polution)+PollutionIcon();
        if(!_isVisit && GetPolutionPerc()){
            _out+=BRBR+RedSpan(GetText('Pollution is high or electricity is low - gold income is reduced by {att1}%',Bold(100-GetPolutionPerc()*100)))+BR;
        }
    }

    
    if(HasLevel(4) || _isVisit){
        if(showExtraTestSettings>10){
            if(HasLevel(SHIPYARD_LEVEL_REQ) || _isVisit){
                _out+=BR+'Small ship wrecks salvaged: '+PCisloB(_player.stats.small_wrecks_salvaged);
                _out+=BR+'Big ship wrecks salvaged: '+PCisloB(_player.stats.big_wrecks_salvaged);
                _out+=BR+'Airplanes salvaged: '+PCisloB(_player.stats.found_airplanes);
                _out+=BR+'Chests salvaged: '+PCisloB(_player.stats.obtained_chests);
                _out+=BR+'Buildings salvaged: '+PCisloB(_player.stats.cleared_cities_1+_player.stats.cleared_cities_2+_player.stats.cleared_cities_3);
            }
            _out+=BR+'Town clicks: '+PCisloB(_player.stats.town_clicks);
            _out+=BR+'Main Town clicks: '+PCisloB(_player.stats.main_town_clicks);
            _out+=BR+'Restoration clicks: '+PCisloB(_player.stats.cleaning_clicks);
            _out+=BR+'Total Clicks: '+PCisloB(_player.stats.total_clicks);
            _out+=BR+'Total ads watched: '+PCisloB(ArraySum(_player.stats.ads_watched_total));
            if(_player.stats.offline_grab_count){
                _out+=BR+'Offline grab count: '+PCisloB(_player.stats.offline_grab_count);
            }
            _out+=BR+'Total income cycles: '+PCisloB(_player.stats.income_ticks)+' ('+(PCisloB(_player.stats.income_ticks*9))+'s, per tile: '+((_player.stats.income_ticks*9) / _player.stats.clears).toFixed(1)+'s)';
            _out+=BR+'Total income cycles in hours: '+PCisloB(Mro((_player.stats.income_ticks*9) / 3600));
            _out+=BR+'Total income cycles in days: '+PCisloB(Mro((_player.stats.income_ticks*9) / (3600*24)));
            
            let _cps=((_player.stats.total_clicks / (_player.stats.income_ticks*9)).toFixed(1))*1;
            _out+=BR+FSize(22,'Clicks per second: '+ColorSpan(_cps>6?'red':'green',Bold(_cps)));
            _out+=BR+'minulG: '+PCisloB(_player.stats.gems_spent);
            _out+=BR+'maG: ';
            if(_player.gems >= 1000000000)_out+=ColorSpan('red','vyse miliardy');
            else if(_player.gems >= 1000000)_out+=ColorSpan('orange','vyse miliona');
            else if(_player.gems >= 100000)_out+=ColorSpan('orange','vyse 100k');
            else _out+=ColorSpan('green','v pohode');
            _out+=BR+'zap: '+PCisloB(totalSpent);
            _out+=BR+'broken power'+_player.stats.broken_power;
            _out+=BR+'cleared brokenp'+_player.stats.cleared_broken_power;

            if(_player.stats.timer_save)_out+=BR+'Performance: saving time: '+(_player.stats.timer_save).toFixed(1)+'ms';
            if(_player.stats.timer_stats)_out+=BR+'Performance: stats time: '+(_player.stats.timer_stats).toFixed(1)+'ms';
        }
        if(_player.stats.daysAfterRegistration){
            _out+=BR+GetText('Started playing: {att1} days ago',_player.stats.daysAfterRegistration);
        }
        
        try{
            _out+=BR+GetText3('Last online time:')+(new Date(_player.last_play_time).toLocaleDateString(hrac.lang))+'';
        }catch(e){
            _out+=BR+GetText3('Last online time:')+(new Date(_player.last_play_time).toDateString())+'';
        }


        if(!_isVisit && HasLevel(3)){
            // if(GetFeatureTeasingInfo(GetPlayerLevel()))
            {
                _out+=BR+Center(Button(GetText('Show features'),'ShowNewFeatures(1);CloseBottomMenu();',{sound:1}));
            }
        }
    
    }
    return _out;
}


function HracIncomesInner(_player,_isVisit){
    if(!_player)_player=hrac;
    let _out='';
    _out+=LabelSpan(GetTextCAPS('PLAYER INCOMES')+': ')+'<span id="player_stats"></span>'+BR;
    if(!visitingFriend){
        _out+=SPC+GetIncomeMultiplierButton('teal');
    }
    if(!_isVisit && GetPolutionPerc()){
        _out+=BR+RedSpan(GetText('Pollution is high or electricity is low - gold income is reduced by {att1}%',Bold(100-GetPolutionPerc()*100)));
    }
    let _multiplierSTR = (GetIncomeMultiplier()>1?ColorSpan('green',GetIncomeMultiplier()+'x '):'');


    _out+=BR+GetText2('gold')+_multiplierSTR+PMat(_player.income,1)+PER_INCOME_SHORT;
    if(HasLevel(1) || _isVisit){
        _out+=' ('+GetText3('Towns:')+PCislo(Mro(_player.stats.towns_income*(1+0.01*GetPlayerUpgradeValue(3))))+', '+GetText3('Forests:')+PCislo(_player.stats.forest_income);
        if(_player.stats.income_roads)_out+=', '+GetText('Roads')+': '+PCislo(_player.stats.income_roads);
        if(_player.stats.income_gold_mine)_out+=', '+GetText3('Gold mines:')+PCislo(_player.stats.income_gold_mine);
        if(_player.stats.income_shipyard_heavy)_out+=', '+GetText3('Heavy shipyards:')+PCislo(_player.stats.income_shipyard_heavy);
        if(_player.stats.gold_from_artifacts)_out+=', '+GetText3('Artifacts:')+PCislo(_player.stats.gold_from_artifacts);
        if(_player.stats.other_income)_out+=', '+GetText3('other income:')+PCislo(_player.stats.other_income);
        _out+=')';
    }
    if((ExploredPollution() && GetPolutionPerc()) && !_isVisit){
        _out+=BR+GetText3('Due to high pollution, your gold income is reduced to: ')+_multiplierSTR+PMat(_player.income_with_polution,1)+PER_INCOME_SHORT;
    }

    if(!_player.lumberIncome){
        _out+=BRBR+GetText2('passive_income_info')+BRBR;
    }
    const _has_wide_screen=window.innerWidth>500;

    if(_player.foodIncome){
        _out+='<table cellspacing="0" class="income-table"><tr>'+(_has_wide_screen?'<th></th>':'')+'<th>'+GetText('income')+'</th><th>'+GetText('in storage')+'</th><th>'+GetText('max')+'</th></tr>';
        if(_player.foodIncome){
            _out+='<tr onclick="ExplainResource(\'food\');">'+(_has_wide_screen?'<td>'+Resource('food')+'</td>':'')+'<td>'+_multiplierSTR+PMat(_player.foodIncome,'food')+'</td><td>'+PMat(_player.food,'food')+'</td><td>+-'+PMat(GetMaxFoodStorage(_player),'food')+'</td></tr>';
        }
        if(_player.lumberIncome){
            _out+='<tr onclick="ExplainResource(\'lumber\');">'+(_has_wide_screen?'<td>'+Resource('lumber')+'</td>':'')+'<td>'+_multiplierSTR+PMat(_player.lumberIncome,'lumber')+'</td><td>'+PMat(_player.lumber,'lumber')+'</td><td>'+PMat(GetMaxLumberStorage(_player),'lumber')+'</td></tr>';
        }
        if(_player.rocksIncome){
            _out+='<tr onclick="ExplainResource(\'rocks\');">'+(_has_wide_screen?'<td>'+Resource('rocks')+'</td>':'')+'<td>'+_multiplierSTR+PMat(_player.rocksIncome,'rocks')+'</td><td>'+PMat(_player.rocks,'rocks')+'</td><td>'+PMat(GetMaxRocksStorage(_player),'rocks')+'</td></tr>';
        }
        if(_player.steelIncome){
            _out+='<tr onclick="ExplainResource(\'steel\');">'+(_has_wide_screen?'<td>'+Resource('steel')+'</td>':'')+'<td>'+_multiplierSTR+PMat(_player.steelIncome,'steel')+'</td><td>'+PMat(_player.steel,'steel')+'</td><td>'+PMat(GetMaxSteelStorage(_player),'steel')+'</td></tr>';
        }
        if(_player.chipsIncome){
            _out+='<tr onclick="ExplainResource(\'chips\');">'+(_has_wide_screen?'<td>'+Resource('chips')+'</td>':'')+'<td>'+_multiplierSTR+PMat(_player.chipsIncome,'chips')+'</td><td>'+PMat(_player.chips,'chips')+'</td><td>'+PMat(GetMaxChipsStorage(_player),'chips')+'</td></tr>';
        }
        if(_player.oilIncome){
            _out+='<tr onclick="ExplainResource(\'oil\');">'+(_has_wide_screen?'<td>'+Resource('oil')+'</td>':'')+'<td>'+_multiplierSTR+PMat(_player.oilIncome,'oil')+'</td><td>'+PMat(_player.oil,'oil')+'</td><td>'+PMat(GetMaxOilStorage(_player),'oil')+'</td></tr>';
        }
        _out+='</table>';
        if(!_isVisit){
            _out+=GetText3('Food spoiled {EVERY_X_SECONDS}:')+PCislo(Mro(_player.food * (GetFoodSpoilPerc())))+'+- ('+GetText('{att1}% of your total food +-',Mro(GetFoodSpoilPerc(1)*100))+') ';
        }
    }

    return _out;
}




function HasLevel(_c){
    return hrac.stats.main_town_level>=_c;
}
function GetPlayerLevel(){
    return hrac.stats.main_town_level;
}
function GetHighestLevel(){
    return TOWN_UPGRADE_DEF_COSTS.length;
}

function GetClearedPerc(_player){
    return ((Math.floor((_player.stats.clears / ((BOUNDERIES_LEFT+BOUNDERIES_RIGHT+1)*(BOUNDERIES_UP+BOUNDERIES_DOWN+1)))*1000))*0.1)
}
function GetDetails(){
    return hrac.nastavenia.details*1;
}

function SpawnMonster(_grid) {
    if(MONSTERS.length > 0){

        let _monster = 1;
        
        if(!_grid.mesto){
            _grid.monster = _monster;
        }
    }
}




function GetMonsterGridInfo(_grid){
    let _m = MONSTERS[_grid.monster];
    let _out='';
    // _out+= ActionDiv('HuntMonser('+_grid.x+','+_grid.y+');','ui/hunt','Hunt and kill this animal so you can build or plant here.','Hunt',1);
    _out += Bold(_m.name)+' - '+_m.description;


    return _out;
}


function HuntMonser(_x,_y){
    let _grid=GetGridData(_x,_y);
    if(_grid && _grid.monster){
        let _m = MONSTERS[_grid.monster];
        if(_m){
            if(MamDostZlata(_m.kill_cost,1)){
                delete(_grid.monster);
                // if()
                AddMat(_m.food,'food',1,0,_grid);
                CloseGridMenu();
                // AddGoldEffect(_grid,3,45);
            }
        }
    }
    
    
}


const MONSTERS=[];
// MONSTERS[1]={
//     id:1,
//     image: 'hyena',
//     name: 'Double headed Hyena',
//     description: 'Dangerous animal. we will need to hunt it before building here.',
//     food: 50,
//     kill_cost: 5000,
//     load:1,
// }

for(let _m of MONSTERS)if(_m){
    if(_m.load==1){
        IMAGES_TO_LOAD.push(
            {
                id:'monster_'+_m.image,
                src:'monsters/'+_m.image
            }
        )
    }else if(_m.load==2){
        IMAGES_TO_LOAD_LATER.push(
            {
                id:'monster_'+_m.image,
                src:'monsters/'+_m.image
            }
        )
    }

}


// quick tool ma zlu ikonu
// ked nemozem stavat mimo kolajnic tak pis preco, podobne ako stanicu, ze dovol zo zaciatku
// nech nemozes otacat stanicu ked ma kolajnice
// bridge nech su drahsie
// bridge nech maju inu ikonu pri stavani
// mostove krizovatky este neviem ako vymyslim :/
// deep water aby sa dal robit
// vlaciky pri nejakom zoome su vytocene o xy stupnov, to je asi test co mi tam ostal
// ako to vyzera ked stavias cestu ponad pust ?
// treba doriesit co sa deje ked stavias mosty vedla seba... ze ako tam hlada cestu, mozno nech hlada fakt len podla otocenia

const TRAIN_STATION_LEVEL=4600;


const images_trains={};
images_trains['trains/train_t1_1']={pack: 'trains',x: 0, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t1_2']={pack: 'trains',x: 202, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t1_3']={pack: 'trains',x: 404, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t1_4']={pack: 'trains',x: 606, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t1_5']={pack: 'trains',x: 808, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t1_6']={pack: 'trains',x: 1010, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t1_7']={pack: 'trains',x: 1212, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t1_8']={pack: 'trains',x: 1414, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t1_9']={pack: 'trains',x: 1616, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t2_1']={pack: 'trains',x: 1818, y: 0, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t2_2']={pack: 'trains',x: 0, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t2_3']={pack: 'trains',x: 202, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t2_4']={pack: 'trains',x: 404, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t2_5']={pack: 'trains',x: 606, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t2_6']={pack: 'trains',x: 808, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t2_7']={pack: 'trains',x: 1010, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t2_8']={pack: 'trains',x: 1212, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t2_9']={pack: 'trains',x: 1414, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t3_1']={pack: 'trains',x: 1616, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t3_2']={pack: 'trains',x: 1818, y: 202, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t3_3']={pack: 'trains',x: 0, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t3_4']={pack: 'trains',x: 202, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t3_5']={pack: 'trains',x: 404, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t3_6']={pack: 'trains',x: 606, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t3_7']={pack: 'trains',x: 808, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t3_8']={pack: 'trains',x: 1010, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t3_9']={pack: 'trains',x: 1212, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t4_1']={pack: 'trains',x: 1414, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t4_2']={pack: 'trains',x: 1616, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t4_3']={pack: 'trains',x: 1818, y: 404, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t4_4']={pack: 'trains',x: 0, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t4_5']={pack: 'trains',x: 202, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t4_6']={pack: 'trains',x: 404, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t4_7']={pack: 'trains',x: 606, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t4_8']={pack: 'trains',x: 808, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/train_t4_9']={pack: 'trains',x: 1010, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_1']={pack: 'trains',x: 1212, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_2']={pack: 'trains',x: 1414, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_3']={pack: 'trains',x: 1616, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_4']={pack: 'trains',x: 1818, y: 606, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_5']={pack: 'trains',x: 0, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_6']={pack: 'trains',x: 202, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_7']={pack: 'trains',x: 404, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_8']={pack: 'trains',x: 606, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_9']={pack: 'trains',x: 808, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_11']={pack: 'trains',x: 1010, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_11_b']={pack: 'trains',x: 1212, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_11_b_road']={pack: 'trains',x: 1414, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_11_b_top']={pack: 'trains',x: 1616, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_12']={pack: 'trains',x: 1818, y: 808, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_12_b']={pack: 'trains',x: 0, y: 1010, w: 200, h: 207, h2: 73, shift: 3};
images_trains['train_station_vert']={pack: 'trains',x: 202, y: 1010, w: 200, h: 282, h2: 99, shift: 29};
images_trains['train_station_horiz']={pack: 'trains',x: 404, y: 1010, w: 200, h: 222, h2: 78, shift: 8};
images_trains['trains/rails_t1_22']={pack: 'trains',x: 606, y: 1010, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_44']={pack: 'trains',x: 808, y: 1010, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_66']={pack: 'trains',x: 1010, y: 1010, w: 200, h: 200, h2: 70, shift: 0};
images_trains['trains/rails_t1_88']={pack: 'trains',x: 1212, y: 1010, w: 200, h: 200, h2: 70, shift: 0};
















for(let i in images_trains){
    all_images[i]=images_trains[i];
    all_images[i].pack_src = 'atlas/trains';
    all_images[i].dir = 'atlas';
    amountOfImages++;
}

IMAGES_TO_LOAD_LATER.push({
    id:'trains',
    src:'atlas/trains',
    doImageBitMaps:images_trains,
    use_jablko_blob:true,
});


const TRAIN_TYPES=[];
TRAIN_TYPES[1]={
    perc: 0.65,
    speed: 0.05,
    has_smog:0.6,
};
TRAIN_TYPES[2]={
    perc: 0.70,
    speed: 0.025,
    has_smog:0,
};
TRAIN_TYPES[3]={
    perc: 0.70,
    speed: 0.025,
    has_smog:0,
};
TRAIN_TYPES[4]={
    perc: 0.70,
    speed: 0.025,
    has_smog:0,
};

let TRAIN_TICK=0;
const trains=[];
function AddTrain(_type,_perc,_speed){
    console.log('ADDING TRAIN')
    let _train = {
        x:0,
        y:0,
        xx:0,
        yy:0,
        
        type:_type,
        tick:TRAIN_TICK,
        wheels_h:4,
        
        speed:_speed,
        rad:0,
        orientation:1,

        grid_perc:_perc,
        path_pos:TRAIN_SHIFT,//TEST
        // path:[[0,2],[0,1],[0,0],[0,-1],[1,-1],[2,-1],[2,0],[2,1],[2,2],[1,2]],
        // path:[[1,2],[2,2],[2,1],[2,0],[2,-1],[1,-1],[0,-1],[0,0],[0,1],[0,2]],
        path:[[1, 9],[0, 9],[0, 8],[0, 7],[1, 7],[2, 7],[3, 7],[4, 7],[4, 8],[4, 9],[5, 9],[6, 9],[7, 9],[7, 8],[7, 7],[8, 7],[9, 7],[10, 7],[11, 7],[12, 7],[13, 7],[14, 7],[14, 6],[14, 5],[13, 5],[12, 5],[12, 4],[12, 3],[12, 2],[11, 2],[10, 2],[10, 3],[9, 3],[8, 3],[8, 2],[8, 1],[7, 1],[6, 1],[5, 1],[4, 1],[4, 2],[3, 2],[3, 3],[3, 4],[2, 4],[2, 5],[2, 6],[2, 7],[2, 8],[2, 9]],
    };
    TRAIN_TICK+=7;
    // CalculateTrainPos(_train);

    trains.push(_train);
}


function AddFullTrain(_typesA){
    let _grid_perc = 0;
    let _speed = TRAIN_TYPES[_typesA[_typesA.length-1]].speed
    for(let _t of _typesA){
        AddTrain(_t,_grid_perc,_speed);
        _grid_perc+=TRAIN_TYPES[_t].perc;
    }
    ProcessTrains(1);

}



function DrawTrains(_ctx,camera_X,camera_Y,camera_X2,camera_Y2,_isMiddleZoomout,_doScreenshot,_OPTIMISED,_1pixelSpace,_1pixelLine,_zoomScale,_gridSirka){
    if(_zoomScale<0.1){
        return false;
    }
    if(_zoomScale<0.5 || GetDetails()<=2){ //malinke vykreslenie
        for(let i in trains){
            let _train = trains[i];
            if(_train?.path?.length){
                let _grid = GetGridData(_train.x,_train.y);
                if(_grid){
                    if(_grid.x >= camera_X-1 && _grid.y>=camera_Y-1 && _grid.x<camera_X2 && _grid.y<camera_Y2){    
                        let _trasenie = 0;
                        if(_train.tick%20==1||_train.tick%20==1 || _train.tick%20==8||_train.tick%20==9)_trasenie = 1;
                        _ctx.translate(_grid.x*_gridSirka+_train.xx+(_train.orientation<0?_gridSirka:0), _grid.y*_gridSirka+_train.yy+_trasenie-_train.wheels_h);
                        _ctx.rotate(0.3);

                        if(_train.orientation<0){
                            _ctx.scale(-1,1);
                            // MyDrawXY(_ctx,'trains/train_t'+_train.type+'_'+(-1*_train.orientation),-_gridSirka,0,_gridSirka,_gridSirka,0,0);            
                            MyDrawXY(_ctx,'trains/train_t'+_train.type+'_'+(-1*_train.orientation),0,0,_gridSirka,_gridSirka,0,0);            
                            _ctx.scale(-1,1);
                        }else{
                            // MyDrawXY(_ctx,'trains/train_t'+_train.type+'_'+_train.orientation,0,0,_gridSirka,_gridSirka,0,0);            
                            MyDrawXY(_ctx,'trains/train_t'+_train.type+'_'+_train.orientation,0,0,_gridSirka,_gridSirka,0,0);            
                        }
                        _ctx.rotate(-0.3);
                        // MyDrawXY(_ctx,'rails_t1_11_b_top',0,0,_gridSirka,_gridSirka,0,0);            
                        _ctx.translate(-_grid.x*_gridSirka-_train.xx-(_train.orientation<0?_gridSirka:0),-_grid.y*_gridSirka-_train.yy-_trasenie+_train.wheels_h);
                    }
                }
            }
        }
    }else{ // PRIzoomovane zblizka: treba riesit aj z-index
        let _zindexSortedTrains=[];
        for(let i in trains){
            let _train = trains[i];
            if(_train?.path?.length){
                let _grid = GetGridData(_train.x,_train.y);
                if(_grid){
                    if(_grid.x >= camera_X-1 && _grid.y>=camera_Y-1 && _grid.x<camera_X2 && _grid.y<camera_Y2){    
                        // if(_grid.river && _grid.otocenie==11){
                        //     _grid.bridge_top_drawn=false;
                        // }

                        _zindexSortedTrains.push([_train,_train.yy + _grid.y*_gridSirka]);
                    }
                }
            }
        }
        _zindexSortedTrains.sort((a,b)=>a[1]-b[1]);

        let _rotationShift=_gridSirka*0.5;

        for(let i in _zindexSortedTrains){
            let _train = _zindexSortedTrains[i][0];
            let _grid = GetGridData(_train.x,_train.y);
            if(_grid){
                let _trasenie = 0;
                _ctx.save();
                // _train.orientation=-2;
                // _train.rad=0.1
                _ctx.translate(_grid.x*_gridSirka+(_train.orientation<0?_gridSirka:0)+_train.xx, _grid.y*_gridSirka+_train.yy+_trasenie-_train.wheels_h);
                if(_train.rad){
                    if(_train.orientation<0){
                        _ctx.translate(+_rotationShift-_gridSirka,+_rotationShift);
                        _ctx.scale(-1,1);
                        _ctx.rotate(_train.rad);
                        _ctx.translate(-_rotationShift,-_rotationShift);
                    }else{
                        _ctx.translate(+_rotationShift,+_rotationShift);
                        _ctx.rotate(_train.rad);
                        _ctx.translate(-_rotationShift,-_rotationShift);
                    }
                }else{
                    if(_train.orientation<0){
                        _ctx.scale(-1,1);
                    }

                }
                if(_train.orientation<0){
                    MyDrawXY(_ctx,'trains/train_t'+_train.type+'_'+(-1*_train.orientation),0,0,_gridSirka,_gridSirka,0,0);            
                }else{
                    MyDrawXY(_ctx,'trains/train_t'+_train.type+'_'+_train.orientation,0,0,_gridSirka,_gridSirka,0,0);            
                }
                _ctx.restore();
                // if(_train.rad){
                //     _ctx.rotate(-_train.rad);
                // }
                // _ctx.translate(+_rotationShift,+_rotationShift);
                // _ctx.translate(-_grid.x*_gridSirka-(_train.orientation<0?_gridSirka:0)-_train.xx,-_grid.y*_gridSirka-_train.yy-_trasenie+_train.wheels_h);
                
                if((_grid.river||_grid.water||_grid.has_street) && _grid.road_rotation==11 && !_grid.bridge_top_drawn){
                    _ctx.translate(_grid.x*_gridSirka, _grid.y*_gridSirka);
                    MyDrawXY(_ctx,'trains/rails_t1_11_b_top',0,0,_gridSirka,_gridSirka,0,0);            
                    _ctx.translate(-_grid.x*_gridSirka,-_grid.y*_gridSirka);
                    //_grid.bridge_top_drawn=true;
                }

                let _nextGrid=GetNextTrainGrid(_train);
                if(_nextGrid && (_nextGrid.river||_nextGrid.water||_nextGrid.has_street) && _nextGrid.road_rotation==11 && !_nextGrid.bridge_top_drawn){
                    _ctx.translate(_nextGrid.x*_gridSirka, _nextGrid.y*_gridSirka);
                    MyDrawXY(_ctx,'trains/rails_t1_11_b_top',0,0,_gridSirka,_gridSirka,0,0);            
                    _ctx.translate(-_nextGrid.x*_gridSirka,-_nextGrid.y*_gridSirka);
                    //_nextGrid.bridge_top_drawn=true;
                }

                let _prevGrid=GetPrevTrainGrid(_train);
                if(_prevGrid && (_prevGrid.river||_prevGrid.water||_prevGrid.has_street) && _prevGrid.road_rotation==11 && !_prevGrid.bridge_top_drawn){
                    _ctx.translate(_prevGrid.x*_gridSirka, _prevGrid.y*_gridSirka);
                    MyDrawXY(_ctx,'trains/rails_t1_11_b_top',0,0,_gridSirka,_gridSirka,0,0);            
                    _ctx.translate(-_prevGrid.x*_gridSirka,-_prevGrid.y*_gridSirka);
                    //_prevGrid.bridge_top_drawn=true;
                }

                if(GetGridData(_grid.x,_grid.y+1)){
                    let _grid2=GetGridData(_grid.x,_grid.y+1);
                    if(_grid2.sekvoja || _grid2.sensor_tower){ //vysoky tile
                        _ctx.beginPath();
                        _ctx.rect(_grid.x*_gridSirka,_grid.y*_gridSirka,_gridSirka,_gridSirka);
                        _ctx.save();
                        _ctx.clip();
                        DrawSingleGrid(_ctx,_grid2,_gridSirka,_isMiddleZoomout,_doScreenshot,_OPTIMISED,_1pixelSpace,_1pixelLine,_zoomScale);
                        _ctx.restore();
                }
                }
                if(_zoomScale>1){
                    if(_nextGrid && GetGridData(_nextGrid.x,_nextGrid.y+1)){
                        let _grid2=GetGridData(_nextGrid.x,_nextGrid.y+1);
                        if(_grid2.sekvoja || _grid2.sensor_tower){ //vysoky tile
                            _ctx.beginPath();
                            _ctx.rect(_nextGrid.x*_gridSirka,_nextGrid.y*_gridSirka,_gridSirka,_gridSirka);
                            _ctx.save();
                            _ctx.clip();
                            DrawSingleGrid(_ctx,_grid2,_gridSirka,_isMiddleZoomout,_doScreenshot,_OPTIMISED,_1pixelSpace,_1pixelLine,_zoomScale);
                            _ctx.restore();
                        }
                    }
                    if(_prevGrid && GetGridData(_prevGrid.x,_prevGrid.y+1)){
                        let _grid2=GetGridData(_prevGrid.x,_prevGrid.y+1);
                        if(_grid2.sekvoja || _grid2.sensor_tower){ //vysoky tile
                            _ctx.beginPath();
                            _ctx.rect(_prevGrid.x*_gridSirka,_prevGrid.y*_gridSirka,_gridSirka,_gridSirka);
                            _ctx.save();
                            _ctx.clip();
                            DrawSingleGrid(_ctx,_grid2,_gridSirka,_isMiddleZoomout,_doScreenshot,_OPTIMISED,_1pixelSpace,_1pixelLine,_zoomScale);
                            _ctx.restore();
                        }
                    }
                }
            }
        }

    }
}

function ProcessTrains(_noMove){
    for(let i in trains){
        let _train = trains[i];
        if(_train?.path?.length){
            // if(_train.path_pos<0){
            //     _train.path_pos+=_train.path.length;
            // }
            if(!_noMove){
                _train.grid_perc+=_train.speed;
                _train.tick+=1;
                if(TRAIN_TYPES[_train.type].has_smog){
                    if(_train.tick%35==0){
                        AddSingleEffect({x:_train.x, y:_train.y},0,-0.55,gridSirka*0.23+_train.xx,0+_train.yy-5,'mini_fog_effect',1500,32+MyRand(-3,3),32+MyRand(-3,3),0,TRAIN_TYPES[_train.type].has_smog)
                    }
                }
            }
            while(_train.grid_perc>=1){
                _train.path_pos++;
                if(_train.path_pos>=_train.path.length){
                    _train.path_pos=0;
                }
                _train.grid_perc-=1;
            }
            CalculateTrainPos(_train)

        }

    }
}


function SetTrainOrientationIndex(_train,_orientations,_angleSideA){
    // _angleSideA=[0,0,0,0,0]
    if(_train.grid_perc>=0.80){
        _train.rad = 0;
        if(_train.grid_perc<=0.95){
            _train.rad = _angleSideA[4]*(_train.grid_perc-0.95)*1.5;
        }
        return _train.orientation = _orientations[4];
    } 
    if(_train.grid_perc>=0.6){
        _train.rad = _angleSideA[3]*(_train.grid_perc-0.6)*1;
        return _train.orientation = _orientations[3];
    } 
    if(_train.grid_perc>=0.4){
        _train.rad = _angleSideA[2]*(_train.grid_perc-0.4)*1.5;
        return _train.orientation = _orientations[2];
    } 
    if(_train.grid_perc>=0.20){
        _train.rad = _angleSideA[1]*(_train.grid_perc-0.2)*1.5;
        return _train.orientation = _orientations[1];
    } 
    _train.rad = 0;
    if(_train.grid_perc>=0.05){
        _train.rad = _angleSideA[0]*(_train.grid_perc-0.05)*1.5;
    }
    return _train.orientation = _orientations[0];
}

const PI_STVRT=Math.PI*0.5;
function GetNextTrainGrid(_train){
    if(_train?.path?.length){
        let _pos2=_train.path[(_train.path_pos+1)%_train.path.length];
        if(_pos2){
            let _grid = GetGridData(_pos2[0],_pos2[1]);
            if(_grid){
                return _grid;
            }
        }
    }
    return null;
}
function GetPrevTrainGrid(_train){
    if(_train?.path?.length){
        let _pos2=_train.path[(_train.path_pos-1+_train.path.length)%_train.path.length];
        if(_pos2){
            let _grid = GetGridData(_pos2[0],_pos2[1]);
            if(_grid){
                return _grid;
            }
        }
    }
    return null;
}

function CalculateTrainPos(_train){
    if(_train?.path?.length){
        let _pos0 = _train.path[(_train.path_pos-1+_train.path.length)%_train.path.length];
        let _pos1 = _train.path[_train.path_pos];
        let _pos2 = _train.path[(_train.path_pos+1)%_train.path.length];
        // console.log(_pos0,_pos2)
        let _grid = GetGridData(_pos1[0],_pos1[1]);
        if(_grid){
            _train.x = _grid.x;
            _train.y = _grid.y;

            _train.xx = 0;
            _train.yy = 0;
            // _train.orientation++;
            // if(_train.orientation>=7)_train.orientation=1;

            if(_pos0[0] == _pos2[0] && _pos0[1] > _pos2[1]){ //zdola hore
                _train.orientation=1;
                _train.xx = 0;
                _train.yy = gridSirka * (0-(_train.grid_perc-0.5));
            }else if(_pos0[0] == _pos2[0] && _pos0[1] < _pos2[1]){ // zhora dole
                _train.orientation=9;
                _train.xx = 0;
                _train.yy = (gridSirka) * (_train.grid_perc-0.5);
            }else if(_pos0[0] < _pos2[0] && _pos0[1] == _pos2[1]){ // zlava doprava
                _train.orientation=5;
                _train.xx = (gridSirka) * (_train.grid_perc-0.5);
                _train.yy = 0;
            }else if(_pos0[0] > _pos2[0] && _pos0[1] == _pos2[1]){ // zprava do lava
                _train.orientation=-5;
                _train.xx = (gridSirka) * (1-_train.grid_perc-0.5);
                _train.yy = 0;
            }else if(_pos0[0] == _pos1[0] && _pos0[0] < _pos2[0] && _pos0[1] > _pos2[1]){ // zdola do prava
                SetTrainOrientationIndex(_train,[1,2,3,4,5],[1.5,0.5,1,1,0.5]);

                _train.xx = Math.sin(PI_STVRT*(-_train.grid_perc-1))*gridSirka*0.5 + gridSirka*0.5;
                _train.yy = Math.cos(PI_STVRT*(-_train.grid_perc-1))*gridSirka*0.5 + gridSirka*0.5;
            }else if(_pos0[1] == _pos1[1] && _pos0[0] > _pos2[0] && _pos0[1] > _pos2[1]){ // zprava do hora
                SetTrainOrientationIndex(_train,[-5,-4,-3,-2,1],[-1,-1,-1,-1.5,0.5]);

                _train.xx = Math.sin(PI_STVRT*(-_train.grid_perc))*gridSirka*0.5 + gridSirka*0.5;
                _train.yy = Math.cos(PI_STVRT*(-_train.grid_perc))*gridSirka*0.5 - gridSirka*0.5;
            }else if(_pos0[1] == _pos1[1] && _pos0[0] < _pos2[0] && _pos0[1] < _pos2[1]){ // zlava dole
                SetTrainOrientationIndex(_train,[5,6,7,8,9],[1,1,1,1,1]);

                _train.xx = Math.sin(PI_STVRT*(-_train.grid_perc+2))*gridSirka*0.5 - gridSirka*0.5;
                _train.yy = Math.cos(PI_STVRT*(-_train.grid_perc+2))*gridSirka*0.5 + gridSirka*0.5;
            }else if(_pos0[0] == _pos1[0] && _pos0[0] > _pos2[0] && _pos0[1] < _pos2[1]){ // zhora dolava
                SetTrainOrientationIndex(_train,[9,-8,-7,-6,-5],[1.5,-1,-1,-1,-1]);

                _train.xx = Math.sin(PI_STVRT*(-_train.grid_perc+1))*gridSirka*0.5 - gridSirka*0.5;
                _train.yy = Math.cos(PI_STVRT*(-_train.grid_perc+1))*gridSirka*0.5 - gridSirka*0.5;
            }else if(_pos0[0] < _pos2[0] && _pos0[1] > _pos2[1]){ // zlava hore
                SetTrainOrientationIndex(_train,[5,4,3,2,1],[-1,-1,-1,-1,-1]);
                
                _train.xx = Math.sin(PI_STVRT*(_train.grid_perc))*gridSirka*0.5 - gridSirka*0.5;
                _train.yy = Math.cos(PI_STVRT*(_train.grid_perc))*gridSirka*0.5 - gridSirka*0.5;
            }else if(_pos0[0] > _pos2[0] && _pos0[1] > _pos2[1]){ // zdola dolava
                SetTrainOrientationIndex(_train,[1,-2,-3,-4,-5],[-1,1,1,1,0.5]);

                _train.xx = Math.sin(PI_STVRT*(_train.grid_perc+1))*gridSirka*0.5 - gridSirka*0.5;
                _train.yy = Math.cos(PI_STVRT*(_train.grid_perc+1))*gridSirka*0.5 + gridSirka*0.5;
            }else if(_pos0[0] > _pos2[0] && _pos0[1] < _pos2[1]){ // z prava dole
                SetTrainOrientationIndex(_train,[-5,-6,-7,-8,9],[1,1,1,1,-1]);

                _train.xx = Math.sin(PI_STVRT*(_train.grid_perc+2))*gridSirka*0.5 + gridSirka*0.5;
                _train.yy = Math.cos(PI_STVRT*(_train.grid_perc+2))*gridSirka*0.5 + gridSirka*0.5;
            }else if(_pos0[0] < _pos2[0] && _pos0[1] < _pos2[1]){ // zhora do prava
                SetTrainOrientationIndex(_train,[9,8,7,6,5],[-1,-1,-1,-1,-1]);

                _train.xx = Math.sin(PI_STVRT*(_train.grid_perc-1))*gridSirka*0.5 + gridSirka*0.5;
                _train.yy = Math.cos(PI_STVRT*(_train.grid_perc-1))*gridSirka*0.5 - gridSirka*0.5;
            }
        }
    }
}
const TRAIN_SHIFT=0;//for TESTs


function GetTrainStationDescription(_grid){
    return 'Dispatch trains here...'

}

function CanBuildTrainStationPre(_grid){
    if(HasLevel(TRAIN_STATION_LEVEL+2)){
        if(IsGridTileNeighbour(_grid,'vidiek')){
            return true;
        }
        return false;
    }
    return true;
}

function CanBuildTrainStation(_grid){
    if(IsGridTileNeighbour(_grid,'vidiek')){
        return true;
    }
    WarningPopup(GetText('Train stations can only be built next to a Mega City.'));
    return false;
}

function RotateStation(_grid){
    if(_grid.rotation){
        _grid.rotation=0;
    }else{
        _grid.rotation=1
    }
}



function AutoRotateRails(_grid,_alsoAround){
    let _g2=GetGridData(_grid.x,_grid.y+1);
    let _g8=GetGridData(_grid.x,_grid.y-1);
    let _g4=GetGridData(_grid.x-1,_grid.y);
    let _g6=GetGridData(_grid.x+1,_grid.y);
    if(_g2 && !_g2.rails && !_g2.train_station)_g2=null;
    if(_g4 && !_g4.rails && !_g4.train_station)_g4=null;
    if(_g6 && !_g6.rails && !_g6.train_station)_g6=null;
    if(_g8 && !_g8.rails && !_g8.train_station)_g8=null;

    if(_grid.rails){
        if(_grid.water){
            if((_g2 && _g4)||(_g4 && _g8)||(_g8 && _g6)||(_g6 && _g2)) _grid.road_rotation=5;
            else if(_g2 || _g8) _grid.road_rotation=12;
            else if(_g4 || _g6) _grid.road_rotation=11;
        }else if(_grid.river==11){
            _grid.road_rotation=12;
        }else if(_grid.river==12){
            _grid.road_rotation=11;
        }else if(_g2 && _g4 && _g6 && _g8){
            _grid.road_rotation=5;
        }else if(_g2 && _g4 && _g6 && !_g8){
            _grid.road_rotation=8;
        }else if(_g2 && _g4 && !_g6 && _g8){
            _grid.road_rotation=6;
        }else if(_g2 && !_g4 && _g6 && _g8){
            _grid.road_rotation=4;
        }else if(!_g2 && _g4 && _g6 && _g8){
            _grid.road_rotation=2;
        }else if(!_g2 && _g4 && !_g6 && _g8){
            _grid.road_rotation=3;
        }else if(!_g2 && !_g4 && _g6 && _g8){
            _grid.road_rotation=1;
        }else if(_g2 && _g4 && !_g6 && !_g8){
            _grid.road_rotation=9;
        }else if(_g2 && !_g4 && _g6 && !_g8){
            _grid.road_rotation=7;
        }else if(_g2 && _g8 && !_g4 && !_g6){
            _grid.road_rotation=12;
        }else if(_g4 && _g6 && !_g2 && !_g8){
            _grid.road_rotation=11;
        }else if(_g4 && !_g6 && !_g2 && !_g8){
            _grid.road_rotation=66;
        }else if(!_g4 && _g6 && !_g2 && !_g8){
            _grid.road_rotation=44;
        }else if(!_g4 && !_g6 && _g2 && !_g8){
            _grid.road_rotation=88;
        }else if(!_g4 && !_g6 && !_g2 && _g8){
            _grid.road_rotation=22;
        }else{
            _grid.road_rotation=4;
        }
    }

    if(_alsoAround){
        if(_g2){
            AutoRotateRails(_g2);
        }
        if(_g4){
            AutoRotateRails(_g4);
        }
        if(_g6){
            AutoRotateRails(_g6);
        }
        if(_g8){
            AutoRotateRails(_g8);
        }
    }

}

function GetRailsDescription(_grid){
    return 'kolajnice';
}

function CanBuildRailsPre(_grid){
    return CanBuildRails(_grid);
}
function CanBuildRails(_grid){
    if(_grid.has_street){
        if(IsGridTileNeighbour(_grid,'rails')||IsGridTileNeighbour(_grid,'train_station')){
            if(!_grid.water && !_grid.river){
                if(_grid.otocenie==11 || _grid.otocenie==12){
                    return true;
                }
            }
        }
        return false;
    }
    if(_grid.water){
        let _g2=GetGridData(_grid.x,_grid.y+1);
        let _g8=GetGridData(_grid.x,_grid.y-1);
        let _g4=GetGridData(_grid.x-1,_grid.y);
        let _g6=GetGridData(_grid.x+1,_grid.y);
        if(_g2 && !_g2.rails && !_g2.train_station)_g2=null;
        if(_g4 && !_g4.rails && !_g4.train_station)_g4=null;
        if(_g6 && !_g6.rails && !_g6.train_station)_g6=null;
        if(_g8 && !_g8.rails && !_g8.train_station)_g8=null;
        
        if(_g4 && (!_g4.water || _g4.road_rotation == 11)) return true;
        if(_g6 && (!_g6.water || _g6.road_rotation == 11)) return true;
        if(_g2 && (!_g2.water || _g2.road_rotation == 12)) return true;
        if(_g8 && (!_g8.water || _g8.road_rotation == 12)) return true;

        return false;
    }
    if(IsGridTileNeighbour(_grid,'rails')||IsGridTileNeighbour(_grid,'train_station')){
        return true;
    }
    return false;
}








// setTimeout(() => {
//     if(hrac){
//         AddFullTrain([4,4,4,4,4,4,3,3,3,3,2,2,2,2,2,1,1]);
//     }
// }, 4000);

/** 

  X    X  XXXXX  XXX     XXX   
  X    X    X     X       X    
  X    X    X     X       X    
  X    X    X     X       X    
  XXXXXX    X     X       X    
  X    X    X     X       X    
  X    X    X     X       X    
  X    X    X     X   X   X   X
  X    X  XXXXX  XXXXXX  XXXXXX

*/

function GetFlattenHillCost(_grid){
    return 5000;
}

const CLAY_FOR_FLATTEN=1;
function TryFlattenHill(_x,_y,_confirm){
    let _grid = GetGridData(_x,_y);
    if(_grid && _grid.hill){
        if(_grid.building_type && !_grid.watch_tower){
            InfoPopupText(GetText('Destroy the building first!'),1)
            return false;
        }

        if(!_grid.uranium_cloud){
            if(!_confirm){
                AreYouSure(_confirm,GetText('Are you sure you want to flatten this hill?'),'','TryFlattenHill('+_x+','+_y+',1);',GetText('Flatten'));
                return false;
            }
            if(GetPlayerUpgradeValue(37) || MamDostZlata(GetFlattenHillCost(_grid),1)){
                delete(_grid.hill);
                delete(_grid.watch_tower);
                delete(_grid.building_type);
                hrac.stats.cleared_hills++;
                AddClay(CLAY_FOR_FLATTEN,_grid);
                if(!quickToolActive){
                    OpenGridMenu();
                    ShowQuickTool(3);
                }
                PlaySound('bulldozer');
                AddMudEffect(_grid,5);
                ResetReadyStatusOptiBlockByGrid(_grid);
                return true;
            }
        }
    }
    return false;
}

function ShowClayInfo(){
    return hrac.stats.cleared_swamps || hrac.stats.cleared_rifts;
}

function AddClay(_amount,_grid,_posun){
    hrac.clay+=_amount;
    if(ShowClayInfo()){
        AddFloatingTextToGrid(_grid,'+'+PMat(_amount,8)+' '+GetText('Clay'),0,_posun);
    }

}

/** 

  X     X   XXXXX   X    X  X     X  XXXXXXX    XXX    XXXXX  X     X
  XX   XX  XX   XX  X    X  XX    X     X      XX XX     X    XX    X
  X X X X  X     X  X    X  X X   X     X     XX   XX    X    X X   X
  X  X  X  X     X  X    X  X X   X     X     X     X    X    X X   X
  X  X  X  X     X  X    X  X  X  X     X     XXXXXXX    X    X  X  X
  X     X  X     X  X    X  X  X  X     X     X     X    X    X  X  X
  X     X  X     X  X    X  X   X X     X     X     X    X    X   X X
  X     X  XX   XX  X    X  X   X X     X     X     X    X    X   X X
  X     X   XXXXX    XXXX   X    XX     X     X     X  XXXXX  X    XX

*/


function ClayForMountain(){
    return 12;
}

function FlatMountainDescription(){
    return GetText('You will remove the mountain and gain {att1}.',PMat(ClayForMountain(),8));
}

function FlatMountainAfterFun(_grid){//flatten mountain flattenmountain
    delete(_grid.mountain);
    delete(_grid.flat_mountain_notsaved);
    delete(_grid.building_type);
    AddClay(ClayForMountain(),_grid);
    // AddFloatingTextToMousePos('+'+PMat(ClayForMountain(),8));
    RefreshHeader();
}

/** 

  XXXXX   X    X  XXXXXX   XXXXXX   XXX     XXXXXX
  X   XX  X    X   X   XX   X   XX   X      X     
  X    X  X    X   X    X   X    X   X      X     
  X   XX  X    X   X   XX   X   XX   X      X     
  XXXXX   X    X   XXXXX    XXXXX    X      XXXXX 
  XXX     X    X   X   XX   X   XX   X      X     
  X XX    X    X   X    X   X    X   X      X     
  X  XX   X    X   X   XX   X   XX   X   X  X     
  X   XX   XXXX   XXXXXX   XXXXXX   XXXXXX  XXXXXX

*/


function IsRubble(_grid){
    return _grid.rubble1 || _grid.rubble2 || _grid.rubble3 || _grid.rubble4;
}
function TryClearRubble(_grid){
    return BuildBuilding(_grid.x,_grid.y,49);
}

function RemoveRubble(_grid){
    delete(_grid.rubble1);
    delete(_grid.rubble2);
    delete(_grid.rubble3);
    delete(_grid.rubble4);
    if(_grid.remove_rubble_notsaved){
        delete(_grid.remove_rubble_notsaved);
    }
    if(_grid.building_type=='remove_rubble_notsaved'){
        delete(_grid.building_type);
    }
}

function AddRandomRubbleToGrid(_grid){
    let _rand = (MyRand(1,4000)%4)+1;
    if(_rand==1)_grid.rubble1=1;
    if(_rand==2)_grid.rubble2=1;
    if(_rand==3)_grid.rubble3=1;
    if(_rand==4)_grid.rubble4=1;
}



/** 

  XXXXXX   XXXXX    XXXXX   X    X  XXXXXX  X     X         XXXXX   XXXXX  XXXXXXX  X     X
   X   XX  X   XX  XX   XX  X   X   X       XX    X        XX   XX    X       X     X     X
   X    X  X    X  X     X  X  X    X       X X   X        X          X       X      X   X 
   X   XX  X   XX  X     X  X X     X       X X   X        X          X       X       X X  
   XXXXX   XXXXX   X     X  XX      XXXXX   X  X  X        X          X       X        X   
   X   XX  XXX     X     X  X X     X       X  X  X        X          X       X        X   
   X    X  X XX    X     X  X  X    X       X   X X        X          X       X        X   
   X   XX  X  XX   XX   XX  X   X   X       X   X X        XX   XX    X       X        X   
  XXXXXX   X   XX   XXXXX   X    X  XXXXXX  X    XX         XXXXX   XXXXX     X        X   

*/


function IsBrokenCity(_grid){
    return (_grid && (_grid.broken_city_small || _grid.broken_city_medium || _grid.broken_city_big || _grid.broken_city_big_train));
}

function TryClearBrokenCity(_grid){
    return BuildBuilding(_grid.x,_grid.y,49); //toto je akoze uz ten rubble potom, realne sa pouziva BuildBuilding(_grid.x,_grid.y,52);
}

function ClearBrokenCity(_grid){
    if(_grid.remove_broken_city_notsaved){
        delete(_grid.remove_broken_city_notsaved);
    }
    if(_grid.building_type=='remove_broken_city_notsaved'){
        delete(_grid.building_type);
    }
    if(IsBrokenCity(_grid)){
        if(_grid.broken_city_small)hrac.stats.cleared_cities_1++;
        if(_grid.broken_city_medium)hrac.stats.cleared_cities_2++;
        if(_grid.broken_city_big)hrac.stats.cleared_cities_3++;
        hrac.stats.cleared_cities = hrac.stats.cleared_cities_1+hrac.stats.cleared_cities_2+hrac.stats.cleared_cities_3;
        let _strength = 0;
        // if(_grid.broken_city_small)_strength = 1;
        if(_grid.broken_city_medium)_strength = 1;
        if(_grid.broken_city_big)_strength = 2;
        delete(_grid.broken_city_small);
        delete(_grid.broken_city_medium);
        delete(_grid.broken_city_big);
        // let _total = _player.stats.cleared_cities_1+_player.stats.cleared_cities_2+_player.stats.cleared_cities_3;
        let _incomeMaxed = Math.min(hrac.income,80000);
        let _gold = 200000-Math.min(15, hrac.stats.cleared_cities)*5000 + _incomeMaxed * Math.max(1,MyRand(-15,25))*0.1 + MyRand(0,100)*500;
        AddMat(SimplifiedNumber((_strength+1)*Mro(_gold)),'gold',0,1,_grid);
        if(KnowsSuperClickers()){
            if(hrac.super_clickers > 1000 && totalSpent<10){
                AddFloatingTextToGrid(_grid,GetText('too many super clickers')+' (1000)','orange',2,4);
            }else{
                AddMat(MyRand(0,_strength),'super_clickers',1,0,_grid);
            }
        }
        if(AreGemsVisible() && hrac.stats.cleared_cities < 10){
            AddMat(1,'gems',1,2,_grid);
        }else if(AreGemsVisible() && hrac.stats.cleared_cities < 50 && hrac.stats.cleared_cities%2){
            AddMat(1,'gems',1,2,_grid);
        }else if(AreGemsVisible() && hrac.stats.cleared_cities%10==2){
            AddMat(2,'gems',1,2,_grid);
        }else if(hrac.stats.cleared_cities%5==1){
            if(chests.length<MaxChests()+2){
                if(AddRandomChest(_grid)){
                    //success
                }
            }
        }


        PlaySound('salvage');
        AddBuildEffect(_grid,5);
        AddGoldEffect(_grid,3);

        if(_strength == 2 && MyRand100(20)){
            _grid.broken_city_big_train=1;
        }else{
            if(_strength==0)_grid.rubble1=1;
            // if(_strength==1)AddRandomRubbleToGrid(_grid)
            if(_strength==2)_grid.rubble4=1;
        }
        TryIncreaseSuperClickerBonusToStarterPack(1);
        
        if(rewardAdIsReady && hrac.found_safe_today<2 && HasLevel(SALVAGE_LEVEL_REQ)){
            if(MyRand100(SAFE_CHANCE_PERC)){
                ShowTrezorPopup();
            }
        }
    }


}



/** 

    XXX    XXXXX  XXXXX   XXXXX   XXX       XXX    X     X  XXXXXX
   XX XX     X    X   XX  X   XX   X       XX XX   XX    X  X     
  XX   XX    X    X    X  X    X   X      XX   XX  X X   X  X     
  X     X    X    X   XX  X   XX   X      X     X  X X   X  X     
  XXXXXXX    X    XXXXX   XXXXX    X      XXXXXXX  X  X  X  XXXXX 
  X     X    X    XXX     X        X      X     X  X  X  X  X     
  X     X    X    X XX    X        X      X     X  X   X X  X     
  X     X    X    X  XX   X        X   X  X     X  X   X X  X     
  X     X  XXXXX  X   XX  X       XXXXXX  X     X  X    XX  XXXXXX

*/

//salvage airplane
function SalvageAirplaneWreck(_x,_y){//or train
    let _grid=GetGridData(_x,_y);
    if(_grid && (_grid.airplane_wreck || _grid.broken_city_big_train)){
        if(MamDostZlata(GetAirplaneSalvageCost(_grid),1)){
            AddMat(Mro(3000+hrac.income * MyRand(1,20)*0.1),'gold',0,1,_grid);
            if(KnowsSuperClickers()){
                if(hrac.super_clickers > 1000  && totalSpent<10){
                    AddFloatingTextToGrid(_grid,GetText('too many super clickers'),'orange',2,4);
                }else{
                    AddMat(MyRand(2,4),'super_clickers',1,2,_grid);
                }
            }

            hrac.stats.found_airplanes++;
            let _hadChests=chests.length;
            if(!TryShowAirplaneMegaCityStory()){
                if(MyRand100(80) || !AddRandomChest(_grid)){
                    if(!FindAndShowRandomSpecialPlace()){
                        AddRandomChest(_grid);
                    }
                }
            }
            if(hrac.steelIncome){
                AddMat(250+MyRand(0,50),'steel',1,_hadChests<chests.length?-1:0,_grid);
            }

            AddBuildEffect(_grid,5);
            AddGoldEffect(_grid,3);
            AddHealEffect(_grid,2);
            delete(_grid.airplane_wreck);
            delete(_grid.broken_city_big_train);
            ResetReadyStatusOptiBlockByGrid(_grid);
            PlaySound('salvage');
            CloseGridMenu();
            return true;
        }
    }
    return false;
}

function GetAirplaneSalvageCost(_grid){
    return 15000;
}


let allSpecialPlaces=null;
function FindAndShowRandomSpecialPlace(){
    if(!allSpecialPlaces){
        GenerateSpecialPlaces();
    }

    if(allSpecialPlaces.length && hrac.special_places_radar.length < 3){
        let _index = MyRand(0,4);
        if(_index>allSpecialPlaces.length-1){
            _index=allSpecialPlaces.length-1;
        }
        let _specialPlace = allSpecialPlaces[_index];
        allSpecialPlaces.splice(_index,1);

        
        if(_specialPlace){
            PlaySound('special_location');
            hrac.special_places_radar.push(_specialPlace);
            let _out='';
            _out+=GetText('We have found special place and marked its coordinates to our map.')+BRBR+Button(GetText('Show me!'),'ScrollToXY('+_specialPlace.x+','+_specialPlace.y+',0.1,1);');
            DoBasicPopup(_out,GetText('Coordinates found!'),{centerised:1,avoid_quick_tool_close:1});
            return true;
        }
    }
    return false;
}

function TryRemoveFromPlayerSpecialPlaceRadar(_grid){
    if(hrac.special_places_radar.length){
        for(let i in hrac.special_places_radar){
            if(hrac.special_places_radar[i].x == _grid.x && hrac.special_places_radar[i].y == _grid.y){
                hrac.special_places_radar[i].found = true;
                return true;
            }
        }
    }
    return false;
}


function GenerateSpecialPlaces(){
    allSpecialPlaces=[];
    for(let _fz of FISH_ZONES){
        TryAddSpecialPlace(_fz);
    }
    for(let _fz of GOLD_ZONES){
        TryAddSpecialPlace(_fz);
    }
    for(let _fz of SUPER_COPPER_ZONES ){
        TryAddSpecialPlace(_fz);
    }
    for(let _fz of BROKEN_TOWNS_ZONES){
        TryAddSpecialPlace(_fz);
    }
    // for(let _fz of BOOKS){
    //     TryAddSpecialPlace(_fz);
    // }
    for(let _fz of EXTRA_BUNKERS ){
        TryAddSpecialPlace(_fz);
    }
    for(let _fz of SMALL_GOLD_ZONES ){
        TryAddSpecialPlace(_fz);
    }
    for(let _fz of WATER_OIL_ZONES){
        TryAddSpecialPlace(_fz);
    }
    for(let _fz of BROKEN_SHIP_ZONES){
        TryAddSpecialPlace(_fz);
    }
    for(let _fz of GEM_FIELDS){
        TryAddSpecialPlace(_fz);
    }
    for(let _fz of MANY_CHESTS_ZONES){
        TryAddSpecialPlace(_fz);
    }
    
    allSpecialPlaces.sort((a,b)=>a.center_dist - b.center_dist);
}

let special_zone_order=0;
function TryAddSpecialPlace(_fz){
    special_zone_order++;
    if(special_zone_order%6==0){
        return false;
    }
    if(_fz.x < -BOUNDERIES_LEFT) return false;
    if(_fz.x > BOUNDERIES_RIGHT) return false;
    if(_fz.y < -BOUNDERIES_UP) return false;
    if(_fz.y > BOUNDERIES_DOWN) return false;

    if(_fz && !GetGridData(_fz.x,_fz.y) && !_fz.ignore_air){
        for(let _myRadar of hrac.special_places_radar){
            if(_myRadar.x == _fz.x && _myRadar.y == _fz.y){
                return false;
            }
        }
        _fz.center_dist = Mro(GetRealDistance(_fz.x,_fz.y,0,0));
        allSpecialPlaces.push(_fz);
        return true;
    }
    return false;
}


// setTimeout(() => {
//     FindAndShowRandomSpecialPlace();
// }, 10000);

/** 

   XXXXX   X         X    XXX    X     X  XXXXX 
  XX   XX  X         X   XX XX   XX   XX  X   XX
  X        X         X  XX   XX  X X X X  X    X
  XX        X       X   X     X  X  X  X  X   XX
   XXXXX    X   X   X   XXXXXXX  X  X  X  XXXXX 
       XX   X   X   X   X     X  X     X  X     
        X    X X X X    X     X  X     X  X     
  XX   XX    X X X X    X     X  X     X  X     
   XXXXX      X   X     X     X  X     X  X     

*/



const CLEAR_SWAMP_COST={clay: 5};
const CLEAR_SWAMP_ROCKS_COST={clay: 4, gold:55000};

function TryClearSwamp(_x,_y,_isRock){
    let _grid = GetGridData(_x,_y);
    if(_grid && (_grid.swamp || _grid.swamp_rocks)){
        if(!_isRock && MamDostMats(CLEAR_SWAMP_COST,1)){
            hrac.stats.cleared_swamps++;
            DestroyAll(_x,_y,1);
            TryShowQuickTool(11);
            AddBuildEffect(_grid,5);
            return true;
        }
        else if(_isRock && MamDostMats(CLEAR_SWAMP_ROCKS_COST,1)){
            hrac.stats.cleared_swamps++;
            DestroyAll(_x,_y,1);
            TryShowQuickTool(12);
            AddBuildEffect(_grid,5);
            return true;
        }
    }
    return false;
    

}




/** 

  XXXXX   XXXXX  XXXXXX  XXXXXXX
  X   XX    X    X          X   
  X    X    X    X          X   
  X   XX    X    X          X   
  XXXXX     X    XXXXX      X   
  XXX       X    X          X   
  X XX      X    X          X   
  X  XX     X    X          X   
  X   XX  XXXXX  X          X   

*/



function GetRiftFillCost(_grid){
    if(_grid && _grid.rift ){
        return 15;
    }
    if(_grid && _grid.rift_big ){
        return 50;
    }
}

function FillTheRift(_x,_y){ //fillrift
    let _grid = GetGridData(_x,_y);
    if(!_grid.uranium_cloud)
    if(GetPlayerUpgradeValue(34)){

        if(_grid && _grid.rift ){
            delete(_grid.rift);
            CloseGridMenu();
            hrac.stats.cleared_rift+=1;
            AddMudEffect(_grid,7);
        }
        if(_grid && _grid.rift_big ){
            delete(_grid.rift_big);
            CloseGridMenu();
            hrac.stats.cleared_rift+=1;
            AddMudEffect(_grid,9);
        }
    }
}






/** 

  XXXXX   XXXXXX  X     X  XXXXX  XXXXXXX    XXX    XXX     XXXXX  XXXXXXX  XXXXXX
  X   XX  X       X     X    X       X      XX XX    X        X          X  X     
  X    X  X       X     X    X       X     XX   XX   X        X         X   X     
  X   XX  X        X   X     X       X     X     X   X        X        X    X     
  XXXXX   XXXXX    X   X     X       X     XXXXXXX   X        X       X     XXXXX 
  XXX     X        X   X     X       X     X     X   X        X      X      X     
  X XX    X         X X      X       X     X     X   X        X     X       X     
  X  XX   X         X X      X       X     X     X   X   X    X    X        X     
  X   XX  XXXXXX     X     XXXXX     X     X     X  XXXXXX  XXXXX  XXXXXXX  XXXXXX

*/


function TryRevitalise(_grid){
    return BuildBuilding(_grid.x,_grid.y,38);
}

function RevitaliseDescription(_grid){
    if(_grid.sand) return GetText2('You will change the soil from sand to desert.');
    return GetText2('You will make the soil suitable for plants.');
}

function RevitaliseFun(_grid){
    // AddFloatingTextToMousePos('Revitalised');
    delete(_grid.revitalise_notsaved);
    delete(_grid.revitalise_scorched_notsaved);
    delete(_grid.building_type);
    if(_grid.lava_rift){
        delete(_grid.lava_rift);
        // _grid.desert=1;
    }else if(_grid.scorched){
        delete(_grid.scorched);
        // _grid.desert=1;
    }else if(_grid.sand){
        delete(_grid.sand);
        _grid.desert=1;
    }else{
        delete(_grid.desert);
    }
}

function RevitaliseCost(_grid,_type){
    if(_grid.sand || _type==1) return {gold:35000};
    if((_grid.lava_rift || _type==3)) return {gold:30000000, clay:50};
    if((_grid.scorched || _type==2) && HasUpgrade(103)) return {gold:4900000-GetPlayerUpgradeValue(103,0), clay:8};
    if(_grid.scorched || _type==2) return {gold:4900000, clay:8};
    // if(_grid.desert)
    return {gold:24000};
}

function TryRevitaliseScorched(_grid){
    if(HasLevel(REVITALISE_SCORCHED_REQURED_LEVEL)){
        return BuildBuilding(_grid.x,_grid.y,56);
    }
    return false;
}


function LavaRiftToThermalCost(_grid){
    return {
        gold:45000000,
        steel:5000000,
        clay:45,
    }
}

function LavaRiftToThermalSpot(_grid){
    if(_grid.lava_rift){
        delete(_grid.lava_rift);
        _grid.thermal=1;
        _grid.just_thermalised=1;

    }
   
}

let blinkingStructures=[];
function DrawBlinkingStructure(_ctx,_OPTIMISED,_doScreenshot,_1pixelSpace,_1pixelLine){
    if(!_OPTIMISED && !_doScreenshot && !visitingFriend)
    for(let _bs of blinkingStructures)if(_bs.x >= camera_X-1 && _bs.y>=camera_Y && _bs.x<camera_X2+1 && _bs.y<camera_Y2+1){
        _ctx.globalAlpha = Math.sin(tickCount*0.2)*0.5+0.5;
        if(_bs.grid_key){
            const _kb = _bs.grid_key;
            _ctx.drawImage(allBitMaps[BUILDINGS_BY_KEYS[_kb].image],_bs.x*gridSirka,_bs.y*gridSirka-images_y_shift[BUILDINGS_BY_KEYS[_kb].image],gridSirka+_1pixelSpace,images_height[BUILDINGS_BY_KEYS[_kb].image]+_1pixelSpace);
        }
        if(_bs.bit_map_name){
            _ctx.drawImage(allBitMaps[_bs.bit_map_name],_bs.x*gridSirka,_bs.y*gridSirka,gridSirka+_1pixelSpace,gridSirka+_1pixelSpace);
        }
    }
}
function RemoveBlinkingStructures(){
    blinkingStructures=[];
}

let lastTutorialBlinkXY=null;
function AddBlinkingStructure(_x,_y,_gridKey,_bitMapName,_tutorialKey){
    if(!visitingFriend)
    blinkingStructures.push({
        x: _x,
        y: _y,
        grid_key:_gridKey,
        bit_map_name:_bitMapName
    });
    
    lastTutorialBlinkXY = [_x,_y,_tutorialKey];
}

function TryFinishBlinkingTutorial(_grid){
    if(lastTutorialBlinkXY){
        if(lastTutorialBlinkXY[0] == _grid.x)
        if(lastTutorialBlinkXY[1] == _grid.y)
        if(lastTutorialBlinkXY[2])
        {
            hrac.tutorial[lastTutorialBlinkXY[2]]=1;
        }
        
    }
}

function TryAddBlinkingTutorial(_grid){
    if(HasLevel(30) && !testVersion){
        return false;
    }
    RemoveBlinkingStructures();
    if(!_grid.water && !_grid.znecistenie && !_grid.has_street && !_grid.building_type && IsGridGroundBuildable(_grid)){
        const _neighbours = GetGridNeighbours(_grid);
        for(let _n of _neighbours){
            if(_n && _n.water && _n.is_connected && !_n.building_type && !_n.ship ){
                if(!_n.shipyard){
                    if(_grid.mesto){
                        if(!hrac.tutorial.shipyard_and_town){
                            AddBlinkingStructure(_n.x,_n.y,'shipyard_small',0,'shipyard_and_town');
                        }                    
                    }else if(_grid.golden_field || _grid.golden_island){
                        if(!hrac.tutorial.island_gold_mine && !_grid.building_type){
                            AddBlinkingStructure(_n.x,_n.y,'shipyard_small',0);
                            AddBlinkingStructure(_grid.x,_grid.y,'golden_mine',0,'island_gold_mine');
                        }
                    }else{
                        if(!hrac.tutorial.shipyard_and_road){
                            for(let _n2 of _neighbours){
                                if(_n2 && _n2.has_street){
                                    return false;
                                }
                            }
                            AddBlinkingStructure(_n.x,_n.y,'shipyard_small',0);
                            AddBlinkingStructure(_grid.x,_grid.y,0,'streets/street_t2_5','shipyard_and_road');
                        }
                    }
                }
                break;
            }
        }
    }
}


function TryShowActivistTutorial(_grid){
    if(_grid && _grid.activists &&  !hrac.tutorial.activists){
        hrac.tutorial.activists=true;
        let _out='';
        _out+=Bold(GetText('Activists help'))+BRBR;
        _out+=GetMultiTilesImages([_grid.water?'water_apo':'odpad','activists'],100,'')+BR;
        _out+=GetText('There are activists in this tile. Restoration costs reduced.');
        
        DoBasicPopup(_out,GetText('Information'),{centerised:1});
    }
}

const XMAS=1;

function GetEndOfEventDateNum(){
    // if(IsEvent()==XMAS){
    if( (GetDateMonth()==12 && GetDateDay()>=15) || (GetDateMonth()==1 && GetDateDay()<6) ){
        let _year = new Date(serverTime).getFullYear(); 
        if(GetDateMonth()==12){
            _year+=1;
        }
        return new Date(_year+'/01/05')*1;
    }

    return 0;
}

function IsEvent(ignoreLvl){
    // if(IS_DEV)return XMAS;
    if(ignoreLvl||HasLevel(SHIP_EVENT_LEVEL_REQ))if(((GetDateMonth()==12 && GetDateDay()>=15) || (GetDateMonth()==1 && GetDateDay()<6)) && (new Date()*1 < GetEndOfEventDateNum()) )return XMAS;

    if(0){
        hrac.event_fish=0;
        hrac.event_fish_total=-1;
        hrac.event_mile_picked=0;
        hrac.event_fish_perc_bonus=0;
        hrac.event_fish_income=0;
    }
    return 0;
}

function GetEventType(ignoreLvl){ 
    let _ev = IsEvent(ignoreLvl);
    if(_ev==XMAS){
        return EVENT_FISH_AND_SHIPS;//ryby
    }
    return 0;
}

function GetEventLabel(){
    let _ev = IsEvent();
    if(_ev==XMAS){
        return GetText('Holiday Fish Feast');
    }
    return GetText('Event');
}







function GetEventShipRadius(){
    return 5;
}

function GetMaxEventShips(){
    return 10 + Mfl(hrac.stats.water_tiles / EVENT_SHIP_PER_WATER) + GetPlayerUpgradeValue(94) + GetPlayerUpgradeValue(96);
}

function CanSendEventShip(_grid){
    if(hrac.buildings.event_ship >= GetMaxEventShips()){
        PlaySound('ee');
        AddFloatingTextToGrid(_grid,GetText('Not enough free Event Ship slots'),'red',1,4);
        AddFloatingTextToGrid(_grid,GetText('Depends on the number of restored water tiles.'),'red',0,4);

        return false;
    }
    let _count = GetAmountOfTilesInRadius(_grid,GetEventShipRadius()*2,'event_ship');
    // _count += GetAmountOfTilesInRadius(_grid,1,'ship');
    if(_count){
        PlaySound('ee');
        AddFloatingError(GetText("Event Ships can't share fishing tiles"),1);
        for(let _s of allEventShips){
            if(IsGridInSquare(_grid,_s.x,_s.y,GetEventShipRadius()*2)){
                _s.red_radius=30;
            }else{
                _s.red_radius=0;
            }
        }
        return false;
    }
    return true;
}

let allEventShips=[];
function InitEventShips(){
    if(visitingFriend){
        return false;
    }
    allEventShips=[];
    for(let _x in myGridData) for(let _y in myGridData[_x]){
        if(myGridData[_x][_y] && myGridData[_x][_y].event_ship){
            allEventShips.push(myGridData[_x][_y]);
        }
    }
}

function GetEventSingleShipIncome(_grid){
    let _range=GetEventShipRadius();
    let _x=_grid.x;
    let _y=_grid.y;
    let _count=0;
    for(let i=_x-_range;i<=_x+_range;i++){
        for(let j=_y-_range;j<=_y+_range;j++){
            let _grid = GetGridData(i,j);
            if(_grid && !_grid.znecistenie && !_grid.oil && !_grid.water_rocks && !_grid.has_street){
                if(_grid.fish_small)_count+=2;
                else if(_grid.fish)_count+=3;
                else if(_grid.fish_big)_count+=5;
                else if(_grid.fish_huge)_count+=10;
                else if(_grid.water)_count+=1;

                if(_grid.deep_water2||_grid.deep_water)_count+=1;
            }
        }
    }
    return _count;
}

function EventShipSent(_grid){
    _grid.event_fish_income=GetEventSingleShipIncome(_grid);
    AddFloatingTextToGrid(_grid,'+'+GetText('{att1} Event-Fish income',PMat(_grid.event_fish_income,'event_fish')),'#aeffde');
    allEventShips.push(_grid);
}

function PlusFishStr(_str,_num){
    return BR+GetText(_str)+': '+Bold('+'+PMat(_num,'event_fish'))+PER_INCOME_SHORT;
}

function GetBuildingDescriptionFor_eventShip(_grid){
    let _out='';
    _grid.event_fish_income=GetEventSingleShipIncome(_grid);
    if(IsEvent(1)){
        _out+=GetText('Ship fishing range: {att1}',GetEventShipRadius());
        _out+=BR+GetText3('Event-Fish income:')+PMat(_grid.event_fish_income,'event_fish')+PER_INCOME_SHORT;
        _out+=BR+GetText3('Total Event Ships:')+(hrac.storage.event_ship+hrac.buildings.event_ship)+' / '+GetMaxEventShips()+'; '+GetText('Depends on the number of restored water tiles.');
        if(_grid.event_ship){
            if(hrac.event_fish_income > _grid.event_fish_income){
                _out+=BR+GetText3('Total Event-Fish income:')+PMat(hrac.event_fish_income,'event_fish')+PER_INCOME_SHORT;
            }
        }else{
            _out+=BR+ColorSpan('var(--light-purple)',GetText("Event Ship price increases with each one you buy"));
        }
    }else{
        _out+=GetText("The fishing event has ended.");
    }

    
    return _out;
}

function ExtraEventShipDesc(_grid){
    let _out='';
    if(_grid.event_ship){
        if(AnyEventRewardReadyToClaim()){
            _out+=BR+Button(GetTextCAPS("Show Rewards"),'ShowFishEventRewardMilestonesPopup();PlayTap()',{color:'green'});
        }else{
            if(IsEvent()){
                _out+=BR+Button(GetTextCAPS('More info'),'DoFishEventPopup();PlayTap()');
            }
        }
        if(IsEvent()){
            _out+=SPC+Button(GetText('QUICK TOOL'),'ActivateEventShipQuickTool();');
            _out+=BRBR+Bold(GetText3("Event-Fish income per tile:"));
            _out+=PlusFishStr("No fish school",1);
            _out+=PlusFishStr('Small fish spot',2);
            _out+=PlusFishStr('Medium fish spot',3);
            _out+=PlusFishStr('Big fish spot',5);
            _out+=PlusFishStr("Huge fish spot",10);
            if(HasLevel(DEEP_WATER_LVL_REQ)){
                _out+=PlusFishStr('Deep water',1)+' ('+GetText('extra<!--extra fish-->')+')';
            }
            _out+=BR+GetText('No Event-Fish income on tiles with oil, rocks or bridges');
        }
    }
    return _out;

}

function TryDrawEventShipRadiuses(_ctx){
    if(visitingFriend){
        return false;
    }
    let _radius = GetEventShipRadius();
    let _showShipRadius=(quickToolActive && quickToolVisible=='b' && quickToolType2=='event_ship')
    if(allEventShips.length){
        for(let _g of allEventShips)if(_showShipRadius || _g.red_radius>0){
            let _color = BUILDINGS_BY_KEYS['event_ship'].grid_color;
            if(last_grid_clicked && last_grid_clicked.grid){
                if(last_grid_clicked.grid.x != _g.x || last_grid_clicked.grid.y != _g.y){
                    if(_g.red_radius>0){
                        if(_g.red_radius%8<4){
                            _color='red';
                        }
                        _g.red_radius-=1;
                    }
                    DrawRadius(_ctx,_g.x,_g.y,[_radius,_radius,_radius,_radius],_color,camera.zoom);
                }
            }else{
                DrawRadius(_ctx,_g.x,_g.y,[_radius,_radius,_radius,_radius],_color,camera.zoom);
            }

            if(_g.x > camera_X+1 && _g.x<camera_X2-1 && _g.y > camera_Y+1 && _g.y<camera_Y2-1 ){
                _ctx.beginPath();
                // _ctx.fillRect(_gridSirka2-30, _gridSirka2-30, 30, 30);
                // _ctx.strokeStyle = "#32343b";
                // _ctx.rect(_gridSirka2-30, _gridSirka2-30, 30, 30);
                // _ctx.stroke();
                _ctx.font = "64px Encode Sans Semi Condensed";
                _ctx.fillStyle = _color;
                let _txt = _g.event_fish_income;
                let _w = _ctx.measureText(_txt).width;
                // _ctx.fillText(_txt,_g.x*gridSirka+gridSirka*_invZoom*0.5 - _w*0.5,_g.y*gridSirka-8);
                
                _ctx.strokeStyle = "black";
                _ctx.lineWidth = 6;
                _ctx.strokeText(_txt,_g.x*gridSirka+gridSirka*0.5 - 0.5*_w,_g.y*gridSirka-16);
                _ctx.fillText(_txt,_g.x*gridSirka+gridSirka*0.5 - 0.5*_w,_g.y*gridSirka-16);
            }
        }
    }
}

function EventShipCost(){
    let _cost = 0;
    if(!hrac.storage.event_ship){hrac.storage.event_ship=0;}
    if(!hrac.buildings.event_ship){hrac.buildings.event_ship=0;}
    if(hrac.storage.event_ship+hrac.buildings.event_ship>0){
        _cost = Math.pow(hrac.storage.event_ship+hrac.buildings.event_ship,2) * 500;
    }

    return {
        event_fish: _cost
    };
}

let fishtutorialDisplayed=false;
function TryToShowMilestoneRewards(){
    if(AnyEventRewardReadyToClaim()){
        ShowFishEventRewardMilestonesPopup();
    }else{
        if(IsEvent() && hrac.buildings['event_ship'] == 0 && !fishtutorialDisplayed && !popupsVisible['basicPopup']){
            DoFirstFishEventPopup();
        }
        
    }
}

function TryToShowFishTutorial(){
    if(IsEvent() && (hrac.event_fish_total == -1) && tickCount % 35 == 0 && !popupsVisible['basicPopup'] && !popupsVisible['bottomMenuPopup']){
        DoFishEventPopup();
    }
}

function ActivateEventShipQuickTool(){
    CloseBottomMenu();
    CloseBasicPopup();
    QuitQuickTool();
    ShowQuickTool('b','event_ship');
    ToggleQuickTool();
    PlayTap();
}

function GetTotalEventFishPercBonus(){
    return GetPlayerUpgradeValue(95)+GetPlayerUpgradeValue(97)+hrac.event_fish_perc_bonus;
}



const EVENT_SHIP_PER_WATER=3000;

// POPUP
// POPUP
// POPUP
// POPUP
function DoFishEventPopup(){
    let _out='';
    if(hrac.event_fish_total<0){
        hrac.event_fish_total=0;
        DoFirstFishEventPopup();
        return false;
    }
    
    if(!hrac.storage.event_ship)hrac.storage.event_ship=0;
    if(!hrac.buildings.event_ship)hrac.buildings.event_ship=0;

    let _multiplier = GetIncomeMultiplier();
    _out += '<div class="offline-overview">';
    if(hrac.event_fish_total>100){
        _out+=GetText3('Total Event-Fish caught:')+Bold(PMat(hrac.event_fish_total,'event_fish'))+BR;
    }

    _out+=GetText3('Total Event-Fish income:')+(_multiplier>1?_multiplier+'x ':'')+Bold(PMat(hrac.event_fish_income,'event_fish')+PER_INCOME_SHORT);

    if(GetTotalEventFishPercBonus() && hrac.event_fish_income){
        _out+=BR+GetText3('Event-Fish income bonus:')+(hrac.event_fish_perc_bonus?(hrac.event_fish_perc_bonus)+'% ':'')+(GetTotalEventFishPercBonus()?' + ':'')+(GetPlayerUpgradeValue(95)+GetPlayerUpgradeValue(97)?GetPlayerUpgradeValue(95)+GetPlayerUpgradeValue(97)+'%':'');
        let _fishIncome = Mro((GetTotalEventFishPercBonus()+100)*0.01*hrac.event_fish_income*_multiplier);
        _out+=BR+' = '+PMat(_fishIncome,'event_fish')+PER_INCOME_SHORT;
    }
    _out += '</div>';
    _out += '<center>';


    _out+=BR+GetText3('Total Event Ships:')+Bold((hrac.storage.event_ship+hrac.buildings.event_ship)+' / '+GetMaxEventShips());
    if(hrac.storage.event_ship+hrac.buildings.event_ship >= 10 ){
        _out+=BRBR+GetText("+{att1} Event Ship slot per every {att2} restored water tiles",[1,PCisloB(EVENT_SHIP_PER_WATER)]);
    }

    if(hrac.event_fish_total>100){
        _out+=BRBR+Button(GetText('Place ships'),'ActivateEventShipQuickTool();')+(!HasLevel(22)?BR+GetText('by using quick tool'):'');
    }
    _out+=BRBR+Button(GetText('Show Rewards'),'ShowFishEventRewardMilestonesPopup();PlayTap()',AnyEventRewardReadyToClaim()?{color:'green'}:null);

    if(hrac.storage.event_ship+hrac.buildings.event_ship>=2){
        _out+=BRBR+DivClass('expires-in-so',GetText3("Event ends in:")+PDurDate('end_of_event',GetEndOfEventDateNum(),'CloseBasicPopup();'));
    }

    if(hrac.buildings.event_ship>=2){
        _out += BR+GetAllSpecialOfferPacksInner();
    }
    _out += '<center>';
    
    
    _out+=BRBR+'<div id="event_leader_boards_div"></div>';
    _out+=BR+Button(GetText('Tutorial'),'DoFirstFishEventPopup();');
    
    QuitQuickTool();
    CloseBottomMenu();
    DoBasicPopup(_out,GetEventLabel()+BR+`<img src="${getAssetUrl(`public/images/art/fish_splash.png?v=${PIC_VERSION}`)}" style="margin-top:12px;width:min(250px,100%);">`,{top_y:85+TOP_PADDING, max_width: GetSmallerPopupWidth(50)});

    LoadEventLeaderBoards();
}

function DoFirstFishEventPopup(){
    fishtutorialDisplayed=true;
    let _out='';
    let _sizeKoef = 1;
    let _fsize=15;
    if(window.innerWidth < 450){
        _sizeKoef=0.75;
        _fsize=12;
    }
    if(window.innerWidth < 320){
        _sizeKoef=0.5;
        _fsize=10;
    }
    _sizeKoef*=0.8;

    _out += FSize(_fsize,Bold(GetText("The Fish Feast has begun!"))+BR+GetText("Help your survivors catch special fish, so they can have a great holiday where no one has to walk around with an empty stomach."));
    _out += BR+GetIconImage('event_fish',70*_sizeKoef);
    _out += BR+'<div style="margin-bottom:10px;">'+FSize(_fsize+7,Bold(GetTextC1("How to play:")))+'</div>';
    _out += FSize(_fsize,Bold(GetText("Send out specialized Event Ships!"))+BR+GetText("These specialized Event Ships help you accumulate Holiday Fish which will be used in this event.")+' '+GetText("Event Ships can't share fishing tiles"));
    _out += BR+'<div style="display:inline-block;position:relative;top:-5px;overflow:hidden;border-radius:12px;">'+GetTileImage('water',90*_sizeKoef,'')+'</div>'+SPC+SPC+GetIconImage('upsalebut',60*_sizeKoef,-20*_sizeKoef)+SPC+SPC+GetBuildingMultiTileImage(BUILDINGS_BY_KEYS['event_ship'],90*_sizeKoef,'');
    _out += BRBR+'<div class="event-block-visit-upgrades">'+FSize(_fsize,Bold(GetText("Visit the upgrade menu!"))+BR+GetText("Trade your fish for various upgrades!"));
    _out += BRBR+GetIconImage('restoration_strength',60*_sizeKoef)+GetIconImage('electricity',60*_sizeKoef);
    _out += '</div>'+HRp;
    _out += BR+FSize(_fsize,Bold(GetText("Claim your reward from the reward table!"))+BR+GetText("Catch as many fish as you can to score high on the Fisherman's Board."));
    
    _out += BRBR+BR;
    for(let _b of [BUILDINGS_BY_KEYS['water_generator'],BUILDINGS_BY_KEYS['shipyard_market'],BUILDINGS_BY_KEYS['golden_mine_premium'],BUILDINGS_BY_KEYS['palms'],BUILDINGS_BY_KEYS['sekvoja']]){
        _out += GetBuildingMultiTileImage(_b,60*_sizeKoef,'',1,1);
    }
    // _out += BR+'<img src="public/images/art/fish_splash.png?v='+PIC_VERSION+'" style="margin-top:12px;width:min(350px,100%);opacity:0;">';


    DoBasicPopup(_out,GetEventLabel()+BR+`<img src="${getAssetUrl(`public/images/art/fish_splash.png?v=${PIC_VERSION}`)}" style="margin-top:12px;width:min(300px,100%);">`,{centerised:1, top_y:85, max_width: GetSmallerPopupWidth(50), closefun:'CloseFishingTutorialPopup();'});
}

function CloseFishingTutorialPopup(){
    if(hrac.buildings.event_ship > 0){
        return false;
    }
    setTimeout(() => {
        let _grid= GetGridData(-7,24);
        if(_grid){
            
            let _r=2;
            for(let _xx=_grid.x-_r;_xx<=_grid.x+_r;_xx++){
                for(let _yy=_grid.y-_r;_yy<=_grid.y+_r;_yy++){
                    let _g =GetGridData(_xx,_yy);
                    if(_g && _g.water && !_g.znecistenie && CanSendShipHere(_g)){
                        TutorialScrollToGrid(_g);
                        return false;
                    }
                }
            }
            _r=5;
            for(let _xx=_grid.x-_r;_xx<=_grid.x+_r;_xx++){
                for(let _yy=_grid.y-_r;_yy<=_grid.y+_r;_yy++){
                    let _g =GetGridData(_xx,_yy);
                    if(_g && _g.water && !_g.znecistenie && CanSendShipHere(_g)){
                        TutorialScrollToGrid(_g);
                        return false;
                    }
                }
            }
        }
    }, 300);
}

function TutorialScrollToGrid(_g){
    ScrollToGrid(_g,1.2);
    onlyOnBuildingId = 76;
    let _boldGridview=isActionGridView;
    isActionGridView=0;
    ClickGrid(_g);
    isActionGridView=_boldGridview;
    onlyOnBuildingId = 0;
    setTimeout(() => {
        AddFloatingTextToGrid(_g,GetText('Place Event Ship!'));
    }, 200);
}

let lastEventLeaderBoardsDate=0;
async function LoadEventLeaderBoards(){    
    if(hrac.event_fish_total>500)
    if(lastEventLeaderBoardsDate< new Date()*1 + 1000*60){
        lastEventLeaderBoardsDate=new Date()*1;
        const [eventAll, eventCountry] = await Promise.all([
            getEventLeaderboardCall('all'), 
            getEventLeaderboardCall('country')
        ]);

        // console.log(eventAll)
        // console.log(eventCountry)
        if(gebi('event_leader_boards_div')){
            let _out='';
            reopenLeaderBoards2=false;

            _out+='<table class="leaderboards-table" id="event_ladder_table">';
            _out+='<tr><th>#</th><th>'+GetText('name')+'</th><th>'+GetText('Fish caught')+'</th></tr>';
        
            _out+=GetSingleLeaderBoardInner(eventAll,MatIcon('event_fish',20));
        
            _out+='<tr><td colspan="4" style="text-align:center;">'+BRBR;
            _out+=BRBR+Bold(GetText('The leaderboard of your country'))+'</td></tr>';
            _out+='<tr><th>#</th><th>'+GetText('name')+'</th><th>'+GetText('Fish caught')+'</th></tr>';
        
            _out+=GetSingleLeaderBoardInner(eventCountry,MatIcon('event_fish',20));
            _out+='<tr><td colspan="4" style="text-align:center;">'+BRBR+GetText('data updates every few minutes')+'</td></tr>';
            _out+='</table>'+BRBR;

            SetInner('event_leader_boards_div',_out);
        }

    }
}



const MILESTONE_HEIGHT=120;
function ShowFishEventRewardMilestonesPopup(_justRefresh){
    if(hrac.event_fish_total<50){
        DoInfoPopupWithOptions(GetBuildingMultiTileImage(BUILDINGS_BY_KEYS['event_ship'],100,'')+BR+GetText('Build Event Ship and catch at least {att1} Holiday Fish to earn your first reward',50),GetText('Information'),{centerised:1,max_width:GetSmallerPopupWidth(100)})
        return false;
    }
    let _out='';
    let _wasClaimButton=false;
    let _unclaimedCount=0;
    let _pickedCount=0;
    let _count=0;

    for(let _ms of EVENT_MILESTONES){
        let _out1='';
        _count++;
        _out1+='<div class="ms-container">';
        let _readyToClaim=false;
        if(hrac.event_mile_picked < _ms.limit && hrac.event_fish_total >= _ms.limit && !_wasClaimButton){
            _wasClaimButton=true;
            _readyToClaim=true;
        }
        if(_readyToClaim){
            _out1+='<div class="ms-line" ></div>';
            _out1+='<div class="ms-line ms-line-status-half" ></div>';
            _out1+='<div class="ms-line-hor-teal" ></div>';
        }else if(hrac.event_mile_picked >= _ms.limit){
            if(_ms.last){
                _out1+='<div class="ms-line ms-line-status-half" ></div>';
            }
            _out1+='<div class="ms-line" ></div>';
            _out1+='<div class="ms-line-hor-teal" ></div>';
        }else{
            _out1+='<div class="ms-line ms-line-status-white" ></div>';
            _out1+='<div class="ms-line-hor-white" ></div>';
        }
        _out1+='<div id="ms_limit_'+_ms.limit+'" onclick="EventLimitPopup('+_ms.limit+');" class="ms-limit '+(hrac.event_mile_picked >= _ms.limit || _readyToClaim?' ms-done':'')+'">';
        _out1+=PNumMega(_ms.limit,1);
        _out1+='</div>';
        
            _out1+='<div class="ms-right-block"><div>';
                _out1+='<div class="ms-reward '+(_readyToClaim?' ready ':'')+' '+(hrac.event_mile_picked >= _ms.limit?' ms-done':'')+'" style="'+(_count>MILESTONES_SOFT_CAP?'border: 4px solid #81cccc;':'')+'"><div class="ms-reward-in-building">';
                if(_ms.reward_building){
                    _out1+='<div style="margin-right:10px;">'+Bold(FSize(32,_ms.reward_building.count+'x'))+'</div> '+GetBuildingMultiTileImage(BUILDINGS_BY_KEYS[_ms.reward_building.grid_key],40,'ms-buildind',1)+'<div style="margin-right:10px;">'+GetText(BUILDINGS_BY_KEYS[_ms.reward_building.grid_key].name)+'</div>';
                }
                if(_ms.reward){
                    _out1+=Bold(FSize(28,PMats(_ms.reward,32,'','',1)));
                }
                if(_readyToClaim){
                    _out1+='<div style="width:100%;">'+Button(GetText('Claim'),'ClaimMileStone('+_ms.limit+');',{class:'small'})+'</div>';
                }


                if(hrac.event_mile_picked < _ms.limit){
                    _unclaimedCount++;
                }
                if(hrac.event_mile_picked >= _ms.limit ){
                    _pickedCount++;
                }
                _out1+='</div></div>';

                if(hrac.event_mile_picked >= _ms.limit ){
                    _out1+='<div class="ms-picked">';
                    _out1+=GetIconImage('ms_check',window.innerWidth<350?30:44);
                    _out1+='</div>';
                }
            _out1+='</div></div>';
            
        _out1+='</div>';//container
        _out=_out1+_out;
        
        if(_count >= MILESTONES_SOFT_CAP ){
            if(_pickedCount+1 <= _count){
                break;
            }
        }

        // if(testVersion)if(_count>1){break;}//REMOVE!!!!!
    }
    let _ms_header='<div id="ms_header" class="ms-header"><div class="ms-header-circle">'+GetIconImage('event_fish',Mro(Math.min(650,window.innerWidth)*0.11),0)+'</div><div class="ms-header-line"></div><div class="ms-header-label"><div class="ms-header-label-in">'+GetEventLabel()+'</div></div></div>';

    _out+='<div id="ms_my_value">'+PNumMega(hrac.event_fish_total,0)+'</div>';
    _out+='<div id="ms_my_white_line"></div>';
    _out+='<div id="ms_my_teal_line"></div>';

    _out=_ms_header+'<div class="ms-body-container">'+_out+'</div>';
    
    _out+='<div class="ms-bottom-container">';
    _out+='<div class="ms-line"></div>';
    _out+=`<img class="ms-ship" src="${getAssetUrl('public/images/art/ms_ship.png')}">`;
    _out+=`<img class="ms-wave" src="${getAssetUrl('public/images/art/ms_wave.png')}">`;
    _out+='</div>';
    // _out+=BR+'<img class="xmasheader" src="public/images/art/christmas_header.png" style="opacity:0.0;">';//hack kvoli headeru

    // let _header_label='<div class="xmasheader-text" style="font-size:'+Mro(Math.min(window.innerWidth,MAX_WIDTH)*0.055)+'px;">'+_pickedCount+' / '+(EVENT_MILESTONES.length)+'</div><img class="xmasheader" src="public/images/art/christmas_header.png">';
    let _header_label=GetText('Rewards');
    let _counter= SpanClass('xmasheader-text2',_pickedCount+' / '+GetMaxMilestones(_pickedCount));

       
    DoSecondaryPopup(_out,_header_label,{uber_left:_counter,top_y:90+TOP_PADDING,max_width:Math.min(500,Math.max(window.innerWidth-50,Math.min(400,window.innerWidth))), centerised:1,setScrollTop:lastUpgradeScroll4,class:'xmas',onscrollfun:'UpgradesScrollChange(event,this,4);',refresh_id:'milestones_inner'});
    if(!_justRefresh){
        // _unclaimedCount
        setTimeout(() => {
            // let _scrollSpeed = 40;
            // if(_unclaimedCount>25)_scrollSpeed = 80;
            // if(_unclaimedCount>50)_scrollSpeed = 200;
            if(_pickedCount){
                gebi('secondaryPopup_okno_in_2').scrollTop=(_unclaimedCount)*MILESTONE_HEIGHT - GetWindowHeight()*0.35;
            }else{
                _scrollSpeed = 30;
                StartAnimatedScrollTo('secondaryPopup_okno_in_2',(_unclaimedCount)*MILESTONE_HEIGHT - GetWindowHeight()*0.35,_scrollSpeed);//tutorialscroll
            }
        }, 600);
        setTimeout(() => {
            UpdateMyMSLimitPos(); 
        }, 1);
    }
}
function GetMaxMilestones(_pickedCount){
    if(_pickedCount<MILESTONES_SOFT_CAP){
        return MILESTONES_SOFT_CAP;
    }
    if(_pickedCount < (EVENT_MILESTONES.length)){
        return _pickedCount+1;
    }
    return (EVENT_MILESTONES.length);
}

const MILESTONES_SOFT_CAP = 70;

function UpdateMyMSLimitPos(){
    if(gebi('ms_my_value')){

        SetInner('ms_my_value',PNumMega(hrac.event_fish_total,0));    
        let _rect = GetRect('ms_limit_'+hrac.event_mile_picked);
        let _rect2 = GetRect('ms_header');
        if(_rect && _rect2){
            let _next = GetNextMSLimit();
            if(hrac.event_fish_total > _next){
                HideDiv('ms_my_value');
                ShowFishEventRewardMilestonesPopup(1);
                // SetY('ms_my_value',_rect.top-_rect2.top-5-MILESTONE_HEIGHT-MILESTONE_HEIGHT+45);
            }else{

                let _dif = _next-hrac.event_mile_picked;
                if(_dif){
                    let _perc = (hrac.event_fish_total-hrac.event_mile_picked)/_dif;
                    if(_perc>=1){
                        ShowFishEventRewardMilestonesPopup(1);
                        HideDiv('ms_my_value');
                    }else{
                        SetY('ms_my_value',_rect.top-_rect2.top-5-_rect2.height+112-MILESTONE_HEIGHT-_perc*(MILESTONE_HEIGHT-44));
                        SetY('ms_my_teal_line',_rect.top-_rect2.top-5-_rect2.height+112-MILESTONE_HEIGHT-_perc*(MILESTONE_HEIGHT-44));
                        SetY('ms_my_white_line',_rect.top-_rect2.top-5-_rect2.height+112-MILESTONE_HEIGHT-_perc*(MILESTONE_HEIGHT-44)-110);
                        ShowJSi('ms_my_white_line');
                        ShowJSi('ms_my_teal_line');
                        ShowJSi('ms_my_value');
                    }
                }else{
                    HideDiv('ms_my_value');
                }
            }
        }else{
            HideDiv('ms_my_value');
        }
    }
}


function GetNextMSLimit(){
    for(let i in EVENT_MILESTONES){
        if(hrac.event_mile_picked < EVENT_MILESTONES[i].limit){
            return EVENT_MILESTONES[i].limit;
        }
    }
}

function EventLimitPopup(_limit){
    let _out='';
    _out+=GetText('You must catch total of {att1} Holiday Fish to earn this reward.',Bold(PMat(_limit,'event_fish')));

    DoInfoPopupWithOptions(_out,GetText('Information'),{centerised:1, max_width:GetSmallerPopupWidth(100)});
}

function ClaimMileStone(_limit){
    let _ms = EVENT_MILESTONES.find(_m=>_m.limit == _limit);
    if(_ms){
        if(hrac.event_mile_picked < _limit){
            if(_ms.reward){
                for(let _type in _ms.reward){
                    AddMat(_ms.reward[_type],_type,1,0);
                }
            }
            if(_ms.reward_building){
                AddBuilding(_ms.reward_building.grid_key,_ms.reward_building.count,1);
            }
            hrac.event_mile_picked=_limit;
        }
        ShowFishEventRewardMilestonesPopup(1);
        setTimeout(() => {
            StartAnimatedScrollTo('secondaryPopup_okno_in_2',lastUpgradeScroll4-MILESTONE_HEIGHT,30);            
        }, 100);
        PlaySound('cash1');
        UpdateMyMSLimitPos();
        anyActionDone=1;
    }
}

function AnyEventRewardReadyToClaim(){
    if(IsEvent())
    for(let _ms of EVENT_MILESTONES){
        if(hrac.event_mile_picked < _ms.limit && hrac.event_fish_total >= _ms.limit){
            return _ms;
        }
    }
    return false;
}


const EVENT_MILESTONES=[
    {
        limit: 50,
        reward: {
            gems:5,
        }
    },
    {
        limit: 500,
        reward: {
            super_clickers:20,
        }
    },
    {
        limit: 1000,
        reward: {
            gems:10,
        }
    },
    {
        limit: 1500,
        reward: {
            electricity:25,
        }
    },
    {
        limit: 2000,
        reward: {
            super_clickers:25,
        }
    },
    {
        limit: 3000,
        reward: {
            ad_skippers:1,
        }
    },
    {
        limit: 4000,
        reward: {
            gems:15,
        }
    },
    {
        limit: 5000,
        reward_building: {
            grid_key:'water_generator',
            count:1,
        }
    },
    {
        limit: 7500,
        reward: {
            super_clickers:35,
        }
    },
    {
        limit:10000,
        reward: {
            gems:20,
        }
    },
    {
        limit:12500,
        reward_building: {
            grid_key:'palms',
            count:3,
        }
    },
    {
        limit:15000,
        reward: {
            electricity:50,
        }
    },
    {
        limit:17500,
        reward: {
            ad_skippers:2,
        }
    },
    {
        limit:20000,
        reward: {
            gems:30,
        }
    },
    {
        limit:25000,
        reward: {
            super_clickers:50,
        }
    },
    {
        limit: 30000,
        reward_building: {
            grid_key:'golden_mine_premium',
            count:2,
        }
    },
    {
        limit: 35000,
        reward: {
            electricity:75,
        }
    },
    {
        limit: 40000,
        reward: {
            gems:40,
        }
    },
    {
        limit: 45000,
        reward_building: {
            grid_key:'shipyard_market',
            count:1,
        }
    },
    {
        limit: 50000,
        reward: {
            restoration_strength:5,
        }
    },
    {
        limit: 55000,
        reward: {
            ad_skippers:2,
        }
    },
    {
        limit: 60000,
        reward: {
            super_clickers:60,
        }
    },
    {
        limit: 70000,
        reward: {
            gems:50,
        }
    },
    {
        limit: 80000,
        reward_building: {
            grid_key:'water_generator',
            count:1,
        }
    },
    {
        limit: 100000,
        reward_building: {
            grid_key:'shipyard_market',
            count:1,
        }
    },
    {
        limit: 125000,
        reward_building: {
            grid_key:'sekvoja',
            count:5,
        }
    },
    {
        limit: 150000,
        reward: {
            electricity:90,
        }
    },
    {
        limit: 200000,
        reward: {
            restoration_strength:10,
        }
    },
    {
        limit: 250000,
        reward: {
            gems:55,
        }
    },
    {
        limit: 300000,
        reward_building: {
            grid_key:'golden_mine_premium',
            count:2,
        }
    },
    {
        limit: 400000,
        reward: {
            ad_skippers:2,
        }
    },
    {
        limit: 500000,
        reward: {
            super_clickers:70,
        }
    },
    {
        limit: 750000,
        reward_building: {
            grid_key:'shipyard_market',
            count:1,
        }
    },
    {
        limit: 1000000,
        reward: {
            gems:75,
        }
    },
    {
        limit: 1250000,
        reward_building: {
            grid_key:'sekvoja',
            count:5,
        }
    },
    {
        limit: 1500000,
        reward: {
            electricity:100,
        }
    },
    {
        limit: 2000000,
        reward_building: {
            grid_key:'shipyard_market',
            count:1,
        }
    },
    {
        limit: 2500000,
        reward: {
            restoration_strength:10,
        }
    },
    {
        limit: 3000000,
        reward: {
            ad_skippers:2,
        }
    },
    {
        limit: 3500000,
        reward_building: {
            grid_key:'palms',
            count:5,
        }
    },
    {
        limit: 4000000,
        reward: {
            gems:85,
        }
    },
    {
        limit: 4500000,
        reward_building: {
            grid_key:'sekvoja',
            count:5,
        }
    },
    {
        limit: 5000000,
        reward_building: {
            grid_key:'shipyard_market',
            count:1,
        }
    },
    {
        limit: 6000000,
        reward: {
            electricity:110,
        }
    },
    {
        limit: 7000000,
        reward: {
            super_clickers:80,
        }
    },
    {
        limit: 8000000,
        reward: {
            ad_skippers:2,
        }
    },
    {
        limit: 9000000,
        reward: {
            gems:90,
        }
    },
    {
        limit: 10000000,
        reward_building: {
            grid_key:'shipyard_market',
            count:1,
        }
    },
    {
        limit: 12500000,
        reward_building: {
            grid_key:'golden_mine_premium',
            count:2,
        }
    },
    {
        limit: 15000000,
        reward: {
            restoration_strength:10,
        }
    },
    {
        limit: 16500000,
        reward_building: {
            grid_key:'sekvoja',
            count:10,
        }
    },
    {
        limit: 18000000,
        reward: {
            electricity:115,
        }
    },
    {
        limit: 20000000,
        reward: {
            super_clickers:100,
        }
    },
    {
        limit: 22500000,
        reward_building: {
            grid_key:'palms',
            count:7,
        }
    },
    {
        limit: 25000000,
        reward: {
            gems:100,
        }
    },
    {
        limit: 27500000,
        reward_building: {
            grid_key:'water_generator',
            count:1,
        }
    },
    {
        limit: 30000000,
        reward_building: {
            grid_key:'shipyard_market',
            count:1,
        }
    },
    {
        limit: 32500000,
        reward_building: {
            grid_key:'sekvoja',
            count:15,
        }
    },
    {
        limit: 35000000,
        reward: {
            ad_skippers:2,
        }
    },
    {
        limit: 40000000,
        reward_building: {
            grid_key:'water_generator',
            count:2,
        }
    },
    {
        limit: 45000000,
        reward: {
            electricity:120,
        }
    },
    {
        limit: 50000000,
        reward: {
            super_clickers:120,
        }
    },
    {
        limit: 55000000,
        reward: {
            gems:110,
        }
    },
    {
        limit: 60000000,
        reward: {
            restoration_strength:10,
        }
    },
    {
        limit: 65000000,
        reward_building: {
            grid_key:'palms',
            count:10,
        }
    },
    {
        limit: 70000000,
        reward_building: {
            grid_key:'shipyard_market',
            count:2,
        }
    },
    {
        limit: 75000000,
        reward_building: {
            grid_key:'sekvoja',
            count:20,
        }
    },
    {
        limit: 80000000,
        reward_building: {
            grid_key:'shipyard_market',
            count:2,
        }
    },
    {
        limit: 85000000,
        reward: {
            restoration_strength:10,
        }
    },
    {
        limit: 90000000,
        reward_building: {
            grid_key:'shipyard_market',
            count:3,
        }
    },
    {
        limit: 200000000,
        reward: {
            ad_skippers:10,
        }
    },
    {
        limit: 500000000,
        reward_building: {
            grid_key:'water_generator',
            count:3,
        }
    },
    {
        limit: 1000000000,
        reward_building: {
            grid_key:'palms',
            count:15,
        }
    },
    {
        limit: 2000000000,
        reward_building: {
            grid_key:'golden_mine_premium',
            count:5,
        }
    },
    {
        limit: 5000000000,
        reward_building: {
            grid_key:'sekvoja',
            count:25,
        }
    },
    {
        limit: 10000000000,
        reward_building: {
            grid_key:'shipyard_market',
            count:3,
        }
    },

];

EVENT_MILESTONES.sort((a,b)=>a.limit-b.limit);
EVENT_MILESTONES[EVENT_MILESTONES.length-1].last=true;

function IsXMasPack(_pack){
    return (["pat_event_christmas_2024_1","pat_event_christmas_2024_2","pat_event_christmas_2024_3","pat_event_christmas_2024_4"].includes(_pack.storeId));
}

function ShowXMasPack(_pack,_storeId){
    if(_storeId){
        _pack=SERVER_OFFER_PACKS.find(p=>p.storeId==_storeId);
    }
    if(!_pack)_pack=GetSpecialOfferPack();
    if(!_pack)return false;
    let _out='';
    let _discount = _pack.discount;
    if(!_pack.price)return false;
    canSpecialOfferPopup=false;
    
    let _header=`<img style="position:relative;left:-6px;top:12px;margin-top:-8px;background-color:var(--dark-2);width:calc(100% + 12px);border-radius:12px;" src="${getAssetUrl(`public/images/art/christmas_header.png?v=${PIC_VERSION}`)}">`;
    
    let _buildingRew = GetBuildingRewardFromPack(_pack);
    
    if(GetWindowHeight()>760){
        _out+='<div class="xmas-pic-label" >'+PIKA2+GetText('Holiday offer')+PIKA2+'</div>';
    }
    _out+='<div class="black-friday-inner-block" style="'+(GetWindowHeight()>900?'':'padding-top:2px;padding-bottom:4px;')+'">';
    if(_buildingRew){
        let _grid=GetGridData(0,0);
        let _b = BUILDINGS_BY_IDS[_buildingRew.buildingId];
        let _desc=GetFullBuildingDescription(_grid,_b,1,1,1);
        if(_b.level_up_info){
            _desc+=ColorSpan('var(--light-purple-3)',_b.level_up_info())
        }
        let _ppb = possiblePremiumBuildings.find(o=>o?.id == _buildingRew.buildingId);
        if(GetWindowHeight()>900){
            if(_ppb && _ppb.text){
                _out+=FSize(16,ColorSpan('var(--light-color-2)',Bold(GetText(_ppb.text))));
            }
        }
        _out+='<table class="premium-building-table" cellspacing="5"><tr>';
        if(GetWindowHeight()>900){
            _out+='<td>'+BR+GetBuildingMultiTileImage(_b,85,'')+'</td>';
            _out+='<td style="text-align:left;color:#ffde52;"><span style="line-height:24px;">'+Bold(FSize(64,_buildingRew.amount+'x'))+'</span>'+BR+Bold(FSize(18,GetText(_b.name)))+'</td></tr></table>';
        }else{
            _out+='<td>'+BR+GetBuildingMultiTileImage(_b,60,'')+'</td>';
            _out+='<td style="text-align:left;color:#ffde52;"><span style="line-height:24px;">'+Bold(FSize(44,_buildingRew.amount+'x'))+'</span>'+BR+Bold(FSize(12,GetText(_b.name)))+'</td></tr></table>';
        }
        _out+=DivClass('popup-in-block-2',_desc);
    }

    _out+=BR;
    _out+='<div class="so-mat-rewards">';
    for(let _r of _pack.reward)if(_r.resource!='building'){
        if((_r.resource=='event_fish_perc_bonus' || _r.resource=='event_fish') && !HasLevel(SHIP_EVENT_LEVEL_REQ)){
            continue;
        }
        _out+='<div class="so-mat-reward">'+'+'+PMat(_r.amount,_r.resource,32,1,1)+'</div>';
    }
    _out+='</div>';
    _out+='</div>';

    if(GetWindowHeight()>1000){
        _out+=BR+HRp;
        if(window.innerWidth > 300){
            _out+=FSize(14,GetText3('Price:'))+BR;
        }
    }

    if(_discount){
        let _discountedCost = (_pack.price.value / ((100-_discount)*0.01)).toFixed(2);
        _out+=LineThrought(FSize(24,ColorSpan('var(--darker-color)',_discountedCost+_pack.price.currency)),4)+SPC+SPC;
    }
    _out+=FSize(30,Bold(_pack.price.value+_pack.price.currency));
    if(GetMyPackCount(_pack.storeId)<GetSOmaxCount(_pack)){
        _out+=BR+Button(GetTextCAPS('BUY'),'TryBuyPack(\''+_pack.storeId+'\');',{super_button:'teal'});
        _out+=SPC+SPC+Button(GetTextCAPS('HIDE'),'HideSpecialOffer();');
    }
    if(GetWindowHeight()>900){
        _out+=BR+DivClass('so-bought-div',GetText3('Bought:')+Math.min(GetSOmaxCount(_pack),GetMyPackCount(_pack.storeId))+' / '+GetSOmaxCount(_pack));
    }else{
        _out+=BR+DivClass('so-bought-div-2',GetText3('Bought:')+Math.min(GetSOmaxCount(_pack),GetMyPackCount(_pack.storeId))+' / '+GetSOmaxCount(_pack));

    }

    if((new Date(_pack.endDate) - new Date()) < 86400*1000*1){
        _out+=DivClass('expires-in-so',GetText3('Offer expires in:')+Bold(PDurDate('special_offer_timer',new Date(_pack.endDate),()=>{CloseBasicPopup(); })));
    }
    

    DoBasicPopup(_out,_header,{centerised:1,max_height_vh:92,max_width: GetSmallerPopupWidth(80,300)});
}




function TryToGenerateXMasGifts(){
    // hrac.xmas_last_gift_date='Mon Dec 16 2024 13:32:47 GMT+0100 (Central European Standard Time)'
    // console.log('TRY GIFTS',GetDateMonth(),GetDateDay(),hrac.xmas_last_gift_date,new Date(serverTime)*1 - new Date(hrac.xmas_last_gift_date))
    // if(testVersion)hrac.xmas_last_gift_date=0;

    if(HasLevel(6) && GetDateMonth()==12 && (GetDateDay()==24 || GetDateDay()==25 || GetDateDay()==26) && ((new Date(serverTime)*1) - (new Date(hrac.xmas_last_gift_date)*1) > 86400*1000*30 )){
        hrac.xmas_last_gift_date = serverTime;
        AddRandomXMasGifts();
    }
}

const MAX_XMAS_GIFTS=5;
function AddRandomXMasGifts(){
    let _possibleBlocks=[];
    for(let _x in myGridData)if(_x%3==0 && _x>-30 && _x<30){
        for(let _y in myGridData[_x])if(_y>-30 && _y<30){
            let _g = myGridData[_x][_y];
            if(_g && !_g.znecistenie&& _g.forest){
                _possibleBlocks.push(_g);
            }
        }
    }

    hrac.found_xmas_gifts=0;
    for(let i=0;i<MAX_XMAS_GIFTS;i++){
        let _g=GetRandomItemFromArray(_possibleBlocks);
        _g.gift=1;
        _g.forest=0;
    }
}

const XMAS_GIFT_VAL=100;
function DoGiftPopup(_grid){
    let _out='';
    _out+=''+GetTileImage('gift_tile',120,'black-image-outline')+BRBR+FSize(14, GetText('You have found our small Holiday present'))+BRBR+Bold(FSize(32,'+'+PMat(XMAS_GIFT_VAL,'gems',32)))+BRBR+Button(GetText("Claim reward"),'ClaimXMasGift('+_grid.x+','+_grid.y+');',{color:'green'})+BRBR+GetText3('Found:')+(hrac.found_xmas_gifts+1)+' / '+MAX_XMAS_GIFTS;
    DoBasicPopup(_out,GetText('Holiday Gift'),{centerised:1,max_width:GetSmallerPopupWidth(200,320)});
    PlaySound('tadaa18');
}

function ClaimXMasGift(_x,_y){
    let _grid=GetGridData(_x,_y);
    if(_grid){
        hrac.found_xmas_gifts++;
        PlaySound('tadaa18');
        CloseBasicPopup()
        AddMat(XMAS_GIFT_VAL,'gems',1,1);
        _grid.gift=0;
        ResetReadyStatusOptiBlockByGrid(_grid);
    }
}
function InfoBut_food(_text){
    return InfoInlineBut('GetFarmTutorialText();',_text);
}

function GetFarmTutorialText(){
    let _info ='';
    _info+=GetText('Food {FOOD_ICON} is basic resource used to upgrade bunkers/towns.');
    _info+=BRBR+GetText('Food {FOOD_ICON} is gained through <b>farms</b>')+BR+GetTileImage('farm')+BR+GetText('food_tut_6');
    _info+=BR+'<table><tr><td>'+GetTileImage('grass',100)+'</td><td>'+GetIconImage('upsalebut',50)+'</td><td>'+GetTileImage('farmfield',100)+'</td></tr></table>';
    _info+=BR+GetText('These farmfields then generate food{FOOD_ICON} {EVERY_X_SECONDS}');
    
    // if(testVersion)_info+=BR+GetTileImage('rock_mine2',133,'',1);//hack remove

    return _info;
}




/** 

  XXXXXX    XXX    XXXXX   X     X
  X        XX XX   X   XX  XX   XX
  X       XX   XX  X    X  X X X X
  X       X     X  X   XX  X  X  X
  XXXXX   XXXXXXX  XXXXX   X  X  X
  X       X     X  XXX     X     X
  X       X     X  X XX    X     X
  X       X     X  X  XX   X     X
  X       X     X  X   XX  X     X

*/

let allFarms=[];

function InitFarms(){
    
    for(let _x in myGridData)
    for(let _y in myGridData[_x]){
        if(myGridData[_x][_y]&&myGridData[_x][_y].farm){
            allFarms.push(myGridData[_x][_y]);
        }
        if(myGridData[_x][_y]&&myGridData[_x][_y].farm_big){
            allFarms.push(myGridData[_x][_y]);
        }
    }

}

let farmGrowGlobalTick=0;
function ProcessFarmFields(_force){
    if(!visitingFriend){
        farmGrowGlobalTick++;
        let certainlyCheck=3;
        const fieldGrowIticks=[50];
        if(GetPlayerUpgradeValue(17)){
            certainlyCheck=9;
            fieldGrowIticks.push(140);
            fieldGrowIticks.push(230);
        }
        if(_force || fieldGrowIticks.includes(tickCount%(INCOME_EARN_TICKS))){
            for(let _g of allFarms){
                if(_g.farm){
                    if(!_g.failed_at_new_farmfield || _g.failed_at_new_farmfield<5 || farmGrowGlobalTick%certainlyCheck==1){ //no ze ked 4 krat sa nic nepodarilo narast, tak staci kontrola raz za 3 sekundy
                        GrowFarmField(_g.x,_g.y,1);
                    }
                }
                if(_g.farm_big){
                    if(!_g.failed_at_new_farmfield || _g.failed_at_new_farmfield<5 || farmGrowGlobalTick%certainlyCheck==1){ //no ze ked 4 krat sa nic nepodarilo narast, tak staci kontrola raz za 3 sekundy
                        GrowFarmField(_g.x,_g.y,2,3);
                    }
                }
            }
            TryRefreshFarmInfo();
        }
    }
}


function GrowFarmField(_x,_y,_fieldType,_pocet){
    if(!_pocet)_pocet=1;
    let _grid=myGridData[_x][_y]
    if(!_grid.has_farmfields){
        _grid.has_farmfields=0;
    }
    if(!_grid.has_farmfields2){
        _grid.has_farmfields2=0;
    }
    if(!_grid.failed_at_new_farmfield){
        _grid.failed_at_new_farmfield=0;
    }
    let _farmRange = _grid.farm_big?GetBigFarmRange():GetFarmRange();
    
    for(let _x2=_x*1-_farmRange;_x2<=_x*1+_farmRange;_x2++)
    for(let _y2=_y*1-_farmRange;_y2<=_y*1+_farmRange;_y2++){
        // console.log('test:',_x2,_y2)
        if(myGridData[_x2] && myGridData[_x2][_y2] && !myGridData[_x2][_y2].znecistenie && !myGridData[_x2][_y2].sand && !IsRubble(myGridData[_x2][_y2]) && !myGridData[_x2][_y2].desert && !myGridData[_x2][_y2].scorched && !myGridData[_x2][_y2].forest &&!myGridData[_x2][_y2].ground_oil && ((_fieldType==2 && myGridData[_x2][_y2].farmfield)||IsGridGroundBuildable(myGridData[_x2][_y2])) && MyRand100(50+_grid.failed_at_new_farmfield*20)){
            if(myGridData[_x2][_y2].clearedInterval>0){
                myGridData[_x2][_y2].clearedInterval--;
                continue;
            }
            if(last_grid_clicked && last_grid_clicked.grid && last_grid_clicked.grid.x==_x2&& last_grid_clicked.grid.y==_y2){
                continue;
            }
            if(_fieldType==2){
                if(myGridData[_x2][_y2].farmfield && myGridData[_x2][_y2].belongs_to_farm){
                    if(myGridData[_x2][_y2].belongs_to_farm.has_farmfields){
                        myGridData[_x2][_y2].belongs_to_farm.has_farmfields--;
                    }
                    delete(myGridData[_x2][_y2].belongs_to_farm);
                    delete(myGridData[_x2][_y2].farmfield);
                }else if(myGridData[_x2][_y2].farmfield){
                    delete(myGridData[_x2][_y2].farmfield);
                }
                myGridData[_x2][_y2].farmfield2=1;
                _grid.has_farmfields2++;
                
            }else{
                myGridData[_x2][_y2].farmfield=1;
                _grid.has_farmfields++;
            }
            myGridData[_x2][_y2].belongs_to_farm=_grid;
            _grid.failed_at_new_farmfield=0;
            ReCalculate9BlocksAndStatsByGrid(_grid,0,1);
            ResetReadyStatusOptiBlockByGrid(myGridData[_x2][_y2]);
            _pocet--;
            if(_pocet<=0){
                return true;
            }
        }
    }
    _grid.failed_at_new_farmfield++;
    if(_pocet){
        return true;
    }
    return false;
}




function InitFarmFields(){
    for(let _x in myGridData)
    for(let _y in myGridData[_x]){
        CheckAndAddFarmfieldsToFarmXY(_x,_y);
        
    }
}

function CheckAndAddFarmfieldsToFarmXY(_x,_y){
    if(myGridData[_x][_y]&&myGridData[_x][_y].farm){
        let _farmRange = GetFarmRange();
        myGridData[_x][_y].has_farmfields=0;

        for(let _x2=_x*1-_farmRange;_x2<=_x*1+_farmRange;_x2++)
        for(let _y2=_y*1-_farmRange;_y2<=_y*1+_farmRange;_y2++){
            if(myGridData[_x2] && myGridData[_x2][_y2] && myGridData[_x2][_y2].farmfield_used){
                if(myGridData[_x2][_y2].belongs_to_farm && !myGridData[_x2][_y2].belongs_to_farm.farm && !myGridData[_x2][_y2].belongs_to_farm.farm_big){
                    myGridData[_x2][_y2].farmfield_used=0;
                    myGridData[_x2][_y2].belongs_to_farm=null;
                }
            }
            if(myGridData[_x2] && myGridData[_x2][_y2] && !myGridData[_x2][_y2].farmfield_used){
                if(myGridData[_x2][_y2].farmfield){
                    myGridData[_x][_y].has_farmfields++;
                    myGridData[_x2][_y2].farmfield_used=1;
                    myGridData[_x2][_y2].belongs_to_farm=myGridData[_x][_y];
                }
            }
        }
    }
    if(myGridData[_x][_y]&&myGridData[_x][_y].farm_big){
        let _farmRangeBig = GetBigFarmRange();
        myGridData[_x][_y].has_farmfields2=0;

        for(let _x2=_x*1-_farmRangeBig;_x2<=_x*1+_farmRangeBig;_x2++)
        for(let _y2=_y*1-_farmRangeBig;_y2<=_y*1+_farmRangeBig;_y2++){
            if(myGridData[_x2] && myGridData[_x2][_y2] && myGridData[_x2][_y2].farmfield_used){
                if(myGridData[_x2][_y2].belongs_to_farm && !myGridData[_x2][_y2].belongs_to_farm.farm && !myGridData[_x2][_y2].belongs_to_farm.farm_big){
                    myGridData[_x2][_y2].farmfield_used=0;
                    myGridData[_x2][_y2].belongs_to_farm=null;
                }
            }
            if(myGridData[_x2] && myGridData[_x2][_y2] && !myGridData[_x2][_y2].farmfield_used){
                if(myGridData[_x2][_y2].farmfield2){
                    myGridData[_x][_y].has_farmfields2++;
                    myGridData[_x2][_y2].farmfield_used=1;
                    myGridData[_x2][_y2].belongs_to_farm=myGridData[_x][_y];
                }
            }
        }
    }
}


function TryRefreshFarmInfo(){
    if(last_grid_clicked && last_grid_clicked.grid){
        if(last_grid_clicked.grid.farmfield || last_grid_clicked.grid.farmfield2 || last_grid_clicked.grid.farm || last_grid_clicked.grid.farm_big){
            SetInner('farm_grid_info',FarmInfo(last_grid_clicked.grid));
        }
    }

}

function FarmInfo(_grid){
    let _out='';
    if(_grid.farm){
        _out+=GetText3('Farm fields nearby: ')+_grid.has_farmfields+(_grid.has_farmfields?' = +'+PMat((_grid.has_farmfields*(GetFarmFieldFoodProduction()))*GetPlayerUpgradeValue(18,1),4)+PER_INCOME_SHORT:'');
        if(_grid.has_farmfields<=1){
            _out+=SPC+InfoBut_food(GetText('How to grow farm fields?'));
        }
        _out+=BR+GetText('Farm fields grow randomly in the {att1} tile range on empty tiles',GetFarmRange());
    }
    if(_grid.farm_big){

        _out+=GetText3('Farm fields nearby: ')+_grid.has_farmfields2+(_grid.has_farmfields2?' = +'+PMat((_grid.has_farmfields2*(GetAdvancedFarmFieldFoodProduction()))*GetPlayerUpgradeValue(18,1),4)+PER_INCOME_SHORT:'');
        _out+=BR+GetText('Farm fields grow randomly in the {att1} tile range on empty tiles',GetBigFarmRange());
    }
    if(_grid.farmfield || _grid.farmfield2 || _grid.farm || _grid.farm_big){
        if(_grid.farm || _grid.farm_big){
            _out+=BR;
        }
        _out+=GetText('Total farm food income: +{att1} {EVERY_X_SECONDS}',PCislo(hrac.foodIncome-hrac.stats.shipsFoodIncome));
        _out+=BR+GetText3('Total food: ')+SpanID('food_storage_gridmenu',PMat(hrac.food,4));
        _out+=BR+GetText('{att1}% of total Food is spoiled {EVERY_X_SECONDS}',Mro(GetFoodSpoilPerc(1)*100))+' ('+SpanID('food_spoil_gridmenu',PMat(Mro(hrac.food*GetFoodSpoilPerc(1)),4))+'+-)'+BR;
    }

    
    return _out;
}

function GetFarmActions(_grid,_floating){
    let _out='';
    if(_grid.farmfield|| _grid.farmfield2){
        if(hrac.stats.towns<10 || HasStreetNearBy(_grid.x,_grid.y,0,undefined,undefined,_grid.water)){
            if(!_floating){
                _out+=RoadBuildMenu(_grid);
                _out+= ActionDiv('DestroyAll('+_grid.x+','+_grid.y+');',['farmfield','ui/buldoser'],GetText3('Remove farm field; cost:')+PMat(200,1),GetText('Destroy'));
            }
        }else{
            if(_floating || !isActionGridView)
            {
                _out+= ActionDiv('DestroyAll('+_grid.x+','+_grid.y+');',['farmfield','ui/buldoser'],GetText3('Remove farm field; cost:')+PMat(200,1),GetText('Destroy'),_floating && isActionGridView);
            }
        }
    }
    return _out;
}

function GetFarmRange(){
    return 2 + GetPlayerUpgradeValue(17);
}


function GetFarmFieldFoodProduction(){
    return 1+GetPlayerUpgradeValue(45);
}

function GetFoodSpoilPerc(_noRand){
    if(GetPlayerUpgradeValue(16)){
        return 0.01;
    }else{
        return 0.05+(_noRand?0:MyRand(-5,5)*0.001);
    }
}

function GetBuildingDescriptionFor_farm(_grid){
    let _out='';
    if(HasLevel(20)){
        _out+=GetText('Grows farmfields with {att1} production. Grow radius: {att2}',[PMat(GetFarmFieldFoodProduction(),'food'),GetFarmRange()]);
    }else{
        _out+=GetText('Produces food required to upgrade towns.');
    }
    return _out;
}

function BuildFarmAfterFuns(_grid){
    _grid.has_farmfields=0;
    _grid.has_farmfields2=0;
    for (let i = 0; i < 2; i++) {
        _grid.failed_at_new_farmfield=5;//ze urcite narastie
        GrowFarmField(_grid.x,_grid.y,1);
    }
    CheckAndAddFarmfieldsToFarmXY(_grid.x,_grid.y);
}







function GetBuildingDescriptionFor_farm_big(_grid){
    let _out='';
    _out+=GetText('Grows advanced farmfields with {att1} production. Grow radius: {att2}',[PMat(GetAdvancedFarmFieldFoodProduction(),'food'),GetBigFarmRange()]);
    return _out;
}

function GetAdvancedFarmFieldFoodProduction(){
    return 5+GetPlayerUpgradeValue(45);
}

function GetBigFarmRange(){
    return 4 + GetPlayerUpgradeValue(17);
}    

function BuildBigFarmAfterFuns(_grid){
    _grid.has_farmfields=0;
    _grid.has_farmfields2=0;
    for (let i = 0; i < 6; i++) {
        _grid.failed_at_new_farmfield=5;//ze urcite narastie
        GrowFarmField(_grid.x,_grid.y,2);
    }
    CheckAndAddFarmfieldsToFarmXY(_grid.x,_grid.y);

}


function RemoveFarmfield(_grid){
    delete(_grid.farmfield);
    delete(_grid.farmfield2);
    if(_grid.belongs_to_farm){
        if(_grid.belongs_to_farm.has_farmfields)_grid.belongs_to_farm.has_farmfields--;
        if(_grid.belongs_to_farm.has_farmfields2)_grid.belongs_to_farm.has_farmfields2--;
        delete(_grid.belongs_to_farm);
        delete(_grid.farmfield_used);
    }
}




function GetMaxFoodStorage(_player){
    if(!_player)_player=hrac;
    let _minStorage = GetMinimumFoodStorage();//REFACTOR LEBO TOTO NIEJE _player ALE _hrac
    return _minStorage + _player.foodIncome*(1/GetFoodSpoilPerc(1));// + Mro(_player.foodIncome*0.5)
}
function ShowMaxFoodPopup(){
    let _out='';
    _out+=GetText('food_tut_1');
    _out+=BRBR+GetText('food_tut_2',[INCOME_SEC,Mro(GetFoodSpoilPerc()*100)]);
    _out+=BRBR+GetText('food_tut_3');
    _out+=BRBR+InfoBut_food(GetText('What is food {FOOD_ICON}?'));
    
    DoBasicPopup(_out,GetText('Food info'));
    
}

function GetMinimumFoodStorage(){
    return GetPlayerUpgradeValue(74);
}

function GetFoodStorageIncomeStr(_income){
    return SPC+GetText3('storage:')+'+'+PMat(GetFoodStorageFromIncomeX(_income),'food');
}

function GetFoodStorageFromIncomeX(_income){
    return _income*(1/GetFoodSpoilPerc(1))
}


function TryCutForest(_grid,_odoberGold){
    if(!_odoberGold || MamDostZlata(200,1) )
    if(_grid.forest){
        if(_odoberGold){
            PlaySound('chop_wood');
        }
        hrac.lumber+=5;
        hrac.income-=_grid.forest;
        if(_odoberGold){
            AddFloatingTextToMousePos('+'+PMat(5,'lumber'));
        }
        if(hrac.lumber>GetMaxLumberStorage())hrac.lumber=GetMaxLumberStorage();
        delete(_grid.forest);
        _grid.tree_cutted=1;
        // SetBlocksToRecalculate(_grid);
        AddMudEffect(_grid,5);
        return true;
    }
    return false;
}


function GetMaxLumberStorage(_player){
    if(!_player)_player=hrac;
    return Mro(0.01*(GetPlayerUpgradeValue(87,0,_player)+100)*(_player.stats.working_storage_shipyard*GetShipyardStorageStorage('lumber') + _player.buildings.storage_crane*GetStorageCraneStorage('lumber') + GetMaxLumberPerLumberMill() * _player.buildings.saw_mill + GetSingleWoodStorage() * _player.buildings.wood_storage + GetMaxLumberStoragePerHeavyLumberMill() * _player.buildings.heavy_lumber_mill + GetMaxLumberStoragePerPremiumLumberMill() * _player.buildings.premium_lumber_mill + GetPremiumStorage_lumber()*_player.buildings.premium_storage + ECO_STORAGE_MULTI*GetPremiumStorage_lumber()*_player.buildings.eco_storage));
}









//basic LUMBER MILL

function GetBuildingDescriptionFor_saw_mill(_grid){
    let _out='';
    if(_grid.saw_mill){
        _grid.saw_mill_plus =  GetPlayerUpgradeValue(23,1)*GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,BUILDINGS_BY_IDS[4].draw_radius_rect,'forest');
        if(hrac.lumberIncome<_grid.saw_mill_plus){
            hrac.lumberIncome=_grid.saw_mill_plus;
        }
        _out+= GetText3('Produces: ')+PMat(_grid.saw_mill_plus,'lumber')+PER_INCOME_SHORT;
        _out+= BR+GetText('Lumber mill harvests only wood from forests in range of: {att1}',BUILDINGS_BY_IDS[4].draw_radius_rect);
        _out+= BR+GetText3('Stores: ')+PMat(GetMaxLumberPerLumberMill(),3)+BR;
        _out+=GetLumberOverviewInfo(_grid);
    }else{
        _out+=GetText('Produces {att1} lumber {EVERY_X_SECONDS} from every forest tile in radius: {att2}',[PMat(GetPlayerUpgradeValue(23,1),'lumber'),(BUILDINGS_BY_IDS[4].draw_radius_rect)]);
        _out+= BR+GetText3('Stores: ')+PMat(GetMaxLumberPerLumberMill(),3);
    }

    return _out;
}

function GetLumberOverviewInfo(_grid){
    let _out='';
    _out+= GetText3('Total Lumber income: ')+PMat(hrac.lumberIncome,3)+PER_INCOME_SHORT;
    _out+= BR+GetText3('Total Lumber: ')+SpanID('lumber_storage_gridmenu',PMat(hrac.lumber,3))+' / '+PMat(GetMaxLumberStorage(),3);
    if(!_grid.wood_storage){
        _out+= BR+GetText('Be cautious: more than 2 Lumber Mills on one forest might cut the forest permanently.');//localtext.lumber_mill_warning
    }
    return _out;
}

function GetMaxLumberPerLumberMill(){
    return 500;
}












//heavy lumber mill
function GetBuildingDescriptionFor_heavy_lumber_mill(_grid){
    let _out='';
    if(_grid.heavy_lumber_mill){
        _grid.saw_mill_plus =  GetPlayerUpgradeValue(23,1)*2*GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,BUILDINGS_BY_IDS[19].draw_radius_rect,'forest');
        _out+= GetText3('Produces: ')+PMat(_grid.saw_mill_plus,'lumber')+PER_INCOME_SHORT;
        _out+= BR+GetText3('Stores: ')+PMat(GetMaxLumberStoragePerHeavyLumberMill(),3)+BR;
        _out+=GetLumberOverviewInfo(_grid);
    }else{
        _out+=GetText('Produces {att1} lumber {EVERY_X_SECONDS} from every forest tile in radius: {att2}',[PMat(2*GetPlayerUpgradeValue(23,1),'lumber'),(BUILDINGS_BY_IDS[19].draw_radius_rect)]);
        _out+= BR+GetText3('Stores: ')+PMat(GetMaxLumberStoragePerHeavyLumberMill(),3);
    }
    return _out;
}

//heavy lumber mill
const premium_lumber_mill_POWER=6;
function GetBuildingDescriptionFor_premium_lumber_mill(_grid){
    let _out='';
    if(_grid.premium_lumber_mill){
        _grid.saw_mill_plus =  GetPlayerUpgradeValue(23,1)*premium_lumber_mill_POWER*GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,BUILDINGS_BY_IDS[19].draw_radius_rect,'forest');
        _out+= GetText3('Produces: ')+PMat(_grid.saw_mill_plus,'lumber')+PER_INCOME_SHORT;
        _out+= BR+GetText3('Stores: ')+PMat(GetMaxLumberStoragePerPremiumLumberMill(),3)+BR;
        _out+=GetLumberOverviewInfo(_grid);
    }else{
        _out+=GetText('Produces {att1} lumber {EVERY_X_SECONDS} from every forest tile in radius: {att2}',[PMat(premium_lumber_mill_POWER*GetPlayerUpgradeValue(23,1),'lumber'),(BUILDINGS_BY_IDS[19].draw_radius_rect)]);
        _out+= BR+GetText3('Stores: ')+PMat(GetMaxLumberStoragePerPremiumLumberMill(),3);
        _out+=SPC+ColorSpan('var(--light-purple)',GetText('Requires no road.'));
    }
    return _out;
}


function GetMaxLumberStoragePerHeavyLumberMill(){
    return 1500;
}
function GetMaxLumberStoragePerPremiumLumberMill(){
    return 20000;
}


function TryCutForestsWithLumberMills(){
    if([250].includes(tickCount%(INCOME_EARN_TICKS))){

        for(let _x in myGridData) for(let _y in myGridData[_x])if(myGridData[_x][_y]){
            if(myGridData[_x][_y].forest){
                myGridData[_x][_y].forest_cutters=0;
            }
        }
        for(let _x in myGridData) for(let _y in myGridData[_x])if(myGridData[_x][_y]){
            if(myGridData[_x][_y].saw_mill){
                CutSingleForestsWithLumberMills(_x*1,_y*1,BUILDINGS_BY_IDS[4].draw_radius_rect );
            }
            if(myGridData[_x][_y].heavy_lumber_mill){
                CutSingleForestsWithLumberMills(_x*1,_y*1,BUILDINGS_BY_IDS[19].draw_radius_rect);
            }
        }
    }
}
function CutSingleForestsWithLumberMills(_x,_y,_range){
    for(let i=_x-_range;i<=_x+_range;i++){
        for(let j=_y-_range;j<=_y+_range;j++){
            let _grid = GetGridData(i,j);
            if(_grid && !_grid.znecistenie && _grid.forest){
                _grid.forest_cutters++;
                if(_grid.forest_cutters>=2+_grid.forest){
                    if(MyRand100(25)){
                        delete(_grid.forest);
                        _grid.tree_cutted=2;
                        SetBlocksToRecalculate(_grid);
                    }
                }

            }
        }
    }
}













function GetSingleWoodStorage(){
    return Mro(2500*(1+0.01*GetPlayerUpgradeValue(24)));
}

function GetWoodStorageDescription(_grid){
    return GetText3('adds extra lumber storage: ')+PCislo(GetSingleWoodStorage())+(_grid.wood_storage?BR+GetLumberOverviewInfo(_grid):'');
}





/** 

  XXXXXX   XXXXX   XXXXX   XXXXXX   XXXXX   XXXXXXX
  X       XX   XX  X   XX  X       XX   XX     X   
  X       X     X  X    X  X       X           X   
  X       X     X  X   XX  X       XX          X   
  XXXXX   X     X  XXXXX   XXXXX    XXXXX      X   
  X       X     X  XXX     X            XX     X   
  X       X     X  X XX    X             X     X   
  X       XX   XX  X  XX   X       XX   XX     X   
  X        XXXXX   X   XX  XXXXXX   XXXXX      X   

*/

function CanGrowForest(_grid){
    if(HasUpgrade(59) && (_grid.sand || _grid.desert || IsRubble(_grid) || _grid.swamp || _grid.swamp_rocks) && !_grid.has_street && !_grid.building_type) return true;
    if((_grid.scorched && HasLevel(67))) return true;
    return (_grid && IsGridGroundBuildable(_grid) && !_grid.forest && !_grid.gem_field && !_grid.golden_field && !_grid.golden_island && !_grid.uranium_cloud && !_grid.sand && !_grid.desert && !_grid.scorched && !_grid.ground_oil && !IsRubble(_grid)?1:0)
}

function GetGrowForestCost(_grid,_type){
    if(_type==3) return 350000;
    if(_type==2) return 8500;
    return 700;
}
function GetForestIncome(_type){
    if(_type==3)return 4
    return _type;

}
function TryGrowForest(_x,_y,_type){ //grow forest grow tree growtree
    let _grid = GetGridData(_x,_y);
    // if(_grid && _type==2 && !GetPlayerUpgradeValue(9)){
    //     return false;
    // }
    if(!_grid.uranium_cloud)
    if(CanGrowForest(_grid)||_type>_grid.forest){
        let _ready=true;
        if(HasUpgrade(59) && (_grid.sand || _grid.desert ||  IsRubble(_grid) || _grid.swamp || _grid.swamp_rocks)){
            _ready = TryBasicClearGrid(_grid);
        }
        if(_grid.scorched && HasLevel(67)){
            _ready = TryBasicClearGrid(_grid);
        }
        if(_ready)
        if(MamDostZlata(GetGrowForestCost(_grid,_type),1)){
            if(!_grid.forest)_grid.forest=0;
            let _plusIncome = GetForestIncome(_type)-GetForestIncome(_grid.forest);
            hrac.income+=_plusIncome;
            hrac.stats.forests+=1;
            hrac.polution-=_type-_grid.forest;
        
            _grid.forest = _type;
            delete(_grid.tree_cutted);
            RecalculatePolutionPerc();
            let _lumberMillClose = GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,4)?true:false;
            ReCalculate9BlocksAndStatsByGrid(_grid,!_lumberMillClose);
            
            // OpenGridMenu();
            if(quickToolActive){

            }else{
                CloseGridMenu();
                ShowQuickTool(2,_type);
            }
            anyActionDone++;
            hrac.income_with_polution = GetModifiedIncome(hrac.income);
            RefreshHeader();
            AddFloatingTextToGrid(_grid,GetText('+{att1} income',_plusIncome),'#72d84c');
            AddHealEffect(_grid,2+3*_type,40);
            PlaySound('tree_leaves');
            drawSingleFrame=1;
            return true;
        }
    }
    return false;
}

function ForestGrowActions(_grid){
    let _out='';
    if(!_grid.uranium_cloud){
        let _forestVisible=false;
        if(CanGrowForest(_grid) || _grid.forest<=2){
            if(HasLevel(FOREST_3_LEVEL_REQ)){
                _out+= ActionDiv('TryGrowForest('+_grid.x+','+_grid.y+',3);','tree3',Bold(GetText('Deep Forest'))+' - '+GetText('Grow {att1}',GetText('Deep Forest'))+BR+GetText3('Cost: ')+PMat(GetGrowForestCost(_grid,3),1)+'; '+GetText('income')+': +'+PMat(GetForestIncome(3),1)+BR+PPollution(-3),GetText('Deep Forest'),0,1);
                _forestVisible=true;
            }

        }
        if(toggleShowHiddableBuildings || !_forestVisible)
        if(CanGrowForest(_grid) || _grid.forest==1){
            if(HasLevel(FOREST_2_LEVEL_REQ)){
                _out+= ActionDiv('TryGrowForest('+_grid.x+','+_grid.y+',2);','tree2',Bold(GetText('Dense Forest'))+' - '+GetText('Grow {att1}',GetText('Dense Forest'))+BR+GetText3('Cost: ')+PMat(GetGrowForestCost(_grid,2),1)+'; '+GetText('income')+': +'+PMat(2,1)+BR+PPollution(-2),GetText('Dense Forest'),0,1);
                _forestVisible=true;
            }
        }
        if(toggleShowHiddableBuildings || !_forestVisible)
        if(CanGrowForest(_grid)){
            _out+= ActionDiv('TryGrowForest('+_grid.x+','+_grid.y+',1);','tree1',Bold(GetText('Small Forest'))+' - '+GetText('Grow {att1}',GetText('Small Forest'))+BR+GetText3('Cost: ')+PMat(GetGrowForestCost(_grid,1),1)+'; '+GetText('income')+': +'+PMat(1,1)+BR+PPollution(-1),GetText('Small Forest'),0,1);
        }
        if(_grid.hill){
            if(IsFlattenHillButVisible(_grid)){
                _out+= ActionDiv('TryFlattenHill('+_grid.x+','+_grid.y+');','ui/flatten',Bold(GetText('Flatten hill'))+' - '+GetText3('removes the hill; cost:')+(GetPlayerUpgradeValue(37)?GetTextCAPS('FREE'):PMat(GetFlattenHillCost(_grid),1))+(ShowClayInfo()?BR+'+'+PMat(CLAY_FOR_FLATTEN,'clay'):''),GetText('Flatten'),0,1);
            }
        }
    }
    return _out;
}


function CanBuildMangroves(_grid){
    return IsClearedTileOfGroundInWater(_grid.x,_grid.y,2);
    
}




function GetStvorcovaVzdialenost(_x,_y,_ox,_oy){
    return Math.max(Math.abs(_x*1-_ox*1),Math.abs(_y*1-_oy*1));
}

function InitUBarrelclouds(){
    let _hrac=hrac;
    if(visitingFriend && loadedUserData){
        _hrac=loadedUserData;
    }
    // console.log(_hrac)

    for(let _b of URANIUM_BARRELS){
        if(!_hrac.barrels_cleared || !_hrac.barrels_cleared.includes(_b.x+'_'+_b.y)){
            _b.cleared = false;
            let _radius1 = Math.max(1,_b.radius*0.3);
            let _radius2 = _b.radius*0.7;
            let _radius3 = _b.radius;
            if(myGridData[_b.x] && myGridData[_b.x][_b.y]){
                myGridData[_b.x][_b.y].uranium_barrel=_b.radius;
            }

            for(let _x=_b.x*1-_radius3;_x<=_b.x*1+_radius3;_x++)
            for(let _y=_b.y*1-_radius3;_y<=_b.y*1+_radius3;_y++){
                if(myGridData[_x] && myGridData[_x][_y]){
                    if(Math.abs(_x-_b.x*1) <= _radius1 && Math.abs(_y-_b.y*1) <= _radius1){
                        myGridData[_x][_y].uranium_cloud = 3;
                    }else if(Math.abs(_x-_b.x*1) <= _radius2 && Math.abs(_y-_b.y*1) <= _radius2){
                        myGridData[_x][_y].uranium_cloud = 2;
                    }else{
                        myGridData[_x][_y].uranium_cloud = 1;
                    } 
                    if(myGridData[_x][_y].forest){
                        myGridData[_x][_y].forest=1;
                    }
                }
            }
        }else{
            _b.cleared = true;
        }
    }
}

function GetDestroyUraniumBarrelCost(_x,_y){
    let _grid = GetGridData(_x,_y);
    if(_grid && _grid.uranium_barrel){
        return {gold: Math.max(10000000,-45000000+_grid.uranium_barrel*30000000+GetVzdialenostOdStredu(_x,_y)*200000)};
    }
    return {gold:35000000};
}
function DestroyUraniumBarrel(_x,_y){
    let _grid = GetGridData(_x,_y);
    if(_grid){
        _grid.uranium_barrel=0;
        hrac.stats.uranium_cleared++;
        hrac.barrels_cleared.push(_x+'_'+_y);
        for(let _b of URANIUM_BARRELS)if(_b.x == _x && _b.y == _y){
            _b.cleared=true;
            let _radius3 = _b.radius;
            for(let _x=_b.x*1-_radius3;_x<=_b.x*1+_radius3;_x++)
            for(let _y=_b.y*1-_radius3;_y<=_b.y*1+_radius3;_y++){
                if(myGridData[_x] && myGridData[_x][_y] && myGridData[_x][_y].uranium_cloud){
                    myGridData[_x][_y].znecistenie_max /= (1+myGridData[_x][_y].uranium_cloud);
                    myGridData[_x][_y].znecistenie /= (1+myGridData[_x][_y].uranium_cloud);
                    myGridData[_x][_y].znecistenie_max = Mro(myGridData[_x][_y].znecistenie_max);
                    myGridData[_x][_y].znecistenie = Mro(myGridData[_x][_y].znecistenie);

                    myGridData[_x][_y].uranium_cloud = 0;
                    AddHealEffect(myGridData[_x][_y],1);
                }
            }
        }
        delete(_grid.destroy_uranium_barrel_notsaved);
        delete(_grid.building_type);
        AddFloatingTextToGrid(_grid,'-'+GetBarrelPolutionByXY(_x,_y)+GetText4(' pollution')+PollutionIcon(),'lime')
        hrac.stats.uranium_barrels_polution_bonus+=GetBarrelPolutionByXY(_x,_y);
        InitUBarrelclouds();
    }
}



function GetBarrelPolutionByXY(_x,_y){
    let _b = GetUraniumBarrelDef(_x,_y);
    if(_b){
        return GetBarrelPolutionByBarrel(_b);
    }
    return 0;
}
function GetBarrelPolutionByBarrel(_b){
    if(_b){
        return _b.radius*60+150;
    }
    return 0;
}

function ZratajUraniumBarrelPollution(){
    hrac.stats.uranium_barrels_polution_bonus=0;
    for(let _b of URANIUM_BARRELS)if(hrac.barrels_cleared && hrac.barrels_cleared.includes(_b.x+'_'+_b.y)){
        hrac.stats.uranium_barrels_polution_bonus+=GetBarrelPolutionByBarrel(_b);
    }
}

function GetUraniumBarrelDef(_x,_y){
    for(let _b of URANIUM_BARRELS)if(_b.x == _x && _b.y == _y){
        return _b
    }
    return null;
}


const URANIUM_BARRELS=[
    {
        x:206,
        y:3,
        radius:3
    },
    {
        x:-44,
        y:15,
        radius:2
    },
    {
        x:183,
        y:86,
        radius:3
    },
    {
        x:227,
        y:167,
        radius:5
    },
    {
        x:243,
        y:246,
        radius:3
    },
    {
        x:181,
        y:234,
        radius:3
    },
    {
        x:88,
        y:209,
        radius:4
    },
    {
        x:9,
        y:150,
        radius:5
    },
    {
        x:-23,
        y:238,
        radius:4
    },
    {
        x:-109,
        y:205,
        radius:5
    },
    {
        x:229,
        y:-122,
        radius:5
    },
    {
        x:205,
        y:-187,
        radius:4
    },
    {
        x:140,
        y:-173,
        radius:3
    },
    {
        x:78,
        y:-225,
        radius:3
    },
    {
        x:10,
        y:-125,
        radius:5
    },
    {
        x:52,
        y:-78,
        radius:3
    },
    {
        x:-67,
        y:-57,
        radius:3
    },
    {
        x:-114,
        y:-116,
        radius:4
    },
    {
        x:-173,
        y:-195,
        radius:5
    },
    {
        x:-84,
        y:-244,
        radius:4
    },
    {
        x:-236,
        y:-147,
        radius:3
    },
    {
        x:-14,
        y:101,
        radius:3
    },
    {
        x:127,
        y:-7,
        radius:3
    },
    {
        x:225,
        y:-229,
        radius:12
    },
    {
        x:-237,
        y:-98,
        radius:5
    },
    {
        x:-216,
        y:-44,
        radius:7
    },
    {
        x:-176,
        y:16,
        radius:4
    },
    {
        x:-154,
        y:-18,
        radius:3
    },
    {
        x:-235,
        y:-14,
        radius:3
    },
    {
        x:-244,
        y:-62,
        radius:3
    },
    {
        x:-210,
        y:-79,
        radius:3
    },
    {
        x:-214,
        y:100,
        radius:4
    },
    {
        x:-184,
        y:193,
        radius:3
    },
    {
        x:-87,
        y:87,
        radius:3
    },
    {
        x:-189,
        y:-11,
        radius:3
    },
    {
        x:-161,
        y:134,
        radius:6
    },
    {
        x:103,
        y:105,
        radius:3
    },
    {
        x:-34,
        y:-203,
        radius:6
    },
    // {
    //     x:0,
    //     y:0,
    //     radius:3
    // },
];

const URANIUM_FIELDS=[
    {
        x:-186,
        y:-215,
        radius:4
    },
    {
        x:219,
        y:-221,
        radius:6
    },{
        x:-96,
        y:224,
        radius:4
    },{
        x:224,
        y:193,
        radius:4
    },
    {
        x:221,
        y:-23,
        radius:2.5
    },
    {
        x:151,
        y:88,
        radius:2.5  
    },
    
    
    
]



function GetShipDiscoveryRange(){
    // if(testVersion) return 7
    return hrac.buildings['shipyard_small']+hrac.buildings['shipyard_heavy']*2+hrac.buildings['shipyard_market']*2+5;
}


let anyRocksInSearchPatch=0;
function IsShipyardNearby(_x,_y,_doFloatingText){
    CHECK_SY_ID++;
    anyRocksInSearchPatch=0;
    return FoundShipYardWide(_x,_y,CHECK_SY_ID,_doFloatingText);
}

function FoundShipYardWide(_x,_y,_CHECKID,_doFloatingText){
    let _max=GetShipDiscoveryRange();
    let _return = FoundShipYardWide4(_x,_y,_CHECKID);
    if(_return[1]) return true;
    let _pole=_return[0];
    

    for(let i=1;i<_max;i++){
        let _pole2=[];
        if(_pole.length==0){
            if(anyRocksInSearchPatch){
                if(_doFloatingText){
                    AddFloatingError(GetText('There might rocks blocking!'),1);
                }
            }else{
                if(_doFloatingText){
                    if(HasLevel(SHIPYARD_LEVEL_REQ)){
                        AddFloatingError(GetText('No shipyard nearby or path undiscovered'),1);
                    }else{
                        AddFloatingTextToMousePos(GetText('Shipyard required.{att2}Main Settlement at Level {att1} needed to construct one.',[SHIPYARD_LEVEL_REQ,BR]),'red');
                    }
                }
            }
            return false;
        }    
        for(let _g of _pole){
            let _w4 = FoundShipYardWide4(_g.x,_g.y,_CHECKID);
            if(_w4[1]) return true;
            for(let _g2 of _w4[0]){
                _pole2.push(_g2);
                // console.log('pridavam')
            }            
        }
        _pole = _pole2;
    }
    if(_doFloatingText){
        if(HasLevel(SHIPYARD_LEVEL_REQ)){
            AddFloatingTextToMousePos(GetText('You need shipyard nearby or build more shipyards'),'red');
        }else{
            AddFloatingTextToMousePos(GetText('Shipyard required.{att2}Main Settlement at Level {att1} needed to construct one.',[SHIPYARD_LEVEL_REQ,BR]),'red');
        }
    }

    // if(_doFloatingText){
    //     AddFloatingError(GetText('Shipyard is too far'),0)
    // }
    return false;
}

function FoundShipYardWide4(_x,_y,_CHECKID){
    let _poleToCheck=[];
    let _g2 = GetGridData(_x,_y+1);
    let _g4 = GetGridData(_x-1,_y);
    let _g6 = GetGridData(_x+1,_y);
    let _g8 = GetGridData(_x,_y-1);

    let _found=false;
    if(_g2 && _g2.water && !_g2.znecistenie && (!_g2.lastCheckID || _g2.lastCheckID < _CHECKID)){
        if(_g2.water_rocks){
            anyRocksInSearchPatch++;
        }else{
            _g2.lastCheckID = _CHECKID;
            _poleToCheck.push(_g2);
            if(_g2.shipyard){
                _found=true;
            }
        }
    }
    if(!_found && _g4 && _g4.water && !_g4.znecistenie && (!_g4.lastCheckID || _g4.lastCheckID < _CHECKID)){
        if(_g4.water_rocks){
            anyRocksInSearchPatch++;
        }else{
            _g4.lastCheckID = _CHECKID;
            _poleToCheck.push(_g4);
            if(_g4.shipyard){
                _found=true;
            }
        }
    }
    if(!_found && _g6 && _g6.water && !_g6.znecistenie && (!_g6.lastCheckID || _g6.lastCheckID < _CHECKID)){
        if(_g6.water_rocks){
            anyRocksInSearchPatch++;
        }else{
            _g6.lastCheckID = _CHECKID;
            _poleToCheck.push(_g6);
            if(_g6.shipyard){
                _found=true;
            }
        }
    }
    if(!_found && _g8 && _g8.water && !_g8.znecistenie && (!_g8.lastCheckID || _g8.lastCheckID < _CHECKID)){
        if(_g8.water_rocks){
            anyRocksInSearchPatch++;
        }else{
            _g8.lastCheckID = _CHECKID;
            _poleToCheck.push(_g8);
            if(_g8.shipyard){
                _found=true;
            }
        }
    }
    // console.log(_poleToCheck)
    return [_poleToCheck,_found];
    
}










function CanBuildShipyard(_grid){
    if(HasLevel(SHIPYARD_LEVEL_REQ))
    if(IsWaterBuildable(_grid)){
        let g1=GetGridData(_grid.x-1,_grid.y); if(g1 && !g1.water) return true;
        g1=GetGridData(_grid.x+1,_grid.y); if(g1 && !g1.water) return true;
        g1=GetGridData(_grid.x,_grid.y-1); if(g1 && !g1.water) return true;
        g1=GetGridData(_grid.x,_grid.y+1); if(g1 && !g1.water) return true;
    }
    return false;
}

function GetDiscoveryRangeText(){
    return GetText('Total sea discovery range: {att1}',GetShipDiscoveryRange())+BR;   
}
function GetShipyardDescription(_grid){
    let _out='';
    if(_grid.shipyard){
        _out+=GetDiscoveryRangeText();
    }
    _out+=GetText('Each small shipyard gives +{att1} sea discovery range',1)+BR+GetText('Each small shipyard gives +{att1} ship slot(s)',GetShipSlotFor1smallYard());
    return _out;
}


function GetHeavyShipyardDescription(_grid){
    let _out='';
    if(_grid.shipyard){
        _out+=GetDiscoveryRangeText();
    }
    _out+=GetText('Each heavy shipyard gives +{att1} sea discovery range and +{att2} ship slots',[1,GetShipSlotForSingleHeavyYard()])+BR+ColorSpan(GridIsCenterGrid(_grid) || IsNextToTown(_grid)?'var(--light-purple-3)':'silver',GetText('+{att1} {EVERY_X_SECONDS} per if built next to town.',PMat(GetGoldPerHeavyShipYardNearTown(),1)));
    return _out;
}
function GetGoldPerHeavyShipYardNearTown(){
    return 150;
}

function GetShipyardMarketDescription(_grid){
    let _out='';
    if(_grid.shipyard){
        _out+=GetDiscoveryRangeText();
    }
    _out+=GetText('Shipyard Markets add +{att1} to your Sea Discovery range and +{att2} ships',[1,GetShipSlotForSingleHeavyYard()])+BR+ColorSpan(GridIsCenterGrid(_grid) || IsNextToTown(_grid)?'var(--light-purple-3)':'silver',GetText('+{att1} {EVERY_X_SECONDS} per if built next to town.',PMat(GetGoldPerShipyardMarketNearTown(),1)));
    return _out;
}
function GetGoldPerShipyardMarketNearTown(){
    return 600;
}

function BuildAnyShipYard(_grid){
    _grid.shipyard=1;
    BuildStreet(_grid,1,0,1);
    _grid.connected_to_shipyard = 1;
    ConnectTownIfAroundThisTile(_grid.x,_grid.y);
    // RefreshRoadConnections();//TOTO ZACHOVAT
    
}

function AreAllTilesAroundWater(_x,_y,_range){
    for(let i=_x-_range;i<=_x+_range;i++){
        for(let j=_y-_range;j<=_y+_range;j++){
            let _grid = GetGridData(i,j);
            if(!_grid || (!_grid.water)){
                return false;
            }
        }
    }
    return true;
}

function CanDeepWater(_grid,_checkSurroundings,_playSound){
    if(!HasLevel(DEEP_WATER_LVL_REQ)) return false;
    if( !_grid.deep_water &&!_grid.deep_water2 && !_grid.water_rocks && !_grid.ship_wreck && !_grid.ship_wreck_small && _grid.water && !_grid.water_rocks_gem){
        //ok
    }else{
        return false;
    }
    if(_checkSurroundings){
        if(!AreTilesAroundAvailable(_grid.x,_grid.y,2)){
            PlaySound('ee');
            AddFloatingError(GetText('all tiles of range of 2 must be cleared.'));
            return false;
        }
    }
    return true;
}

function DeepCleanAfterFuns(_grid){
    if(AreAllTilesAroundWater(_grid.x,_grid.y,2)){
        _grid.deep_water2 = 1;
    }else{
        _grid.deep_water = 1;
    }

    if(!_grid.fish_small && !_grid.fish && !_grid.fish_big && !_grid.fish_huge && !_grid.oil){
        if(!IsOilZoneNearBy(_grid)){
            if(MyRand100(20)){
                _grid.fish_small=1;
            }
        }
        if(!_grid.ship)
        if(!_grid.fish_small){
            if(MyRand100(4)){
                _grid.ship_wreck_small=1;
            }
        }
    }
    AddClay(_DEEP_CLEAN_CLAY,_grid);
    AddHealEffect(_grid,6,40);
}
const DEEP_WATER_POLLUTION=2;

function GetOceanSweepCost(){
    return {gold: Mro(500000 * (1-0.01*GetPlayerUpgradeValue(64)))};
}

function IsOilZoneNearBy(_grid){
    for(let _o of WATER_OIL_ZONES){
        let _dist = GetRealDistance(_o.x,_o.y,_grid.x,_grid.y);
        if(_dist < _o.radius+5){
            return true;
        }
    }
    return false;

}

const _DEEP_CLEAN_CLAY=2;
function GetBuildingDescriptionFor_deep_water(_grid){
    let _out='';
    _out+=GetText('Deep clean the ocean bottom')+'; +'+PMat(_DEEP_CLEAN_CLAY,8);
    _out+=BR+GetText('Has a chance to find fish or a small ship wreck.');
    return _out;
}

function SalvageShipWreck(_x,_y){
    let _grid=GetGridData(_x,_y);
    if(_grid && (_grid.ship_wreck || _grid.ship_wreck_small)){
        if(MamDostZlata(GetShipSalvageCost(_grid),1)){
            if(MyRand100(30)){
                if(!IsOilZoneNearBy(_grid)){
                    _grid.fish_small=1;
                }
            }
            if(hrac.steelIncome){
                if(_grid.ship_wreck_small){
                    AddMat(400+MyRand(0,50),'steel',1,0,_grid);
                }else{
                    AddMat(2000+MyRand(0,300),'steel',1,0,_grid);
                }
            }
            
            if(_grid.ship_wreck_small){
                AddMat(Mro(3000+Math.min(200000,hrac.income) * MyRand(1,20)*0.1),'gold',0,1,_grid);
                if(MyRand100(20)){
                    if(hrac.super_clickers > 1000  && totalSpent<10){
                        AddFloatingTextToGrid(_grid,GetText('too many super clickers'),'orange',2,4);
                    }else{
                        AddMat(MyRand(1,2),'super_clickers',1,2,_grid);
                    }
                }
                hrac.stats.small_wrecks_salvaged++;
                AddBuildEffect(_grid,5);
                AddGoldEffect(_grid,3);
            }else{
                AddMat(Mro(15000+Math.min(200000,hrac.income) * MyRand(1,100)*0.1),'gold',0,1,_grid);
                AddMat(1,'gems',1,2,_grid);
                hrac.stats.big_wrecks_salvaged++;
                AddBuildEffect(_grid,7);
                AddGoldEffect(_grid,5);
                TryIncreaseSuperClickerBonusToStarterPack(1);
            }
            PlaySound('salvage');
            delete(_grid.ship_wreck);
            delete(_grid.ship_wreck_small);
            TryShowQuickTool(14);
            ResetReadyStatusOptiBlockByGrid(_grid);
            return true;
        }
    }
    return false;
}

function GetShipSalvageCost(_grid){
    if(_grid.ship_wreck){
        return 95000;
    }
    return 20000;
}

function ShipyardInfo(_grid){
    let _out='';
    // _grid.deep_water=1;
    if(_grid.shipyard){
        // _out+= 'Sea discovery range: '+GetShipDiscoveryRange()+BR+'Each small shipyard gives +1 sea discovery range'+BR+'Each small shipyard gives +'+GetShipSlotFor1smallYard()+' ship slot(s)'+BR;
        // // _out+= ShipSlotInfo(_grid);
        // _out+= ActionDiv('DestroyAll('+_grid.x+','+_grid.y+');','ui/buldoser','Clean tile; cost '+PMat(200,1),'Destroy');
    }else if(CanBuildShipyard(_grid)){
        // _out+= ActionDiv('TryBuildShipyard('+_grid.x+','+_grid.y+',1);','shipyard','Build small shipyard cost: '+PMat(GetShipyardCost(_grid,1),1)+BR+'Gives '+GetShipSlotFor1smallYard()+' ship slot(s)'+BR+'Roads can be connected to shipyard!','Small Shipyard');
        _out+=ShipInfo(_grid);
    // _out+= BR+'<center>'+Button('build shipyard','TryBuildShipyard('+_grid.x+','+_grid.y+',1);',{class:'big'})+' Cost: '+PCislo(GetShipyardCost(_grid,1)) +'</center>';
    }else{
        if(_grid.water && !HasLevel(SHIPYARD_LEVEL_REQ)){
            _out+=BR+ColorSpan('red',GetText('Small shipyard requires main town level {att1}',SHIPYARD_LEVEL_REQ));
        }else{
            if(_grid.water){
                _out+=ShipInfo(_grid);
            }
        }
    }
    return _out;
}

function GetFishIncome(_grid,_bigShip){
    if(_grid.fish_small){
        return 1;
    }else if(_grid.fish){
        return 2;
    }else if(_grid.fish_big){
        return 4;
    }else if(_grid.fish_huge && _bigShip){
        return 10;
    }
    return 0;
}


function GetShipSlotFor1smallYard(){
    return 1 + GetPlayerUpgradeValue(29,0);
}
function GetShipSlotForSingleHeavyYard(){
    return 3 + GetPlayerUpgradeValue(29,0);
}
function GetShipSlots(){
    return hrac.buildings['shipyard_small']*GetShipSlotFor1smallYard()+hrac.buildings['shipyard_heavy']*GetShipSlotForSingleHeavyYard()+hrac.buildings['shipyard_market']*GetShipSlotForSingleHeavyYard();
}

const BIG_ROCK_CLEAR_LVL_REQ=25;
function GetRockCleanActions(_grid){
    let _out='';
    if(_grid && _grid.water_rocks){
        // _out+= Bold('Water rocks')+' - unable to sail ship here'+BR;
        if(_grid.water_rocks==1)_out+= ActionDiv('ClearRocks('+_grid.x+','+_grid.y+');','ui/buldoser2',Bold(GetText('Clear rocks'))+' +'+PMat(1,'clay')+BR+GetText3('cost: ')+PMats(REMOVE_WATER_ROCKS_COST),GetText('Clear rocks'),isActionGridView,1);
        if(_grid.water_rocks==2){
            if(HasLevel(BIG_ROCK_CLEAR_LVL_REQ)){
                _out+= ActionDiv('ClearRocks('+_grid.x+','+_grid.y+');','ui/buldoser2',Bold(GetText('Clear rocks'))+' +'+PMat(2,'clay')+BR+GetText3('cost: ')+PMats(REMOVE_WATER_ROCKS_COST2),GetText('Clear rocks'),isActionGridView,1);
            }else{
                _out+= ActionDiv('ClearRocks('+_grid.x+','+_grid.y+');','ui/buldoser2',Bold(GetText('Clear rocks'))+' - '+GetText3('requires level: ')+BIG_ROCK_CLEAR_LVL_REQ,GetText('Clear rocks'),isActionGridView,1,{disabled:true});
            }
        }
    }  
    return _out;
}



function  ShipInfo(_grid){
    if(onlyOnBuildingId){
        return '';
    }
    let _out='';
    if(_grid && _grid.ship){
        // _out+=''+ShipSlotInfo(_grid);
        _out+= ActionDiv('SendShipHome('+_grid.x+','+_grid.y+',1);',['water','ship','ui/back_button'],GetText('Send ship home.'),GetText('Send home'));
    }else{
        if(CanSendShipHere(_grid)){
            if(hrac.stats.ships_used<GetShipSlots()){
                _out+= ActionDiv('SendShipTo('+_grid.x+','+_grid.y+',1);',['water','ship'],GetText('Send ship here to catch {att1} fish {EVERY_X_SECONDS}.',Bold(GetAmountOfFishIncomeForShipXY(_grid.x,_grid.y,0)))+BR+GetText('Ship fishing range: {att1}',GetFishingRange())+BR+GetText3('Free ships: ')+PCislo(GetFreeShipSlots()),GetText('Send ship'));
            }else{
                _out+=BR+GetText('all_ships_used');
            }
        }
    }
    return _out;
}

const REMOVE_WATER_ROCKS_COST={gold:35000};
const REMOVE_WATER_ROCKS_COST2={gold:225000,oil:5000};

function ClearRocks(_x,_y){
    let _grid=GetGridData(_x,_y);
    let _cost = REMOVE_WATER_ROCKS_COST;
    if(_grid.water_rocks==2){
        _cost = REMOVE_WATER_ROCKS_COST2;
        if(!HasLevel(BIG_ROCK_CLEAR_LVL_REQ)){
            return false;
        }        
    }
    if(_grid && _grid.water_rocks && MamDostMats(_cost,1)){
        AddClay(_grid.water_rocks,_grid);
        AddBuildEffect(_grid,3);
        AddMudEffect(_grid,5+(_grid.water_rocks==2?2:0));
        DestroyAll(_x,_y,1);
        TryShowQuickTool(6);
        // PlaySound('bulldozer');
        return true;
    }
    return false;
}

function CanSendShipHere(_grid){
    return (HasLevel(SHIPYARD_LEVEL_REQ+1) && _grid && !_grid.water_rocks&& !_grid.water_generator&& !_grid.artifact&& !_grid.has_street && !_grid.shipyard && !IsAnyBuildingFromBUILDINGSinGrid(_grid) && _grid.water && !_grid.ship && !_grid.ship_wreck && !_grid.ship_wreck_small && !_grid.water_rocks_gem)
}

function SendShipTo(_x,_y){ //send ship
    let _grid=GetGridData(_x,_y);
    if(_grid.ship){
        return SendShipHome(_x,_y);
    }

    
    if(CanSendShipHere(_grid)){
        if(_grid.fish_huge){
            PlaySound('ee');
            AddFloatingError(GetText('Only Large Fishing Ships gain the Food yield of this fish tile.'))
            return false;
        }
        if(hrac.stats.ships_used<GetShipSlots()){

            _grid.ship = 1;
            _grid.is_connected = true;
            hrac.stats.ships_used++;
            ReCalculate9BlocksAndStatsByGrid(_grid,1);// ZratajHracStats();
            if(_grid.ship_food_income){
                AddFloatingTextToGrid(_grid,'+'+GetText('{att1} food income',_grid.ship_food_income),'#aeffde');
            }else{
                AddFloatingTextToGrid(_grid,GetText('no fish here'),'orange');

            }
            PlaySound('water_drop2');
            TryShowQuickTool(4);
            return true;
        }else{
            PlaySound('ee');
            AddFloatingError(GetText('Build more shipyards'))
        }
    }
    return false;
}

function SendShipHome(_x,_y,_noSound){
    let _grid=GetGridData(_x,_y);
    if(_grid && _grid.ship){
        if(!_noSound){
            PlaySound('water_drop2');
        }
        delete(_grid.ship);
        if(_grid.ship_food_income){
            AddFloatingTextToGrid(_grid,'-'+GetText('{att1} food income',_grid.ship_food_income),'#aeffde');
        }
        delete(_grid.ship_food_income);
        delete(_grid.building_type);
        hrac.stats.ships_used--;
        ReCalculate9BlocksAndStatsByGrid(_grid,1);// ZratajHracStats();
        TryShowQuickTool(4);
        return true;
    }
    return false;
}

function ShipSlotInfo(_grid){
    let _out='';
    if(_grid.ship_food_income && !_grid.ship_big){

        if(GetShipSlots()>0){
            _out+=GetText('Ships on sea: {att1} / {att2}',[hrac.stats.ships_used,GetShipSlots()])+BR;
        }
        if(hrac.stats.shipsFoodIncome>0){
            _out+=GetText3('Total fish food income: ')+PCislo(hrac.stats.shipsFoodIncome)+PER_INCOME_SHORT+BR;
        }
    }
    return _out;
}
function GetFreeShipSlots(){
    return GetShipSlots()-hrac.stats.ships_used;
}

function GetFishingRange(){
    return GetPlayerUpgradeValue(26,1);
}

function GetAmountOfFishIncomeForShipXY(_x,_y,_type){
    let _range=GetFishingRange();
    if(_type==1){
        _range=BUILDINGS_BY_IDS[62].draw_radius_rect;
    }
    let _pocet=0;
    for(let i=_x-_range;i<=_x+_range;i++){
        for(let j=_y-_range;j<=_y+_range;j++){
            let _grid = GetGridData(i,j);
            if(_grid && !_grid.znecistenie){
                _pocet+=GetFishIncome(_grid,_type);
            }
        }
    }
    return _pocet*(_type?2:1);
}



function HarvestGemsFromRocks(_grid){
    delete(_grid.water_rocks_gem);
    let _amount=10;
    if(HasUpgrade(78)){
        _amount=14;
    }
    AddMat(_amount,'gems',1);
    AddFloatingTextToGrid(_grid,'+'+PMat(_amount,'gems'));
    hrac.stats.cleared_water_rocks_gem++;
}
function HarvestGemRocksCost(_grid){
    if(HasUpgrade(78)){
        return {
            gold: 15000000,
            oil: 200000,
        }
    }else{
        return {
            gold: 35000000,
            oil: 1000000,
        }
    }
}




function GetBuildingDescriptionFor_ship(_grid){
    let _out='';
    _out+=GetText('Ship fishing range: {att1}',BUILDINGS_BY_IDS[62].draw_radius_rect);
    if(_grid.ship_big){
        _out+=BR+GetText3('food income: ')+PMat(_grid.ship_food_income,'food')+PER_INCOME_SHORT;
        _out+=BR+GetText3('Total fish food income: ')+PCislo(hrac.stats.shipsFoodIncome)+PER_INCOME_SHORT;
    }else{
        _out+=BR+GetText('These ships catch 2x more fish');
    }
    
    return _out;
}

function CanSendBigShip(_grid){
    let _count = GetAmountOfTilesInRadius(_grid,1,'ship_big');
    // _count += GetAmountOfTilesInRadius(_grid,1,'ship');
    if(_count){
        PlaySound('ee');
        AddFloatingError(GetText('There can be max 1 big ship in radius of {att1}',1),1);
        return false;
    }
    return true;
}

function ShipSent(_grid,_big){
    _grid.ship_food_income = GetAmountOfFishIncomeForShipXY(_grid.x,_grid.y,1);
    if(_grid.ship_food_income){
        AddFloatingTextToGrid(_grid,'+'+GetText('{att1} food income',_grid.ship_food_income),'#aeffde');
    }else{
        AddFloatingTextToGrid(_grid,GetText('no fish here'),'orange');
    }
}

function GetPolutionPerc(){
    if(ExploredPollution()){
        let _perc = 0;
        if(hrac.polution > GetBasePollution()+0 || hrac.electricity < 0)_perc=0.95;
        if(hrac.polution > GetBasePollution()+50 || hrac.electricity < -50)_perc=0.9;
        if(hrac.polution > GetBasePollution()+100 || hrac.electricity < -100)_perc=0.85;
        if(hrac.polution > GetBasePollution()+200 || hrac.electricity < -200)_perc=0.8;
        if(hrac.polution > GetBasePollution()+500 || hrac.electricity < -400)_perc=0.7;
        if(hrac.polution > GetBasePollution()+750 || hrac.electricity < -600)_perc=0.6;
        if(hrac.polution > GetBasePollution()+1000 || hrac.electricity < -800)_perc=0.5;
        if(hrac.polution > GetBasePollution()+1500 || hrac.electricity < -1000)_perc=0.4;
        if(hrac.polution > GetBasePollution()+2000 || hrac.electricity < -1250)_perc=0.3;
        if(hrac.polution > GetBasePollution()+3000 || hrac.electricity < -2000)_perc=0.2;
        if(hrac.polution > GetBasePollution()+5000 || hrac.electricity < -3000)_perc=0.1;
        return _perc; 

    }
    return 0;
}

const MINUS_BASE_POLLUTION_1=10000;
const MINUS_BASE_POLLUTION_2=MINUS_BASE_POLLUTION_1+15000;
const MINUS_BASE_POLLUTION_3=MINUS_BASE_POLLUTION_2+15000;
function GetBasePollution(){
    if(!hrac)return BASE_POLLUTION;
    let _minus=0;
    if(HasLevel(69)){
        _minus=MINUS_BASE_POLLUTION_3;
    }else if(HasLevel(62)){
        _minus=MINUS_BASE_POLLUTION_2;
    }else if(HasLevel(58)){
        _minus=MINUS_BASE_POLLUTION_1;
    }
    return GetDefaultPollution()-_minus;
}

function GetDefaultPollution(){
    let _plus=0;
    if(hrac&&hrac.map_size>=250)_plus+=EXPAND_POLLUTION_1;
    return BASE_POLLUTION+_plus;
}

function RecalculatePolutionPerc(){
    let _oldPollution = hrac.polutionPerc;
    hrac.polutionPerc = GetPolutionPerc();
    if((_oldPollution && !hrac.polutionPerc) || (!_oldPollution && hrac.polutionPerc)){
        hrac.income_with_polution = Mro(hrac.income*(GetPolutionPerc()?GetPolutionPerc():1));
        // ZratajHracStats();
        RefreshHeader();
    }
}
function IsPolutionChanged(){
    let _oldPollution = hrac.polutionPerc;
    hrac.polutionPerc = GetPolutionPerc();
    if((_oldPollution && !hrac.polutionPerc) || (!_oldPollution && hrac.polutionPerc)){
        return true;
    }
    return false;
}

function ExploredPollution(){
    if(HasLevel(POLLUTION_LEVEL_REQUIREMENT)) return true;
    return false;
}



function PollutionExplanationPopup(){
    let _out='';
    _out+=GetText('pollution_tut_1');
    _out+=BRBR+GetText('pollution_tut_2');
    _out+=BRBR+GetText('pollution_tut_3',PCislo(GetBasePollution()));

    if(HasLevel(REQ_ELECTRICITY_LEVEL+2) && hrac.buildings.river_cleaner<20){
        _out+=BR+GetText3('A good way to reduce pollution{POLLUTION_ICON} is by building:')+GetText('River Cleaner')+GetBuildingMultiTileImage(BUILDINGS_BY_IDS[16],26,'shift_text_image_y');
    }else{
        _out+=BRBR+GetText('pollution_tut_4');
    }
    if(HasLevel(REQ_ELECTRICITY_LEVEL)){
        _out+=BRBR+GetText('power_tut_1');
        _out+=BR+GetText('power_tut_2');
        _out+=BRBR+GetText('power_tut_3');
        _out+=BRBR+GetText('power_tut_4');
    }

    if(!hrac.nastavenia.show_pollution_in_header){
        _out+=BR+GetText('You can also make pollution/power always visible in header')+Button(GetText('Show settings'),'CloseBasicPopup(); showPollutionHeaderButton=1;ClickBottomMenu(4);');
    }
    
    DoBasicPopup(_out,(HasLevel(REQ_ELECTRICITY_LEVEL)?GetText('Pollution / Power'):GetText('Pollution')),{centerised:1});
}




function GetTownPollution(_grid){
    if(_grid.mesto<=REQ_ELECTRICITY_LEVEL){
        return 0;
    }
    return Mro((1-0.01*GetPlayerUpgradeValue(66))*(30+(_grid.mesto-REQ_ELECTRICITY_LEVEL)*10)*(_grid.mega_city?1.5:1));
}
function GetTownPollutionByLevel(_level,_grid){
    if(_level<=REQ_ELECTRICITY_LEVEL){
        return 0;
    }
    return Mro((1-0.01*GetPlayerUpgradeValue(66))*(30+(_level-REQ_ELECTRICITY_LEVEL)*10)*(_grid.mega_city?1.5:1));
}
function GetTownElectricitySpendByLevel(_level,_grid){
    if(_level<=REQ_ELECTRICITY_LEVEL){
        return 0;
    }
    return Mro((1-0.01*GetPlayerUpgradeValue(67))*(30+(_level-REQ_ELECTRICITY_LEVEL)*30)*(_grid.mega_city?1.5:1));
}
function GetTownElectricitySpend(_grid){
    return GetTownElectricitySpendByLevel(_grid.mesto,_grid);
}

function PollutionIcon(_size){
    if(!_size)_size=18;
    return GetIconImage('polution',_size,Math.round(_size/6));
}

function ElectricityIcon(_size){
    if(!_size)_size=18;
    return GetIconImage('electricity',_size,Math.round(_size/6));
}


function GetPolutionColor(_cislo,_ZERO){
    if(!_ZERO)_ZERO=0
    return _cislo>_ZERO?'var(--red)':'var(--light-color-2)';
}

function PPollution(_cislo){
    if(!ExploredPollution()) return '';
    return (_cislo>0?'+':'')+PCislo(_cislo)+PollutionIcon()+GetText('Pollution');
    // return (_cislo>0?'+':'')+PCislo(_cislo)+PollutionIcon()+ColorSpan(GetPolutionColor(_cislo),GetText('Pollution'));
}

function PElectricity(_cislo){
    if(!ExploredPollution()) return '';
    return (_cislo>0?'':'')+PCislo(_cislo)+ElectricityIcon()+GetText('Power');
}






function GetBuildingDescriptionFor_coal_plant(_grid){
    let _out='';
    _out+=GetText('Generates power but also generates lots of pollution.');
    return _out;
}

function GetBuildingDescriptionFor_thermal_plant(_grid){
    let _out='';
    _out+=GetText('Generates a lot of clean power.');
    return _out;
}

function RemoveThermalSpot(_grid,_confirm){
    _grid.thermal=0;
    hrac.stats.thermal_spots_removed++;
    hrac.remove_thermal_spot_notsaved=0;
}





// Water generator
// Water generator
// Water generator


function GetBuildingDescriptionFor_water_generator(_grid){
    let _out='';
    _out+=GetText('Clean sea power. Stark would be proud.');
    return _out;
}








function GetBrokenPowerPollution(){
    return 20;
}
function GetBrokenPowerPower(){
    return 5;
}
function GetBrokenPowerClearGoldCost(){
    return 7500;
}

function SalvageBrokenPower(_x,_y){
    let _grid = GetGridData(_x,_y);
    if(_grid){
        if(_grid.broken_power && MamDostZlata(GetBrokenPowerClearGoldCost(),1)){
            delete(_grid.broken_power);
            hrac.stats.cleared_broken_power++;
            hrac.polution-=GetBrokenPowerPollution();
            hrac.electricity-=GetBrokenPowerPower();
            hrac.electricity_plus-=GetBrokenPowerPower();
            ReCalculate9BlocksAndStatsByGrid(_grid,0);// ZratajHracStats();
            RemovePolutionCloud(_grid);
            RefreshHeader();
            // AddMudEffect(_grid,4);
            AddBuildEffect(_grid,5);
            AddHealEffect(_grid,3);
            if(!quickToolActive){
                OpenGridMenu();
                ShowQuickTool(15);
            }
            PlaySound('bulldozer');
            return true;
        }
    }
    return false;

}




const BASE_POLLUTION=100000;
const BASE_POLLUTION_start=5;


function IsOmniPolution(){
    return hrac.polution > GetDefaultPollution();
}

function AddOmniCloud(_x,_y,_size,_draw_when_over_polution){
    omniClouds.push({
        size: _size,
        x: _x,
        y: _y,
        draw_when_over_polution:GetDefaultPollution()+_draw_when_over_polution,
        rad: Math.random()*Math.PI * 2,
        rad_delta: 0.02*Math.random()*0.1*(Math.random()>0.5?1:-1),
    });
}
let omniClouds=[];

function InitOmniClouds(){
    omniClouds=[];
    let _size = 600;
    AddOmniCloud(0,0,_size,1);
    AddOmniCloud(0,gridSirka*1,_size*0.3,1);
    AddOmniCloud(-gridSirka*1,0,_size*0.3,1);
    AddOmniCloud(+gridSirka*1,0,_size*0.3,1);

    
    AddOmniCloud(gridSirka*1.5,gridSirka*1.5,_size,25);
    AddOmniCloud(gridSirka*1.5,-gridSirka*1.5,_size,25);
    AddOmniCloud(-gridSirka*1.5,gridSirka*1.5,_size,25);
    AddOmniCloud(-gridSirka*1.5,-gridSirka*1.5,_size,25);
    
    AddOmniCloud(0,-gridSirka*5,_size,50);
    AddOmniCloud(0,gridSirka*5,_size,50);
    AddOmniCloud(-gridSirka*5,0,_size,50);
    AddOmniCloud(gridSirka*5,0,_size,50);
    // AddOmniCloud(50,50,_size);
    // AddOmniCloud(window.innerWidth-50,50,_size);
    // AddOmniCloud(window.innerWidth*0.5,150,_size*0.8);
    
    // AddOmniCloud(-50,GetWindowHeight() * 0.5,_size*1.4);
    // AddOmniCloud(window.innerWidth+50,GetWindowHeight() * 0.5,_size*1.4);

    // AddOmniCloud(50,GetWindowHeight()-50,_size);
    // AddOmniCloud(window.innerWidth*0.5,GetWindowHeight()-150,_size*0.8);
    // AddOmniCloud(window.innerWidth-50,GetWindowHeight()-50,_size);
    
}
function DrawOmniPollutionClouds(_ctx){
    if(GetDetails()>1)
    if(IsOmniPolution()){
        // ctx.resetTransform();
        ctx.globalAlpha = MinMax(0,0.8,0.8*((hrac.polution-GetDefaultPollution())*0.20 ));
        for(let _c of omniClouds){
            if(hrac.polution >= _c.draw_when_over_polution ){

                let _posun_x = -gridSirka*0.5;//camera.x * 0.5;
                let _posun_y = -gridSirka*0.5;//camera.y * 0.5;
                
                ctx.translate(_c.x-_posun_x, _c.y-_posun_y);
                ctx.rotate(_c.rad);
                
                MyBasicDraw(_ctx,'polution_cloud',-_c.size*0.5,-_c.size*0.5,_c.size,_c.size,0,0);
                
                ctx.rotate(-_c.rad);
                ctx.translate(-_c.x+_posun_x, -_c.y+_posun_y);
            }
        }
    }
}

function ProcessOmniClouds(){
    if(IsOmniPolution()){
        for(let _c of omniClouds){
            _c.rad += _c.rad_delta;
        }
        
    }
}

function GetWindMillDesc(_grid){
    return (!_grid || (!_grid.hill && !_grid.mountain)?BR+ColorSpan('var(--light-purple)',GetText('Works only on tiles: hills and montains.')):'')+' '+GetText('Requires no road.');
}

function GetSolarPanelDescription(_grid){
    return GetText('Generates clean power.')+' '+GetText('Requires no road.');
}


function GetIronMineDescription(_grid,_type){
    let _out='';
    _out+=GetText('Iron is used by foundry. You must build foundry nearby to use the harvested iron ore.')+' ';
    if(_grid.premium_iron_mine || _type==2){
        _out+=GetText('Provides 3 times more iron than normal iron mine');
    }
    if(!GridIsCenterGrid(_grid) && HasLevel(STEEL_LEVEL_REQ+2)){
        let _isFoundryNearby = GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,GetFoundryRange(),'foundry');
        if(!_isFoundryNearby){
            _isFoundryNearby = GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,GetFoundryRange(),'foundry_big');
        }
        if(!_isFoundryNearby){
            _out+=BR+ColorSpan('orange',GetText('There is no foundry nearby!'));
        }
    }
    // _out+=BR+PPollution(GetIronMinePolution(_grid))+'; Consumption '+PElectricity(GetIronMineElectricity(_grid));
    if(_grid.iron_mine || _grid.premium_iron_mine){
        _out+=BR+GetText3('Total iron mines:')+PCislo(hrac.buildings.iron_mine+hrac.buildings.premium_iron_mine);
    }
    if(GetPlayerUpgradeValue(36)){
        _out+=BR+GetText('Iron mine can harvest enough iron ore for two foundries');
    }
        
    return _out;
}





/** 

   XXXXX   XXXXXXX  XXXXXX  XXXXXX  XXX   
  XX   XX     X     X       X        X    
  X           X     X       X        X    
  XX          X     X       X        X    
   XXXXX      X     XXXXX   XXXXX    X    
       XX     X     X       X        X    
        X     X     X       X        X    
  XX   XX     X     X       X        X   X
   XXXXX      X     XXXXXX  XXXXXX  XXXXXX

*/


function GetBuildingDescriptionFor_foundry(_grid){
    let _out='';
    if(_grid.foundry){
        if(_grid.has_mines+_grid.has_adv_mines>0){
            _out+=GetText('changes iron ore from nearby Iron mines into {att1} steel',PMat((_grid.has_mines+_grid.has_adv_mines*3) * GetSteelProductionPerIronMine(),9))+'. ';
        }else{
            if(GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,GetFoundryRange(),['iron_mine'])+GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,GetFoundryRange(),['premium_iron_mine'])){
                _out+=ColorSpan('red',GetText('All iron mines nearby are already in use by other foundries.'));
            }else{
                _out+=ColorSpan('red',GetText('you have no iron mines nearby!'));
            }
        }
        _out+=BR+GetText3('Total steel income:')+PMat(hrac.steelIncome,9)+GetText('every {att1} seconds',INCOME_SEC);//+SPC+(hrac.steel>=GetMaxSteelStorage()?' '+GetTextCAPS('max')+' ':'');//REFACTOR
        _out+=BR+GetText3('Steel Storage:')+PMat(GetMaxSteelStoragePerFoundry(),9);
        _out+=BR+GetText3('Global Steel storage:')+SpanID('steel_storage_gridmenu',PMat(hrac.steel,9))+' / '+PMat(GetMaxSteelStorage(),9);
    }else{
        _out+=GetText('changes iron ore from nearby Iron mines into steel',GetFoundryRange(_grid));
        _out+=BR+GetText3('Steel Storage:')+PMat(GetMaxSteelStoragePerFoundry(),9);
    }
    return _out;
}

function GetBuildingDescriptionFor_foundry2(_grid){
    let _out='';
    if(_grid.foundry_big){
        if(_grid.has_mines+_grid.has_adv_mines>0){
            _out+=GetText('changes iron ore from nearby Iron mines into {att1} steel',PMat(3*(_grid.has_mines+_grid.has_adv_mines*3) * GetSteelProductionPerIronMine(),9));
        }else{
            if(GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,GetFoundryRange(),['iron_mine'])+GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,GetFoundryRange(),['premium_iron_mine'])){
                _out+=ColorSpan('red',GetText('All iron mines nearby are already in use by other foundries.'));
            }else{
                _out+=ColorSpan('red',GetText('you have no iron mines nearby!'));
            }
        }
        _out+=BR+GetText3('Total steel income:')+PMat(hrac.steelIncome,9)+GetText('every {att1} seconds',INCOME_SEC);//+SPC+(hrac.steel>=GetMaxSteelStorage()?' '+GetTextCAPS('max')+' ':'');//REFACTOR
        _out+=BR+GetText3('Steel Storage:')+PMat(GetMaxSteelStoragePerFoundryBig(),9);
        _out+=BR+GetText3('Global Steel storage:')+SpanID('steel_storage_gridmenu',PMat(hrac.steel,9))+' / '+PMat(GetMaxSteelStorage(),9);
    }else{
        _out+=GetText('Changes iron ore from nearby Iron mines into {att1} times more steel',3);
        _out+=GetText('One foundry can process iron from all free iron mines in its reach.');
        _out+=BR+GetText3('Steel Storage:')+PMat(GetMaxSteelStoragePerFoundryBig(),9);
    }
    return _out;
}


function GetSteelProductionPerIronMine(_grid){
    //nepouziva sa _grid
    return 10;
}

function GetMaxSteelStoragePerFoundry(){
    return 10000;
}
function GetMaxSteelStoragePerFoundryBig(){
    return 80000;
}
function GetMaxSteelStorage(_player){
    if(!_player)_player=hrac;
    return Mro(0.01*(GetPlayerUpgradeValue(87,0,_player)+100)*( _player.buildings.steel_storage*GetSingleSteelStorage() + _player.stats.working_storage_shipyard*GetShipyardStorageStorage('steel') + _player.buildings.storage_crane*GetStorageCraneStorage('steel') + GetMaxSteelStoragePerFoundry() * _player.buildings.foundry + GetMaxSteelStoragePerFoundryBig() * _player.buildings.foundry_big + _player.stats.storage_container_steel + GetPremiumStorage_steel()*_player.buildings.premium_storage + ECO_STORAGE_MULTI*GetPremiumStorage_steel()*_player.buildings.eco_storage));
}

function GetFoundryRange(_grid){
    return 3;
}

function OdoberMinesFromFoundry(_grid){
    let _r=GetFoundryRange();
    for(let _xx=_grid.x-_r;_xx<=_grid.x+_r;_xx++){
        for(let _yy=_grid.y-_r;_yy<=_grid.y+_r;_yy++){
            let _g = GetGridData(_xx,_yy);
            if(_g && (_g.iron_mine || _g.premium_iron_mine)){
                delete(_g.countedBy);
            }
        }
    }
}

function GetSingleSteelStorage(){
    return 8000+GetPlayerUpgradeValue(106,0);
}

function GetSteelStorageDescription(_grid){
    return GetText3("Steel Storage:")+PMat(GetSingleSteelStorage(),'steel')+(_grid.steel_storage?BR+GetText3('Global Steel storage:')+SpanID('steel_storage_gridmenu',PMat(hrac.steel,9))+' / '+PMat(GetMaxSteelStorage(),9):'');
}

const GOLDEN_FIELD_BLOCK_SIZE=20;

function CanBeGoldenFieldHere(_x,_y){
    let _x1=Mfl((_x )/ GOLDEN_FIELD_BLOCK_SIZE)*GOLDEN_FIELD_BLOCK_SIZE;
    let _x2=Mce((_x+1 )/ GOLDEN_FIELD_BLOCK_SIZE)*GOLDEN_FIELD_BLOCK_SIZE;
    let _y1=Mfl((_y )/ GOLDEN_FIELD_BLOCK_SIZE)*GOLDEN_FIELD_BLOCK_SIZE;
    let _y2=Mce((_y+1 )/ GOLDEN_FIELD_BLOCK_SIZE)*GOLDEN_FIELD_BLOCK_SIZE;
    for(let _x=_x1;_x<=_x2;_x++){
        for(let _y=_y1;_y<=_y2;_y++){
            let _g = GetGridData(_x,_y);
            if(_g && _g.golden_field){
                return 0;
            }
        }
    }
    return 1;
}

function CanBeGoldenIslandHere(_x,_y){
    let _x1=Mfl((_x )/ GOLDEN_FIELD_BLOCK_SIZE)*GOLDEN_FIELD_BLOCK_SIZE;
    let _x2=Mce((_x+1 )/ GOLDEN_FIELD_BLOCK_SIZE)*GOLDEN_FIELD_BLOCK_SIZE;
    let _y1=Mfl((_y )/ GOLDEN_FIELD_BLOCK_SIZE)*GOLDEN_FIELD_BLOCK_SIZE;
    let _y2=Mce((_y+1 )/ GOLDEN_FIELD_BLOCK_SIZE)*GOLDEN_FIELD_BLOCK_SIZE;
    for(let _x=_x1;_x<=_x2;_x++){
        for(let _y=_y1;_y<=_y2;_y++){
            let _g = GetGridData(_x,_y);
            if(_g && _g.golden_island){
                return 0;
            }
        }
    }
    return 1;
}


function GetPremiumGoldMineDesc(_grid){
    return GetText('Mines {att1} gold {EVERY_X_SECONDS}',PMat(GetGoldenPremiumMineProduction(),'gold'))+BR+GetText('Requires no road.')+CanBeBuildOnlyOn(_grid,'Gold vein');
}
function GetGoldenPremiumMineProduction(){
    return Mro(250*((100+GetPlayerUpgradeValue(27,0))*0.01));
}

function GetPremium2GoldMineDesc(_grid){
    return GetText('Mines {att1} gold {EVERY_X_SECONDS}',PMat(GetGoldenPremium2MineProduction(),'gold'))+BR+GetText('Requires no road.')+CanBeBuildOnlyOn(_grid,'Gold vein');
}
function GetGoldenPremium2MineProduction(){
    return Mro(400*((100+GetPlayerUpgradeValue(27,0))*0.01));
}


function GetGoldMineDesc(_grid){
    return GetText('Mines {att1} gold {EVERY_X_SECONDS}',PMat(GetGoldenMineProduction(),'gold'))+CanBeBuildOnlyOn(_grid,'Gold vein');
}
function GetGoldenMineProduction(){
    return Mro(100*((100+GetPlayerUpgradeValue(27,0))*0.01));
}


function GetAdvancedGoldMineDesc(_grid){
    return GetText('Mines {att1} gold {EVERY_X_SECONDS}',PMat(GetAdvancedGoldMineProduction(),'gold'))+CanBeBuildOnlyOn(_grid,'Gold vein');
}
function GetAdvancedGoldMineProduction(){
    return Mro(250*((100+GetPlayerUpgradeValue(27,0))*0.01));
}


function GetHeavyGoldMineProduction(){
    return Mro(400*((100+GetPlayerUpgradeValue(27,0))*0.01));
}
function GetHeavyGoldMineDesc(_grid){
    return GetText('Mines {att1} gold {EVERY_X_SECONDS}',PMat(GetHeavyGoldMineProduction(),'gold'))+CanBeBuildOnlyOn(_grid,'Gold vein');
}




const COPPER_FIELD_BLOCK_SIZE=25;

function CanBeCopperFieldHere(_x,_y){
    let _x1=Mfl((_x )/ COPPER_FIELD_BLOCK_SIZE)*COPPER_FIELD_BLOCK_SIZE;
    let _x2=Mce((_x+1 )/ COPPER_FIELD_BLOCK_SIZE)*COPPER_FIELD_BLOCK_SIZE;
    let _y1=Mfl((_y )/ COPPER_FIELD_BLOCK_SIZE)*COPPER_FIELD_BLOCK_SIZE;
    let _y2=Mce((_y+1 )/ COPPER_FIELD_BLOCK_SIZE)*COPPER_FIELD_BLOCK_SIZE;

    for(let _x=_x1;_x<=_x2;_x++){
        for(let _y=_y1;_y<=_y2;_y++){
            let _g = GetGridData(_x,_y);
            if(_g && _g.copper_field){
                return 0;
            }
        }
    }

    return 1;
}

function GetSensorTowerRadius(){
    return 7+GetPlayerUpgradeValue(25,0);
}


function GetBuildingDescriptionFor_sensor_tower(_grid){
    let _out='';
    _out+=GetText('discovers land in radius: {att1}',GetSensorTowerRadius())+BR+GetText('Can also automatically find copper field in radius of 5 when built. Or you can manually try to search in bigger radius.');
    return _out;
}

function GetSensorTowerDesc(){
    return GetText('Manually search for copper field in radius of {att1}.',COPPER_FIELD_RADIUS);
}

const COPPER_FIELD_RADIUS=16;
const COPPER_FIELD_MANUAL_SEARCH_GOLD_COST=1800000;
function FindCopperField2(_grid){
    let _found=0;
    _found=FindCopperFieldRadius(_grid,COPPER_FIELD_RADIUS,99,1);
    delete(_grid.sensor_search_notsaved)
    _grid.copperSearched=true;
    if(!_found){
        AddFloatingTextToGrid(_grid,GetText('No copper field found.'),'red');
    }else{
        return true;
    }
    return 0;
}

function CanSensorManualSearchAgain(_grid){
    if(_grid.copperSearched){
        AddFloatingTextToGrid(_grid,GetText('Search used already, nothing to find.'));
        return false;
    }
    return true;
}

function FindCopperField(_grid){
    let _found=0;
    _found=FindCopperFieldRadius(_grid,1,1);
    if(!_found){
        _found=FindCopperFieldRadius(_grid,3,2);
    }
    if(!_found){
        _found=FindCopperFieldRadius(_grid,5,3);
    }
    if(!_found){
        AddFloatingTextToGrid(_grid,GetText('No copper field found.'),'red');
        // AddFloatingError('No copper field found.');
    }
    return 0;
}



function FindCopperFieldRadius(_grid,_radius,_extraChance,_more){
    let _count = 0;
    for(let _x=_grid.x-_radius;_x<=_grid.x+_radius;_x++){
        for(let _y=_grid.y-_radius;_y<=_grid.y+_radius;_y++){
            let _g = GetGridData(_x,_y);
            if(_g){
                if(!_g.golden_field && !_g.copper_field && !_g.water && !_g.ground_oil  && IsGridGroundBuildable(_g) && !_g.gem_field && CanHeavyBuildings(_g) && IsNoBuilding(_g))
                if(MyRand100(0.5+_extraChance) && CanBeCopperFieldHere(_x,_y)){
                    TryCutForest(_g);
                    RemoveRubble(_g);
                    delete(_g.tree_cutted);
                    delete(_g.sand);
                    delete(_g.desert);
                    _g.copper_field=1;
                    if(!_count){
                        AddFloatingTextToGrid(_g,GetText('Copper field found!'));
                    }
                    AddPing(_g.x,_g.y,1);
                    setTimeout(() => {
                        AddPing(_g.x,_g.y,1);
                    }, 250);
                    ScrollToGrid(_g,0.6,1);
                    _count++;
                    ResetReadyStatusOptiBlockByGrid(_g);
                    if(!_more){
                        return true;
                    }
                }
            }
            
        }
    }
    return false;
}









function GetChipFoundryDistance(){
    return 8;
}


function GetStoragePerChipFactory(_bid){
    if(_bid==68){
        return Mro(0.01*(GetPlayerUpgradeValue(114,0,hrac)+100)*30000*GetPlayerUpgradeValue(71,1));    
    }
    return 1500*GetPlayerUpgradeValue(71,1);
}

function GetMaxChipsStorage(_player){
    if(!_player)_player=hrac;
    return Mro(0.01*(GetPlayerUpgradeValue(87,0,_player)+100)*(_player.stats.working_storage_shipyard*GetShipyardStorageStorage('chips') + _player.buildings.storage_crane*GetStorageCraneStorage('chips') + GetStoragePerChipFactory()*_player.buildings.chip_factory + GetStoragePerChipFactory(68)*_player.buildings.chip_factory_big + _player.stats.storage_container_chips+GetPremiumStorage_chips()*_player.buildings.premium_storage + ECO_STORAGE_MULTI*GetPremiumStorage_chips()*_player.buildings.eco_storage));
}

function GetChipFactoryProduction(_g,_bid){
    if(!_bid)_bid=17;
    return BUILDINGS_BY_IDS[_bid].chip_production*GetPlayerUpgradeValue(40,1)*GetPlayerUpgradeValue(41,1);
}




function GetBuildingDescriptionFor_chip_factory(_grid,_bid){
    let _out='';
    _grid.chip_has_foundry=GetPlayerUpgradeValue(46)?1:GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,GetChipFoundryDistance(_grid),'foundry');
    _out+=(!GridIsCenterGrid(_grid) && !GetPlayerUpgradeValue(46) && !_grid.chip_has_foundry?ColorSpan('red',GetText('Does not have foundry nearby - wont produce micro-chips!')):GetText3("Produces:")+PMat(GetChipFactoryProduction(_grid,_bid),10)+' '+GetText('Micro-chips'));
    _out+=BR+GetText('Micro-chips')+' '+GetText('storage:')+' +'+PMat(GetStoragePerChipFactory(_bid),10);
    
    if(_grid.chip_factory || _grid.chip_factory_big){
        _out+=BR+GetText('Total micro-chips income: +{att1} {EVERY_X_SECONDS}',PMat(hrac.chipsIncome,10));
        _out+=BR+GetText3('Total micro-chips: ')+SpanID('chips_storage_gridmenu',PMat(hrac.chips,10))+' / '+PMat(GetMaxMatStorage('chips'),'chips');
    }
    return _out;
}


function CanBuildChipFactory(_grid){
    if(!_grid.copper_field){
        let _out='';
        _out+=GetText('Chip factory can be built only on:')+BR;
        _out+=GetTileImage('copper_field',100)+BR;
        _out+=GetText('These copper tiles can be found via this structure:')+BRBR+BRBR;
        _out+=GetTileImage('sensor_tower',80);
        
        
        DoBasicPopup(_out,GetText('Chip Factory'),{centerised:1});
        return false;
    }
    return true;
}




function SelectNearestSensorTower(){
    let _grid = CircularSearchForGridWithAtt(GetGridInScreenCenter(1),'sensor_tower');
    if(_grid){
        CloseBottomMenu();
        if(camera.zoom < OPTIMISED_ZOOM){
            ClickGrid(_grid,0,0,1);

        }else{
            ScrollToGrid(_grid);
            ClickGrid(_grid);
        }
        // OpenHighlightPopup();
        PlayTap();
    }else{
        AddFloatingTextToMousePos(GetText('No structure of type {att1} built.',GetText(BUILDINGS_BY_KEYS['sensor_tower'].name)),'red');
        PlayErrorSound();
    }
}

function OpenSensorTowerMenu2(){
    let _out='';
    _out+='<table class="building-overview">';
    const _small=window.innerWidth<380?1:0;
    let _buildingsByPollution=[];
    
    for(let _t in hrac.buildings){
        if(BUILDINGS_BY_KEYS[_t] && hrac.buildings[_t]*1>0){
            _buildingsByPollution.push([_t,hrac.buildings[_t]*(BUILDINGS_BY_KEYS[_t].polution?BUILDINGS_BY_KEYS[_t].polution:0)]);
        }
    }

    _buildingsByPollution.sort((a,b)=>b[1]-a[1]);

    for(let _i in _buildingsByPollution){
        let _t = _buildingsByPollution[_i][0];
        if(BUILDINGS_BY_KEYS[_t] && hrac.buildings[_t]*1>0){
            _out+='<tr><td>';
            _out+=PCisloB(hrac.buildings[_t])+'x ';
            _out+=BR;
            _out+=GetText(BUILDINGS_BY_KEYS[_t].name);
            if(_small){
                _out+=BR+Button(GetText('show closest'),'ShowClosestBuilding(\''+_t+'\');',{class:'small'});
            }

            _out+='</td><td>';
            _out+=GetBuildingMultiTileImage(BUILDINGS_BY_KEYS[_t],50,'',1);
            _out+='</td><td>';
            if(BUILDINGS_BY_KEYS[_t].polution){
                _out+=PCislo(hrac.buildings[_t]*BUILDINGS_BY_KEYS[_t].polution)+PollutionIcon();
            }
            _out+=BR;
            if(BUILDINGS_BY_KEYS[_t].electricity){
                _out+=(BUILDINGS_BY_KEYS[_t].electricity>0?'+':'')+PCislo(hrac.buildings[_t]*BUILDINGS_BY_KEYS[_t].electricity)+ElectricityIcon();
            }
            if(!_small){
                _out+='</td><td>';
                _out+=Button(GetText('show closest'),'ShowClosestBuilding(\''+_t+'\');',{class:'small'});
            }

            _out+='</td></tr>';
        }
    }
    _out+='</table>'+BRBR;
    
    DoBasicPopup(_out,GetText('Buildings Overview'),{centerised:1});
}


function ShowClosestBuilding(_grid_key){
    PlayTap();
    let _found = CircularSearchForGridWithAtt(GetGridData(0,0),_grid_key,Math.max(BOUNDERIES_LEFT,BOUNDERIES_RIGHT,BOUNDERIES_UP,BOUNDERIES_DOWN));
    if(_found){
        CloseBasicPopup();
        ScrollToGrid(_found,0.8);
        setTimeout(() => {
            
            AddPing(_found.x,_found.y,0,240,1600,'white');
        }, 150);
    }
}




let HIGHTLIGHT_GOLD_COST=300000;
let highlightedTileKey=null;
let highlightedTileKey2=null;
function OpenHighlightPopup(){
    if(highlightedTileKey){
        highlightedTileKey=null;
        highlightedTileKey2=null;
    }
    let _out=BR;
    _out+=GetHighLiteTilePic('golden_field');
    _out+=GetHighLiteTilePic('copper_field');
    _out+=GetHighLiteTilePic('gem_field');
    _out+=GetHighLiteTilePic('mountains');
    _out+=GetHighLiteTilePic('hills');
    _out+=GetHighLiteTilePic('rift');
    _out+=GetHighLiteTilePic('rift_big');
    _out+=GetHighLiteTilePic('oil_water','water');
    _out+=GetHighLiteTilePic('ship_wreck_small','water');
    _out+=GetHighLiteTilePic('ground_oil');
    _out+=GetHighLiteTilePic('thermal');
    _out+=GetHighLiteTilePic('airplane_wreck');
    _out+=BR;
    _out+=BR+GetText3('Cost: ')+PMat(HIGHTLIGHT_GOLD_COST,'gold');
    // _out+=BR+GetText('Works only in small zoom');
    _out+=BR+GetText('Only tiles without building are shown');
    _out+=BR+GetText('Only tiles you have discovered are shown');
    
    DoBasicPopup(_out,GetText('Highlight'),{centerised:1});
    // CloseBottomMenu();
}


function GetHighLiteTilePic(_key,_underImage){
    let _out='';
    let _image=_key;
    if(_underImage){
        _out+=GetMultiTilesImages([_underImage,_image],70,'info-tile-img2','HighLiteTile(\''+_key+'\');');
    }else{
        _out+=GetMultiTilesImages([_image],70,'info-tile-img2','HighLiteTile(\''+_key+'\');');
    }
    
    return _out;
}
function HighLiteTile(_key){
    if(MamDostZlata(HIGHTLIGHT_GOLD_COST,1)){
        if(_key=='mountains')_key='mountain';
        if(_key=='hills')_key='hill';
        highlightedTileKey=_key;
        if(highlightedTileKey=='golden_field'){
            highlightedTileKey2='golden_island';
        }
        CloseBasicPopup();
        RefreshHeader();
        PlaySound('sonar2');
    }
}

function DrawHighlitedTilesInZoomOut(_ctx,_zoomScale,_gridSirka){
    if(highlightedTileKey && _zoomScale < OPTIMISED_ZOOM){
        let _x=GetXInScreenCenter();
        let _y=GetYInScreenCenter();
        _ctx.beginPath();
        let _radius = 30;
        _ctx.rect((_x-_radius)*gridSirka, (_y-_radius)*gridSirka, gridSirka*(1+2*_radius),gridSirka*(1+2*_radius));
        _ctx.lineWidth = 9.5/_zoomScale;
        _ctx.strokeStyle = "purple";
        _ctx.stroke();

        // _ctx.beginPath();
        let _r=_radius;

        for(let _xx=_x-_r;_xx<=_x+_r;_xx++){
            for(let _yy=_y-_r;_yy<=_y+_r;_yy++){
                let _grid2 = GetGridData(_xx,_yy);
                if(_grid2 && _grid2.znecistenie==0 && !_grid2.building_type && (_grid2[highlightedTileKey] || (highlightedTileKey2 && _grid2[highlightedTileKey2]))){
                    _ctx.fillStyle = 'rgba(250,0,255,0.5)';
                    _ctx.fillRect(_xx*_gridSirka-0.25*_gridSirka, _yy*_gridSirka-0.25*_gridSirka, 1.5*_gridSirka, 1.5*_gridSirka);
                    // _ctx.lineWidth=5;
                    // _ctx.strokeStyle = "rgba(0,0,0,1)";
                    // _ctx.rect(0, 0, _gridSirka, _gridSirka);
                    // _ctx.stroke();
                    
                }
            }
        }

    }
    
}

const POLLUTION_PER_GROUND_OIL=5;
function GetGroundOilRigProduction(){
    return 10;
}
function GetGroundOilRigProductionString(_grid){
    return GetText('Harvests')+' '+PMat(GetGroundOilRigProduction(),11)+PER_INCOME_SHORT+BR+GetText('Storage')+': '+PMat(GetGroundOilrigStorage(),11)+GetTotalOilRigDescription(_grid);
}

function GetWaterOilRigProduction(_grid){
    return 20;
}
function GetWaterOilRigProductionString(_grid){
    let _hasBoost=0;
    if(_grid.oil_rig){
        _hasBoost = GetAmountOfSpecificGridsAroundGrid(_grid.x,_grid.y,GetTankerRadius(),'tanker')?1:0;
    }
    return GetText('Harvests')+' '+PMat((_hasBoost?2:1)*GetWaterOilRigProduction(_grid),11)+PER_INCOME_SHORT+BR+GetText('Storage')+': '+PMat(GetWaterOilrigStorage(),11)+GetTotalOilRigDescription(_grid);
}

function GetTotalOilRigDescription(_grid){
    if(_grid.oil_rig || _grid.oil_rig_ground || _grid.oil_storage || _grid.rift_miner){
        return BR+GetText3('Total oil income: ')+PMat(hrac.oilIncome,11)+PER_INCOME_SHORT+BR+GetText3('Total oil storage: ')+SpanID('oil_storage_gridmenu',PMat(hrac.oil,11))+' / '+PMat(GetMaxOilStorage(),11);
    }
    return '';
}


function GetGroundOilrigStorage(){
    return 1000*GetPlayerUpgradeValue(54,1);
}
function GetRiftMinerStorage(){
    return 8000*GetPlayerUpgradeValue(54,1);
}
function GetWaterOilrigStorage(){
    return 5000;
}
function GetOilStorageStorage(){
    return Mro(0.01*(GetPlayerUpgradeValue(91)+100)*(3000+GetPlayerUpgradeValue(110,0)));
}

function GetMaxOilStorage(_player){
    if(!_player)_player=hrac;
    return Mro(0.01*(GetPlayerUpgradeValue(87,0,_player)+100)*(_player.buildings.oil_storage*GetOilStorageStorage()+_player.buildings.oil_rig_ground*GetGroundOilrigStorage()+_player.buildings.oil_rig*GetWaterOilrigStorage()+_player.buildings.tanker*GetTankerOilStorage()+_player.buildings.rift_miner*GetRiftMinerStorage() + GetPremiumStorage_oil()*_player.buildings.premium_storage + ECO_STORAGE_MULTI*GetPremiumStorage_oil()*_player.buildings.eco_storage));
}

function RiftToOilFiller(){
    return GetText('Fill the rift with clay, and setup the pipes so it will be able to harvest oil here.');
}

function FillRiftAndOil(_grid){
    _grid.ground_oil=1;
    hrac.stats.new_ground_oil++;
    delete(_grid.rift);
    delete(_grid.built_ground_oil_notsaved);
    delete(_grid.built_ground_oil_notsaved2);
    delete(_grid.built_ground_oil_notsaved3);
    delete(_grid.building_type);
}

function RemoveGroundOil(_grid){
    _grid.ground_oil=0;
    hrac.stats.ground_oil_removal++;
    hrac.remove_ground_oil_notsaved=0;
}


function OilStorageDescription(_grid){
    return GetText('Storage')+': '+PMat(GetOilStorageStorage(),11)+GetTotalOilRigDescription(_grid);
}



function GetBuildingDescriptionFor_tanker(_grid){
    let _out='';
    _out+=GetText('Sets oil production of nearby (radius: {att1}) Offshore Oil Rigs to 200%',GetTankerRadius());
    if(_grid){
        if(_grid.x!=0||_grid.y!=0){
            _out+=BR+GetText3('Boosted oil rigs: ')+(_grid.boosted_oil_rigs?_grid.boosted_oil_rigs:GetText('none'));
        }
    }
    _out+=BR+'+'+PMat(GetTankerOilStorage(),11)+' '+GetText('Storage');
    return _out;
}
function GetTankerRadius(){
    return 5+GetPlayerUpgradeValue(56);
}
function GetTankerOilStorage(){
    return 4000;
}
function OdoberOilRigsFromTanker(_grid){
    OdoberCountedByFromChildren(_grid,GetTankerRadius(),'oil_rig');
}

function OdoberCountedByFromChildren(_grid,_r,_type){
    for(let _xx=_grid.x-_r;_xx<=_grid.x+_r;_xx++){
        for(let _yy=_grid.y-_r;_yy<=_grid.y+_r;_yy++){
            let _g = GetGridData(_xx,_yy);
            if(_g && _g[_type]){
                delete(_g.countedBy);
            }
        }
    }
}



function CanBuildOilRig(_grid){
    if(!HasLevel(WATER_OIL_LEVEL_REQ)){
        let _out='';
        _out+=GetText('You require level {att1} to be able to build oil rig on water.',WATER_OIL_LEVEL_REQ)+BR;
        _out+=GetText('But till then you can build Onshore Oil Rigs.')+BR;
        _out+=GetTileImage('oil_rig_ground',100)+BR;
        _out+=GetText('You can build them on tiles like this:')+BR;
        _out+=GetTileImage('ground_oil',80);
        
        DoBasicPopup(_out,GetText('Information'),{centerised:true});
        return false;
    }
    return true;
}




function GetRiftMinerProduction(){
    return 45;
}
    
function GetBuildingDescriptionFor_rift_miner(_grid){
    let _out='';
    _out+=GetText('Harvests')+' '+PMat(GetRiftMinerProduction(),11)+PER_INCOME_SHORT+BR+GetText('Storage')+': +'+PMat(GetRiftMinerStorage(),11);
    _out+=GetTotalOilRigDescription(_grid);
    return _out;
}



function RemoveWaterOil(_grid){
    delete(_grid.remove_water_oil_notsaved);
    delete(_grid.oil);
    hrac.stats.removed_water_oils++;
    if(MyRand100(70)){
        _grid.fish = 1;
    }
}


function IsStandardGroundBuildableTile(_grid){
    return (_grid && !_grid.water && !_grid.rift_big && !_grid.rift && !_grid.swamp && !_grid.swamp_rocks && !_grid.thermal && !_grid.river && !_grid.hill && !_grid.mountain&& !_grid.golden_field&& !_grid.scorched&& !_grid.lava_rift && !_grid.gem_field && !_grid.uranium_field);
}

function IsGridGroundBuildable(_grid){
    return (_grid && !_grid.water && !_grid.airplane_wreck && !_grid.river && !_grid.mountain && !_grid.hill && !_grid.rift && !_grid.rift_big && !_grid.thermal && !_grid.gem_field && !_grid.swamp && !_grid.swamp_rocks && !_grid.gem_field && !_grid.golden_field && !_grid.copper_field&& !_grid.lava_rift && !_grid.scorched && !_grid.uranium_field && IsBuildable2(_grid)?1:0)
}
function CanHeavyBuildings(_grid){
    return (_grid && !_grid.water && !_grid.airplane_wreck && !_grid.river && !_grid.mountain &&                !_grid.rift && !_grid.rift_big && !_grid.thermal && !_grid.gem_field && !_grid.swamp && !_grid.swamp_rocks && !_grid.gem_field && !_grid.golden_field && !_grid.copper_field && !_grid.lava_rift && !_grid.scorched && IsBuildable2(_grid)?1:0)
}
function IsWaterBuildable(_grid){
    return (_grid && !_grid.has_street && !_grid.water_rocks_gem && _grid.water&&!_grid.shipyard&&!_grid.ship&&!_grid.water_rocks&&!_grid.ship_wreck&&!_grid.ship_wreck_small&&!_grid.water_generator && !IsAnyBuildingFromBUILDINGSinGrid(_grid));
}
function IsBuildable2(_grid){
    return (_grid && !_grid.has_street && !_grid.uranium_cloud && IsNoBuilding(_grid)?1:0);
}
function IsNoBuilding(_grid,_ignoreFarmField){
    return (_grid && !IsAnyBuildingFromBUILDINGSinGrid(_grid) && ((!_grid.farmfield && !_grid.farmfield2) || _ignoreFarmField) && !_grid.mesto && !_grid.airplane_wreck && !IsBrokenCity(_grid) && !_grid.uranium_cloud && !_grid.uranium_barrel && !_grid.artifact && !_grid.vidiek && !_grid.broken_power ?1:0)
}
function IsMineNearBy(_x,_y){ //can_connect_to_neighbour_mine
    for(let _key in BUILDINGS_THAT_MINES_CAN_BE_CONNECTED_TO){
        if(IsTileNeighbour(_x,_y,_key)){
            return true;
        }
    }
    return false;
    //refactor by using: BUILDINGS_THAT_MINES_CAN_BE_CONNECTED_TO
    // return IsTileNeighbour(_x,_y,'iron_mine')||IsTileNeighbour(_x,_y,'rock_mine')|| IsTileNeighbour(_x,_y,'golden_mine')|| IsTileNeighbour(_x,_y,'golden_mine_2')|| IsTileNeighbour(_x,_y,'premium_iron_mine')|| IsTileNeighbour(_x,_y,'rock_mine_boost')|| IsTileNeighbour(_x,_y,'gem_mine');
}
function IsAnyBuildingFromBUILDINGSinGrid(_grid){
    for(let _kb in BUILDINGS_BY_KEYS){
        if(_grid[_kb]){
            return true;
        }
    }
    return false;
}
function IsForbiddenTileOk(_b,_grid){
    if(!_b || !_b.forbidden_tiles){
        return true;
    }
    if(_grid){
        for(let _type of _b.forbidden_tiles){
            if(_grid[_type]){
                return false;
            }
        }
    }
    return true;
}

function GetSingleBuildingAction(_grid,_key,_floatingRight){
    let _b = BUILDINGS_BY_KEYS[_key];
    if(_b){
        let _desc=GetFullBuildingDescription(_grid,_b);
        let _image = _b.image;
        if(_grid.mountain && _b.grid_key=='windmill'){
            _image = 'windmill_mountain';
        }
        if(hrac.storage[_b.grid_key]){
            _image = [_image,'ui/from_storage'];
        }

        return  ActionDiv('BuildBuilding('+_grid.x+','+_grid.y+','+_b.id+');',_image,_desc,GetText(_b.name),_floatingRight,_b.is_terrain_modifier,{grid_key:_key, disabled:!hrac.storage[_b.grid_key] && _b.required_level && !HasLevel(_b.required_level)});
    }else{
        console.error('unknown building action')
        return '';
    }
}

function GetBuildingInfoDescriptionPopup(_key){
    let _b = BUILDINGS_BY_KEYS[_key];
    if(_b){
        let _out='';
        let _h=150;
        if(all_images[_b.grid_key] && all_images[_b.grid_key].shift){
            _out+='<div style="height:'+all_images[_b.grid_key].shift*(_h/70)+'px;"></div>';
            
        }
        _out+=GetBuildingMultiTileImage(_b,_h,'')+BRBR;
        _out+=GetFullBuildingDescription(null,_b,1,1);
        
        DoInfoPopupWithOptions(_out,GetText(_b.name),{centerised:1, max_width:GetSmallerPopupWidth(100)});
    }    
}


function GetFullBuildingDescription(_grid,_b,_fullText,_except_storage_or_lvl,_noname){
    if(isActionGridView && !_fullText) return '';
    
    let _desc = '';
    let _enabled = HasLevel(_b.required_level);
    if(!_noname){
        _desc += Bold(GetText(_b.name));
        if(!_grid)_grid=GetGridData(0,0);
    
        if(_b.description || _b.descriptionFun){
            _desc += ' - ';
        }
        if(_b.description){
            _desc += GetText(_b.description);
        }
        if(_b.descriptionFun){
            _desc += eval(_b.descriptionFun);
        }
        _desc += BR;
    }else{
        if(_b.sale_info){
            _desc+=ColorSpan('var(--light-purple)',_b.sale_info())+BR;
        }

    }
    if(_b.gold_income>0){
        _desc += GetText3('Produces: ')+PMat(PCislo(_b.gold_income),'gold')+PER_INCOME_SHORT+BR;
    }
    if(_b.food_income>0){
        _desc += GetText3('Produces: ')+PMat(PCislo(_b.food_income),'food')+PER_INCOME_SHORT+BR;
    }


    if(_b.electricity || _b.polution){
        if(_b.electricity<0){
            _desc += GetText3('Drain: ')+PElectricity(Math.abs(_b.electricity));
        }
        if(_b.electricity>0){
            _desc += GetText3('Produces: ')+PElectricity(Math.abs(_b.electricity));
        }
        if(_b.polution){
            _desc += (_b.electricity?SPC:'')+PPollution(_b.polution);
        }
        _desc += BR;
    }
    if(_b.restoration_strength){
        _desc += '+'+(_b.restoration_strength)+RestorationIcon()+GetText('Restoration strength')+BR;
    }
    if(_b.requires_water_near_by){
        _desc += GetText('Must be built max {att1} tiles from water.',_b.requires_water_near_by)+BR;
    }
    if(!_except_storage_or_lvl){

        if(hrac.storage[_b.grid_key]){
            _desc += GetText3('In storage: ')+(hrac.storage[_b.grid_key]?hrac.storage[_b.grid_key]:0)+BR;
        }else{
            if(_enabled){
                if(_b.cost_fun){
                    _desc += GetText3('Cost: ')+PMats(eval(_b.cost_fun))+BR;
                    
                }else if(_b.cost){
                    _desc += GetText3('Cost: ')+PMats(_b.cost)+BR;
                }
            }else{
                _desc += Bold(GetText('Level {att1} required',_b.required_level))+BR;
            }
        }
    }

    return _desc;
}


function GetBuildingDeleteActionBut(_grid,_floatingRight){
    let _out='';
    for(let _key in BUILDINGS_BY_KEYS){
        if(_grid[_key]){
            if(!BUILDINGS_BY_KEYS[_key].disabled_storage && ( (BUILDINGS_BY_KEYS[_key].cost && BUILDINGS_BY_KEYS[_key].cost.gems) || BUILDINGS_BY_KEYS[_key].can_put_into_storage || HasUpgrade(77))){
                // storage_icons:['water','ship_big','ui/back_button']
                _out+= ActionDiv('RemoveBuilding('+_grid.x+','+_grid.y+','+(BUILDINGS_BY_KEYS[_key].id)+');',BUILDINGS_BY_KEYS[_key].storage_icons?BUILDINGS_BY_KEYS[_key].storage_icons:'ui/into_storage',GetText('Put into Storage')+';'+BR+GetText3('In storage: ')+(hrac.storage[_key]?hrac.storage[_key]:0),GetText('into storage'),_floatingRight);
            }else{
                _out+= ActionDiv('RemoveBuilding('+_grid.x+','+_grid.y+','+(BUILDINGS_BY_KEYS[_key].id)+');','ui/buldoser',GetText('Remove this building: {att1}',GetText(BUILDINGS_BY_KEYS[_key].name))+BR+GetText3('Cost:')+PMat(BUILDINGS_BY_KEYS[_key].destroy_gold_cost,1),BUILDINGS_BY_KEYS[_key].remove_str?GetText(BUILDINGS_BY_KEYS[_key].remove_str):GetText('destroy'),_floatingRight);
            }
        }
    }
    // if(IsRubble(_grid))_out+=BRBR;
    return _out;
}


const POSSIBLE_IN_STORAGE=['water_generator'];
function PutIntoStorage(_grid,_co){ //topackage to package puttostash put to stash
    if(POSSIBLE_IN_STORAGE.includes(_co) || HasUpgrade(77))
    if(_grid[_co]){
        let _b = null;
        if(_grid.building_type && BUILDINGS_BY_KEYS[_grid.building_type]){
            _b = BUILDINGS_BY_KEYS[_grid.building_type]; //ale tusim _co = _grid.building_type;
        }
        if(!_b){
            return false;
        }
        if(_b.disabled_storage){
            return false;
        }
        

        RemoveBuildingFuns2(_grid,_b);
        delete(_grid[_co]);
        if(_grid.shipyard){
            _grid.shipyard=false;
            _grid.has_street=false;
            TryRemoveStreet(_grid.x,_grid.y,0,1,1);
            
        }
        
        delete(_grid.building_type);
        PootacajOkoliteCesty(_grid);
        // CloseBottomMenu();
        if(BUILDINGS_BY_KEYS[_co].storage_quick_tool_also_builds){
            TryShowQuickTool('b',_co);
        }else{
            TryShowQuickTool(8,_co);
        }
        PlaySound('badge_alert');
        last_tanker_grid_clicked=null;

        if(_b.pollution_cloud){
            RemovePolutionCloud(_grid);
        }

        if(!hrac.storage[_co]){
            hrac.storage[_co]=0;
        }
        hrac.storage[_co]++;
        if(_co=='ship_big'){
            if(_grid.ship_food_income){
                AddFloatingTextToGrid(_grid,'-'+GetText('{att1} food income',_grid.ship_food_income),'#aeffde');
            }
            delete(_grid.ship_food_income);
        }else if(_co=='event_ship'){
            if(_grid.event_fish_income){
                AddFloatingTextToGrid(_grid,'-'+GetText('{att1} Event-Fish income',PMat(_grid.event_fish_income,'event_fish')),'#aeffde');
            }
            
            allEventShips=allEventShips.filter(g=>g.x!=_grid.x||g.y!=_grid.y);
            delete(_grid.event_fish_income);
        }else{
            if(!quickToolActive){
                AddFloatingTextToGrid(_grid,GetText('Put into Storage'))
            }
        }
        if(_b){
            ReCalculate9BlocksAndStatsByGrid(_grid,_b.big_recalculations);// ZratajHracStats();
            RefreshHeader();
        }
        _grid.has_street_connection_from=null;
        if(_b.image_road_rotations_base){
            AutoRotateRails(_grid,1);
        }

        drawSingleFrame=1;
        // console.log(hrac.storage)
        return true;
    }
    return false;
}

function IsInStorage(_co,_odober){
    if(hrac.storage[_co]&&hrac.storage[_co]>0?hrac.storage[_co]*1:0){
        if(_odober){
            hrac.storage[_co]--;
        }
        return hrac.storage[_co]+1;
    }
    return 0;
}

function IncrementInStorage(_type){
    if(!hrac.storage[_type]){
        hrac.storage[_type]=0;
    }
    hrac.storage[_type]++;

}


function RemoveBuilding(_x,_y,_id,_confirmed){
    let _b = BUILDINGS.find(b=>b.id == _id);
    let _grid = GetGridData(_x,_y);
    if(_b && _grid){
        if(!_b.disabled_storage && ((_b.cost && _b.cost.gems) || _b.can_put_into_storage || HasUpgrade(77))){
            if( _grid.building_type && HasUpgrade(77)){
                if(PutIntoStorage(_grid,_grid.building_type)) return false;
            }
            for(let _co of POSSIBLE_IN_STORAGE){
                if(PutIntoStorage(_grid,_co)) return false;
            }
        }else{

            if(((_b.cost && _b.cost.gold) && _b.cost.gold > 180000) || !HasLevel(10)){
                if(!AreYouSure(_confirmed,GetText('Are you sure you want to destroy {att1}',GetText(_b.name)),GetText('Expensive destroy'),'RemoveBuilding('+_x+','+_y+','+_id+',1);',GetText('destroy'))){
                    PlayTap();
                    return false;
                }
            }


            if(_grid.farm || _grid.farm_big){
                let _r=10;
                for(let _xx=_grid.x-_r;_xx<=_grid.x+_r;_xx++){
                    for(let _yy=_grid.y-_r;_yy<=_grid.y+_r;_yy++){
                        if(GetGridData(_xx,_yy)){
                            let _g = GetGridData(_xx,_yy);
                            if(_g.belongs_to_farm && _g.belongs_to_farm.x == _grid.x && _g.belongs_to_farm.y == _grid.y){
                                delete(_g.belongs_to_farm);
                                delete(_g.farmfield_used);
                                // console.log(_g)
                            }
                            
                        }
                    }
                }
            }

            if(!_b.destroy_gold_cost || MamDostZlata(_b.destroy_gold_cost,1)){
                
                RemoveBuildingFuns2(_grid,_b);

                delete(_grid[_b.grid_key]);
                delete(_grid.building_type);
                delete(_grid.ignores_connection);
                if(_grid.shipyard){
                    delete(_grid.has_street);
                    TryRemoveStreet(_grid.x,_grid.y,1);
                    delete(_grid.shipyard);
                    // RefreshRoadConnections();//TOTO ZACHOVAT
                }
                if(_b.requires_street){
                    PootacajOkoliteCesty(_grid);
                }
                if(_b.buildEffectPower){
                    AddBuildEffect(_grid,_b.buildEffectPower+2);
                }else{
                    AddBuildEffect(_grid,3);                    
                }
                if(_b.polution){
                    hrac.polution-=_b.polution;
                    if(IsPolutionChanged()){

                    }
                }
                if(_b.pollution_cloud){
                    RemovePolutionCloud(_grid);
                }
                if(_b.polution>10){
                    AddHealEffect(_grid,3);
                }
                if(_grid.countedBy){
                    delete(_grid.countedBy);
                }
                
                if(_b.image_road_rotations_base){
                    AutoRotateRails(_grid,1);
                }
                ShowQuickTool('r',_b.grid_key);
                anythingBuiltDestroyed++;
                anyActionDone++;
                delete(_grid.has_street_connection_from);
                PlaySound('bulldozer');

                if(_b.cost && _b.cost.steel && GetPlayerUpgradeValue(73)){
                    AddMat(Mro(GetPlayerUpgradeValue(73)*0.01*_b.cost.steel),'steel',0,0,_grid);
                }


                if(!_b.no_recalculations){
                    ReCalculate9BlocksAndStatsByGrid(_grid,_b.big_recalculations);// ZratajHracStats();
                }
                RefreshHeader();
                if(!quickToolActive){
                    OpenGridMenu();
                }
                drawSingleFrame=1;
                return true;
            }
        }
    }
}

function RemoveBuildingFuns2(_grid,_b){

    if(_grid.tanker){
        OdoberOilRigsFromTanker(_grid);
    }
    if(_grid.foundry){
        OdoberMinesFromFoundry(_grid);
    }

    if(_b?.isMineConnectionOrigin){
        mineConnectionOrigin=mineConnectionOrigin.filter(_g=>_g&&_g.x!=_grid.x || _g.y!=_grid.y);
    }

    if(_grid.farm || _grid.farm_big){
        allFarms=RemoveGridFromArray(allFarms, _grid);
    }

}


function UpgradeGemBuilding(_x,_y,_doUpgrade){
    let _grid = GetGridData(_x,_y);
    if(_grid && _grid.building_type){
        let _out='';
        let _b1= BUILDINGS_BY_KEYS[_grid.building_type];
        if(_b1 && _b1.upgrades_to && _b1?.cost?.gems){
            let _b2 = BUILDINGS_BY_KEYS[_b1.upgrades_to];
            if(_b2?.cost?.gems){
                let _cost = _b2.cost.gems - _b1.cost.gems;
                if(_doUpgrade){
                    if(MamDostGemov(_cost,1)){
                        hrac.gems_used_upgrade_buildings+=_cost;
                        _grid[_grid.building_type] = 0;
                        _grid.building_type = _b2.grid_key;
                        _grid[_grid.building_type] = 1;

                        // _grid.golden_mine_premium = 0;
                        // _grid.golden_mine_premium_2 = 1;
                        PlaySound('upgrade');
                        CloseBasicPopup();
                        CloseBottomMenu();
                        AddBuildEffect(_grid,5);
                        ReCalculate9BlocksAndStatsByGrid(_grid,1,1);
                        RefreshHeader();
                    }
                }else{
                    PlayTap();
                    _out+=GetBuildingMultiTileImage(_b1,100,'')+SPC;
                    _out+=GetIconImage('upsalebut',80,'');
                    
                    _out+=SPC+GetBuildingMultiTileImage(_b2,100,'');
                    
                    _out+=BRBR+BRBR+FSize(24,GetText3('Cost:')+Bold(PMat(_cost,'gems',24)));
                    _out+=BRBR+Button(GetText('UPGRADE'),'UpgradeGemBuilding('+_x+','+_y+',1);',{super_button:'purple'});
                    
                    DoBasicPopup(_out,GetText('UPGRADE'),{centerised:1});
                }
            }
        }
    }
}

/** 

  XXXXXX   X    X  XXXXX  XXX     XXXXXX 
   X   XX  X    X    X     X       X   XX
   X    X  X    X    X     X       X    X
   X   XX  X    X    X     X       X    X
   XXXXX   X    X    X     X       X    X
   X   XX  X    X    X     X       X    X
   X    X  X    X    X     X       X    X
   X   XX  X    X    X     X   X   X   XX
  XXXXXX    XXXX   XXXXX  XXXXXX  XXXXXX 

*/

let onlyOnBuildingId=0;
function GetBuildingActions(_grid,_onlyFloatings,_category){
    let _out='';
    for(let _b of BUILDINGS){
        if(!onlyOnBuildingId || onlyOnBuildingId==_b.id)
        if(!_b.event_type || _b.event_type==GetEventType(1))
        if(_category==undefined || (_category==1 && _b.is_terrain_modifier) || (_category==0 && !_b.is_terrain_modifier) )
        if(_b.show_even_if_level_not_met || (_b.tease_from_level && HasLevel(_b.tease_from_level)) || !_b.required_level || HasLevel(_b.required_level) || hrac.storage[_b.grid_key])
        if(_grid && (!_grid.has_street || _b.display_even_if_has_street) && (!_grid.uranium_cloud || _b.works_on_uranium) && !_grid.airplane_wreck && _grid.building_type != _b.grid_key && (_b.works_even_with_building || IsNoBuilding(_grid)))
        if(!_b.only_specific_tiles || HasGridOneOfTheTiles(_grid,_b.only_specific_tiles))
        if(!_b.special_condition || eval(_b.special_condition))
        if(IsForbiddenTileOk(_b,_grid))
        if(!_b.requires_upgrade || GetPlayerUpgradeValue(_b.requires_upgrade))
        if((_b.is_shipyard && CanBuildShipyard(_grid)) || (_b.is_water_building && IsWaterBuildable(_grid)) || (!_b.is_shipyard && !_b.is_water_building && (_b.only_specific_tiles || IsStandardGroundBuildableTile(_grid))) || CanBuildBridgeOnWater(_grid,_b) || CanBuildOverStraightRoad(_grid,_b) || CanBuildOnStraightRivers(_grid,_b) || (_grid.hill && (_b.hill_override||_b.allows_build_on_hill))){
            if((_onlyFloatings && _b.floating_button) || (!_onlyFloatings && !_b.floating_button)){
                _out+= GetSingleBuildingAction(_grid,_b.grid_key,_b.floating_button);
            }
        }
    }

    if(!isActionGridView && _category==0){
        _out+=GetBuildingDeleteActionBut(_grid,_onlyFloatings);
    }
    
    
    return _out;
}

function CanBuildOnStraightRivers(_grid,_b){
    return ((_grid.river==11 || _grid.river==12) && !_grid.building_type && _b.allows_build_on_straight_rivers );
}
function CanBuildBridgeOnWater(_grid,_b){
    return (_grid.water && !_grid.building_type && _b.image_water_bridge_11 );
}
function CanBuildOverStraightRoad(_grid,_b){
    return (_grid.has_street && !_grid.building_type && _b.image_over_road_11);
}

let enabledRecalculations=true;
function BuildBuilding(_x,_y,_id,_confirmed,_confirmed2){
    let _b = BUILDINGS.find(b=>b.id == _id);
    let _grid = GetGridData(_x,_y);
    if(_b && _grid){
        if(!hrac.storage[_b.grid_key] && _b.required_level  && !HasLevel(_b.required_level)){
            LowLevelPopup(_b.required_level);
            return false;
        }
        
        if(_grid && (!_grid.has_street || _b.display_even_if_has_street) && (!_grid.uranium_cloud || _b.works_on_uranium) && (_b.works_even_with_building || IsNoBuilding(_grid,1)))
        if(!_b.requires_upgrade || GetPlayerUpgradeValue(_b.requires_upgrade))
        if(!_b.special_use_condition || eval(_b.special_use_condition))
        if(IsForbiddenTileOk(_b,_grid))
        if(!_b.special_build_condition || eval(_b.special_build_condition))
        if((_b.is_shipyard && CanBuildShipyard(_grid)) || (_b.is_water_building && IsWaterBuildable(_grid)) || (!_b.is_shipyard && !_b.is_water_building && ((!DoesBuildingRequireConnection(_b.grid_key) || !_b.requires_street || HasStreetNearBy(_x,_y)) || CanUseAdvancedInfrastucturePlacement(_x,_y) || (_b.can_connect_to_same_building && IsTileNeighbour(_x,_y,_b.grid_key)) || (_b.can_connect_to_these_buildings && IsAnyOfTheseBuildingsNearBy(_x,_y,_b.can_connect_to_these_buildings)) || (_b.can_connect_to_neighbour_mine && IsMineNearBy(_x,_y))))){

            if(_b.req_population){
                if(_b.req_population * hrac.buildings[_b.grid_key] > hrac.population){
                    let _out=GetText('You require {att1} population per building of type {att2}. Upgrade towns to have higher population.',[_b.req_population,_b.name]);
                    DoBasicPopup(_out,GetText('Information'),{centerised:1});
                    PlaySound('ee');
                    return false;
                    
                }
            }
            if((_grid.fish_big || _grid.fish_huge) && !_b.big_fish_placement_is_ok && (_b.is_water_building || _b.is_shipyard)){
                if(!AreYouSure(_confirmed2,GetText('ays_bigfish'),GetText('Big fish!'),'BuildBuilding('+_x+','+_y+','+_id+',0,1);',GetText('Remove fish'))){
                    PlayTap();
                    return false;
                }
            }
            if(_b.grid_key == 'chip_factory'){
                let _isFoundryNearBy= GetPlayerUpgradeValue(46)?1:GetAmountOfSpecificGridsAroundGrid(_x,_y,GetChipFoundryDistance(),'foundry');
                if(!_isFoundryNearBy && !AreYouSure(_confirmed2,GetText('ays_chipfoundry',GetChipFoundryDistance()),'','BuildBuilding('+_x+','+_y+','+_id+',0,1);',GetText('build'))){
                    PlayTap();
                    return false;
                }
            }
            if(_b.grid_key == 'foundry'){
                let _ironmine= GetAmountOfSpecificGridsAroundGrid(_x,_y,GetFoundryRange(),['iron_mine','premium_iron_mine']);
                if(!_ironmine && !AreYouSure(_confirmed2,GetText('ays_foundrymine',GetFoundryRange()),'','BuildBuilding('+_x+','+_y+','+_id+',0,1);',GetText('build'))){
                    PlayTap();
                    return false;
                }
            }
            if(_b.confirmation_required && !quickToolActive){
                if(!AreYouSure(_confirmed2,_b.confirmation_text?_b.confirmation_text:GetText3('Are you sure to continue action:')+_b.name,'','BuildBuilding('+_x+','+_y+','+_id+',0,1);',GetText('yes'))){
                    PlayTap();
                    return false;
                }
            }


            if(_b.only_specific_tiles || ((_b.is_shipyard || _b.is_water_building) && IsWaterBuildable(_grid)) || CanBuildBridgeOnWater(_grid,_b) || CanBuildOverStraightRoad(_grid,_b) || CanBuildOnStraightRivers(_grid,_b) || (!_b.is_water_building && (IsStandardGroundBuildableTile(_grid) || (_grid.hill && (_b.hill_override || _b.allows_build_on_hill)))))
            if(!_b.only_specific_tiles || HasGridOneOfTheTiles(_grid,_b.only_specific_tiles)){
                if(_b.requires_water_near_by){
                    if(!IsClearedTileOfTypeAround(_grid.x,_grid.y,_b.requires_water_near_by,['water']) && !IsClearedTileOfTypeAround(_grid.x,_grid.y,_b.requires_water_near_by,['river'])){
                        PlaySound('ee');
                        AddFloatingError(GetText('Requires water {att1} tiles nearby!',_b.requires_water_near_by));
                        return false;
                    }
                }

                if(_b.is_shipyard){
                    if(IsShipyardNearby(_x,_y,0) || HasStreetNearBy(_x,_y,0)){
                        //ok
                    }else{
                        AddFloatingError(GetText('To build shipyard you require street or another shipyard nearby!'));
                        PlaySound('ee');
                        return false;
                    }
                }

                if(_b.cost && _b.cost.gems){
                    if(!IsInStorage(_b.grid_key) && !AreYouSure(_confirmed||hrac.nastavenia.gem_purchase_confirmation,GetText('Are you sure you want to buy this {att1} for {att2} gems?',[GetText(_b.name),PMat(_b.cost.gems,2)]),GetText('Premium purchase'),'BuildBuilding('+_x+','+_y+','+_id+',1,1);',GetTextCAPS('BUY'),{gem_purchase_confirmation:1,color:'teal'})){
                        PlayTap();
                        return false;
                    }
                }
        
                let _cost = _b.cost;
                let _wasInStorage = IsInStorage(_b.grid_key);

                if(_b.cost_fun)_cost=eval(_b.cost_fun);
                if(IsInStorage(_b.grid_key,1) || !_cost || (MamDostMats(_cost,1))){
                    CheckNewTowns_part1(_grid);
                    if(_b.grid_key.includes('notsaved')){
                        // delete(_b.grid_key);
                    }else{
                        _grid[_b.grid_key]=1;
                        _grid.building_type=_b.grid_key;
                    }
                    let _bigRecalculation = _b.big_recalculations?true:false;
                    if(!_grid.is_connected){
                        _grid.is_connected2=true;
                    }
                    _grid.is_connected=true;
                    if(BUILDING_WITHOUT_CONNECTION_REQUIREMENT[_b.grid_key]){
                        _grid.ignores_connection=true;
                    }
                    if(_b.isMineConnectionOrigin){
                        mineConnectionOrigin.push(_grid);
                    }
                    if(_b.image_road_rotations_base){
                        AutoRotateRails(_grid,1);
                    }
    
                    // if(HasStreetNearBy(_x,_y) || CanUseAdvancedInfrastucturePlacement(_x,_y) || (_b.can_connect_to_neighbour_mine && IsMineNearBy(_x,_y))  || (_b.can_connect_to_same_building && IsTileNeighbour(_x,_y,_b.grid_key))){
                    // }else{
                    //     _grid.ignores_connection=true;
                    // }
                    if(!_b.big_fish_placement_is_ok){
                        delete(_grid.fish_big);
                        delete(_grid.fish_huge);
                    }
                    let _wasForest=_grid.forest;
                    if(_grid.forest || _grid.farmfield || _grid.farmfield2){
                        _bigRecalculation=true;
                    }
                    delete(_grid.forest);
                    delete(_grid.tree_cutted);
                    if(_b.extraBuildFun){
                        eval(_b.extraBuildFun);
                    }
                    if(_b.hill_override){
                        delete(_grid.hill);
                    }
                    // console.log('staviam domcek',_id);
                    if(!_b.display_even_if_has_street && !_b.grid_key.includes('notsaved')){
                        PootacajOkoliteCesty(_grid);
                    }
                    if(_b.polution){
                        hrac.polution+=_b.polution;
                        if(IsPolutionChanged()){

                        }
                    }
                    if(_b.pollution_cloud){
                        AddGridCloud(_grid,_b.pollution_cloud,1);
                    }
                    if(_b.id==32){
                        AddCollectableGemLocation(_grid);
                    }

                    RemoveFarmfield(_grid);
                    if(_grid.farm || _grid.farm_big){
                        allFarms.push(_grid)
                    }
                    

                    if(enabledRecalculations){
                        if(!_b.no_recalculations){
                            ReCalculate9BlocksAndStatsByGrid(_grid,!_bigRecalculation);// ZratajHracStats();
                        }
                    }
                    RefreshHeader();
                    if(!quickToolActive){
                        // OpenGridMenu();
                        if(!_b.ignoreGridMenuHandle){

                            if(_b.reopen_grid_menu){
                                OpenGridMenu();
                            }else{
                                CloseGridMenu();
                            }
                        }                        
                    }
                    if(_b.buildEffectPower){
                        AddBuildEffect(_grid,_b.buildEffectPower);
                    }
                    if(_b.mudEffectPower){
                        AddMudEffect(_grid,_b.mudEffectPower);
                    }
                    if(_b.healEffectPower){
                        AddHealEffect(_grid,_b.healEffectPower,45);
                    }
                    CheckNewTowns_part2(_grid);
                    if(_b.has_quick_tool){
                        ShowQuickTool('b',_b.grid_key);
                    }else{
                        QuitQuickTool();
                    }
                    if(_b.sound){
                        if(_b.sound!='none'){
                            PlaySound(_b.sound);
                        }
                    }else{
                        PlaySound('hammer_hit_'+MyRand(1,3));
                    }
                    if(_b.gold_income){
                        // AddFloatingTextToGrid(_grid,GetText('+{att1} income',_b.gold_income),'#72d84c');
                        AddFloatingTextToGrid(_grid,'+'+PMat(_b.gold_income,'gold')+PER_INCOME_SHORT,'#72d84c');
                        if(_wasForest){
                            AddFloatingTextToGrid(_grid,'-'+PMat(GetForestIncome(_wasForest),'gold')+PER_INCOME_SHORT,'red',1);

                        }
                    }

                    if(!_b.grid_key.includes('notsaved')){
                        anythingBuiltDestroyed++;
                    }
                    TryFinishBlinkingTutorial(_grid);
                    anyActionDone++;
                    drawSingleFrame=1;

                    if(_wasInStorage && quickToolActive && !IsInStorage(_b.grid_key)){
                        if(_b?.cost?.gems || !HasLevel(_b.required_level)){
                            QuitQuickTool();
                        }
                    }

                    return true;
                }
            }
        }else{
            let _amountOfWater = GetAmountOfNeighboursOfType(_grid.x,_grid.y,'water');
            if(_b.can_connect_to_neighbour_mine){
                if(_grid.golden_island){
                    AddFloatingError(GetText('Connect shipyard!'));
                }else{
                    if(_amountOfWater>0){
                        AddFloatingError(GetText('Connect road, shipyard or other mine.'));
                    }else{
                        AddFloatingError(GetText('Connect road or other mine.'));
                    }
                }
            }else if(_b.can_connect_to_same_building){
                if(_amountOfWater>0){
                    AddFloatingError(GetText('Connect road, shipyard or other {att1}!',GetText(_b.name)));
                }else{
                    AddFloatingError(GetText('Connect road or other {att1}!',GetText(_b.name)));
                }
            }else{
                if(_amountOfWater>0){
                    AddFloatingError(GetText('Build road or shipyard nearby!'));
                }else{
                    AddFloatingError(GetText('Build road nearby!'));
                }
            }
        }
        
    }
    return false;
}


function HasGridOneOfTheTiles(_grid,_tiles){
    for(let _t of _tiles){
        if(_t.indexOf('+')>=0){
            let _types = _t.split('+');
            let _posOK = true;
            for(let _t2 of _types){
                if(!_grid[_t2]){
                    _posOK=false;
                    break;
                }
            }
            if(_posOK){
                return true;
            }

        }else{
            if(_grid[_t]){
                return true;
            }
        }
    }
    return false;
}

function GetBuildingDescription(_grid){
    if(_grid)
    for(let _key in BUILDINGS_BY_KEYS){
        if(_grid[_key]){
            let _b= BUILDINGS_BY_KEYS[_key];
            let _out='';
            if(!_b.disable_label){
                _out+= Bold(GetText(_b.name));
            }
        
            if(_b.description || _b.descriptionFun){
                _out += ' - ';
            }
            if(_b.description){
                _out += GetText(_b.description);
            }
            if(_b.descriptionFun){
                _out += eval(_b.descriptionFun);
            }
            _out+=BR;
            if(_b.gold_income>0){
                _out += GetText3('Produces: ')+PMat(PCislo(_b.gold_income),'gold')+PER_INCOME_SHORT+';'+BR;
            }
            if(_b.food_income>0){
                _out += GetText3('Produces: ')+PMat(PCislo(_b.food_income),'food')+PER_INCOME_SHORT+';'+BR;
            }

            // +(_b.descriptionFun?' - '+eval(_b.descriptionFun):'')+BR;
            if(_b.electricity || _b.polution){
                if(_b.electricity<0){
                    _out += GetText3('Drains: ')+PElectricity(Math.abs(_b.electricity))+';';
                }
                if(_b.electricity>0){
                    _out += GetText3('Produces: ')+PElectricity(Math.abs(_b.electricity))+';';
                    if(hrac.buildings[_b.grid_key] > 1){
                        _out += BR+GetText('Total power generated by {att1}: {att2}',[PCislo(hrac.buildings[_b.grid_key])+' '+GetText(_b.name),PCislo(Math.abs(_b.electricity*hrac.buildings[_b.grid_key]))+ElectricityIcon()])+'; ';
                        
                    }
                }
                if(_b.polution){
                    _out += (_b.electricity?BR:'')+PPollution(_b.polution)+';';
                    if(!HasLevel(30)){
                        _out += ' '+ClickSpan('('+GetText('tell me more')+')','PollutionExplanationPopup();');
                    }
                }
                _out += BR;
            }
            if(_b.restoration_strength){
                _out += '+'+(_b.restoration_strength)+RestorationIcon()+GetText('Restoration strength')+BR;
            }
        
            if(_b.grid_key=='event_ship') _out += ExtraEventShipDesc(_grid);

            return _out;

        }
    }
    return '';
}



function AnyNewBuildingDrawn(_ctx,_grid,_gridSirka,_OPTIMISED,_1pixelSpace,_1pixelLine){
    if(_grid.building_type){
        let _kb = _grid.building_type;
        let _image = BUILDINGS_BY_KEYS[_kb].image
        if(_grid[_kb] && BUILDINGS_BY_KEYS[_kb] && allBitMaps[_image] && !_grid.river_trees){
            if(_OPTIMISED || !BUILDINGS_BY_KEYS[_kb].max_view_radius || zoomScale>BUILDINGS_BY_KEYS[_kb].max_view_radius){
                if(BUILDINGS_BY_KEYS[_kb].image_road_rotations_base){
                    if(BUILDINGS_BY_KEYS[_kb].image_river_11 && _grid.river==12){ 
                        _image=BUILDINGS_BY_KEYS[_kb].image_river_11;
                    }else if(BUILDINGS_BY_KEYS[_kb].image_river_12 && _grid.river==11){
                        _image=BUILDINGS_BY_KEYS[_kb].image_river_12;
                    }else if(BUILDINGS_BY_KEYS[_kb].image_water_bridge_12 && _grid.water && _grid.road_rotation==5){
                        // _image=BUILDINGS_BY_KEYS[_kb].image_water_bridge_12;
                        _image=BUILDINGS_BY_KEYS[_kb].image_road_rotations_base+5;
                        // _ctx.drawImage(allBitMaps[_image],0,-images_y_shift[_image],_gridSirka+_1pixelSpace,images_height[_image]+_1pixelSpace);
                        // _image=BUILDINGS_BY_KEYS[_kb].image_water_bridge_12;
                    }else if(BUILDINGS_BY_KEYS[_kb].image_over_road_12 && _grid.has_street && _grid.road_rotation==12){
                        _image=BUILDINGS_BY_KEYS[_kb].image_over_road_12;
                    }else if(BUILDINGS_BY_KEYS[_kb].image_over_road_11 && _grid.has_street && _grid.road_rotation==11){
                        _image=BUILDINGS_BY_KEYS[_kb].image_over_road_11;
                    }else if(BUILDINGS_BY_KEYS[_kb].image_water_bridge_12 && _grid.water && _grid.road_rotation==12){
                        _image=BUILDINGS_BY_KEYS[_kb].image_water_bridge_12;
                    }else if(BUILDINGS_BY_KEYS[_kb].image_water_bridge_11 && _grid.water && _grid.road_rotation==11){
                        _image=BUILDINGS_BY_KEYS[_kb].image_water_bridge_11;
                    }else{
                        _image=BUILDINGS_BY_KEYS[_kb].image_road_rotations_base+_grid.road_rotation;
                    }
                }else if(BUILDINGS_BY_KEYS[_kb].image_rotation_base){ //rotated train station, alebo teda vlastne hoc aka budova s image_rotation_base
                    if(_grid.rotation){
                        _image=BUILDINGS_BY_KEYS[_kb].image_rotation_base+'_horiz';
                    }else{
                        _image=BUILDINGS_BY_KEYS[_kb].image_rotation_base+'_vert';
                    }
                }

                if(_gridSirka==70){
                    _ctx.drawImage(allBitMaps[_image],0,-images_y_shift[_image],_gridSirka+_1pixelSpace,images_height[_image]+_1pixelSpace);
                }else{
                    _ctx.drawImage(allBitMaps[_image],0,-(_gridSirka/gridSirka)*images_y_shift[_image],_gridSirka+_1pixelSpace,(_gridSirka/gridSirka)*images_height[_image]+_1pixelSpace);
                }
            }
            return true;
        }
    }
    return false;
}

function DoesBuildingRequireConnection(_buildingType){
    return !BUILDING_WITHOUT_CONNECTION_REQUIREMENT[_buildingType];
}

function CanUseAdvancedInfrastucturePlacement(_x,_y){
    if(!hasAdvancedInfrastructure){
        return false;
    }
    
    let _g2 = GetGridData(_x,_y+1);
    if(_g2 && _g2.building_type && !_g2.farmfield && !_g2.farmfield2 && !_g2.river_cleaner && _g2.is_connected){
        return true;
    }
    let _g4 = GetGridData(_x-1,_y);
    if(_g4 && _g4.building_type && !_g4.farmfield && !_g4.farmfield2 && !_g4.river_cleaner && _g4.is_connected){
        return true;
    }
    let _g6 = GetGridData(_x+1,_y);
    if(_g6 && _g6.building_type && !_g6.farmfield && !_g6.farmfield2 && !_g6.river_cleaner && _g6.is_connected){
        return true;
    }
    let _g8 = GetGridData(_x,_y-1);
    if(_g8 && _g8.building_type && !_g8.farmfield && !_g8.farmfield2 && !_g8.river_cleaner && _g8.is_connected){
        return true;
    }
    return false;
}


function GetFeatureTeasingInfo(_lvl,_prefix){
    let _out='';
    for(let _b of BUILDINGS ){
        if(!_b.hidden_in_levelup)
        if(_b.required_level == _lvl){
            if(_out){
                _out+=HR;
            }
            let _images=[];
            if(_b.show_tile_in_build_grid){
                if(Array.isArray(_b.show_tile_in_build_grid)){
                    for(let _image of _b.show_tile_in_build_grid){
                        _images.push(_image);
                    }
                }else{
                    _images.push(_b.show_tile_in_build_grid);
                }
            }
            _images.push(_b.image);
            if(!allBitMaps[_b.image])console.error(_b.image)
            let _diff = allBitMaps[_b.image].height-200;
            _out+='<div style="height:'+Math.max(20,_diff+5)+'px;"></div>'+Center(GetMultiTilesImages(_images,200,'info-tile-img2'));
            _out+='<div class="teasing_desc">'+GetFullBuildingDescription(null,_b,true);
            if(_b.level_up_info){
                _out+=ColorSpan('var(--light-purple)',_b.level_up_info());
            }
            _out+=BR;
            _out+='</div>';
        }
    }
    if(_lvl==QUICK_TOOL_LEVEL){
        _out+=BR+'<div class="teasing_desc">'+Bold(GetTextCAPS('QUICK TOOL'))+BRBR+GetText('QUICK_TOOL_tease')+'</div>';
    }
    if(_lvl==BIG_BRIDGES_LEVEL_REQUIRED){
        // GetMultiTilesImages([_underImage,_image],70,'info-tile-img2','HighLiteTile(\''+_key+'\');');
        _out+=BR+Center(GetMultiTilesImages(['water','streets/street_t4_11_bridge_big'],200,'info-tile-img2'));
        _out+='<div class="teasing_desc">'+Bold(GetText('Big bridges'))+BRBR+GetText('You are now able to build bridges over seas.')+'</div>';
    }
    if(_lvl==SHIPYARD_LEVEL_REQ+1){
        _out+=Center(GetMultiTilesImages(['water','ship'],200,'info-tile-img2'));
        _out+='<div class="teasing_desc">'+Bold(GetText('Fishing'))+BRBR+GetText('You are now able to use ships on fish to fish some food.')+'</div>';
    }
    if(_lvl==FOREST_3_LEVEL_REQ){
        _out+=BR+Center(GetMultiTilesImages(['tree3'],200,'info-tile-img2'));
        _out+='<div class="teasing_desc">'+Bold(GetText('Deep Forest'))+BR+GetTextC1('income')+': +'+PMat(GetForestIncome(3),1)+SPC+PPollution(-3)+'</div>';
    }
    if(_lvl==FOREST_2_LEVEL_REQ){
        _out+=BR+Center(GetMultiTilesImages(['tree2'],200,'info-tile-img2'));
        _out+='<div class="teasing_desc">'+Bold(GetText('Dense Forest'))+BR+GetTextC1('income')+': +'+PMat(2,1)+SPC+PPollution(-2)+'</div>';
    }

    if(_lvl==PAVED_ROAD_LEVEL_REQ){
        _out+=Center(GetMultiTilesImages(['grass','streets/street_t2_8'],200,'info-tile-img2'));
        _out+='<div class="teasing_desc">'+Bold(GetText('New Road type'))+BRBR+GetText3('You are now able to build new road type: ')+' '+Bold(GetRoadName(2))+BR+GetRoadDetail(2)+'</div>';
    }
    if(_lvl==STREET_LEVEL_REQ){
        _out+=Center(GetMultiTilesImages(['grass','streets/street_t3_8'],200,'info-tile-img2'));
        _out+='<div class="teasing_desc">'+Bold(GetText('New Road type'))+BRBR+GetText3('You are now able to build new road type: ')+' '+Bold(GetRoadName(3))+BR+GetRoadDetail(3)+'</div>';
    }
    if(_lvl==QUALITY_STREET_LEVEL_REQ){
        _out+=Center(GetMultiTilesImages(['grass','streets/street_t4_8'],200,'info-tile-img2'));
        _out+='<div class="teasing_desc">'+Bold(GetText('New Road type'))+BRBR+GetText3('You are now able to build new road type: ')+' '+Bold(GetRoadName(4))+BR+GetRoadDetail(4)+'</div>';
    }
    if(_lvl==ROAD_TYPE_5_LEVEL_REQ){
        _out+=Center(GetMultiTilesImages(['streets/street_t5_8'],200,'info-tile-img2'));
        _out+='<div class="teasing_desc">'+Bold(GetText('New Road type'))+BRBR+GetText3('You are now able to build new road type: ')+' '+Bold(GetRoadName(5))+BR+GetRoadDetail(5)+'</div>';
    }

    return (_out&&_prefix?_prefix+BR:'')+_out;
}

function ShowMeRandomBuildingOfType(_type){
    for(let _x in myGridData){
        for(let _y in myGridData[_x])if(myGridData[_x][_y]){
            let _grid=myGridData[_x][_y];
            if(_grid[_type]){
                ScrollToGrid(_grid,1.2);
                return true;
            }
        }
    }
    return false;
}
/** 

  XXXXXX   X    X  XXXXX  XXX     XXXXXX   XXXXX  X     X   XXXXX         XXXXXX  X    X  X     X   XXXXX 
   X   XX  X    X    X     X       X   XX    X    XX    X  XX   XX        X       X    X  XX    X  XX   XX
   X    X  X    X    X     X       X    X    X    X X   X  X              X       X    X  X X   X  X      
   X   XX  X    X    X     X       X    X    X    X X   X  X              X       X    X  X X   X  XX     
   XXXXX   X    X    X     X       X    X    X    X  X  X  X   XXX        XXXXX   X    X  X  X  X   XXXXX 
   X   XX  X    X    X     X       X    X    X    X  X  X  X    XX        X       X    X  X  X  X       XX
   X    X  X    X    X     X       X    X    X    X   X X  X     X        X       X    X  X   X X        X
   X   XX  X    X    X     X   X   X   XX    X    X   X X  XX   XX        X       X    X  X   X X  XX   XX
  XXXXXX    XXXX   XXXXX  XXXXXX  XXXXXX   XXXXX  X    XX   XXXXX         X        XXXX   X    XX   XXXXX 

*/


//scout tower
function GetScoutTowerRadius(){
    return 4+GetPlayerUpgradeValue(25,0)
}


function GetSwampActions(_grid){
    let _out='';
    { //chcelo by to refactornut a tieto buttony hodit do building db dole
        if( _grid.swamp && HasUpgrade(13)){
            _out+= ActionDiv('TryClearSwamp('+_grid.x+','+_grid.y+',0);','ui/clay',GetText3('Remove the swamp; cost: ')+PMat(5,8)+BR+GetText('You get 1 clay for every hill flatten'),GetText('Clear swamp'),isActionGridView,1);
        }
        if( _grid.swamp_rocks && HasUpgrade(13)){
            _out+= ActionDiv('TryClearSwamp('+_grid.x+','+_grid.y+',1);','ui/clay',GetText3('Remove the swamp; cost: ')+PMats(CLEAR_SWAMP_ROCKS_COST)+BR+GetText('You get 1 clay for every hill flatten'),GetText('Clear swamp'),isActionGridView,1);
        }
    }
    return _out;
}



//container storage
function GetStorageContainerRocks(){
    return 1500;
}
function GetStorageContainerSteel(){
    return 1000;
}
function GetStorageContainerChips(){
    return 3000;
}

function StorageContainerInfo(_grid){
    let _out='';
    _grid.same_neighbours=GetAmountOfNeighboursOfType(_grid.x,_grid.y,'storage_container');
    _grid.same_neighbours+=GetAmountOfNeighboursOfType(_grid.x,_grid.y,'storage_crane');
    let _bonus = 0.5*_grid.same_neighbours;
    _out+=GetText3('Extra storage for: ')+PMat((_bonus+1)*GetStorageContainerRocks(),'rocks');
    _out+=SPC+PMat((_bonus+1)*GetStorageContainerSteel(),'steel');
    if(HasLevel(COPPER_LEVEL_REQ)){
        _out+=SPC+PMat((_bonus+1)*GetStorageContainerChips(),'chips');
    }

    if(_bonus>0){
        _out+=BR+GetText('Extra storage bonus: {att1}% for neighbour containers',(_bonus*100));
    }else{
        _out+=BR+GetText('Gets extra storage bonus if neighbour tile is same container.');
    }
    if(!HasLevel(STORAGE_CRANE_LEVEL_REQ)){
        _out+=BR+GetText("There are more storage structures available on higher levels.");
    }
    return _out;
}

function StorageContainerGraphicChange(_grid){
    _grid.same_neighbours=GetAmountOfNeighboursOfType(_grid.x,_grid.y,'storage_container')+GetAmountOfNeighboursOfType(_grid.x,_grid.y,'storage_crane');
}

function StorageCraneInfo(_grid){
    let _out='';
    _out+=GetText3('Extra storage for: ')+PMat(GetStorageCraneStorage('rocks'),'rocks');
    _out+=SPC+PMat(GetStorageCraneStorage('lumber'),'lumber');
    _out+=SPC+PMat(GetStorageCraneStorage('steel'),'steel');
    _out+=SPC+PMat(GetStorageCraneStorage('chips'),'chips');
    return _out;
}

function GetStorageCraneStorage(_type){
    if(_type=='rocks'){
        return 9000;
    }
    if(_type=='lumber'){
        return 7000;
    }
    if(_type=='steel'){
        return 6000;
    }
    if(_type=='chips'){
        return 18000;
    }
    return 0;
}


function GetShipyardStorageAdjBuildingsSTR(){
    return GetText('Heavy Shipyard')+(hrac.buildings.shipyard_market?' '+GetText('or')+' '+GetText('Shipyard Market'):'');
}
function ShipyardStorageInfo(_grid){
    let _out='';
    _out+=GetText('Works only when built next to: {att1}',GetShipyardStorageAdjBuildingsSTR())+BR;
    if(_grid && !GridIsCenterGrid(_grid) && !IsGridTileNeighbour(_grid,'shipyard_heavy') && !IsGridTileNeighbour(_grid,'shipyard_market')){
        _out+=ColorSpan('red',GetText('No adjacent building of type: {att1}. The storage is not working.',GetShipyardStorageAdjBuildingsSTR()))+BR;
    }else{
        _out+=GetText3('Extra storage for: ')+PMat(GetShipyardStorageStorage('rocks'),'rocks');
        _out+=SPC+PMat(GetShipyardStorageStorage('lumber'),'lumber');
        _out+=SPC+PMat(GetShipyardStorageStorage('steel'),'steel');
        _out+=SPC+PMat(GetShipyardStorageStorage('chips'),'chips');
    }
    return _out;
}
function GetShipyardStorageStorage(_type){
    if(_type=='rocks'){
        return 15000;
    }
    if(_type=='lumber'){
        return 15000;
    }
    if(_type=='steel'){
        return 20000;
    }
    if(_type=='chips'){
        return 40000;
    }
    return 0;
}


//rock mine
function GetMaxRocksStorage(_player){
    if(!_player)_player=hrac;
    return Mro(0.01*(GetPlayerUpgradeValue(87,0,_player)+100)*(_player.stats.working_storage_shipyard*GetShipyardStorageStorage('rocks') + _player.buildings.storage_crane*GetStorageCraneStorage('rocks') + GetMaxRocksStoragePerMine() * _player.buildings.rock_mine + GetMaxRocksStoragePerMine2() * _player.buildings.rock_mine2 + GetMaxRocksStoragePerBooster() * _player.buildings.rock_mine_boost + _player.stats.storage_container_rock + GetPremiumStorage_rocks()*_player.buildings.premium_storage + ECO_STORAGE_MULTI*GetPremiumStorage_rocks()*_player.buildings.eco_storage));
}

function GetMaxRocksStoragePerMine(){
    return Mro(2000*(1+GetPlayerUpgradeValue(39,0)*0.01));
}

function GetRocksProduction(_grid){
    return (10+GetPlayerUpgradeValue(22,0))*GetRockBoostBonus(_grid);
}

function RockMineInfo(_grid){
    let _out='';
    _out+=GetRockMineAllInfo(_grid,GetRocksProduction(_grid),GetMaxRocksStoragePerMine());
    return _out;
}
function GetRockMineAllInfo(_grid,_production,_storage){
    let _out='';
    _out+=GetText3('Stone mine speed:')+PMat(_production,5)+PER_INCOME_SHORT;
    if(IsGridTileNeighbour(_grid,'rock_mine_boost')){
        _out+=' '+ColorSpan('var(--light-purple-3)',GetText3("Boosted by:")+GetText('Stone Conveyor'));
    }
    if(!GridIsCenterGrid(_grid) && _grid.building_type){
        _out+=BR+GetText3('Total stone income: ')+PCislo(hrac.rocksIncome) +PER_INCOME_SHORT;
    }
    _out+=BR+GetText3('Each mine increases stone storage by: ')+PCislo(_storage);
    if(!GridIsCenterGrid(_grid) && _grid.building_type){
        _out+=BR+GetText3('Total stone storage: ')+SpanID('rock_storage_gridmenu',PMat(hrac.rocks,5))+' / '+PMat(GetMaxRocksStorage(),5);
    }
    return _out;

}

function GetMaxRocksStoragePerMine2(){
    return Mro(8000*(1+GetPlayerUpgradeValue(39,0)*0.01));
}
function GetMaxRocksStoragePerBooster(){
    return Mro(25000*(1+GetPlayerUpgradeValue(39,0)*0.01));
}
function GetRocksProduction2(_grid){
    return (25+GetPlayerUpgradeValue(22,0))*GetRockBoostBonus(_grid);
}
function RockMine2Info(_grid){
    let _out='';
    _out+=GetRockMineAllInfo(_grid,GetRocksProduction2(_grid),GetMaxRocksStoragePerMine2());
    
    return _out;
}

function GetRockBoostBonus(_grid){
    return IsGridTileNeighbour(_grid,'rock_mine_boost')?3:1;
}

function GetBuildingDescriptionFor_rock_mine_boost(_grid){
    let _out='';
    _out+=GetText('Boosts neighbour stone mines - those will produce 3x more stone. Max one boost per mine.');
    _out+=SPC+GetText3('Stores:')+PMat(GetMaxRocksStoragePerBooster(),'rocks');
    _out+=ColorSpan('var(--light-purple)',BR+GetText('Requires no road.'));


    return _out;
}



const FISH_FEED_CHANCE=30;
function GetFishFeedChance(_type){
    if(_type==2){
        return 100;
    }
    return GetPlayerUpgradeValue(72,FISH_FEED_CHANCE);
}
function FeedTheFishDescription(_grid,_type){
    return GetText('There is a {att1}% chance to succeed and create more fish.',GetFishFeedChance(_type))+(!_grid || (!_grid.deep_water && !_grid.deep_water2)?BR+ColorSpan('var(--light-purple)',GetText("Can only be used on a swept water tile with fish.")):'');
}

let feedChanceBonus=0;
function FeedTheFishFun(_grid,_type){
    let _reopen=false;
    if(_type==2){
        delete(_grid.fish_small);
        _grid.fish_big=1;
        PlaySound('drug_box');
    }else if(MyRand100(GetFishFeedChance()+feedChanceBonus)){
        PlaySound('drug_box');
        AddFloatingTextToGrid(_grid,GetText('Success!'),'lime');
        if(_grid.fish_small){
            delete(_grid.fish_small);
            _grid.fish=1;
            feedChanceBonus=0;
        }
        if(!quickToolActive){
            CloseGridMenu();
        }
    }else{
        feedChanceBonus+=3;
        PlaySound('ee');
        AddFloatingTextToGrid(_grid,GetText('Feeding unsuccessful'));
        _reopen=true;
    }
    delete(_grid.feedthefish_notsaved);
    delete(_grid.feedthefish_notsaved2);
    delete(_grid.building_type);
    if(_reopen){
        if(!quickToolActive){
            OpenGridMenu();
        }
    }
}

function GetScoutTowerDesc(_grid){
    return GetText('discovers land in radius: {att1}',GetScoutTowerRadius())+BR+(GridIsCenterGrid(_grid)?ColorSpan('var(--light-purple)',GetText3("Must be built on terrain type:")+GetText('Hills')):'');
}



function GetBuildingMultiTileImage(_b,_size,_class,_clickable,_alignBottom){
    let _images=[];
    if(_b.show_tile_in_build_grid){
        if(Array.isArray(_b.show_tile_in_build_grid)){
            for(let _image of _b.show_tile_in_build_grid){
                _images.push(_image);
            }
        }else{
            _images.push(_b.show_tile_in_build_grid);
        }
    }
    _images.push(_b.image);

    if(_alignBottom){
        return '<div class="align-bottom-build-images" style="display:inline-block;position:relative;">'+GetMultiTilesImages(_images,_size,_class,_clickable?'GetBuildingInfoDescriptionPopup(\''+_b.grid_key+'\');':'')+'</div>';
    }
    // if(!all_images[_b.image]){
    //     console.error(all_images[_b.image],_b.image)
    // }
    return GetMultiTilesImages(_images,_size,_class,_clickable?'GetBuildingInfoDescriptionPopup(\''+_b.grid_key+'\');':'',all_images[_b.image].shift);
}
    
function GetPremiumStorage_lumber(){
    return Math.round(0.01*(GetPlayerUpgradeValue(90)+100)*4000*(1+0.01*GetPlayerUpgradeValue(24)));
}
function GetPremiumStorage_rocks(){
    return Math.round(0.01*(GetPlayerUpgradeValue(90)+100)*15000);
}
function GetPremiumStorage_steel(){
    return Math.round(0.01*(GetPlayerUpgradeValue(90)+100)*14000);
}
function GetPremiumStorage_chips(){
    return Math.round(0.01*(GetPlayerUpgradeValue(90)+100)*40000);
}
function GetPremiumStorage_oil(){
    return Math.round(0.01*(GetPlayerUpgradeValue(90)+100)*11000);
}
    
function GetBuildingDescriptionFor_premium_storage(_grid){
    let _out='';
    _out+=GetText3('Increases storage: ')+SPC+GetText('Lumber')+'&nbsp;+'+PMat(GetPremiumStorage_lumber(),'lumber')+'; '+SPC+' ';
    _out+=GetText('Stone')+'&nbsp;+'+PMat(GetPremiumStorage_rocks(),'rocks')+'; '+SPC+' ';
    _out+=GetText('Steel')+'&nbsp;+'+PMat(GetPremiumStorage_steel(),'steel')+'; '+SPC+' ';
    if(HasLevel(COPPER_LEVEL_REQ)){
        _out+=SpanClass('nowrap',GetText('Micro-chips'))+'&nbsp;+'+PMat(GetPremiumStorage_chips(),'chips')+'; '+SPC+' ';
    }
    if(HasLevel(OIL_LEVEL_REQ)){
        _out+=GetText('Oil')+'&nbsp;+'+PMat(GetPremiumStorage_oil(),'oil')+'; '+SPC+' ';
    }
    return _out;
}
    
const ECO_STORAGE_MULTI=4;
function GetBuildingDescriptionFor_eco_storage(_grid){
    let _out='';
    _out+=GetText('Has {att1} times bigger storage than structure: {att2}',[ECO_STORAGE_MULTI,BUILDINGS_BY_KEYS['premium_storage'].name])+BR;
    _out+=GetText3('Increases storage: ')+SPC+GetText('Lumber')+'&nbsp;+'+PMat(ECO_STORAGE_MULTI*GetPremiumStorage_lumber(),'lumber')+'; '+SPC+' ';
    _out+=GetText('Stone')+'&nbsp;+'+PMat(ECO_STORAGE_MULTI*GetPremiumStorage_rocks(),'rocks')+'; '+SPC+' ';
    _out+=GetText('Steel')+'&nbsp;+'+PMat(ECO_STORAGE_MULTI*GetPremiumStorage_steel(),'steel')+'; '+SPC+' ';
    if(HasLevel(COPPER_LEVEL_REQ)){
        _out+=SpanClass('nowrap',GetText('Micro-chips'))+'&nbsp;+'+PMat(ECO_STORAGE_MULTI*GetPremiumStorage_chips(),'chips')+'; '+SPC+' ';
    }
    if(HasLevel(OIL_LEVEL_REQ)){
        _out+=GetText('Oil')+'&nbsp;+'+PMat(ECO_STORAGE_MULTI*GetPremiumStorage_oil(),'oil')+'; '+SPC+' ';
    }
    return _out;
}

function AddBuilding(_grid_key,_count,_doFloatTextIndex){
    let _b = BUILDINGS_BY_KEYS[_grid_key];
    if(_b){
        if(!hrac.storage[_b.grid_key]){
            hrac.storage[_b.grid_key]=0;
        }
        hrac.storage[_b.grid_key]+=_count;
        if(_doFloatTextIndex!=undefined){
            AddFloatingTextToMousePos('+'+_count+' '+GetText(_b.name),'#72d84c',_doFloatTextIndex);
        }
    }

}


/** 

  XXXXXX     XXX    XXXXXXX    XXX  
   X   XX   XX XX      X      XX XX 
   X    X  XX   XX     X     XX   XX
   X    X  X     X     X     X     X
   X    X  XXXXXXX     X     XXXXXXX
   X    X  X     X     X     X     X
   X    X  X     X     X     X     X
   X   XX  X     X     X     X     X
  XXXXXX   X     X     X     X     X

*/


let BUILDINGS=[];

function InitBuildings(){
    BUILDINGS=[
        {
            name: 'Premium Fish',
            id: 40,
            image: 'fish_big',
            grid_key: 'feedthefish_notsaved',
            descriptionFun: 'FeedTheFishDescription(_grid,2);',
            extraBuildFun: 'FeedTheFishFun(_grid,2);',
            only_specific_tiles: ['fish_small+deep_water','fish_small+deep_water2'],
            // only_specific_tiles: ['fish_small','fish_small'],
            cost:{
                gems: 40,
            },
            has_quick_tool:1,
            show_tile_in_build_grid:'water',
            big_fish_placement_is_ok:true,
            required_level: DEEP_WATER_LVL_REQ+2,
            is_terrain_modifier:1,
            display_even_if_has_street:1,
            healEffectPower:9,

            sound:'none',
            big_recalculations:true,
        },
        {
            name: 'Feed the fish',
            id: 39,
            image: 'fish',
            grid_key: 'feedthefish_notsaved2',
            descriptionFun: 'FeedTheFishDescription(_grid,1);',
            extraBuildFun: 'FeedTheFishFun(_grid);',
            only_specific_tiles: ['fish_small+deep_water','fish_small+deep_water2'],
            // only_specific_tiles: ['fish_small','fish_small'],
            cost:{
                gold: 90000,
                food: 10000,
            },
            show_tile_in_build_grid:'water',
            big_fish_placement_is_ok:true,
            has_quick_tool:1,
            sound:'none',
            ignoreGridMenuHandle:1,
            required_level: DEEP_WATER_LVL_REQ+1,
            display_even_if_has_street:1,
            is_terrain_modifier:1,
            healEffectPower:6,

            big_recalculations:true,
        },
        {
            name: 'Revitalise',
            id: 38,
            image: 'ui/revitalise',
            grid_key: 'revitalise_notsaved',
            descriptionFun: 'RevitaliseDescription(_grid);',
            extraBuildFun: 'RevitaliseFun(_grid);',
            only_specific_tiles: ['desert','sand'],
            display_even_if_has_street: true,
            reopen_grid_menu:1,
            cost_fun:'RevitaliseCost(_grid);',
            has_quick_tool:1,
            required_level: REVITALISE_REQURED_LEVEL,
            show_even_if_level_not_met:true,//teasing
            healEffectPower:7,
            is_terrain_modifier:1,
            sound:'splash',
        },
        {
            name: 'Premium Gold mine', //premium gold mine
            id: 72,
            image: 'golden_mine_premium_2',
            grid_key: 'golden_mine_premium_2',
            descriptionFun: 'GetPremium2GoldMineDesc(_grid);',
            only_specific_tiles: ['golden_field','golden_island'],
            cost:{
                gems: 80,
            },
            no_terrain_bg:true,
            destroy_gold_cost:2500,
            grid_color:'#ffde52',
            electricity:-10,
            polution:10,
            requires_street:false,
            has_quick_tool:1,
            can_replace:['golden_mine','golden_mine_2','golden_mine_premium'],
            can_connect_to_neighbour_mine:true,
            required_level: PREMIUM_GOLD_MINE_2_LEVEL_REQ,
            isMineConnectionOrigin:1,
            buildEffectPower:8,
            sound:'pickaxe_metal',
            click_sound:'pickaxe_metal',
        },
        {
            name: 'Special Gold mine', //premium gold mine
            id: 37,
            image: 'golden_mine_premium',
            grid_key: 'golden_mine_premium',
            descriptionFun: 'GetPremiumGoldMineDesc(_grid);',
            only_specific_tiles: ['golden_field','golden_island'],
            cost:{
                gems: 50,
            },
            no_terrain_bg:true,
            destroy_gold_cost:2500,
            grid_color:'#ffde52',
            electricity:0,
            polution:0,
            requires_street:false,
            can_replace:['golden_mine'],
            can_connect_to_neighbour_mine:true,
            required_level: GOLDEN_MINE_LEVEL_REQ+3,
            isMineConnectionOrigin:1,
            buildEffectPower:8,
            has_quick_tool:1,
            upgrades_to: 'golden_mine_premium_2',
            sound:'pickaxe_metal',
            click_sound:'pickaxe_metal',
        },
        {
            name: 'Raze Mountain',
            id: 36,
            image: 'ui/remove_cross',
            grid_key: 'flat_mountain_notsaved',
            descriptionFun: 'FlatMountainDescription();',
            extraBuildFun: 'FlatMountainAfterFun(_grid);',
            only_specific_tiles: ['mountain'],
            cost:{
                gold: 400000,
                oil: 30000,
            },
            show_tile_in_build_grid:'mountains',
            healEffectPower:6,
            reopen_grid_menu:1,
            mudEffectPower:7,
            has_quick_tool:1,
            required_level: FLATEN_MOUNTAINS_LEVEL_REQ,
            sound:'bulldozer',
            confirmation_required:true,
            is_terrain_modifier:1
        },

        {
            name: 'Offshore Oil Rig',
            id: 34,
            image: 'oil_rig',
            grid_key: 'oil_rig',
            descriptionFun: 'GetWaterOilRigProductionString(_grid);',
            only_specific_tiles: ['oil'],
            cost:{
                gold: 2420000,
                chips: 7000,
            },
            special_use_condition: 'CanBuildOilRig(_grid)',
            show_tile_in_build_grid:'water',
            grid_color:'#6d49ac',
            destroy_gold_cost:255000,
            electricity:-25,
            polution:60,
            // requires_street:true,
            is_water_building:1,
            tease_from_level:OIL_LEVEL_REQ,
            required_level: WATER_OIL_LEVEL_REQ,
            buildEffectPower:12,
            big_recalculations:true,
            has_quick_tool:1,
        },
        {
            name: 'Onshore Oil Rig',
            id: 33,
            image: 'oil_rig_ground',
            grid_key: 'oil_rig_ground',
            descriptionFun: 'GetGroundOilRigProductionString(_grid);',
            only_specific_tiles: ['ground_oil'],
            cost:{
                gold: 820000,
                chips: 1000,
            },
            no_terrain_bg:true,
            grid_color:'#6d49ac',
            destroy_gold_cost:45000,
            electricity:-10,
            polution:10,
            has_quick_tool:1,
            requires_street:true,
            can_connect_to_same_building:true,
            required_level: OIL_LEVEL_REQ,
            buildEffectPower:12,
        },
        {
            name: 'Gem mine',
            id: 32,
            image: 'gem_mine',
            grid_key: 'gem_mine',
            descriptionFun: 'GetGemMineDesc(_grid);',
            only_specific_tiles: ['gem_field'],
            cost:{
                gold: 5000000,
                chips: 40000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:20000,
            electricity:-200,
            polution:50,
            requires_street:true,
            can_connect_to_neighbour_mine:true,
            required_level: GEM_MINE_LEVEL_REQ,
            buildEffectPower:10,
            upgrades_to:'super_factory',
            click_sound:'pickaxe_metal',
            level_up_info: ()=>{return GetText3('Must be built on terrain type:')+GetText('Gem field');}
        },
        {
            name: 'Super Factory',
            id: 74,
            image: 'super_factory',
            grid_key: 'super_factory',
            descriptionFun: 'GetSuperFactoryDesc(_grid);',
            only_specific_tiles: ['gem_field'],
            cost:{
                gold: 500000000,
                chips: 20000000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:500000,
            electricity:-500,
            polution:350,
            can_replace:['gem_mine'],
            requires_street:true,
            can_connect_to_neighbour_mine:true,
            required_level: SUPER_FACTORY_LEVEL_REQ,
            buildEffectPower:10,
            click_sound:'pickaxe_metal',
            level_up_info: ()=>{return GetText3('Must be built on terrain type:')+GetText('Gem field');}
        },
        {
            name: 'Heavy Gold mine',
            id: 70,
            image: 'golden_mine_3',
            grid_key: 'golden_mine_3',
            descriptionFun: 'GetHeavyGoldMineDesc(_grid);',
            only_specific_tiles: ['golden_field','golden_island'],
            cost:{
                steel: 2000000,
                chips: 6000000,
            },
            destroy_gold_cost:1000000,
            grid_color:'#ffde52',
            electricity:-170,
            polution:35,
            requires_street:true,
            can_replace:['golden_mine','golden_mine_2'],
            can_connect_to_neighbour_mine:true,
            required_level: GOLD_MINE_3_LEVEL_REQ,
            buildEffectPower:9,
            has_quick_tool:1,
            no_terrain_bg:true,
        },
        {
            name: 'Advanced Gold mine',
            id: 31,
            image: 'golden_mine_2',
            grid_key: 'golden_mine_2',
            descriptionFun: 'GetAdvancedGoldMineDesc(_grid);',
            only_specific_tiles: ['golden_field','golden_island'],
            cost:{
                steel: 50000,
                chips: 7000,
            },
            destroy_gold_cost:15000,
            grid_color:'#ffde52',
            electricity:-50,
            polution:5,
            requires_street:true,
            upgrades_to:'golden_mine_3',
            can_replace:['golden_mine'],
            can_connect_to_neighbour_mine:true,
            required_level: GOLD_MINE_2_LEVEL_REQ,
            buildEffectPower:9,
            has_quick_tool:1,
            no_terrain_bg:true,
        },
        {
            name: 'Gold mine',
            id: 10,
            image: 'golden_mine_1',
            grid_key: 'golden_mine',
            descriptionFun: 'GetGoldMineDesc(_grid);',
            only_specific_tiles: ['golden_field','golden_island'],
            cost:{
                gold: 35000,
            },
            no_terrain_bg:true,
            grid_color:'#ffde52',
            destroy_gold_cost:2500,
            electricity:0,
            polution:0,
            upgrades_to:'golden_mine_2',
            requires_street:true,
            can_connect_to_neighbour_mine:true,
            required_level: GOLDEN_MINE_LEVEL_REQ,
            buildEffectPower:7,
            has_quick_tool:1,
            click_sound:'pickaxe_metal',
        },
        {
            name: 'River Cleaner',
            id: 16,
            image: 'river_cleaner',
            grid_key: 'river_cleaner',
            // descriptionFun: '',
            // extraBuildFun: '',
            only_specific_tiles: ['river'],
            polution:-8,
            show_tile_in_build_grid:'rivers/river_t1_11',
            // extraBuildFun: 'RecalculatePolutionPerc();',
            // base_polution:-8,//kvoli TryAddEffectOfSomeUpgrades()
            cost:{
                gold: 92000,
            },
            destroy_gold_cost:5000,
            max_view_radius:0.15,
            has_quick_tool:1,
            healEffectPower:4,
            // ignores_connection:true,
            required_level: REQ_ELECTRICITY_LEVEL+2,
        },
        {
            name: 'Iron Mine',
            id: 13,
            image: 'iron_mine',
            grid_key: 'iron_mine',
            grid_color:'#a70',
            descriptionFun: 'GetIronMineDescription(_grid);',
            only_specific_tiles: ['hill','mountain'],
            can_connect_to_these_buildings:['foundry','foundry_big'],
            cost:{
                gold: 95000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:7500,
            electricity:-3,
            polution:5,
            requires_street:true,
            has_quick_tool:1,
            can_connect_to_neighbour_mine:true,
            required_level: STEEL_LEVEL_REQ,
            buildEffectPower:7,
            level_up_info:()=>{return GetText('Buildable only on hills and mountains');},
            click_sound:'pickaxe_metal',
        },

        {
            name: 'Oil storage',
            id: 42,
            image: 'oil_storage',
            grid_key: 'oil_storage',
            descriptionFun: 'OilStorageDescription(_grid);',
            grid_color:'#6d49ac',
            // extraBuildFun: '',
            // only_specific_tiles: ['river'],
            can_connect_to_same_building:true,
            can_connect_to_neighbour_mine:true,
            can_connect_to_these_buildings:['storage_container','oil_rig_ground'],
            has_quick_tool:1,
            requires_street:true,
            destroy_gold_cost:95000,
            cost:{
                gold: 145000,
                steel: 24000,
            },
            show_tile_in_build_grid:'grass',
            // no_terrain_bg:true,
            required_level: OIL_STORAGE_LEVEL_REQ,
            buildEffectPower:8,
        },
        {
            name: 'Eco Storage',
            id: 80,
            image: 'eco_storage',
            grid_key: 'eco_storage',
            required_level: PREMIUM_STORAGE_2_LEVEL_REQ,
            descriptionFun: 'GetBuildingDescriptionFor_eco_storage(_grid);',
            cost:{
                gems: 110,
            },
            polution:-2,
            electricity:-10,
            buildEffectPower:7,
            has_quick_tool:1,
            can_replace:['oil_storage','wood_storage','storage_container','storage_crane','steel_storage','premium_storage'],
        },
        {
            name: 'Premium storage',
            id: 50,
            image: 'premium_storage',
            grid_key: 'premium_storage',
            required_level: OIL_LEVEL_REQ,
            descriptionFun: 'GetBuildingDescriptionFor_premium_storage(_grid);',
            cost:{
                gems: 30,
            },
            show_tile_in_build_grid:'grass',
            buildEffectPower:7,
            has_quick_tool:1,
            can_replace:['oil_storage','wood_storage','storage_container','storage_crane','steel_storage'],
            upgrades_to:'eco_storage',
        },

        {
            name: 'Storage Crane',//heavy storage storagebig
            id: 66,
            image: 'storage_crane',
            grid_key: 'storage_crane',
            descriptionFun: 'StorageCraneInfo(_grid);',
            grid_color:'#a70',
            // extraBuildFun: 'StorageContainerGraphicChange(_grid);',
            // only_specific_tiles: ['river'],
            can_connect_to_same_building:true,
            can_connect_to_neighbour_mine:true,
            has_quick_tool:1,
            polution:25,
            electricity:-15,
            requires_street:true,
            cost:{
                steel: 35000,
                chips: 55000,

            },
            // show_tile_in_build_grid:'grass',
            destroy_gold_cost:35000,
            required_level: STORAGE_CRANE_LEVEL_REQ,
            buildEffectPower:5,
            big_recalculations:true,
            can_replace:['wood_storage','storage_container']

        },
        
        {
            name: 'Storage Container',
            id: 20,
            image: 'storage_container',
            grid_key: 'storage_container',
            descriptionFun: 'StorageContainerInfo(_grid);',
            grid_color:'#a70',
            extraBuildFun: 'StorageContainerGraphicChange(_grid);',
            // only_specific_tiles: ['river'],
            can_connect_to_same_building:true,
            can_connect_to_neighbour_mine:true,
            has_quick_tool:1,
            requires_street:true,
            cost:{
                gold: 55000,
                steel: 12000,
            },
            show_tile_in_build_grid:'grass',
            destroy_gold_cost:7000,
            required_level: STORAGE_CONTAINER_LEVEL_REQ,
            buildEffectPower:5,
            big_recalculations:true,
            upgrades_to:'storage_crane',
        },
        
        {
            name: 'Big Farm',
            id: 46,
            image: 'farm_big',
            grid_key: 'farm_big',
            required_level: BIGFARMS_LEVEL_REQUIRED,
            descriptionFun: 'GetBuildingDescriptionFor_farm_big(_grid);',
            extraBuildFun: 'BuildBigFarmAfterFuns(_grid)',
            cost:{
                gold: 800000,
                lumber:95000,
            },
            destroy_gold_cost:50000,
            electricity:-3,
            polution:0,
            buildEffectPower:7,
            draw_radius_rect:4,
            requires_water_near_by:2,
            no_terrain_bg:true,

            grid_color:'#070',
            requires_street:true,
            big_recalculations:true,
    },
    {
            name: 'Farm',
            id: 6,
            image: 'farm',
            grid_key: 'farm',
            required_level: FARM_REQURED_LEVEL,
            // description: '',
            descriptionFun: 'GetBuildingDescriptionFor_farm(_grid);',
            extraBuildFun: 'BuildFarmAfterFuns(_grid)',
            // only_specific_tiles: [''],
            cost:{
                gold: 3000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:300,
            electricity:0,
            polution:0,
            buildEffectPower:5,
            draw_radius_rect:2,
            grid_color:'#070',
            tease_from_level:2,
            requires_street:true,
            big_recalculations:true,
            upgrades_to:'farm_big',
        },
        {
            name: 'Lumber Storage',
            id: 11,
            image: 'wood_storage',
            grid_key: 'wood_storage',
            descriptionFun: 'GetWoodStorageDescription(_grid);',
            // only_specific_tiles: ['golden_field'],
            cost:{
                gold: 14000,
                lumber: 400,
            },
            destroy_gold_cost:1500,
            electricity:0,
            polution:0,
            has_quick_tool:1,
            requires_street:true,
            grid_color:'#770',
            no_terrain_bg:true,
            // can_connect_to_neighbour_mine:true,
            can_connect_to_same_building:true,
            required_level: LUMBER_STORAGE_LEVEL_REQ,
            buildEffectPower:6,
            sound:'sawing',
            click_sound:'sawing',
        },
        {
            name: 'Premium Lumber Mill',
            id: 63,
            image: 'lumber_premium',
            grid_key: 'premium_lumber_mill',
            required_level: 9999,
            descriptionFun: 'GetBuildingDescriptionFor_premium_lumber_mill(_grid);',
            cost:{
                gems: 100,
            },
            buildEffectPower:7,
            draw_radius_rect:3,
            grid_color:'#770',
            requires_street:false,
            can_replace:['saw_mill','heavy_lumber_mill'],
            no_terrain_bg:true,
            sound:'sawing',
            click_sound:'sawing',
            no_quick_confirm:1,
            has_quick_tool:1,


            // hill_override:1,
        },
        {
            name: 'Heavy Lumber Mill',
            id: 19,
            image: 'heavy_lumber_mill',
            grid_key: 'heavy_lumber_mill',
            required_level: HEAVY_LUMBER_MILL_LEVEL_REQ,
            descriptionFun: 'GetBuildingDescriptionFor_heavy_lumber_mill(_grid);',
            cost:{
                gold: 190000,
                rocks: 35000,
            },
            destroy_gold_cost:8000,
            electricity:-20,
            polution:15,
            buildEffectPower:7,
            draw_radius_rect:3,
            grid_color:'#770',
            requires_street:true,
            can_replace:['saw_mill'],
            no_terrain_bg:true,
            has_quick_tool:1,
            sound:'sawing',
            click_sound:'sawing',

            // hill_override:1,
        },
        {
            name: 'Lumber Mill',
            id: 4,
            image: 'sawmill',
            grid_key: 'saw_mill',
            required_level: LUMBER_REQ_LEVEL,
            descriptionFun: 'GetBuildingDescriptionFor_saw_mill(_grid);',
            cost:{
                gold: 8000,
            },
            destroy_gold_cost:200,
            electricity:0,
            polution:0,
            buildEffectPower:5,
            draw_radius_rect:1,
            grid_color:'#770',
            upgrades_to:'heavy_lumber_mill',
            has_quick_tool:0,
            requires_street:true,
            no_terrain_bg:true,
            sound:'sawing',
            click_sound:'sawing',
            tease_from_level:5,

        },
        {
            name: 'Adv. Stone Mine',
            id: 57,
            image: 'rock_mine2',
            grid_key: 'rock_mine2',
            descriptionFun: 'RockMine2Info(_grid);',
            only_specific_tiles: ['hill','mountain'],
            cost:{
                gold: 1400000,
                steel: 50000,
                chips: 120000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:125000,
            electricity:-35,
            polution:5,
            has_quick_tool:1,
            requires_street:true,
            grid_color:'#999',
            can_replace:['rock_mine'],
            can_connect_to_neighbour_mine:true,
            required_level: ROCK_MINE2_LEVEL_REQUIRED,
            level_up_info:()=>{return GetText('Buildable only on hills and mountains');},
            buildEffectPower:7,
        },
        {
            name: 'Stone Mine',//rock Mine
            id: 8,
            image: 'rock_mine',
            grid_key: 'rock_mine',
            descriptionFun: 'RockMineInfo(_grid);',
            only_specific_tiles: ['hill','mountain'],
            cost:{
                lumber: 300,
                gold: 35000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:2500,
            electricity:0,
            polution:2,
            has_quick_tool:1,
            requires_street:true,
            grid_color:'#999',
            upgrades_to:'rock_mine2',
            can_connect_to_neighbour_mine:true,
            required_level: ROCK_LEVEL_REQUIREMENT,
            buildEffectPower:6,
            level_up_info:()=>{return GetText('Buildable only on hills and mountains');},
            click_sound:'pickaxe_metal',
        },
        {
            name: 'Scout Tower',
            id: 1,
            image: 'watchtower',
            grid_key: 'watch_tower',
            descriptionFun: 'GetScoutTowerDesc(_grid);',
            extraBuildFun: 'InitGridNeighbours(_grid,GetScoutTowerRadius());',
            only_specific_tiles: ['hill'],
            // remove_str:'Remove Tower',
            cost:{
                gold: 2000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:200,
            electricity:0,
            polution:0,
            buildEffectPower:5,
            requires_street:true,
            required_level: SCOUT_TOWER_LEVEL_REQ,
        },
        {
            name: 'Small Shipyard',
            id: 5,
            image: 'shipyard_small',
            grid_key: 'shipyard_small',
            // is_water_building:1,
            descriptionFun: 'GetShipyardDescription(_grid);',
            extraBuildFun: 'BuildAnyShipYard(_grid);',
            // only_specific_tiles: ['water'],
            is_shipyard:1,
            cost:{
                gold: 52000,
                lumber: 1200,            
            },
            show_tile_in_build_grid:'water',
            destroy_gold_cost:2500,
            electricity:0,
            polution:5,
            buildEffectPower:7,
            req_population:500,
            has_quick_tool:1,
            sound:'construction',
            // requires_street:true,
            required_level: SHIPYARD_LEVEL_REQ,
        },
        {
            name: 'Heavy Shipyard',
            id: 43,
            image: 'shipyard_heavy',
            grid_key: 'shipyard_heavy',
            descriptionFun: 'GetHeavyShipyardDescription(_grid);',
            extraBuildFun: 'BuildAnyShipYard(_grid);',
            is_shipyard:1,
            cost:{
                gold: 1752000,
                rocks: 30000,
                steel: 45000,
            },
            sound:'construction',
            show_tile_in_build_grid:'water',
            destroy_gold_cost:52500,
            electricity:-150,
            polution:75,
            has_quick_tool:1,
            buildEffectPower:9,
            // requires_street:true,
            required_level: HEAVY_SHIPYARD_LEVEL_REQUIRED,
        },
        {
            name: 'Shipyard Market',
            id: 77,
            image: 'shipyard_market',
            grid_key: 'shipyard_market',
            descriptionFun: 'GetShipyardMarketDescription(_grid);',
            extraBuildFun: 'BuildAnyShipYard(_grid);',
            is_shipyard:1,
            cost:{
                gems: 100,
            },
            sound:'construction',
            show_tile_in_build_grid:'water',
            destroy_gold_cost:50000,
            electricity:-30,
            polution:40,
            has_quick_tool:1,
            buildEffectPower:9,
            // requires_street:true,
            required_level: 9999,
            sale_info: ()=>{return ColorSpan('var(--light-purple-3)',GetText('+{att1} {EVERY_X_SECONDS} per if built next to town.',PMat(GetGoldPerShipyardMarketNearTown(),1)));}
        },
        {
            name: 'Shipyard storage',//storage shipyard
            id: 71,
            image: 'storage_shipyard',
            grid_key: 'storage_shipyard',
            descriptionFun: 'ShipyardStorageInfo(_grid);',
            extraBuildFun: 'BuildAnyShipYard(_grid);',
            is_shipyard:1,
            cost:{
                gold: 2400000,
                steel: 95000,
                chips: 75000,
            },
            sound:'construction',
            show_tile_in_build_grid:'water',
            destroy_gold_cost:150000,
            electricity:-25,
            polution:35,
            has_quick_tool:1,
            buildEffectPower:9,
            // requires_street:true,
            required_level: SHIPYARD_STORAGE_LEVEL_REQ,
        },

        {
            name: 'Wind Mill',
            id: 44,
            image: 'windmill',
            grid_key: 'windmill',
            description: 'Generates power.',
            descriptionFun: 'GetWindMillDesc(_grid);',
            // extraBuildFun: 'InitGridNeighbours(_grid,GetScoutTowerRadius());',
            only_specific_tiles: ['hill','mountain'],
            cost:{
                gold: 360000,
                chips: 20000,
                steel: 22000,
            },
            destroy_gold_cost:40000,
            electricity:20,
            polution:1,
            no_terrain_bg:true,
            buildEffectPower:5,
            grid_color:'#aacccc',
            has_quick_tool:1,
            // requires_street:true,
            required_level: WINDMILL_LEVEL_REQUIRED,
        },
        {
            name: 'Oil Tanker',
            id: 45,
            image: 'tanker',
            grid_key: 'tanker',
            required_level: TANKERS_LEVEL_REQUIRED,
            // description: '',
            descriptionFun: 'GetBuildingDescriptionFor_tanker(_grid);',
            // extraBuildFun: '',
            // only_specific_tiles: [''],
            cost:{
                gold: 1500000,
                steel: 30000,
                oil: 10000,
            },
            sound:'water_drop',
            show_tile_in_build_grid:'water',
            big_fish_placement_is_ok:true,
            draw_radius_rect:5,//meni sa GetTankerRadius(),
            is_water_building:1,
            destroy_gold_cost:50000,
            electricity:0,
            polution:5,
            buildEffectPower:5,
            //healEffectPower:5,
            //mudEffectPower:5,
            grid_color:'#6d49ac',
            can_put_into_storage:true,
            big_recalculations:true,
            has_quick_tool:1,
            storage_icons:['water','tanker','ui/back_button']
            //can_connect_to_neighbour_mine:true,
            //can_connect_to_same_building:true,
            //  requires_street:true,
        },
        {
            name: 'Stone Conveyor',//stone boost rock boost
            id: 47,
            image: 'rock_mine_boost',
            grid_key: 'rock_mine_boost',
            required_level: ROCK_LEVEL_REQUIREMENT+1,
            descriptionFun: 'GetBuildingDescriptionFor_rock_mine_boost(_grid);',
            cost:{
                gems: 25,
            },
            no_terrain_bg:true,
            electricity:0,
            polution:0,
            buildEffectPower:5,
            grid_color:'#999',
            can_connect_to_neighbour_mine:true,
            has_quick_tool:1,
            big_recalculations:true,
            no_quick_confirm:1,
            isMineConnectionOrigin:1,
            level_up_info:()=>{return GetText('Buildable on plains');},
        //  requires_street:true,
        },
        {
            name: 'Rift Oil Miner', //rift miner
            id: 48,
            image: 'rift_miner',
            grid_key: 'rift_miner',
            required_level: OIL_LEVEL_REQ+1,
            // description: '',
            descriptionFun: 'GetBuildingDescriptionFor_rift_miner(_grid);',
            // extraBuildFun: '',
            only_specific_tiles: ['rift','rift_big'],
            show_tile_in_build_grid:'rift_big',
            cost:{
                gems: 40,
            },
            electricity:-5,
            polution:3,
            buildEffectPower:7,
            grid_color:'#6d49ac',
            can_connect_to_same_building:true,
            has_quick_tool:1,
            no_quick_confirm:1,
            requires_street:false,
            sound:'construction',
            level_up_info: ()=>{return GetText('Buildable on rifts');}
        },
        {
            name: 'Remove rubble',
            id: 49,
            image: 'ui/buldoser2',
            grid_key: 'remove_rubble_notsaved',
            required_level: CLEAR_RUBBLE_LEVEL_REQ,
            description: 'remove the rubble so you can plant forests here.',
            only_specific_tiles: ['rubble1','rubble2','rubble3','rubble4'],
            cost:{
                gold: 13000,
            },
            has_quick_tool:1,
            mudEffectPower:3,
            buildEffectPower:4,
            works_even_with_building:1,
            display_even_if_has_street:1,
            extraBuildFun: 'RemoveRubble(_grid);',
            show_even_if_level_not_met:true,
            reopen_grid_menu:true,
            is_terrain_modifier:1,
            
        },
        {
            name: 'Ocean Sweep',
            id: 51,
            image: 'ui/deep_water',
            grid_key: 'deep_water_notsaved',
            required_level: DEEP_WATER_LVL_REQ,
            // description: '',
            descriptionFun: 'GetBuildingDescriptionFor_deep_water(_grid);',
            special_condition: 'CanDeepWater(_grid)',
            special_build_condition: 'CanDeepWater(_grid,1)',
            extraBuildFun: 'DeepCleanAfterFuns(_grid);',
            only_specific_tiles: ['water'],
            cost_fun:'GetOceanSweepCost();',
            electricity:0,
            polution:-DEEP_WATER_POLLUTION,
            //draw_radius_rect:GetBuildingRadius_deep_water(),
            //max_view_radius:0,
            reopen_grid_menu:true,
            //requires_water_near_by:2,
            //  is_water_building:1,
            //works_even_with_building:1,
            healEffectPower:6,
            mudEffectPower:3,
            big_fish_placement_is_ok:1,
            display_even_if_has_street:1,
            //grid_color:'#aacccc',
            //can_connect_to_neighbour_mine:true,
            //can_connect_to_same_building:true,
            //can_connect_to_these_buildings:['storage_container','oil_rig_ground'],
            //can_put_into_storage:true,
            has_quick_tool:1,
            is_terrain_modifier:1,
            sound:'splash',
        },
        {
            name: 'Sensor Tower',
            id: 18,
            image: 'sensor_tower',
            grid_key: 'sensor_tower',
            required_level: COPPER_LEVEL_REQ,
            descriptionFun: 'GetBuildingDescriptionFor_sensor_tower(_grid);',
            extraBuildFun: 'FindCopperField(_grid);InitGridNeighbours(_grid,GetSensorTowerRadius());',
            cost:{
                gold: 125000,
                steel: 20000,
            },
            reopen_grid_menu:1,
            destroy_gold_cost:5000,
            allows_build_on_hill:1,
            electricity:0,
            no_terrain_bg:true,
            polution:0,
            buildEffectPower:5,
            //  has_quick_tool:1,
            requires_street:true,
            big_recalculations:true,
            disabled_storage:1,
            click_sound:'beep',
        },

        {
            name: 'Sea Generator',
            id: 15,
            image: 'water_generator',
            grid_key: 'water_generator',
            required_level: SEA_GENERATOR_LEVEL_REQ,
            descriptionFun: 'GetBuildingDescriptionFor_water_generator(_grid);',
            cost:{
                gems: 40,
            },
            show_tile_in_build_grid:'water',
            electricity:75,
            polution:-20,
            buildEffectPower:5,
            healEffectPower:3,
            is_water_building:1,
            has_quick_tool:1,
            no_quick_confirm:1,
            sound:'water_drop',
        },
        {
            name: 'Heavy Chip Factory',
            id: 68,
            image: 'chip_factory_big',
            grid_key: 'chip_factory_big',
            required_level: CHIP_FACTORY_2_LEVEL_REQ,
            descriptionFun: 'GetBuildingDescriptionFor_chip_factory(_grid,68);',
            only_specific_tiles: ['copper_field'],
            special_use_condition: 'CanBuildChipFactory(_grid)',
            cost:{
                gold: 75000000,
                steel: 3500000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:5000000,
            electricity:-700,
            polution:400,
            buildEffectPower:9,
            can_connect_to_same_building:1,
            //  pollution_cloud:1.5,
            grid_color:'#0fa',
            has_quick_tool:1,
            requires_street:true,
            big_recalculations:true,
            chip_production:200,
            sound:'construction',
            can_replace:['chip_factory'],
            level_up_info: ()=>{return GetText('Buildable only on copper tiles.');}
        },
        {
            name: 'Chip Factory',
            id: 17,
            image: 'chip_factory',
            grid_key: 'chip_factory',
            required_level: COPPER_LEVEL_REQ,
            descriptionFun: 'GetBuildingDescriptionFor_chip_factory(_grid);',
            only_specific_tiles: ['copper_field'],
            special_use_condition: 'CanBuildChipFactory(_grid)',
            cost:{
                gold: 2500000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:50000,
            electricity:-200,
            polution:75,
            buildEffectPower:9,
            can_connect_to_same_building:1,
            //  pollution_cloud:1.5,
            grid_color:'#0fa',
            has_quick_tool:1,
            requires_street:true,
            chip_production:80,
            big_recalculations:true,
            sound:'construction',
            upgrades_to:'chip_factory_big',
            level_up_info: ()=>{return GetText('Buildable only on copper tiles.');}
            
        },
        {
            name: 'Thermal Plant',
            id: 69,
            image: 'thermal_plant',
            grid_key: 'thermal_plant',
            required_level: THERMAL_POWER_PLANT_LEVEL_REQ,
            // description: '',
            descriptionFun: 'GetBuildingDescriptionFor_thermal_plant(_grid);',
            // extraBuildFun: '',
            // special_condition: '',
            // special_build_condition: '',
            // only_specific_tiles: [''],
            cost:{
                gold: 4500000,
                steel: 450000,
                chips:3500000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:1000000,
            electricity:350,
            polution:5,
            buildEffectPower:9,
            grid_color:'#aacccc',
            //  hill_override:1,
            has_quick_tool:1,
            requires_street:true,
            sound:'construction',
            only_specific_tiles: ['thermal'],
            
            level_up_info: ()=>{return GetText3('Must be built on terrain type:')+GetText('Thermal spot')}
        },
        {
            name: 'Solar panels',
            id: 3,
            image: 'solarpanels',
            grid_key: 'solarpanels',
            descriptionFun: 'GetSolarPanelDescription(_grid);',
            
            cost:{
                gold: 470000,
                chips: 95000,
                steel: 8000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:30000,
            electricity:10,
            buildEffectPower:5,
            grid_color:'#aacccc',
            has_quick_tool:1,
            required_level: SOLAR_PANEL_LEVEL_REQUIRED,
        },
        {
            name: 'Coal Plant',
            id: 12,
            image: 'coal_plant',
            grid_key: 'coal_plant',
            required_level: REQ_ELECTRICITY_LEVEL,
            // description: '',
            descriptionFun: 'GetBuildingDescriptionFor_coal_plant(_grid);',
            // extraBuildFun: '',
            // special_condition: '',
            // special_build_condition: '',
            // only_specific_tiles: [''],
            cost:{
                gold: 78000,
                lumber:7000,
                rocks:20000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:5000,
            electricity:150,
            polution:80,
            buildEffectPower:9,
            pollution_cloud:2,
            requires_water_near_by:2,
            grid_color:'#aacccc',
            //  hill_override:1,
            has_quick_tool:1,
            requires_street:true,
            sound:'construction',
        },
        {
            name: 'Heavy Foundry',
            id: 65,
            image: 'foundry_big',
            grid_key: 'foundry_big',
            required_level: FOUNDRY_2_LEVEL_REQ,
            descriptionFun: 'GetBuildingDescriptionFor_foundry2(_grid);',
            cost:{
                gold: 3200000,
                steel: 500000,
                chips:2000000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:150000,
            electricity:-250,
            polution:300,
            grid_color:'#a70',
            buildEffectPower:9,
            can_connect_to_same_building:true,
            pollution_cloud:2,
            draw_radius_rect:GetFoundryRange(),
            requires_street:true,
            has_quick_tool:1,
            big_recalculations:true,
            can_replace:['foundry'],
            sound:'construction',
        },
        {
            name: 'Foundry',
            id: 14,
            image: 'foundry',
            grid_key: 'foundry',
            required_level: STEEL_LEVEL_REQ,
            descriptionFun: 'GetBuildingDescriptionFor_foundry(_grid);',
            cost:{
                gold: 415000,
                rocks: 52000,
            },
            no_terrain_bg:true,
            destroy_gold_cost:50000,
            electricity:-25,
            polution:65,
            grid_color:'#a70',
            buildEffectPower:9,
            can_connect_to_same_building:true,
            pollution_cloud:2,
            draw_radius_rect:GetFoundryRange(),
            requires_street:true,
            big_recalculations:true,
            sound:'construction',
            upgrades_to:'foundry_big',
        },
    
        {
            name: 'Adv. Iron Mine',
            id: 41,
            image: 'premium_iron_mine',
            grid_key: 'premium_iron_mine',
            grid_color:'#a70',
            descriptionFun: 'GetIronMineDescription(_grid,2);',
            can_connect_to_these_buildings:['foundry','foundry_big'],
            // only_specific_tiles: ['hill','mountain'],
            cost:{
                gems: 35,
            },
            // destroy_gold_cost:7500,
            no_terrain_bg:true,
            electricity:-2,
            polution:0,
            has_quick_tool:1,
            no_quick_confirm:1,
            requires_street:true,
            can_connect_to_neighbour_mine:true,
            required_level: STEEL_LEVEL_REQ+2,
            buildEffectPower:10,
            level_up_info:()=>{return GetText('Buildable on plains');},

        }, 
        {
            name: 'Salvage',//salvage city
            id: 52,
            image: 'ui/buldoser',
            grid_key: 'remove_broken_city_notsaved',
            required_level: SALVAGE_LEVEL_REQ,
            description: 'Run through this building and check for important stuff and then clear the tile.',
            only_specific_tiles: ['broken_city_small','broken_city_medium','broken_city_big'],
            cost:{
                gold: 175000,
            },
            has_quick_tool:1,
            mudEffectPower:4,
            buildEffectPower:5,
            healEffectPower:3,
            show_even_if_level_not_met:true,
            works_even_with_building:1,
            extraBuildFun: 'ClearBrokenCity(_grid);',
            sound:'salvage',
            reopen_grid_menu:true,
            is_terrain_modifier:2,
            floating_button:1,
    },
    {
            name: 'Fill',
            id: 53,
            image: 'ui/clay',
            grid_key: 'built_ground_oil_notsaved2',
            description: 'Fill the rift with clay.',
            extraBuildFun: 'FillTheRift(_grid.x,_grid.y);',
            only_specific_tiles: ['rift'],
            cost:{
                gold: 200000, 
                clay: 25,
            },
            requires_upgrade: 34,
            has_quick_tool:1,
            reopen_grid_menu:1,
            mudEffectPower:3,
            buildEffectPower:5,
            is_terrain_modifier:1,
            sound:'bulldozer',
            
        },
        {
            name: 'Fill',//big rift
            id: 54,
            image: 'ui/clay',
            grid_key: 'built_ground_oil_notsaved3',
            description: 'Fill the rift with clay.',
            extraBuildFun: 'FillTheRift(_grid.x,_grid.y);',
            only_specific_tiles: ['rift_big'],
            cost:{
                clay: 150,
                gold: 1200000, 
            },
            requires_upgrade: 34,//UPGRADE!
            reopen_grid_menu:1,
            mudEffectPower:5,
            has_quick_tool:1,
            buildEffectPower:7,
            sound:'bulldozer',
            is_terrain_modifier:1
        },
        {
            name: 'Fill and pipe',
            id: 35,
            image: 'ground_oil',
            grid_key: 'built_ground_oil_notsaved',
            descriptionFun: 'RiftToOilFiller();',
            extraBuildFun: 'FillRiftAndOil(_grid);',
            only_specific_tiles: ['rift'],
            cost:{
                gold: 1720000,
                clay: 24,
            },
            polution: POLLUTION_PER_GROUND_OIL,
            requires_upgrade: 34,
            reopen_grid_menu:1,
            required_level: OIL_LEVEL_REQ+5,
            mudEffectPower:3,
            has_quick_tool:1,
            buildEffectPower:5,
            is_terrain_modifier:1,
            sound:'bulldozer',
        },
        {
            name: 'Destroy',
            id: 55,
            required_level: URANIUM_CLEAN_LVL_REQ,
            image: 'ui/uranium_destroy',
            grid_key: 'destroy_uranium_barrel_notsaved',
            description: 'Destroy uranium barrel.',
            extraBuildFun: 'DestroyUraniumBarrel(_grid.x,_grid.y,1);',
            only_specific_tiles: ['uranium_barrel'],
            cost_fun:'GetDestroyUraniumBarrelCost(_grid.x,_grid.y);',
            show_even_if_level_not_met:true,//teasing tease
            // reopen_grid_menu:1,
            mudEffectPower:6,
            buildEffectPower:7,
            works_on_uranium:1,
            works_even_with_building:1,
            sound:'tadaa4',
            floating_button:1,
            is_terrain_modifier:1,
        },
        {
            name: 'Revitalise',
            id: 56,
            image: 'ui/revitalise',
            grid_key: 'revitalise_scorched_notsaved',
            description: "Turns a Scorched Earth tile to Plain.",
            extraBuildFun: 'RevitaliseFun(_grid);',
            only_specific_tiles: ['scorched'],
            // display_even_if_has_street: true,
            reopen_grid_menu:1,
            cost_fun:'RevitaliseCost(_grid,2);',
            has_quick_tool:1,
            required_level: REVITALISE_SCORCHED_REQURED_LEVEL,
            show_even_if_level_not_met:true,//teasing
            healEffectPower:7,
            mudEffectPower:3,
            sound:'water_drop',
            is_terrain_modifier:1,
        },
        {
            name: 'Search',
            id: 58,
            image: 'ui/sensor_search',
            grid_key: 'sensor_search_notsaved',
            special_use_condition: 'CanSensorManualSearchAgain(_grid)',
            descriptionFun: 'GetSensorTowerDesc();',
            extraBuildFun: 'FindCopperField2(_grid);',
            only_specific_tiles: ['sensor_tower'],
            works_even_with_building:1,
            sound:'sonar1',
            // display_even_if_has_street: true,
            reopen_grid_menu:1,
            cost:{
                gold:COPPER_FIELD_MANUAL_SEARCH_GOLD_COST,
            },
            required_level: COPPER_LEVEL_REQ,
            no_recalculations:1,
            level_up_info: ()=>{return GetText3('This action can be found in building:')+GetText('Sensor Tower');}
        },
        {
            name: 'Highlight',
            id: 59,
            image: 'ui/sensor_search2',
            grid_key: 'sensor_highlight_notsaved',
            description: 'You will highlite selected tile type or building in map',
            extraBuildFun: 'OpenHighlightPopup(_grid);',
            only_specific_tiles: ['sensor_tower'],
            works_even_with_building:1,
            // display_even_if_has_street: true,
            required_level: 47,
            sound:'tap',
            no_recalculations:1,
            level_up_info: ()=>{return GetText3('This action can be found in building:')+GetText('Sensor Tower');}
        },
        {
            name: 'Buildings Overview',
            id: 81,
            image: 'ui/sensor_search3',
            grid_key: 'sensor_search3_notsaved',
            description: "Opens menu with extra building options",
            extraBuildFun: 'OpenSensorTowerMenu2(_grid);',
            only_specific_tiles: ['sensor_tower'],
            works_even_with_building:1,
            required_level: 0,
            sound:'tap',
            no_recalculations:1,
        },
        {
            name: 'Remove Water Oil',
            id: 60,
            image: 'ui/remove_cross',
            grid_key: 'remove_water_oil_notsaved',
            description: 'You will remove the oil and make the water clean. Medium Fish might appear',
            extraBuildFun: 'RemoveWaterOil(_grid);',
            only_specific_tiles: ['oil'],
            show_tile_in_build_grid:['water','oil_water'],
            sound:'bulldozer',

            // display_even_if_has_street: true,
            reopen_grid_menu:1,
            polution: -45,
            cost:{
                gold: 2600000,
                oil: 175000,
                clay: 5
            },
            has_quick_tool:1,
            required_level: REMOVE_WATER_OIL_LEVEL,
            healEffectPower:7,
            is_terrain_modifier:1,
        },
        {
            name: 'Harvest gems',
            id: 61,
            image: 'ui/gem_pickaxe',
            grid_key: 'harvest_gem_notsaved',
            required_level: WATER_GEM_HARVEST_LEVEL,
            description: 'Harvest gems from gem water rocks',
            extraBuildFun: 'HarvestGemsFromRocks(_grid)',
            sound:'pickaxe_metal',
            tease_from_level:1,
            only_specific_tiles: ['water_rocks_gem'],
            // show_tile_in_build_grid:['ui/deep_water'],
            cost_fun:'HarvestGemRocksCost(_grid);',

            buildEffectPower:3,
            mudEffectPower:4,
        },
        {
            name: 'Big Fishing Ship',
            id: 62,
            image: 'ship_big',
            grid_key: 'ship_big',
            required_level: BIG_SHIP_LEVEL_REQ,
            // description: '',
            descriptionFun: 'GetBuildingDescriptionFor_ship(_grid);',
            extraBuildFun: 'ShipSent(_grid,1)',
            // only_specific_tiles: [''],
            cost:{
                gold: 800000,
                steel: 35000,
                oil: 25000,
            },
            sound:'water_drop',
            show_tile_in_build_grid:'water',
            big_fish_placement_is_ok:true,
            draw_radius_rect:1,//meni sa 
            is_water_building:1,
            destroy_gold_cost:50000,
            electricity:0,
            polution:10,
            has_quick_tool:1,
            buildEffectPower:5,
            grid_color:'aqua',
            storage_quick_tool_also_builds:true,
            can_put_into_storage:true,
            big_recalculations:true,
            special_build_condition:'CanSendBigShip(_grid)',
            storage_icons:['water','ship_big','ui/back_button']
        },
        {
            name: 'Palms',
            id: 64,
            image: 'palms',
            grid_key: 'palms',
            required_level: 999,
            forbidden_tiles: ['ground_oil','rubble1','rubble2','rubble3','rubble4','sand','desert'],
            // description: '',
            //  descriptionFun: 'GetBuildingDescriptionFor_palms(_grid);',
            // extraBuildFun: '',
            // special_condition: '',
            // special_build_condition: '',
            // only_specific_tiles: [''],
            // remove_str:'',
            cost:{
                gems: 10,
            },
            no_terrain_bg:true,
            electricity:0,
            polution:-10,
            gold_income:8,
            food_income:5,
            healEffectPower:5,
            is_terrain_modifier:1,
            no_quick_confirm:1,
            has_quick_tool:1,
            requires_street:false,
            disable_label:1,
            sound:'tree_leaves',
        },
        {
            name: 'Remove Ground Oil',
            id: 67,
            image: 'ui/remove_cross',
            grid_key: 'remove_ground_oil_notsaved',
            description: 'Turns the Oil tile into a Plain tile.',
            extraBuildFun: 'RemoveGroundOil(_grid);',
            only_specific_tiles: ['ground_oil'],
            show_tile_in_build_grid:['ground_oil'],
            sound:'bulldozer',

            // display_even_if_has_street: true,
            reopen_grid_menu:1,
            polution: -POLLUTION_PER_GROUND_OIL,
            cost:{
                gold: 1500000,
                rocks: 75000,
                steel: 40000,
                
            },
            has_quick_tool:1,
            required_level: REMOVE_GROUND_OIL_LEVEL,
            healEffectPower:7,
            is_terrain_modifier:1,
        },
        {
            name: 'Remove Thermal Spot',
            id: 73,
            image: 'ui/remove_cross',
            grid_key: 'remove_thermal_spot_notsaved',
            description: 'Turns the thermal spot tile into a Plain tile.',
            extraBuildFun: 'RemoveThermalSpot(_grid);',
            only_specific_tiles: ['thermal'],
            show_tile_in_build_grid:['thermal'],
            forbidden_tiles: ['just_thermalised'],
            sound:'bulldozer',

            // display_even_if_has_street: true,
            reopen_grid_menu:1,
            cost:{
                gold: 3500000,
                rocks: 45000,
                steel: 40000,
                
            },
            confirmation_required:1,
            confirmation_text:GetText("Are you sure you want to clear this thermal spot?"),
            has_quick_tool:1,
            required_level: CLEAR_THERMAL_TILES_LEVEL_REQ,
            healEffectPower:3,
            buildEffectPower:4,
            is_terrain_modifier:1,
        },
        {
            name: 'Micro Cleaners',
            id: 75,
            image: 'rivers/river_t2_9',
            grid_key: 'river_trees',
            descriptionFun: 'River_trees_description(_grid);',
            destroy_gold_cost:50000,
            only_specific_tiles: ['river'],
            show_tile_in_build_grid:['thermal'],
            sound:'bulldozer',

            // display_even_if_has_street: true,
            // reopen_grid_menu:1,
            cost:{
                gold: 6500000,
                chips: 750000,
            },
            has_quick_tool:1,
            power: -5,
            polution: -20,
            required_level: RIVER_TREES_LEVEL_REQ,
            healEffectPower:7,
            is_terrain_modifier:1,
            disabled_storage:1,
            can_replace:['river_cleaner'],
            level_up_info: ()=>{return GetText3('Must be built on terrain type:')+GetText('River');}
        },
        {
            name: 'Event Ship',
            id: 76,
            image: 'event_ship',
            grid_key: 'event_ship',
            required_level: SHIP_EVENT_LEVEL_REQ,
            // description: '',
            descriptionFun: 'GetBuildingDescriptionFor_eventShip(_grid);',
            extraBuildFun: 'EventShipSent(_grid)',
            // only_specific_tiles: [''],
            cost_fun:'EventShipCost(_grid);',
            sound:'water_drop',
            show_tile_in_build_grid:'water',
            big_fish_placement_is_ok:true,
            draw_radius_rect:GetEventShipRadius(),
            is_water_building:1,
            destroy_gold_cost:500,
            electricity:0,
            polution:0,
            has_quick_tool:1,
            buildEffectPower:5,
            grid_color:'aqua',
            storage_quick_tool_also_builds:true,
            can_put_into_storage:true,
            big_recalculations:true,
            event_type:EVENT_FISH_AND_SHIPS,
            tease_from_level:15, 
            special_build_condition:'CanSendEventShip(_grid)',
            storage_icons:['water','ship_big','ui/back_button']
        },        
        {
            name: 'Sequoia',
            id: 78,
            image: 'sekvoja',
            grid_key: 'sekvoja',
            description:'generates gold and significantly reduces pollution.',
            required_level: 999,
            forbidden_tiles: ['ground_oil','rubble1','rubble2','rubble3','rubble4','sand','desert'],
            cost:{
                gems: 15,
            },
            no_terrain_bg:true,
            electricity:0,
            polution:-15,
            gold_income:8,
            healEffectPower:6,
            is_terrain_modifier:1,
            no_quick_confirm:1,
            has_quick_tool:1,
            requires_street:false,
            disable_label:1,
            sound:'tree_leaves',
        },
        {
            name: 'Steel Storage',
            id: 79,
            image: 'steel_storage',
            grid_key: 'steel_storage',
            descriptionFun: 'GetSteelStorageDescription(_grid);',
            // only_specific_tiles: ['golden_field'],
            cost:{
                gold: 190000,
                steel: 15000,
            },
            destroy_gold_cost:5500,
            electricity:0,
            polution:3,
            has_quick_tool:1,
            requires_street:true,
            grid_color:'#a70',
            no_terrain_bg:true,
            // can_connect_to_neighbour_mine:true,
            can_connect_to_same_building:true,
            can_connect_to_neighbour_mine:true,
            required_level: 29,
            buildEffectPower:6,
            // sound:'sawing',
            // click_sound:'sawing',
        },            
        {
            name: 'Revitalise',
            id: 82,
            image: 'ui/revitalise',
            grid_key: 'revitalise_lava_rift_notsaved',
            descriptionFun: 'GetBuildingDescriptionFor_LavaRiftRevit(_grid);',
            extraBuildFun: 'RevitaliseFun(_grid);',
            only_specific_tiles: ['lava_rift'],
            reopen_grid_menu:1,
            cost_fun:'RevitaliseCost(_grid,3);',
            has_quick_tool:1,
            required_level: REVITALISE_LAVA_RIFT_REQURED_LEVEL,
            show_even_if_level_not_met:true,//teasing
            healEffectPower:7,
            mudEffectPower:3,
            sound:'water_drop',
            is_terrain_modifier:1,
        },
        {
            name: 'Thermal spot',
            id: 83,
            image: 'thermal',
            grid_key: 'lava_rift_to_thermal_notsaved',
            descriptionFun: 'GetBuildingDescriptionFor_LavaRiftToThermal(_grid);',
            extraBuildFun: 'LavaRiftToThermalSpot(_grid);',
            only_specific_tiles: ['lava_rift'],
            reopen_grid_menu:1,
            cost_fun:'LavaRiftToThermalCost(_grid);',
            has_quick_tool:1,
            required_level: REVITALISE_LAVA_RIFT_REQURED_LEVEL,
            show_even_if_level_not_mettask:true,//teasing
            healEffectPower:7,
            mudEffectPower:3,
            sound:'water_drop',
            is_terrain_modifier:1,
        },
        {
            name: 'Storage overview',
            id: 84,
            image: 'ui/show_storage',
            grid_key: 'show_storage_notsaved',
            description: "Shows list of items in storage",
            extraBuildFun: 'StorageOverview(_grid);',
            only_specific_tiles: ['sensor_tower'],
            works_even_with_building:1,
            required_level: 30,
            hidden_in_levelup:1,
            sound:'tap',
            no_recalculations:1,
            level_up_info: ()=>{return GetText3('This action can be found in building:')+GetText('Sensor Tower');}
        },
        {
            name: 'Mangrove',
            id: 85,
            image: 'mangrove',
            grid_key: 'mangrove',
            description:'generates gold and reduces pollution. Can only be built on water near the shore.',
            required_level: 999,
            forbidden_tiles: ['oil'],
            cost:{
                gems: 15,
            },
            special_build_condition:'CanBuildMangroves(_grid)',
            special_condition:'CanBuildMangroves(_grid)',
            no_terrain_bg:true,
            electricity:0,
            polution:-8,
            gold_income:9,
            sound:'water_drop',
            healEffectPower:5,
            is_terrain_modifier:1,
            no_quick_confirm:1,
            has_quick_tool:1,
            requires_street:false,
            // disable_label:1,
            is_water_building:1,
            big_fish_placement_is_ok:1,
            show_tile_in_build_grid:'water',
        },        
        {
            name: 'Bamboo',
            id: 86,
            image: 'bambus',
            grid_key: 'bambus',
            description:'material of the future! Generates gold, reduces pollution and increases restoration strength.',
            required_level: 999,
            forbidden_tiles: ['ground_oil','rubble1','rubble2','rubble3','rubble4','sand','desert'],
            cost:{
                gems: 40,
            },
            no_terrain_bg:true,
            electricity:0,
            polution:-10,
            gold_income:9,
            restoration_strength:1,//nieje automaticky pridavane
            healEffectPower:7,
            is_terrain_modifier:1,
            no_quick_confirm:1,
            has_quick_tool:1,
            requires_street:false,
            // disable_label:1,
            sound:'tree_leaves',
        },        
        {
            name: 'Train station',
            id: 87,
            image: 'train_station_vert',
            image_rotation_base: 'train_station',
            grid_key: 'train_station',
            descriptionFun: 'GetTrainStationDescription(_grid);',
            special_condition: 'CanBuildTrainStationPre(_grid)',
            special_build_condition: 'CanBuildTrainStation(_grid)',
            cost:{
                gold: 22000000,
                steel: 25000,
            },
            destroy_gold_cost:155000,
            electricity:150,
            polution:150,
            // has_quick_tool:1,
            requires_street:false,
            grid_color:'#a70',
            no_terrain_bg:true,
            
            // can_connect_to_neighbour_mine:true,
            can_connect_to_same_building:true,
            can_connect_to_neighbour_mine:false,
            required_level: TRAIN_STATION_LEVEL,
            buildEffectPower:7,
            // sound:'sawing',
            // click_sound:'sawing',
        },            
        {
            name: 'Rotate',
            id: 88,
            image: 'ui/rotate_button',
            grid_key: 'rotate_station_notsaved',
            description: "Rotate",
            extraBuildFun: 'RotateStation(_grid);',
            only_specific_tiles: ['train_station'],
            works_even_with_building:1,
            required_level: 0,
            hidden_in_levelup:1,
            sound:'tap',
            no_recalculations:1,
            reopen_grid_menu:1,
        },
        {
            name: 'Rails',
            id: 89,
            image: 'trains/rails_t1_4',
            grid_key: 'rails',
            image_road_rotations_base:'trains/rails_t1_',
            image_river_11:'trains/rails_t1_11_b',
            image_river_12:'trains/rails_t1_12_b',
            image_water_bridge_11:'trains/rails_t1_11_b',
            image_water_bridge_12:'trains/rails_t1_12_b',
            image_over_road_11:'trains/rails_t1_11_b_road',
            image_over_road_12:'trains/rails_t1_12_b',
            descriptionFun: 'GetRailsDescription(_grid);',
            special_condition: 'CanBuildRailsPre(_grid)',
            special_build_condition: 'CanBuildRails(_grid)',
            cost:{
                gold: 1000000,
                steel: 25000,
                rocks: 5000,
            },
            destroy_gold_cost:15000,
            electricity:0,
            polution:2,
            show_tile_in_build_grid:'grass',
            has_quick_tool:1,
            requires_street:false,
            grid_color:'#a70',
            allows_build_on_straight_rivers:1,
            big_fish_placement_is_ok:true,
            display_even_if_has_street:true,
            required_level: TRAIN_STATION_LEVEL,
            buildEffectPower:5,
        },                    
    ];

    // special_condition: 'CanDeepWater(_grid)',
    // special_build_condition: 'CanDeepWater(_grid,1)',


    for(let _b of BUILDINGS){
        if(!_b.required_level){
            _b.required_level=0;
        }
        if(_b.electricity){
            _b.base_electricity= _b.electricity;
        }
        BUILDINGS_BY_KEYS[_b.grid_key]=_b;
        if(BUILDINGS_BY_IDS[_b.id]){
            console.error('two buildings with same id exists: ',_b.id,BUILDINGS_BY_IDS[_b.id].grid_key,_b.grid_key);
        }
        if(_b.id>BUILDINGS.length+13){
            console.error('too big building id ',_b.id,'daj:',BUILDINGS.length+13);
        }
        BUILDINGS_BY_IDS[_b.id]=_b;
        if(!_b.requires_street || _b.is_water_building){
            if(!_b.is_shipyard){
                BUILDING_WITHOUT_CONNECTION_REQUIREMENT[_b.grid_key]=1;
            }
        }
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT['farmfield']=1;
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT['farmfield2']=1;
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT['ship']=1;
        if(_b.can_connect_to_same_building){
            BUILDINGS_THAT_CAN_CONNECT_TO_THEMSELFS[_b.grid_key]=1;
        }
        if(_b.can_connect_to_neighbour_mine){
            BUILDINGS_THAT_CAN_CONNECT_TO_MINES[_b.grid_key]=1;
            BUILDINGS_THAT_MINES_CAN_BE_CONNECTED_TO[_b.grid_key]=1;
        }
        // BUILDINGS_THAT_MINES_CAN_BE_CONNECTED_TO['foundry']=1;
        if((_b.cost && _b.cost.gems) || _b.can_put_into_storage){
            POSSIBLE_IN_STORAGE.push(_b.grid_key);
        }
    }
}

const BUILDINGS_BY_KEYS={};
const BUILDINGS_BY_IDS={};
const BUILDING_WITHOUT_CONNECTION_REQUIREMENT={};
const BUILDINGS_THAT_CAN_CONNECT_TO_THEMSELFS={};
const BUILDINGS_THAT_CAN_CONNECT_TO_MINES={};
const BUILDINGS_THAT_MINES_CAN_BE_CONNECTED_TO={};










function HasUpgrade(_id){
    return GetPlayerUpgradeValue(_id); 
}
function GetPlayerUpgradeValue(_id,_def){
    if(!upgrades) return _def;
    let _u = UPGRADES_BY_ID[_id];
    if(_u){
        let _lvl=GetPlayerUpgrade(_u);
        if(_lvl){
            return _lvl * _u.value;
        }else{
            _def?_def:0; 
        }
    }
    return _def?_def:0;
}
function GetPlayerUpgrade(_u){
    if(!hrac.upgrades){
        hrac.upgrades=[];
    }
    if(hrac.upgrades[_u.id]==undefined){
        for(let i=0;i<=_u.id;i++){
            if(!hrac.upgrades[i]){
                hrac.upgrades[i]=0;
            }
        }
        
    }

    return hrac.upgrades[_u.id];
}

function GetUpgradeCountOverview(){
    if(!HasLevel(10)){
        return '';
    }
    let _totalUpgrades = GetPlayerTotalUpgradeLevel();
    return ': '+_totalUpgrades+' / '+GetTotalTotalUpgradeLevels();
}
function RefreshUpgradesCountOverview(){
    SetInner('upgrades_count_overview',GetUpgradeCountOverview());
}

function GetUpgradeGoldCost(_u){
    return GetUpgradeCost(_u,_u.costs.gold);
}
function GetUpgradeCosts(_u){
    let _costs = {};
    for(let _t in _u.costs){
        _costs[_t] = GetUpgradeCost(_u,_u.costs[_t]);
    }
    return _costs;
}
function GetUpgradeCost(_u,_value,_lvl){
    if(_lvl===undefined){
        _lvl = GetPlayerUpgrade(_u);
    }
    let _c = _value*Math.pow(_u.mat_exponent,_lvl);
    if(_c>100)_c=Math.round(_c/10)*10;
    return SimplifiedNumber(_c);
}

function GetUpgradeGemCost(_u){
    let _c = Math.round(_u.gems*Math.pow(1.20,GetPlayerUpgrade(_u)));
    if(_c>100)_c=Math.round(_c/10)*10;
    if(_c > _u.gems * 2){
        _c = _u.gems * 2;
    }
    return _c;
}


function RefreshUpgrades(){
    SetInner('upgrades_container',GetUpgradesInner());
}

function ToggleUpgradesVisibility(){
    isResearchedVisible=!isResearchedVisible;
    const imgUrl = getAssetUrl(`public/images/ui/eye_${isResearchedVisible ? 'open' : 'closed'}.png`);
    ClickBottomMenu(2,1);
    SetInner('eyeButDiv',`<img src="${imgUrl}">`);

}

function LevelUpPopup(_lvl){ //dolevelup
    CloseBottomMenu();
    return ShowNewFeatures(0,_lvl);
}
function ShowNewFeatures(_listing,_page){
    let _out='';
    if(!_page)_page=GetPlayerLevel();


    if(_listing && HasLevel(4)){
        let _paging='';
        if(_page>3)_paging+=ClickSpan(GetTileImage('ui/upsalebut',40,'arrow_left'),'ShowNewFeatures(1,'+(_page-1)+');',{sound:'book_listing'});
        else _paging+=GetTileImage('ui/upsalebut',40,'arrow_left disabled');
        _paging+='<div style="display:inline-block;width:220px;"></div>';
        if(_page<GetPlayerLevel())_paging+=ClickSpan(GetTileImage('ui/upsalebut',40,'arrow_right'),'ShowNewFeatures(1,'+(_page+1)+');',{sound:'book_listing'});
        else _paging+=GetTileImage('ui/upsalebut',40,'arrow_right disabled');
        _out+='<div class="teasing-arrows">'+FSize(20,_paging)+'</div>';

    }
    let _buildings=GetFeatureTeasingInfo(_page);
    let _upgrades='';
    for(let _u of upgrades){
        if(HasLevel(11) || (_u.costs))
        if(_u.min_town_level == _page){
            _upgrades+=CheckAndReturnUpgradeUpsale(_u.id,'CloseBasicPopup();',_listing);
        }
    }

    if(_buildings){
        _out+=_buildings+BR;
    }else{
        if(_listing){
            _out+=BRBR+BRBR+BRBR;
        }
        if(!_upgrades){
            _out+=BRBR;
        }

    }

    let _lvlUpString = '';
    if(_listing){
        _lvlUpString='';
    }else{
        _lvlUpString = SPC+SPC+'<div style="display:inline-block;position:relative;">'+GetIconImage('level_icon',110)+'<div class="level-number">'+_page+'</div></div>';
        if(window.innerWidth>400){
            _lvlUpString=SPC+SPC+_lvlUpString;
        }
    }
    
    if(_upgrades){
        _out+=Center(Bold(FSize(18,ColorSpan(_listing?'var(--darker-color)':'var(--light-color-2)',GetTextCAPS('New Upgrades')))))+BR+_upgrades;
    }
    if(!_upgrades && !_buildings){
        _out='<div class="level-up"><div class="level-up-bg"></div>'+GetIconImage('thumbsup',110)+_lvlUpString+'<div class="level-up-nfu"></div></div>'+_out;
        _out+=Center(ColorSpan(_listing?'var(--darker-color)':'var(--light-color-2)',GetText('Nothing new, come check later in next update.')))+BRBR;

    }else{
        if(!_listing){
            _out='<div class="level-up"><div class="level-up-bg"></div>'+GetIconImage('thumbsup',110)+_lvlUpString+'<div class="level-up-nfu">'+GetText('New feature unlocked!')+'</div></div>'+_out;
        }
    }

    if(_out){
        _out+=BR;
        let _options = {refresh_id:'feature_listing'};
        if(_listing){
            _options.top_y = 85;
        }else{
            // _options.bg_color = '#31343b';
            _options.max_width = window.innerWidth-55;
            _options.max_height_vh = 80;
            _options.class = 'level-up-popup';
            _options.style = 'border-radius:20px;';

        }

        DoBasicPopup(_out,_listing?GetText2('Unlocked features at level')+_page:GetText('LEVEL UP!'),_options);
    }
}



function IsUpgradeAvailableById(_id,_checkMaxLevel,_minusLevel){
    let _u = upgrades.find(u=>u.id == _id);
    if(_u){
        return IsUpgradeAvailable(_u,_checkMaxLevel,_minusLevel);
    }
    return false;
}
function IsUpgradeAvailable(_u,_checkMaxLevel,_minusLevel){
    let _totalUpgrades = GetPlayerTotalUpgradeLevel();
    if(!_u.eventy_type || GetEventType()==_u.eventy_type)
    if(!_u.min_level || _totalUpgrades>=_u.min_level || !enabledSaving2)
    if(!_u.min_town_level || HasLevel(_u.min_town_level-(_minusLevel?_minusLevel:0))){
        if(_checkMaxLevel){
            let _lvl = GetPlayerUpgrade(_u);
            if(_lvl >= _u.max_level){
                return false;
            }else{
                return true;
            }

        }else{
            return true;
        }
    }
    return false;
}

function IsNewUpgrade(_u){
    if(_u.id>=NEWEST_UPG_ID || _u.min_town_level==GetPlayerLevel()) return 1;
    return 0;
}

function GetUpgradeName(_u){
    return GetText(_u.label)+(_u.label_sufix?_u.label_sufix:'');
}
function GetUpgradeNameById(_id){
    return GetUpgradeName(UPGRADES_BY_ID[_id]);
}

let upgradesThen=0;
let upgradesNow=0;
let isResearchedVisible=true;
let highlightUpgradeId=0;
function GetUpgradesInner(){
    let _out='';
    
    upgradesThen=upgradesNow;
    upgradesNow=0;

    let _upgrades2=CopyArray(upgrades);
    _upgrades2.sort((a,b)=>(IsNewUpgrade(b)!=IsNewUpgrade(a))?IsNewUpgrade(b)-IsNewUpgrade(a):b.min_town_level-a.min_town_level);
    
    for(let _u of _upgrades2){
        if(IsUpgradeAvailable(_u) || (GetPlayerUpgrade(_u)>=_u.max_level )){
            let _lvl = GetPlayerUpgrade(_u);
            upgradesNow++;
            if(!isResearchedVisible && _lvl >= _u.max_level){
                continue;
            }
            if(IsNewUpgrade(_u)){
                _out+='<div class="new-upgrade">'+GetTextCAPS('NEW UPGRADE')+'!</div>';
            }
            if(_u.eventy_type){
                _out+='<div class="event-upgrade">'+GetEventLabel()+'!</div>';
            }
            _out+='<div style="'+(highlightUpgradeId==_u.id?'border:5px #69f787 solid;':'')+'" id="upgrade_div_'+_u.id+'" class="upgrade_div '+(_lvl>=_u.max_level?'fully_upgraded':'')+'" onclick="BuyUpgrade('+_u.id+');">';
            _out+='<table cellspacing="0"><tr>';
            if(_u.icon){
                let _size=60;
                if(window.innerWidth<380)_size=35;
                _out+='<td width="'+_size+'" style="padding-left:5px;padding-top:5px;">'+GetTileImage(_u.icon,_size,'')+'</td>';
            }
            _out+='<td class="upgrade-desc">';
            _out+='<div class="upgrade-label">'+GetUpgradeName(_u)+'</div>';
            if(testVersion)_out+='['+_u.id+']';
            _out+=GetUpgradeDescription(_u);
            if(_u.id==93){
                _out+=BR+GetText('Multitool can be set as always active in the settings.');
                
            }
            if(CLEANING_UPGRADES.includes(_u.id)){
                _out+=BR+GetText2('Restoration strength')+' +'+PCislo(_u.value)+RestorationIcon();

            }
            _out+='</td><td class="upgrade-but" rowspan="2">';
            
            if(_lvl >= _u.max_level){
                _out+=GetIconImage('upgrade_done',50);

            }else{
                _out+=GetIconImage('upgrade_but',50);
                _out+=BR+GetText3('Level: ')

            }
            _out+=BR+_lvl+' / '+_u.max_level;
            _out+='</td></tr>';
            _out+='<tr><td class="upgrade-cost" '+(_u.icon?' colspan="2"':'')+'>';
            if(_lvl < _u.max_level){
                if(_u.costs){
                    _out+=GetText3('Cost: ')+PMats(GetUpgradeCosts(_u),24);
                }
                if(_u.gems){
                    if(_u.costs){
                        _out+=SPC+GetText('or')+SPC;
                    }else{
                        _out+=GetText3('Cost: ');

                    }
                    _out+=PMat(GetUpgradeGemCost(_u),2,24);
                }
            }else{
                _out+=GetTextCAPS('MAXED');
            }
            _out+='</td></tr></table>';
            _out+='</div>';            
        }
    }
    if(!_out){
        _out=BRBR+Center(FSize(18,ColorSpan('var(--light-color-2)',GetText('All upgrades acquired. Try again later!'))))+BRBR
    }else if(!HasLevel(highest_level_with_upgrade)){
        _out+=Center(GetText('More upgrades will become available at higher levels.')+BR,'bottom-info');
    }

    if(BOUNDERIES_LEFT<240)
    if(HasLevel(60))
    if(!gamePaused){
        _out+=BRBR+Center(Button('Expand Map','ExpandMapPopup()'));
    }

    return BR+_out+BR;
}

function BuyUpgrade(_id,_type,_confirmed){
    let _u = upgrades.find(u=>u.id == _id);
    if(_u){
        if(GetPlayerUpgrade(_u) < _u.max_level){
            if(!_type && _u.costs && _u.gems){
                let _out='';
                _out+=Bold(GetText(_u.label))+BRBR;
                _out+=GetText3('Cost:')+BRBR;
                _out+='<div class="no-line-wrap">'+Button(PMat(GetUpgradeGemCost(_u),2),'BuyUpgrade('+_id+',2,1);',{super_button:'teal'});
                _out+=' '+GetText('or')+' '+Button(PMats(GetUpgradeCosts(_u)),'BuyUpgrade('+_id+',1);')+'</div>';
                _out+=BRBR;
                DoBasicPopup(_out,GetText('Choose cost'),{centerised:1});
                PlayTap();
                return false;
            }
            let _bought=false;
            if((!_type || _type==1) && _u.costs && MamDostMats(GetUpgradeCosts(_u),1)){
                _bought=true;
            }
            if((!_type || _type==2) && _u.gems){
                if(!AreYouSure(_confirmed,GetText('Are you sure you want to buy this upgrade for {att1} gems?',PMat(GetUpgradeGemCost(_u),2)),GetText('Premium purchase'),'BuyUpgrade('+_id+',2,1);',GetTextCAPS('BUY'))){
                    PlayTap();
                    return false;
                }

                if(MamDostGemov(GetUpgradeGemCost(_u),1)){
                    _bought=true;
                }
            }
            if(_bought){
                upsaleItems=[];
                BuyUpgradeAfterEffects(_u);
                if(_u.id == 10){
                    //activate activist
                    let _dirtyBlocks=GetDirtyBlocks();
                    for(let i=0;i<=20;i++){
                        let _gridAct = GetRandomItemFromArray(_dirtyBlocks);
                        if(_gridAct){
                            _gridAct.activists = MyRand(15,35)+_gridAct.znecistenie;
                            ResetReadyStatusOptiBlockByGrid(_gridAct);
                        }
                    }
                }

                if(upgradesNow>upgradesThen){
                    showUpgradesTO=setTimeout(() => {
                        ClickBottomMenu(2,1);                        
                    }, 1250);
                }
                if(_type){
                    CloseBasicPopup();
                }
                RefreshUpgradesCountOverview();
                RefreshUpgrades();
                RefreshUpgradesLeftbox();
            }else{
                PlaySound('ee');
            }
        }else{
            AddFloatingError(GetText('max level'));
            PlaySound('ee');
        }
    }
}

function BuyUpgradeAfterEffects(_u){
    anyActionDone++;
    hrac.upgrades[_u.id]++;
    TryAddEffectOfSomeUpgrades();
    HardRecalculateAllStats();//ZratajHracStats();
    RefreshHeader();
    PlaySound('upgrade');
    if(_u.id==21){
        for(let _t of allTowns){
            if(_t.mesto && _t.mesto<5){
                _t.mesto=5;
            }
        }
    }
    if(_u.id==58){
        ChangeAllChestsToEasy();
    }
    if(_u.id==2 || _u.id==108){
        InitAllGridNeighbours();
    }
    AddFloatingTextToMousePos(GetText('Upgraded'),'lime');
    


}
let showUpgradesTO=0;

let upgraded_once=[];
let hasAdvancedInfrastructure=0;
function TryAddEffectOfSomeUpgrades(){
    if(hrac.upgrades[28]){ //(28)
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT.wood_storage=1;
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT.saw_mill=1;
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT.farm=1;
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT.farm_big=1;
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT.heavy_lumber_mill=1;
        SetConnectionToBuildingThatNeedNoConnection();
    }
    if(hrac.upgrades[105]){ //(105)
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT.thermal_plant=1;
        SetConnectionToBuildingThatNeedNoConnection();
    }
    if(hrac.upgrades[25]){
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT.watch_tower=1;
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT.sensor_tower=1;
        SetConnectionToBuildingThatNeedNoConnection();
    }
    if(hrac.upgrades[49]){
        if(!BUILDINGS_BY_KEYS['river_cleaner'].base_polution)BUILDINGS_BY_KEYS['river_cleaner'].base_polution=BUILDINGS_BY_KEYS['river_cleaner'].polution;
        BUILDINGS_BY_KEYS['river_cleaner'].polution = Mro((GetPlayerUpgradeValue(49)*0.01+1)*BUILDINGS_BY_KEYS['river_cleaner'].base_polution);
    }
    if(hrac.upgrades[109]){
        if(!BUILDINGS_BY_KEYS['river_trees'].base_polution)BUILDINGS_BY_KEYS['river_trees'].base_polution=BUILDINGS_BY_KEYS['river_trees'].polution;
        BUILDINGS_BY_KEYS['river_trees'].polution = Mro((GetPlayerUpgradeValue(109)*0.01+1)*BUILDINGS_BY_KEYS['river_trees'].base_polution);
    }
    if(hrac.upgrades[65]){
        // if(!BUILDINGS_BY_KEYS['oilrig'].base_power)BUILDINGS_BY_KEYS['oilrig'].base_power=BUILDINGS_BY_KEYS['oilrig'].power;
        BUILDINGS_BY_KEYS['oil_rig'].electricity = GetPlayerUpgradeValue(65);
    }
    if(hrac.upgrades[84]){
        BUILDINGS_BY_KEYS['solarpanels'].electricity = Mro(BUILDINGS_BY_KEYS['solarpanels'].base_electricity * (100+GetPlayerUpgradeValue(84)) * 0.01);
    }
    if(hrac.upgrades[85]){
        BUILDINGS_BY_KEYS['thermal_plant'].electricity = Mro(BUILDINGS_BY_KEYS['thermal_plant'].base_electricity + GetPlayerUpgradeValue(85));
    }
    if(hrac.upgrades[86]){
        BUILDINGS_BY_KEYS['rock_mine2'].electricity = Mro(BUILDINGS_BY_KEYS['rock_mine2'].base_electricity + GetPlayerUpgradeValue(86));
    }
    if(hrac.upgrades[88]){
        BUILDINGS_BY_KEYS['golden_mine_premium_2'].electricity = GetPlayerUpgradeValue(88);
    }
    if(hrac.upgrades[26]){
        if(!BUILDINGS_BY_KEYS['ship_big'].base_draw_radius_rect)BUILDINGS_BY_KEYS['ship_big'].base_draw_radius_rect=BUILDINGS_BY_KEYS['ship_big'].draw_radius_rect;
        BUILDINGS_BY_KEYS['ship_big'].draw_radius_rect = GetPlayerUpgradeValue(26);
    }

    if(hrac.upgrades[17]){
        if(!BUILDINGS_BY_KEYS['farm_big'].base_draw_radius_rect)BUILDINGS_BY_KEYS['farm_big'].base_draw_radius_rect=BUILDINGS_BY_KEYS['farm_big'].draw_radius_rect;
        BUILDINGS_BY_KEYS['farm_big'].draw_radius_rect = GetPlayerUpgradeValue(17)+BUILDINGS_BY_KEYS['farm_big'].base_draw_radius_rect;
        if(!BUILDINGS_BY_KEYS['farm'].base_draw_radius_rect)BUILDINGS_BY_KEYS['farm'].base_draw_radius_rect=BUILDINGS_BY_KEYS['farm'].draw_radius_rect;
        BUILDINGS_BY_KEYS['farm'].draw_radius_rect = GetPlayerUpgradeValue(17)+BUILDINGS_BY_KEYS['farm'].base_draw_radius_rect;
    }
    if(hrac.upgrades[56]){
        if(!BUILDINGS_BY_KEYS['tanker'].base_draw_radius_rect)BUILDINGS_BY_KEYS['tanker'].base_draw_radius_rect=BUILDINGS_BY_KEYS['tanker'].draw_radius_rect;
        BUILDINGS_BY_KEYS['tanker'].draw_radius_rect = GetPlayerUpgradeValue(56)+BUILDINGS_BY_KEYS['tanker'].base_draw_radius_rect;
    }
    if(hrac.upgrades[68] && !upgraded_once[68]){
        upgraded_once[68]=1;
        BUILDINGS_BY_KEYS['oil_rig_ground'].cost.gold = BUILDINGS_BY_KEYS['oil_rig_ground'].cost.gold*0.5;
        BUILDINGS_BY_KEYS['oil_rig'].cost.gold = BUILDINGS_BY_KEYS['oil_rig'].cost.gold*0.5;
    }
    if(hrac.upgrades[12]){
        if(!BUILDINGS_BY_KEYS['saw_mill'].base_draw_radius_rect)BUILDINGS_BY_KEYS['saw_mill'].base_draw_radius_rect=BUILDINGS_BY_KEYS['saw_mill'].draw_radius_rect;
        BUILDINGS_BY_KEYS['saw_mill'].draw_radius_rect = GetPlayerUpgradeValue(12)+BUILDINGS_BY_KEYS['saw_mill'].base_draw_radius_rect;
        if(!BUILDINGS_BY_KEYS['heavy_lumber_mill'].base_draw_radius_rect)BUILDINGS_BY_KEYS['heavy_lumber_mill'].base_draw_radius_rect=BUILDINGS_BY_KEYS['heavy_lumber_mill'].draw_radius_rect;
        BUILDINGS_BY_KEYS['heavy_lumber_mill'].draw_radius_rect = GetPlayerUpgradeValue(12)+BUILDINGS_BY_KEYS['heavy_lumber_mill'].base_draw_radius_rect;
        if(!BUILDINGS_BY_KEYS['premium_lumber_mill'].base_draw_radius_rect)BUILDINGS_BY_KEYS['premium_lumber_mill'].base_draw_radius_rect=BUILDINGS_BY_KEYS['premium_lumber_mill'].draw_radius_rect;
        BUILDINGS_BY_KEYS['premium_lumber_mill'].draw_radius_rect = GetPlayerUpgradeValue(12)+BUILDINGS_BY_KEYS['premium_lumber_mill'].base_draw_radius_rect;
    }
    if(hrac.upgrades[51]){
        hasAdvancedInfrastructure=1;
    }
    
    if(hrac.upgrades[52]){
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT.oil_rig_ground=1;
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT.oil_storage=1;
        BUILDING_WITHOUT_CONNECTION_REQUIREMENT.rift_miner=1;
        SetConnectionToBuildingThatNeedNoConnection();
    }
    if(!HasLevel(COPPER_LEVEL_REQ+3)){
        BUILDINGS_BY_KEYS.chip_factory.only_specific_tiles=null;
    }
}

function SetConnectionToBuildingThatNeedNoConnection(){
    for(let _x in myGridData) for(let _y in myGridData[_x]) if(myGridData[_x][_y]){
        if(myGridData[_x][_y].building_type && BUILDING_WITHOUT_CONNECTION_REQUIREMENT[myGridData[_x][_y].building_type]){
            myGridData[_x][_y].is_connected=true;
            myGridData[_x][_y].ignores_connection=true;
            ResetReadyStatusOptiBlockByGrid(myGridData[_x][_y]);
        }
    }
}

function GetTotalTotalUpgradeLevels(){
    let _totalUpgrades = GetPlayerTotalUpgradeLevel();
    let _total =0;
    for(let i in upgrades){
        let _u = upgrades[i];
        if(_u && _u.min_town_level <999){
            if(!_u.min_level || _totalUpgrades>=_u.min_level){
                if(!_u.min_town_level || HasLevel(_u.min_town_level) || HasUpgrade(_u.id)){
                    _total+=_u.max_level;
                }
            }
        }
    }
    return _total;
}
function GetPlayerTotalUpgradeLevel(){
    let _total =0;
    for(let i in hrac.upgrades){
        if(hrac.upgrades[i]){
            _total+=hrac.upgrades[i]*1;
        }

    }
    return _total;
}


let lastUpgradeScroll2=0;
let lastUpgradeScroll3=0;
let lastUpgradeScroll4=0;
function UpgradesScrollChange(eve,_this,_type){
    if(_type==2){
        lastUpgradeScroll2=_this.scrollTop;
    }
    if(_type==3){
        lastUpgradeScroll3=_this.scrollTop;
    }
    if(_type==4){
        lastUpgradeScroll4=_this.scrollTop;
    }
    // console.log(_this.scrollTop)
}



function GetUpgradeDescription(_u){
    let _val = _u.value;
    if(_val>1000){
        _val = PCislo(Mro(_u.value));
    }
    
    let _desc = GetText(_u.desc);
    if(_u.att1_building_name_key){
        _desc = _desc.replaceAll('{att1}',Bold(GetText(BUILDINGS_BY_KEYS[_u.att1_building_name_key].name)));
    }
    if(_u.descFun){
        _desc += eval(_u.descFun);
    }
    return _desc.replaceAll('{num1}',_val).replaceAll('{TTT}',GetBunkerTownLabel()).replaceAll('{b}','<b>').replaceAll('{/b}','</b>').replaceAll('{super_clicker_icon}',FloatingTextIcon('super_clickers',20,5));
}


const upgrades=[
    {
        id:1,
        label: 'Coin Purse',
        desc: 'upgrade_desc_1'  ,
        value: 5,
        costs:{
            gold: 500, 
        },
        mat_exponent: 1.5, 
        max_level: 8,
        min_level:-3,
        min_town_level:-3,
    },
    {
        id:2,
        label: 'Makeshift Radar',
        desc: 'upgrade_desc_2'  ,
        value: 1,
        costs:{
            gold: 2000000, 
        },
        gems:600,
        mat_exponent: 1, 
        max_level: 1,
        min_level:5,
        min_town_level:11
    },
    {
        id:3,
        label: 'Taxmans Ledger',
        desc: 'upgrade_desc_3'  ,
        value: 3,
        costs:{
            gold: 12000, 
        },
        mat_exponent: 1.5, 
        max_level: 10,
        min_level:-1,
        min_town_level:7,
    },
    {
        id:4,
        label: 'Modest Hammock',
        desc: 'upgrade_desc_4'  ,
        value: 15,
        costs:{
            gold: 8000, 
        },
        mat_exponent: 1.5, 
        max_level: 8,
        min_level:5,
        min_town_level:8,
    },
    {
        id:5,
        label: 'Revitalizers',
        desc: 'upgrade_desc_5'  ,
        value: 2,
        costs:{
            gold: 15000, 
        },
        mat_exponent: 1.5, 
        max_level: 5,
        min_level:8,
        min_town_level: 4
    },
    {
        id:6,
        label: 'Restoration mechanism',
        label_sufix: ' 1.0',
        desc: 'restoration upgrade description' ,
        value: 1,
        costs:{
            gold: 30000, 
        },
        mat_exponent: 1.4, 
        max_level:10,
        min_level:3,
        min_town_level:5
    },
    {
        id:7,
        label: 'Nose for Treasure',
        desc: 'upgrade_desc_7'  ,
        value: 1,
        costs:{
            gold: 50000, 
        },
        mat_exponent: 5, 
        max_level: 4,
        min_level:20,
        min_town_level:16
    },
    {
        id:8,
        label: 'Construction Guilds',
        desc: 'upgrade_desc_8'  ,
        value: 5,
        costs:{
            gold: 3000, 
        },
        mat_exponent: 1.25, 
        max_level: 15,
        min_level:2,
        min_town_level:3
    },
    {
        id:9,
        label: 'Forester',
        desc: 'upgrade_desc_9'  ,
        value: 1,
        costs:{
            gold: 100000, 
        },
        mat_exponent: 1.5, 
        gems:300,
        max_level: 1,
        min_level:999+6,
        min_town_level:999+9
    },
    {
        id:10,
        label: 'Active Activists',
        desc: 'upgrade_desc_10' ,
        value: 1,
        costs:{
            gold: 3000000, 
        },
        gems:150,
        mat_exponent: 1, 
        max_level: 1,
        min_level:18,
        min_town_level:ACTIVISTS_REQURED_LEVEL,
    },
    {
        id:11,
        label: 'Better Gold Ads',
        desc: 'upgrade_desc_11' ,
        value: 20,
        costs:{
            chips: 50000, 
        },
        mat_exponent: 1.5, 
        gems:120,
        max_level: 5,
        min_level:4,
        min_town_level:30
    },
    {
        id:12,
        label: 'Advanced Saw',
        desc: 'upgrade_desc_12' ,
        value: 1,
        costs:{
            gold: 250000, 
        },
        gems:400,
        mat_exponent: 4, 
        max_level: 1,
        min_level:25,
        min_town_level:9,
    },
    {
        id:13,
        label: 'Bulldozer',
        desc: 'upgrade_desc_13' ,
        value: 1,
        costs:{
            gold: 19000, 
        },
        icon: 'ui/buldoser',
        mat_exponent: 4, 
        min_level: 0,
        max_level: 1,
        min_town_level:5,
    },
    {
        id:14,
        label: 'Bunker Upgrade Kit',
        desc: 'upgrade_desc_14' ,
        value: 3,
        gems: 300, 
        max_level: 1,
        min_level:3,
        min_town_level:10
    },
    {
        id:15,
        label: 'Big Earner',
        desc: 'upgrade_desc_15' ,
        value: 2, //NEMENIT lebo v texte je double
        gems: 800, 
        max_level: 1,
        min_level:3,
        min_town_level:GEMS_LEVEL_REQUIRED,
    },
    {
        id:16,
        label: 'Fridge',
        desc: 'upgrade_desc_16' ,
        value: 1,
        gems: 700, 
        max_level: 1,
        min_level:1,
        icon:'ui/food',
        min_town_level:11
    },
    {
        id:17,
        label: 'Big Farms',
        desc: 'upgrade_desc_17' ,
        value: 1,
        gems: 500, 
        max_level: 1,
        min_level:0,
        icon:'farm',
        min_town_level:FARM_REQURED_LEVEL
    },
    {
        id:18,
        label: 'Farming Implements',
        desc: 'upgrade_desc_18' ,
        value: 2, //NEMENIT lebo v texte je double
        gems: 1100, 
        max_level: 1,
        min_level:0,
        icon:'farmfield2',
        min_town_level:FARM_REQURED_LEVEL
    },
    {
        id:19,
        label: 'Super cleaner',
        desc: 'upgrade_desc_19' ,
        value: 2, //NEMENIT lebo v texte je double
        gems: 1400, 
        max_level: 1,
        min_level:8,
        icon:'ui/menu_star',
        min_town_level:18
    },
    {
        id:20,
        label: 'Ultra Clickers',
        desc: 'upgrade_desc_20' ,
        value: 2, //NEMENIT lebo v texte je double
        gems: 2500, 
        max_level: 1,
        min_level:10,
        icon:'ui/super_clickers',
        min_town_level:14
    },
    {
        id:21,
        label: 'Founding Father-in-law',
        desc: 'upgrade_desc_21' ,
        value: 5,
        costs:{
            gold: 200000000, 
        },
        gems: 950, 
        max_level: 1,
        min_level:10,
        min_town_level:22
    },
    {
        id:22,
        label: 'Power Drills',
        desc: 'upgrade_desc_22' ,
        value: 1,
        costs:{
            gold: 80000, 
        },
        mat_exponent: 3, 
        max_level: 5,
        min_level:10,
        min_town_level:13
    },
    {
        id:23,
        label: 'Super Saw',
        desc: 'upgrade_desc_23' ,
        value: 2, //NEMENIT lebo v texte je double
        gems: 800, 
        max_level: 1,
        min_level:15,
        icon:'ui/lumber',
        min_town_level:9,
    },
    {
        id:24,
        label: 'Advanced Logging',
        desc: 'upgrade_desc_24' ,
        value: 10,
        costs:{
            gold: 1000000, 
        },
        mat_exponent: 1.1, 
        gems:40,
        max_level:10,
        min_level:10,
        min_town_level:LUMBER_STORAGE_LEVEL_REQ,
    },
    {
        id:25,
        label: 'Very Curious',
        desc: 'upgrade_desc_25' ,
        value: 1,
        costs:{
            gold: 35000, 
        },
        mat_exponent: 1.25, 
        max_level: 1,
        min_level:10,
        min_town_level:4,
    },
    {
        id:26,
        label: 'Better Nets',
        desc: 'upgrade_desc_26b' ,
        value: 2,
        gems: 800, 
        max_level: 1,
        min_level:15,
        icon:'ship',
        min_town_level:SHIPYARD_LEVEL_REQ,
    },
    {
        id:27,
        label: 'Improved Gold Mines',
        desc: 'upgrade_desc_27' ,
        value: 5,
        costs:{
            gold: 35000, 
        },
        mat_exponent: 1.20, 
        max_level:10,
        min_level:0,
        min_town_level:9,
    },
    {
        id:28,
        label: 'Surrounded by Nature',
        desc: 'upgrade_desc_28' ,
        value: 1,
        gems: 600, 
        max_level: 1,
        min_level:15,
        icon:'sawmill_2',
        min_town_level:FARM_REQURED_LEVEL+3,
    },
    {
        id:29,
        label: 'Breakthrough Wharf-based Technology',
        desc: 'upgrade_desc_29' ,
        value: 1,
        costs:{
            gold: 25000000, 
        },
        gems: 750, 
        max_level: 1,
        min_level:15,
        min_town_level:SHIPYARD_LEVEL_REQ+1,
    },
    {
        id:30,
        label: 'Offline Stock Exchange',
        desc: 'upgrade_desc_30' ,
        value: 60,
        gems: 1800, 
        max_level: 2,
        min_level:15,
        early_minus:5,
        min_town_level:19,
        icon:'ui/goods'
    },
    {
        id:31,
        label: 'Gemly Reward',
        desc: 'upgrade_desc_31' ,
        value: 5,
        gems: 500, 
        max_level: 1,
        min_level:20,
        min_town_level:11,
    },
    {
        id:32,
        label: 'Imperfect Groceries',
        desc: 'upgrade_desc_32' ,
        value: 0.2,
        gems: 1900, 
        max_level: 1,
        min_level:25,
        icon:'ui/food',
        min_town_level:13,
    },
    {
        id:33,
        label: 'Ambitious City Builder',
        desc: 'upgrade_desc_33' ,
        value: 1,
        costs:{
            gold: 150000, 
        },
        mat_exponent: 1.50, 
        max_level: 10,
        min_level:25,
        min_town_level:8,
    },
    {
        id:34,
        label: 'The Void Gazes Back',
        desc: 'upgrade_desc_34' ,
        value: 1,
        costs:{
            gold: 15000000, 
        },
        gems: 1500, 
        max_level: 1,
        min_level:25,
        min_town_level:18,
    },
    {
        id:35,
        label: 'Chest Detector',
        desc: 'upgrade_desc_35' ,
        value: 10,
        gems: 150, 
        max_level: 1,
        min_level:25,
        min_town_level:17,
    },
    {
        id:36,
        label: 'Faster Iron Mines',
        desc: 'upgrade_desc_36' ,
        value: 2,
        gems: 950, 
        max_level: 1,
        min_level:25,
        icon:'iron_mine',
        min_town_level:STEEL_LEVEL_REQ+1,
    },
    {
        id:37,
        label: 'Bulldozer SALE',
        desc: 'upgrade_desc_37' ,
        value: 2,
        gems: 350, 
        max_level: 1,
        min_level:15,
        min_town_level:11,
    },
    {
        id:38,
        label: 'Restoration mechanism',
        label_sufix: ' 2.0',
        desc: 'restoration upgrade description' ,
        value: 2,
        costs:{
            gold: 500000, 
        },
        mat_exponent: 1.5, 
        max_level:5,
        min_level:3,
        min_town_level:10
    },
    {
        id:39,
        label: 'Perfectly Cubed Rocks',
        desc: 'upgrade_desc_39' ,
        value: 20,
        costs:{
            gold: 50000, 
        },
        mat_exponent: 1.5, 
        max_level:5,
        min_level:3,
        min_town_level:ROCK_LEVEL_REQUIREMENT
    },
    {
        id:40,
        label: 'Better Production Lines',
        desc: 'upgrade_desc_40' ,
        value: 2,
        costs:{
            gold: 55000000, 
        },
        gems: 900, 
        max_level:1,
        min_level:3,
        min_town_level:COPPER_LEVEL_REQ
    },
    {
        id:41,
        label: 'Factory Overclock',
        desc: 'upgrade_desc_41' ,
        value: 3,
        gems: 1500, 
        max_level:1,
        min_level:3,
        min_town_level:COPPER_LEVEL_REQ+1,
        icon:'ui/chips'
    },
    {
        id:42,
        label: 'Omnitown',
        desc: 'upgrade_desc_42' ,
        value: 1,
        gems: 3500, 
        max_level:1,
        min_level:3,
        icon:'town6',
        early_minus:5,
        min_town_level:16
    },
    {
        id:43,
        label: 'Restoration mechanism',
        label_sufix: ' 3.0',
        desc: 'restoration upgrade description' ,
        value: 3,
        costs:{
            gold: 1500000, 
        },
        mat_exponent: 1.6,
        gems: 400, 
        max_level:4,
        min_level:3,
        early_minus:5,
        min_town_level:20
    },
    {
        id:44,
        label: 'Restoration mechanism',
        label_sufix: ' 4.0',
        desc: 'restoration upgrade description' ,
        value: 4,
        costs:{
            gold: 7000000, 
        },
        mat_exponent: 1.3,
        gems: 500, 
        max_level:4,
        min_level:3,
        early_minus:5,
        min_town_level:30
    },
    {
        id:45,
        label: 'Advanced Agriculture',
        desc: 'upgrade_desc_45' ,
        value: 1,
        costs:{
            gold: 300000, 
        },
        mat_exponent: 1.2,
        max_level:1,
        min_level:3,
        early_minus:5,
        min_town_level:19
    },
    {
        id:46,
        label: 'Microchip Logistics',
        desc: 'upgrade_desc_46' ,
        value: 1,
        costs:{
            gold: 210000000, 
        },
        mat_exponent: 1.2,
        gems: 900,
        max_level:1,
        min_level:3,
        early_minus:1,
        icon:'chip_factory',
        min_town_level:COPPER_LEVEL_REQ+1
    },
    {
        id:47,
        label: 'Savvy Builder',
        desc: 'upgrade_desc_47' ,
        value: 15,
        gems: 1300, 
        max_level: 1,
        min_level:25,
        min_town_level:17,
        icon:'town5'
    },
    {
        id:48, //autotappainting
        label: 'Advanced Autotapper',
        desc: 'upgrade_desc_48' ,
        value: 3,
        gems: 2500, 
        max_level: 1,
        min_level:25,
        min_town_level:14,
    },
    {
        id:49,
        label: 'Advanced River Cleaner',
        desc: 'upgrade_desc_49' ,
        value: 25,
        costs:{
            gold: 3000000, 
        },
        mat_exponent: 3,
        gems: 125, 
        max_level: 4,
        min_level:25,
        min_town_level:REQ_ELECTRICITY_LEVEL+4,
    },
    {
        id:50,
        label: 'New Initiative',
        desc: 'upgrade_desc_50' ,
        value: 1,
        costs:{
            gold: 3000000, 
        },
        mat_exponent: 2, 
        gems:150,
        max_level: 5,
        min_level:18,
        min_town_level:ACTIVISTS_REQURED_LEVEL+5,
    },
    {
        id:51,
        label: 'Improved infrastructure',
        desc: 'upgrade_desc_51' ,
        value: 1,
        costs:{
            gold: 400000000, 
        },
        gems:900,
        max_level: 1,
        min_level:999+18,
        min_town_level:999+INFRASTRUCTURE_LEVEL_REQUIRED,
    },
    {
        id:52,
        label: 'Advanced Pipe System',
        desc: 'upgrade_desc_52' ,
        value: 1,
        gems:900,
        max_level: 1,
        min_level:18,
        early_minus:2,
        icon:'oil_rig_ground',
        min_town_level:OIL_LEVEL_REQ+2,
    },
    {
        id:53,
        label: 'Restoration mechanism',
        label_sufix: ' 5.0',
        desc: 'restoration upgrade description' ,
        value: 5,
        costs:{
            gold: 30000000, 
        },
        mat_exponent: 1.5,
        gems: 500, 
        max_level:4,
        min_level:3,
        early_minus:5,
        min_town_level:40
    },
    {
        id:54,
        label: 'Ground Oil logistics',
        desc: 'upgrade_desc_54' ,
        value: 4,
        costs:{
            gold: 215000000, 
        },
        mat_exponent: 1.5,
        gems: 300, 
        max_level:1,
        min_level:3,
        min_town_level:TANKERS_LEVEL_REQUIRED
    },
    {
        id:55,
        label: 'Advanced Restoration',
        label_sufix: ' 1.0',
        desc: 'restoration upgrade description' ,
        value: 5,
        costs:{
            chips: 1500000
        }, 
        mat_exponent: 1.5,
        max_level:4,
        min_level:3,
        early_minus:5,
        min_town_level:35
    },
    // --------------------------------- potialto Miso menil texty
    {
        id:56,
        label: 'Tanker booster',
        desc: 'upgrade_desc_56' ,
        value: 2,
        costs:{
            chips: 13000000
        }, 
        gems: 200,
        mat_exponent: 1.5,
        max_level:1,
        min_level:3,
        min_town_level:48,//TANKERS_LEVEL_REQUIRED+xy
    },
    {
        id:57,
        label: 'Offline boost',
        desc: 'upgrade_desc_57' ,
        value: 20,
        gems: 100,
        mat_exponent: 1.5,
        max_level:5,
        min_level:3,
        early_minus:5,
        min_town_level:10
    },
    {
        id:58,
        label: 'Lockpicking',
        desc: 'upgrade_desc_58' ,
        value: 1,
        gems: 1200,
        mat_exponent: 1.5,
        max_level:1,
        min_level:3,
        icon:'chest',
        early_minus:5,
        min_town_level:41
    },
    {
        id:59,
        label: 'Gardening',
        desc: 'upgrade_desc_59' ,
        value: 1,
        costs:{
            gold: 120000000
        }, 
        gems: 350,
        mat_exponent: 1.5,
        max_level:1,
        min_level:3,
        icon:'tree3',
        min_town_level:QUICK_TOOL_FOREST_UPGRADE
    },
    {
        id:60,
        label: 'Advanced Restoration',
        label_sufix: ' 2.0',
        desc: 'restoration upgrade description' ,
        value: 7,
        costs:{
            chips: 5500000
        }, 
        mat_exponent: 1.35,
        max_level:4,
        min_level:1,
        early_minus:5,
        min_town_level:45
    },
    {
        id:61,
        label: 'Premium Restoration',
        label_sufix: ' 2.0',
        desc: 'restoration upgrade description' ,
        value: 10,
        gems: 600,
        mat_exponent: 1.35,
        max_level:3,
        min_level:1,
        early_minus:5,
        min_town_level:19
    },
    {
        id:62,
        label: 'Premium Restoration',
        label_sufix: ' 3.0',
        desc: 'restoration upgrade description' ,
        value: 15,
        gems: 1000,
        mat_exponent: 1.35,
        max_level:3,
        min_level:1,
        early_minus:5,
        min_town_level:40
    },
    {
        id:63,
        label: 'Restoration mechanism',
        label_sufix: ' 6.0',
        desc: 'restoration upgrade description' ,
        value: 6,
        costs:{
            gold: 150000000, 
        },
        mat_exponent: 1.5,
        gems: 550, 
        max_level:4,
        min_level:3,
        early_minus:5,
        min_town_level:50
    },
    {
        id:64,
        label: 'Ocean Sweep upgrade',
        desc: 'upgrade_desc_64' ,
        value: 20,
        costs:{
            oil: 7500000, 
        },
        mat_exponent: 1.5,
        max_level:1,
        min_level:3,
        min_town_level:46
    },
    {
        id:65,
        label: 'Offshore oil rig generator',
        desc: 'upgrade_desc_65' ,
        value: 30,
        costs:{
            oil: 3500000, 
        },
        mat_exponent: 1.5,
        max_level:1,
        min_level:3,
        min_town_level:43
    },
    {
        id:66,
        label: 'Town cleaner',
        desc: 'upgrade_desc_66' ,
        value: 10,
        costs:{
            chips: 14000000, 
        },
        mat_exponent: 1.5,
        max_level:1,
        min_level:3,
        early_minus:5,
        min_town_level:44
    },
    {
        id:67,
        label: 'Town Power Generator',
        desc: 'upgrade_desc_67' ,
        value: 10,
        costs:{
            chips: 20000000, 
        },
        gems:500,
        mat_exponent: 1.5,
        max_level:1,
        min_level:3,
        early_minus:5,
        min_town_level:49
    },
    {
        id:68,
        label: 'Oil rig constructors',
        desc: 'upgrade_desc_68' ,
        value: 50,
        gems:1100,
        mat_exponent: 1.5,
        max_level:1,
        min_level:3,
        min_town_level:32,
        icon:'oil_rig'
    },
    {
        id:69,
        label: 'Mountain healer',
        desc: 'upgrade_desc_69' ,
        value: 4,
        gems:1200,
        costs:{
            oil: 35000000, 
        },
        mat_exponent: 1.5,
        icon:'mountains',
        max_level:1,
        min_level:1,
        early_minus:5,
        min_town_level:MOUNTAIN_HEALER_LEVEL
    },
    {
        id:70,
        label: 'Activists help',
        desc: 'upgrade_desc_70' ,
        value: 3,
        gems:450,
        costs:{
            oil: 4500000, 
        },
        mat_exponent: 1.5,
        max_level:1,
        min_level:1,
        min_town_level:ACTIVIST_HELP_LEVEL
    },
    {
        id:71,
        label: 'Chip Factory Storage',
        desc: 'upgrade_desc_71' ,
        value: 5,
        costs:{
            steel: 5000000, 
        },
        mat_exponent: 1.5,
        max_level:1,
        min_level:1,
        min_town_level:CHIP_FACTORY_STORAGE_UPGRADE_LEVEL
    },
    {
        id:72,
        label: 'Fish Feeding',
        desc: 'upgrade_desc_72' ,
        value: 100,
        gems: 1100,
        mat_exponent: 1.5,
        max_level:1,
        min_level:1,
        min_town_level:CHIP_FACTORY_STORAGE_UPGRADE_LEVEL
    },
    {
        id:73,
        label: 'upgrade_name_73', //Recyclation
        desc: 'upgrade_desc_73' ,
        value: 60,
        costs:{
            gold: 300000000, 
        },
        mat_exponent: 1.5,
        max_level:1,
        min_level:1,
        min_town_level:39
    },
    {
        id:74,
        label: 'upgrade_name_74', //food storage
        desc: 'upgrade_desc_74' ,
        value: 5000,
        costs:{
            gold: 70000000, 
        },
        gems: 70,
        mat_exponent: 1.2,
        max_level:10,
        min_level:1,
        min_town_level:37
    },
    {
        id:75,
        label: 'Premium Restoration',
        label_sufix: ' 1.0',
        desc: 'restoration upgrade description' ,
        value: 5,
        gems: 170,
        max_level:3,
        min_level:1,
        early_minus:5,
        min_town_level:4
    },
    {
        id:76,
        label: 'Advanced Restoration',
        label_sufix: ' 3.0',
        desc: 'restoration upgrade description' ,
        value: 9,
        costs:{
            chips: 13500000
        }, 
        gems: 700,
        mat_exponent: 1.20,
        max_level:4,
        min_level:1,
        early_minus:5,
        min_town_level:55
    },
    {
        id:77,
        label: 'Super Box',
        desc: 'upgrade_desc_77' ,
        value: 1,
        costs:{
            chips: 20000000
        }, 
        gems: 900,
        mat_exponent: 1.20,
        max_level:1,
        min_level:1,
        icon:'ui/into_storage',
        min_town_level:38
    },
    {
        id:78,
        label: 'Gem Pickaxe',
        desc: 'upgrade_desc_78' ,
        value: 1,
        costs:{
            chips: 25000000
        }, 
        mat_exponent: 1.20,
        max_level:1,
        min_level:1,
        min_town_level:49
    },
    {
        id:79,
        label: 'Massive Super Clicker',
        desc: 'upgrade_desc_79' ,
        value: 5,
        costs:{
            gold: 600000000
        }, 
        gems:600,
        mat_exponent: 1.20,
        icon:'ui/super_clickers',
        max_level:1,
        min_level:1,
        min_town_level:27
    },
    {
        id:80,
        label: 'Quick Tool Painting',
        desc: 'upgrade_desc_80' ,
        value: 1,
        gems:1400,
        mat_exponent: 1.20,
        max_level:1,
        min_level:1,
        min_town_level:51
    },
    {
        id:81,
        label: 'Advanced Restoration',
        label_sufix: ' 4.0',
        desc: 'restoration upgrade description' ,
        value: 12,
        costs:{
            chips: 20000000
        }, 
        gems: 900,
        mat_exponent: 1.20,
        max_level:4,
        min_level:1,
        early_minus:5,
        min_town_level:65
    },
    {
        id:82,
        label: 'Premium Restoration',
        label_sufix: ' 4.0',
        desc: 'restoration upgrade description' ,
        value: 25,
        gems: 1500,
        mat_exponent: 1.35,
        max_level:3,
        min_level:1,
        early_minus:5,
        min_town_level:50
    },
    {
        id:83,
        label: 'Restoration mechanism',
        label_sufix: ' 7.0',
        desc: 'restoration upgrade description' ,
        value: 10,
        costs:{
            gold: 450000000, 
        },
        mat_exponent: 1.3,
        gems: 750, 
        max_level:4,
        min_level:3,
        early_minus:5,
        min_town_level:60
    },
    {
        id:84,
        label: 'Solar Chips',
        desc: 'Increases power generation of building: {att1} by {num1}%.',
        att1_building_name_key: 'solarpanels',
        value: 10,
        costs:{
            gold: 150000000, 
        },
        mat_exponent: 1.4,
        max_level:5,
        min_level:3,
        min_town_level:52
    },
    {
        id:85,
        label: 'Thermal Improvements',
        desc: 'Increases power generation of building: {att1} by {num1} {POWER_ICON}' ,
        att1_building_name_key: 'thermal_plant',
        value: 100,
        costs:{
            gold: 1550000000, 
        },
        mat_exponent: 1.4,
        max_level:1,
        min_level:3,
        min_town_level:62
    },
    {
        id:86,
        label: 'Stone Mining Improvments',
        desc: 'Lowers the power drain of structure: {att1} by {num1} {POWER_ICON}' ,
        att1_building_name_key: 'rock_mine2',
        value: 5,
        costs:{
            gold: 200000000, 
        },
        mat_exponent: 1.5,
        max_level:3,
        min_level:3,
        min_town_level:55
    },
    {
        id:87,
        label: 'Storage logistics',
        desc: 'Increases the overall storage by {num1}%.' ,
        value: 10,
        costs:{
            gold: 4000000000, 
        },
        gems:3000,
        mat_exponent: 1.5,
        max_level:1,
        min_level:3,
        early_minus:5,
        icon: 'storage_container',
        min_town_level:55
    },
    {
        id:88,
        label: 'Golden Panels',
        desc: 'Instead of draining power, {att1} will produce {num1} {POWER_ICON} power.',
        att1_building_name_key: 'golden_mine_premium_2',
        value: 30,
        costs:{
            gold: 950000000, 
        },
        mat_exponent: 1.5,
        max_level:1,
        min_level:3,
        min_town_level:60
    },
    {
        id:89,
        label: 'Mega-constructors',
        desc: 'Reduces the overall cost of Mega City upgrades by {num1}%.' ,
        value: 10,
        costs:{
            gold: 3000000000, 
        },
        gems:2250,
        mat_exponent: 1.5,
        max_level:1,
        min_level:3,
        early_minus:5,
        min_town_level:55
    },
    {
        id:90,
        label: 'Premium Storage Bonus',
        desc: 'Increases the storage of structure: {att1} by {num1}%.' ,
        att1_building_name_key: 'premium_storage',
        value: 20,
        gems:1000,
        mat_exponent: 1.5,
        max_level:1,
        min_level:3,
        early_minus:5,
        min_town_level:50,
        icon:'premium_storage'
    },
    {
        id:91,
        label: 'Oil Warehouses',
        desc: 'Increases the storage of structure: {att1} by {num1}%.' ,
        att1_building_name_key: 'oil_storage',
        value: 10,
        costs:{
            gold: 100000000, 
        },
        mat_exponent: 1.8,
        max_level:5,
        min_level:3,
        early_minus:5,
        min_town_level:50
    },
    {
        id:92,
        label: 'Diving',
        desc: 'The restoration strength is {num1} times stronger when restoring water and river tiles.',
        value: 2,
        costs:{
            gold: 18000000000, 
        },
        gems:1400,
        mat_exponent: 1.8,
        max_level:1,
        min_level:3,
        min_town_level:66,
    },
    {
        id:93,
        label: 'Multitool',
        desc: 'Salvage, Clear, Revitalize, Remove rubble... all cleanup operations in one tool!',
        value: 25, //ano este to dava aj restoration strength
        gems:2100,
        icon:'ui/multitool',
        mat_exponent: 1.8,
        max_level:1,
        min_level:3,
        min_town_level:31,
    },
    {
        id:94,
        label: 'Event Ship slot',
        desc: '+{num1} Event Ship slot to help you catch more Event-Fish.',
        value: 1,
        gems:1200,
        icon:'event_ship',
        mat_exponent: 1.8,
        max_level:8,
        min_level:3,
        eventy_type: EVENT_FISH_AND_SHIPS,
        min_town_level:SHIP_EVENT_LEVEL_REQ,
    },
    {
        id:95,
        label: 'Event-Fish Bonus',
        desc: '+{num1}% bonus to Event-Fish income.',
        value: 10,
        gems:700,
        icon:'ui/event_fish',
        mat_exponent: 1.8,
        max_level:6,
        min_level:3,
        eventy_type: EVENT_FISH_AND_SHIPS,
        min_town_level:SHIP_EVENT_LEVEL_REQ,
    },
    {
        id:96,
        label: 'Event Ship slot',
        desc: '+{num1} Event Ship slot to help you catch more Event-Fish.',
        value: 1,
        costs:{
            event_fish:300,
        },
        icon:'event_ship',
        mat_exponent: 15,
        max_level:6,
        min_level:3,
        eventy_type: EVENT_FISH_AND_SHIPS,
        min_town_level:SHIP_EVENT_LEVEL_REQ,
    },
    {
        id:97,
        label: 'Event-Fish Bonus',
        desc: '+{num1}% bonus to Event-Fish income.',
        value: 5,
        costs:{
            event_fish:200,
        },
        icon:'ui/event_fish',
        mat_exponent: 8,
        max_level:9,
        min_level:3,
        eventy_type: EVENT_FISH_AND_SHIPS,
        min_town_level:SHIP_EVENT_LEVEL_REQ,
    },
    {
        id:98,
        label: 'Restoration mechanism',
        label_sufix: ' v.H1',
        desc: 'restoration upgrade description' ,
        value: 5,
        costs:{
            event_fish: 750, 
        },
        mat_exponent: 10,
        gems: 420, 
        max_level:8,
        min_level:3,
        early_minus:5,
        icon:'ui/restoration_strength',
        eventy_type: EVENT_FISH_AND_SHIPS,
        min_town_level:25
    },
    {
        id:99,
        label: 'Restoration mechanism',
        label_sufix: ' v.H2',
        desc: 'restoration upgrade description' ,
        value: 10,
        costs:{
            event_fish: 15000, 
        },
        mat_exponent: 10,
        gems: 900, 
        max_level:6,
        min_level:3,
        early_minus:5,
        icon:'ui/restoration_strength',
        eventy_type: EVENT_FISH_AND_SHIPS,
        min_town_level:45
    },
    {
        id:100,
        label: 'Power',
        desc: '+{num1}{POWER_ICON} Permanent bonus to your power grid.' ,
        value: 100,
        costs:{
            event_fish: 5000, 
        },
        mat_exponent: 2.5,
        max_level:12,
        min_level:3,
        early_minus:5,
        icon:'ui/electricity',
        eventy_type: EVENT_FISH_AND_SHIPS,
        min_town_level:27
    },
    {
        id:101,
        label: 'Premium Restoration',
        label_sufix: ' 5.0',
        desc: 'restoration upgrade description' ,
        value: 35,
        gems: 1750,
        mat_exponent: 1.35,
        max_level:3,
        min_level:1,
        min_town_level:60
    },
    {
        id:102,
        label: 'Restoration mechanism',
        label_sufix: ' 10.0',
        desc: 'restoration upgrade description' ,
        value: 15,
        costs:{
            gold: 950000000, 
        },
        mat_exponent: 2,
        gems: 850, 
        max_level:5,
        min_level:3,
        early_minus:5,
        min_town_level:70
    },
    {
        id:103,
        label: 'Scorched revitalization',
        desc: 'Reduces the cost of Scorched Earth revitalization by {num1} gold' ,
        value: 2000000,
        costs:{
            chips: 90000000, 
        },
        mat_exponent: 2,
        gems: 650, 
        max_level:1,
        min_level:3,
        early_minus:3,
        min_town_level:70
    },
    {
        id:104,
        label: 'Radius Clicker',
        desc: 'Clicking a settlement will also click settlements within a radius of +{num1} tiles.',
        descFun: 'RadiusClickerInfo();',
        value: 6,
        costs:{
            chips: 15000000, 
        },
        mat_exponent: 1.7,
        gems: 650, 
        max_level:5,
        min_level:3,
        early_minus:10,
        min_town_level:53
    },
    {
        id:105,
        label: 'Thermal Automations',
        desc: 'Thermal plants will not require roads.' ,
        value: 6,
        costs:{
            gold: 50000000000, 
        },
        mat_exponent: 1.8,
        gems: 2000, 
        max_level:1,
        min_level:3,
        early_minus:2,
        min_town_level:69
    },
    {
        id:106,
        label: 'Man of steel',
        desc: 'Increases the storage of structure: {att1} by {num1}.' ,
        att1_building_name_key: 'steel_storage',
        value: 500,
        costs:{
            gold: 900000000, 
        },
        mat_exponent: 1.9,
        max_level:7,
        min_level:3,
        min_town_level:66
    },
    {
        id:107,
        label: 'Modest Hammock',
        label_sufix: ' 2.0',
        desc: 'upgrade_desc_4'  ,
        value: 15,
        costs:{
            chips: 15000000, 
        },
        gems:350,
        mat_exponent: 2, 
        max_level: 4,
        min_level:1,
        min_town_level:36,
    },
    {
        id:108,
        label: 'Makeshift Radar',
        desc: 'upgrade_desc_2'  ,
        label_sufix: ' 2.0',
        value: 1,
        costs:{
            gold: 9000000000, 
        },
        gems:900,
        mat_exponent: 1, 
        max_level:1,
        min_level:1,
        min_town_level:61
    },
    {
        id:109,
        label: 'Advanced Micro Cleaner',
        desc: "+{num1}% pollution reducing effect of structure: {att1}" ,
        att1_building_name_key: 'river_trees',
        value: 10,
        costs:{
            gold: 9000000000, 
        },
        mat_exponent: 2,
        gems: 360, 
        max_level:2,
        min_level:1,
        min_town_level:67,
    },
    {
        id:110,
        label: 'The Pump',
        desc: 'Increases the storage of structure: {att1} by {num1}.' ,
        att1_building_name_key: 'oil_storage',
        value: 300,
        costs:{
            gold: 500000000, 
        },
        mat_exponent: 1.8,
        max_level:5,
        min_level:3,
        min_town_level:51
    },
    {
        id:111,
        label: 'Radius Clicker Cap Upgrade',
        desc: 'Increases your cap of radius clickers by {num1}.',
        descFun: 'RadiusClickerInfo();',
        value: 5,
        costs:{
            chips: 8000000, 
        },
        mat_exponent: 1.3,
        gems: 300, 
        max_level:10,
        min_level:3,
        early_minus:1,
        min_town_level:54
    },
    {
        id:112,
        label: 'Radius Clicker generator',
        desc: 'Increases the generation of radius clickers every hour by {num1}.',
        descFun: 'RadiusClickerInfo();',
        value: 2,
        costs:{
            chips: 20000000, 
        },
        mat_exponent: 1.8,
        gems: 350, 
        max_level:5,
        min_level:3,
        early_minus:4,
        min_town_level:58
    },
    {
        id:113,
        label: 'Micro income',
        desc: '{att1} will produce {num1} extra {GOLD_ICON} {EVERY_X_SECONDS}',
        att1_building_name_key: 'river_trees',
        value: 1,
        costs:{
            chips: 120000000, 
        },
        mat_exponent: 1.3,
        gems: 750, 
        max_level:3,
        min_level:3,
        early_minus:2,
        min_town_level:73
    },
    {
        id:114,
        label: 'Chip storage bonus',
        desc: 'Increases the storage of structure: {att1} by {num1}%.' ,
        att1_building_name_key: 'chip_factory_big',
        value: 5,
        costs:{
            gold: 25000000000, 
        },
        gems:250,
        mat_exponent: 1.5,
        max_level:6,
        min_level:3,
        early_minus:0,
        min_town_level:71,
    },
    {
        id:115,
        label: 'Rift healer',
        desc: 'Restoration strength is multiplied by {num1} when restoring any kind of rift tiles',
        value: 4,
        gems:1300,
        costs:{
            oil: 135000000, 
        },
        mat_exponent: 1.5,
        icon:'rift',
        max_level:1,
        min_level:1,
        early_minus:5,
        min_town_level:72
    },
// GetPlayerUpgradeValue(68)
    // GetPlayerUpgradeValue(71,1)
    //nieco co zvysi max level mesta
];
const NEWEST_UPG_ID=111;

const CLEANING_UPGRADES = [6,38,43,44,53,55,60,61,62,63,75,76,81,82,83,93,98,99,101,102];
let restoration_test_bonus=0;

const UPGRADES_BY_ID=[];
let highest_level_with_upgrade=0;
for(let _u of upgrades){
    if(UPGRADES_BY_ID[_u.id]){
        console.error('dva upgrady maju rovnake id')
    }
    UPGRADES_BY_ID[_u.id]=_u;
    if(highest_level_with_upgrade<_u.min_town_level && _u.min_town_level<1000){
        highest_level_with_upgrade=_u.min_town_level;
    }
}


function GetUpgradeGemCostByLvl(_u,_lvl){
    if(!_u.gems){
        return 0;
    }
    let _c = Math.round(_u.gems*Math.pow(1.20,_lvl));
    if(_c>100)_c=Math.round(_c/10)*10;
    return _c;
}

function GetUpgradeTotalGemCost(_u,_maxLVL){
    let _totalCost=0;
    if(!_maxLVL){
        _maxLVL=_u.max_level;
    }
    for(let _lvl=0;_lvl<_maxLVL;_lvl++){
        _totalCost+=GetUpgradeGemCostByLvl(_u,_lvl)
    }
    return _totalCost;
}


function AddCosts(_costs1,_costs2){
    for(let _i in _costs2){
        if(!_costs1[_i]){
            _costs1[_i]=0;
        }
        _costs1[_i]+=_costs2[_i];
    }
    return _costs1;
}
function GetUpgradeMatCostsByLvl(_u,_lvl){
        let _costs = {};
        for(let _t in _u.costs){
            _costs[_t] = GetUpgradeCost(_u,_u.costs[_t],_lvl);
        }
        return _costs;
}
function GetUpgradeTotalMatCost(_u,_maxLVL){
    let _totalCosts=[];
    if(!_maxLVL){
        _maxLVL=_u.max_level;
    }
    for(let _lvl=0;_lvl<_maxLVL;_lvl++){
        _totalCosts=AddCosts(_totalCosts,GetUpgradeMatCostsByLvl(_u,_lvl));
    }
    return _totalCosts;
}

// let totalcost=0
// for(let u of upgrades){
//     if(u.gems){
//         for(let i=0;i<u.max_level;i++)
//         totalcost+=GetUpgradeGemCostByLvl(u,i);
//     }
// }
// console.log(totalcost);
// za gemy: flaten hills for 500 gold
// za gemy: +xy % zisk z truhlic

const CLICKERS_PER_ACH=20;
let enabledAchievements=1;

function AchievementsInner(){
    let _outA=[];
    for(let _a of ACHIEVEMENTS_DATA){
        if(IsAchievementDone(_a.id)){
            _outA.push(Bold(_a.name)+' - '+GetAchDesc(_a));
        }
    }



    

    if(_outA.length==0){
        return '';        
    }else{
        let _out=LabelSpan(GetText('Achievements done: {att1}',Bold(_outA.length+' / '+ACHIEVEMENTS_DATA.length)))+BRBR+_outA.join(BR);
        return _out+BRBR+(HasLevel(30)?Button('Show all','ShowAllAchievements();'):'');

    }
}

function ShowAllAchievements(){
    let _out='';
    let shownTypes={};
    
    for(let _a of ACHIEVEMENTS_DATA){
        if(!IsAchievementDone(_a.id)) if(!_a.hidden  && !shownTypes[_a.type]){
            if(_a.type == ACH_POLLUTION){
                _out+=BR+(Bold(_a.name)+' - '+GetAchDesc(_a,PCislo(_a.value) + ' ('+PCisloB(Mro(GetAchievementValue(_a.type)))+')'));
            }else{
                _out+=BR+(Bold(_a.name)+' - '+GetAchDesc(_a,PCisloB(Mro(GetAchievementValue(_a.type)))+' / '+PCislo(_a.value)));
            }
            shownTypes[_a.type]=1;
        }
    }
    DoBasicPopup(_out,GetText('Incomplete achievements'),{centerised:1});
}

const ACH_CLEARS=1;
const REACH_WEST_EAST=2;
const REACH_NORTH_SOUTH=3;
const ACH_PLANT_TREES=4;
const ACH_HAVE_FOOD=5;
const ACH_URANIUM_CLEANER=6;
const ACH_USED_SUPER_CLICKERS=7;
const ACH_TOTAL_CLICKS=8;
const ACH_BUILD_ROADS=9;
const ACH_HAVE_ROCKS=10;
const ACH_HAVE_SHIPS=11;
const ACH_FIND_ARTIFACTS=12;
const ACH_WATER_TILES=13;
const ACH_DEEP_WATER_TILES=14;
const ACH_POPULATION=15;
const ACH_GOLD_MINE=16;
const ACH_CHIP_PRODUCTION=17;
const ACH_TOWNS_COUNT=18;
const ACH_INCOME=19;
const ACH_POLLUTION=20;
const ACH_WATCHING_ADS=21;
const ACH_FIND_BOOKS=22;
const ACH_DEFEAT_GD=23;

function GetAchievementValue(_type){
    if(_type==ACH_URANIUM_CLEANER){
        return hrac.stats.uranium_cleared*1;
    }
    if(_type==ACH_HAVE_SHIPS){
        return hrac.stats.ships_used*1 + hrac.buildings.tanker + hrac.buildings.ship_big;
    }
    if(_type==ACH_HAVE_ROCKS){
        return hrac.rocks*1;
    }
    if(_type==ACH_BUILD_ROADS){
        return hrac.stats.streets*1;
    }
    if(_type==ACH_POPULATION){
        return hrac.population*1;
    }
    if(_type==ACH_USED_SUPER_CLICKERS){
        return hrac.stats.super_clickersUsed*1;
    }
    if(_type==ACH_TOTAL_CLICKS){
        return hrac.stats.total_clicks;
    }
    if(_type==ACH_PLANT_TREES){
        return hrac.stats.forests*1;
    }
    if(_type==ACH_WATER_TILES){
        return hrac.stats.water_tiles*1;
    }
    if(_type==ACH_DEEP_WATER_TILES){
        return hrac.stats.deep_water_tiles*1;
    }
    if(_type==ACH_HAVE_FOOD){
        return hrac.food*1;
    }
    if(_type==ACH_CLEARS){
        return hrac.stats.clears*1;
    }
    if(_type==ACH_FIND_ARTIFACTS){
        return hrac.stats.found_artifacts*1;
    }
    if(_type==ACH_GOLD_MINE){
        return hrac.stats.income_gold_mine*1;
    }
    if(_type==ACH_CHIP_PRODUCTION){
        return hrac.chipsIncome*1;
    }
    if(_type==ACH_TOWNS_COUNT){
        return hrac.stats.towns_connected*1;
    }
    if(_type==ACH_INCOME){
        return hrac.income*1;
    }
    if(_type==ACH_POLLUTION){
        return hrac.polution*1;
    }
    if(_type==ACH_WATCHING_ADS){
        return ArraySum(hrac.stats.ads_watched_total)+hrac.stats.adSkippers_used;
    }
    if(_type==ACH_FIND_BOOKS){
        return hrac.books.length;
    }
    return 0;
}

function CheckAchievemntsAll(_grid){
    if(visitingFriend)return false;
    if(!enabledAchievements)return false;
    for(let _a of ACHIEVEMENTS_DATA)if(!IsAchievementDone(_a.id)){
        if(_a.type==ACH_URANIUM_CLEANER && hrac.stats.uranium_cleared*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_HAVE_SHIPS && hrac.stats.ships_used*1 + hrac.buildings.tanker + hrac.buildings.ship_big>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_HAVE_ROCKS && hrac.rocks*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_BUILD_ROADS && hrac.stats.streets*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_POPULATION && hrac.population*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_USED_SUPER_CLICKERS && hrac.stats.super_clickersUsed*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_TOTAL_CLICKS && hrac.stats.total_clicks>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_PLANT_TREES && hrac.stats.forests*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_WATER_TILES && hrac.stats.water_tiles*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_DEEP_WATER_TILES && hrac.stats.deep_water_tiles*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_HAVE_FOOD && hrac.food*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==REACH_WEST_EAST && _grid && _grid.x == _a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==REACH_NORTH_SOUTH && _grid && _grid.y == _a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_CLEARS && hrac.stats.clears*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_FIND_ARTIFACTS && hrac.stats.found_artifacts*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_GOLD_MINE && hrac.stats.income_gold_mine*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_CHIP_PRODUCTION && hrac.chipsIncome*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_TOWNS_COUNT && hrac.stats.towns_connected*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_INCOME && hrac.income*1>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_POLLUTION && hrac.polution*1<_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_WATCHING_ADS && ArraySum(hrac.stats.ads_watched_total)+hrac.stats.adSkippers_used>_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_FIND_BOOKS && hrac.books.length>=_a.value){
            DoAchPopup(_a);
            break;
        }
        if(_a.type==ACH_DEFEAT_GD && GetPlayerLevel()>=GetHighestLevel()){
            DoAchPopup(_a);
            break;
        }
    }

}

function GetAchDesc(_a,_num){
    return GetText(_a.description).replaceAll('{num1}',_num!=undefined?_num:PCislo(_a.value));
}

function DoAchPopup(_a){
    gamePaused=1;
    HideAllFloatingTexts();
    let _options={};
    _options.text = BR+GetText('Achievement: {att1} DONE!',Bold(_a.name))+BR+GetAchDesc(_a)+BRBR;
    _options.text += BRBR+FSize(24,'+'+PMat(CLICKERS_PER_ACH,'super_clickers'))+BRBR;
    _options.text += Button(GetText('Claim'),'ClaimAchievemet('+_a.id+')');
    
    _options.label = GetTextCAPS('CONGRATULATIONS!');
    _options.kde = 'achPopup';
    _options.noclose = 1;
    _options.centerised = 1;
    PlaySound('achievement');
    DoPopupWithOptions(_options);
}

function IsAchievementDone(_id){
    if(!hrac.stats.achievement_ids_done)hrac.stats.achievement_ids_done=[];
    if(!hrac.stats.achievement_ids_done.includes(_id)){
        return false;
    }
    return true;

}

function ClaimAchievemet(_id){
    gamePaused=0;
    if(!IsAchievementDone(_id)){
        let _a = ACHIEVEMENTS_DATA.find(a=>a.id == _id);
        if(_a){
            AddMat(CLICKERS_PER_ACH,'super_clickers',1,1,0,1);
            hrac.stats.achievement_ids_done.push(_id)
            ClosePopup('achPopup');
        }
    }
}

const ACHIEVEMENTS_DATA=[
    {
        id: 1,
        type:ACH_CLEARS,
        value: 500,
        name: 'Mr. Cleaner',
        description: 'Restore {num1} tiles.',
    },
    {
        id: 2,
        type:ACH_CLEARS,
        value: 2500,
        name: 'Fledgling Explorer',
        description: 'Restore {num1} tiles.',
    },
    {
        id: 3,
        type:ACH_CLEARS,
        value: 25000,
        name: 'Journeyman Explorer',
        description: 'Restore {num1} tiles.',
    },
    {
        id: 4,
        type:ACH_CLEARS,
        value: 250000,
        name: 'Grand Explorer',
        description: 'Restore {num1} tiles.',
    },
    {
        id: 5,
        type:REACH_WEST_EAST,
        value: 250,
        name: 'Wild wild west',
        description: 'Reach tile all they way west.',
        hidden:1
    },
    {
        id: 6,
        type:REACH_WEST_EAST,
        value: -250,
        name: 'East 250',
        description: 'Reach tile all they way to the East.',
        hidden:1
    },
    {
        id: 7,
        type:REACH_NORTH_SOUTH,
        value: -250,
        name: 'Northpole',
        description: 'Reach tile all they way to the north.',
        hidden:1
    },
    {
        id: 8,
        type:REACH_NORTH_SOUTH,
        value: 250,
        name: 'SOUTH',
        description: 'Reach tile all they way to the south.',
        hidden:1
    },
    {
        id: 9,
        type:ACH_PLANT_TREES,
        value: 200,
        name: 'Tree planter',
        description: 'Plant {num1} trees.',
    },
    {
        id: 10,
        type:ACH_PLANT_TREES,
        value: 5000,
        name: 'Chop chop',
        description: 'Plant {num1} trees.',
    },
    {
        id: 11,
        type:ACH_PLANT_TREES,
        value: 50000,
        name: 'Nature is my home!',
        description: 'Plant {num1} trees.',
    },
    {
        id: 12,
        type:ACH_HAVE_FOOD,
        value: 10000,
        name: 'I am starving!',
        description: 'Have {num1} food in storage.',
    },
    {
        id: 13,
        type:ACH_HAVE_FOOD,
        value: 500000,
        name: 'I live for food!',
        description: 'Have {num1} food in storage.',
    },
    {
        id: 14,
        type:ACH_URANIUM_CLEANER,
        value: 10,
        name: 'Uranium cleaner',
        description: 'Clean {num1} uranium barrels.',
    },
    {
        id: 15,
        type:ACH_USED_SUPER_CLICKERS,
        value: 100,
        name: 'Giga super Clicker',
        description: 'Use {num1} super clickers.',
    },
    {
        id: 16,
        type:ACH_USED_SUPER_CLICKERS,
        value: 2500,
        name: 'OMEGA super Clicker',
        description: 'Use {num1} super clickers.',
    },
    {
        id: 17,
        type:ACH_USED_SUPER_CLICKERS,
        value: 10000,
        name: 'ULTIMATE super Clicker',
        description: 'Use {num1} super clickers.',
    },
    {
        id: 18,
        type:ACH_TOTAL_CLICKS,
        value: 3000,
        name: 'Click click',
        description: 'Click the game {num1} times.',
    },
    {
        id: 19,
        type:ACH_TOTAL_CLICKS,
        value: 50000,
        name: 'Clicking click',
        description: 'Click the game {num1} times.',
    },
    {
        id: 20,
        type:ACH_TOTAL_CLICKS,
        value: 200000,
        name: 'Clickerest click',
        description: 'Click the game {num1} times.',
    },
    {
        id: 21,
        type:ACH_TOTAL_CLICKS,
        value: 1000000,
        name: 'Clickerestest click',
        description: 'Click the game {num1} times.',
    },
    {
        id: 22,
        type:ACH_BUILD_ROADS,
        value: 300,
        name: 'Road to hell',
        description: 'Build {num1} roads.',
    },
    {
        id: 23,
        type:ACH_BUILD_ROADS,
        value: 1000,
        name: 'Road to rome',
        description: 'Build {num1} roads.',
    },
    {
        id: 24,
        type:ACH_BUILD_ROADS,
        value: 10000,
        name: 'Where we go we need no roads',
        description: 'Build {num1} roads.',
    },
    {
        id: 25,
        type:ACH_HAVE_ROCKS,
        value: 1000000,
        name: 'You rock!',
        description: 'Have {num1} rocks.',
    },
    {
        id: 26,
        type:ACH_HAVE_ROCKS,
        value: 20000000,
        name: 'The Rock!',
        description: 'Have {num1} rocks.',
    },
    {
        id: 27,
        type:ACH_HAVE_ROCKS,
        value: 100000000,
        name: 'Falling in love rocks',
        description: 'Have {num1} rocks.',
    },
    {
        id: 28,
        type:ACH_HAVE_SHIPS,
        value: 500,
        name: 'The Fleet',
        description: 'Have {num1} ships.',
    },
    {
        id: 29,
        type:ACH_HAVE_SHIPS,
        value: 2000,
        name: 'Admiral',
        description: 'Have {num1} ships.',
    },
    {
        id: 30,
        type:ACH_HAVE_SHIPS,
        value: 5000,
        name: 'Ship shipping shipping ships',
        description: 'Have {num1} ships.',
    },
    {
        id: 31,
        type:ACH_FIND_ARTIFACTS,
        value: 3,
        name: 'Tomb raider',
        description: 'Find {num1} / 10 artifacts.',
        hidden:1,
    },
    {
        id: 32,
        type:ACH_FIND_ARTIFACTS,
        value: 10,
        name: 'Explorer',
        description: 'Find all {num1} artifacts.',
    },
    {
        id: 33,
        type:ACH_WATER_TILES,
        value: 1000,
        name: 'Water Element',
        description: 'Clear {num1} water tiles',
    },
    {
        id: 34,
        type:ACH_WATER_TILES,
        value: 25000,
        name: 'Waterfall',
        description: 'Clear {num1} water tiles',
    },
    {
        id: 35,
        type:ACH_DEEP_WATER_TILES,
        value: 10000,
        name: 'Deep',
        description: 'Deep clear {num1} water tiles',
    },
    {
        id: 36,
        type:ACH_POPULATION,
        value: 100000,
        name: 'Populist',
        description: 'Reach {num1} population',
    },
    {
        id: 37,
        type:ACH_POPULATION,
        value: 1000000,
        name: 'Humans, humans everywhere',
        description: 'Reach {num1} population',
    },
    {
        id: 38,
        type:ACH_POPULATION,
        value: 50000000,
        name: 'Overcrowded',
        description: 'Reach {num1} population',
    },
    {
        id: 39,
        type:ACH_GOLD_MINE,
        value: 10000,
        name: 'Pure Gold',
        description: 'Have {num1} gold income from gold mines.',
    },
    {
        id: 40,
        type:ACH_GOLD_MINE,
        value: 250000,
        name: 'Gold fever',
        description: 'Have {num1} gold income from gold mines.',
    },
    {
        id: 41,
        type:ACH_CHIP_PRODUCTION,
        value: 10000,
        name: 'Chipped',
        description: 'Have {num1} chip income.',
    },
    {
        id: 42,
        type:ACH_CHIP_PRODUCTION,
        value: 150000,
        name: 'Chip and chips',
        description: 'Have {num1} chip income.',
    },
    {
        id: 43,
        type:ACH_TOWNS_COUNT,
        value: 100,
        name: 'Metropolis',
        description: 'Have {num1} towns.',
    },
    {
        id: 44,
        type:ACH_INCOME,
        value: 100000,
        name: 'Passives',
        description: 'Have {num1} gold income.',
    },
    {
        id: 45,
        type:ACH_INCOME,
        value: 1000000,
        name: 'Earn or burn',
        description: 'Have {num1} gold income.',
    },
    {
        id: 46,
        type:ACH_POLLUTION,
        value: 50000,
        name: 'Breathing is nice',
        description: 'Have pollution under {num1}.',
    },
    {
        id: 47,
        type:ACH_POLLUTION,
        value: 10000,
        name: 'I can see the sky',
        description: 'Have pollution under {num1}.',
    },
    {
        id: 48,
        type:ACH_POLLUTION,
        value: 1,
        name: 'Clean world',
        description: 'Have zero pollution.',
    },
    {
        id: 49,
        type:ACH_WATCHING_ADS,
        value: 100,
        name: 'Watcher',
        description: 'Watch {num1} ads.',
    },
    {
        id: 50,
        type:ACH_WATCHING_ADS,
        value: 2000,
        name: 'Day Watch',
        description: 'Watch {num1} ads.',
    },
    {
        id: 51,
        type:ACH_FIND_BOOKS,
        value: 10,
        name: 'Loreseeker',
        description: 'Find {num1} pages of the Records of a Broken World.',
    },
    {
        id: 52,
        type:ACH_FIND_BOOKS,
        value: 40,
        name: 'Loremaster',
        description: 'Find {num1} pages of the Records of a Broken World.',
    },
    {
        id: 53,
        type:ACH_FIND_BOOKS,
        value: 100,
        name: 'Chronicler of a Broken World',
        description: 'Find {num1} pages of the Records of a Broken World.',
    },
    {
        id: 54,
        type:ACH_DEFEAT_GD,
        value: 99999,
        name: 'Better than designer',
        description: 'Reach the highest Settlement level before the Game Designer adds new stuff.',
        hidden: 1,
    },

];

let quickToolVisible=0;
let quickToolActive=0;
let quickToolType2=0;
let enabledQuicktoolPopup=1;

function ShowQuickTool(_tool,_type2){
    if(enabledQuicktoolPopup)
    if(HasLevel(QUICK_TOOL_LEVEL)){
        quickToolVisible = _tool;
        quickToolType2 = _type2;
        TryToggleMultiTool();
        RefreshQuickToolContainer();
        setTimeout(() => {
            AdjustQuickToolY();
        }, 150);
    }
}

function TryToggleMultiTool(){
    if(HasUpgrade(93)){
        if([6,11,12,14].includes(quickToolVisible)){
            quickToolIsMultiTool=true;
        }
        if(quickToolVisible=='b' && ['remove_rubble_notsaved','revitalise_notsaved','remove_broken_city_notsaved'].includes(quickToolType2)){
            quickToolIsMultiTool=true;
        }
    }
}

let quickToolIsMultiTool=false;
function ToggleQuickTool(){
    if(!quickToolActive){
        quickToolActive=quickToolVisible;
        quickToolIsMultiTool=false;

        TryToggleMultiTool();

        RefreshQuickToolContainer();
        CloseGridMenu();
    }else{
        let _rect = GetRect('quick_tool_container');
        if(_rect.width<100){
            QuitQuickTool();
        }
    }
    RefreshHeader();
}

function QuitQuickTool(){
    quickToolVisible=0;
    quickToolActive=0;
    quickToolIsMultiTool=false;
    // RefreshHeader();
    RefreshQuickToolContainer();
}
function HideUnusedQuickTool(){
    if(quickToolVisible && !quickToolActive){
        QuitQuickTool();
    }
}

function StartQuickTool(_tool,_type2){
    PlayTap();
    QuitQuickTool();
    ShowQuickTool(_tool,_type2);
    ToggleQuickTool();

}

function IsAutoSeeding(){
    if(HasUpgrade(80) && (quickToolActive=='b' || quickToolActive===1 || quickToolActive===2 || quickToolActive===8)){ //autoTapPainting
        return true;
    }
    return false;
}

let lastBuiltRoadGridWithQuicktool=null;

// 1 = road xy
// 2 = forest xy
// 3 = flatten
// 4 = lodky
// 5 = nicit lodky
// 6 = nicit water rocks

function UseQuickTool(_grid){
    let _toolUsed=false;
    if(quickToolIsMultiTool){
        _toolUsed=TryAdvancedClearGrid(_grid);
    }else{

        if(_grid && !_grid.uranium_cloud){
            let _x = _grid.x;
            let _y = _grid.y;
            if(quickToolActive==1){

                enabledNoRoadConFloatingText=false;
                _toolUsed=TryBuildStreet(_x,_y,quickToolType2);
                enabledNoRoadConFloatingText=true;
                if(!_toolUsed && lastBuiltRoadGridWithQuicktool){
                    if(_grid.x == lastBuiltRoadGridWithQuicktool.x){
                        if(Math.abs(_grid.y - lastBuiltRoadGridWithQuicktool.y)<20 ){
                            if(_grid.y < lastBuiltRoadGridWithQuicktool.y){
                                for(let __y = lastBuiltRoadGridWithQuicktool.y-1; __y>=_grid.y; __y-- ){
                                    _toolUsed=TryBuildStreet(_x,__y,quickToolType2);
                                }
                            }
                            else if(_grid.y > lastBuiltRoadGridWithQuicktool.y){
                                for(let __y = lastBuiltRoadGridWithQuicktool.y+1; __y<=_grid.y; __y++ ){
                                    _toolUsed=TryBuildStreet(_x,__y,quickToolType2);
                                }
                            }
                        }
                    }
                    else if(_grid.y == lastBuiltRoadGridWithQuicktool.y){
                        if(Math.abs(_grid.x - lastBuiltRoadGridWithQuicktool.x)<20 ){
                            if(_grid.x < lastBuiltRoadGridWithQuicktool.x){
                                for(let __x = lastBuiltRoadGridWithQuicktool.x-1; __x>=_grid.x; __x-- ){
                                    _toolUsed=TryBuildStreet(__x,_y,quickToolType2);
                                }
                            }
                            else if(_grid.x > lastBuiltRoadGridWithQuicktool.x){
                                for(let __x = lastBuiltRoadGridWithQuicktool.x+1; __x<=_grid.x; __x++ ){
                                    _toolUsed=TryBuildStreet(__x,_y,quickToolType2);
                                }
                            }
                        }
                    }
                }
                if(_toolUsed){
                    lastBuiltRoadGridWithQuicktool = _grid;
                }else{
                    if(_grid && !_grid.has_street){
                        AddFloatingError(GetText('Road nearby required'));
                    }
                }
            }
            if(quickToolActive==2){
                let _ready = true;
                if(GetPlayerUpgradeValue(59)){
                    enabledRecalculations=false;
                    let _helper=quickToolType2;
                    if(hrac.nastavenia.super_gardening){
                        _ready=TryAdvancedClearGrid(_grid);
                        if(_grid.hill){
                            _ready=TryFlattenHill(_grid.x,_grid.y,1) ;
                        }
                        if(_grid.mountain){
                            _ready=BuildBuilding(_grid.x,_grid.y,BUILDINGS_BY_KEYS['flat_mountain_notsaved'].id);
                        }
                        if(!_ready){
                            _ready=TryBasicClearGrid(_grid);
                        }
                    }else{
                        _ready=TryBasicClearGrid(_grid);
                    }
                    if(_grid.broken_city_big_train){
                        return false;
                    }
                    
                    enabledRecalculations=true;
                    quickToolActive=2;
                    quickToolVisible=2;
                    quickToolIsMultiTool=false;
                    quickToolType2=_helper;
                    RefreshQuickToolContainer();
                }
                if(_ready){
                    if(CanGrowForest(_grid) || _grid.forest<quickToolType2){
                        _toolUsed=TryGrowForest(_x,_y,quickToolType2);
                    }
                }
            }
            if(quickToolActive==3){
                _toolUsed=TryFlattenHill(_x,_y,1);
                if(_grid.mountain &&HasLevel(FLATEN_MOUNTAINS_LEVEL_REQ)){
                    _toolUsed=BuildBuilding(_x,_y,BUILDINGS_BY_KEYS['flat_mountain_notsaved'].id);
                }

            }
            if(quickToolActive==4){
                _toolUsed=SendShipTo(_x,_y);
                if(CanSendShipHere(_grid) && hrac.stats.ships_used>=GetShipSlots()){
                    _toolUsed=true;
                }
            }
            if(quickToolActive==5){
                // _toolUsed=SendShipHome(_x,_y); //asi sa nepouziva
            }
            if(quickToolActive==6){
                _toolUsed=ClearRocks(_x,_y);
            }
            if(quickToolActive==7){
                _toolUsed=TryCutForest(GetGridData(_x,_y),1);
                ReCalculate9BlocksAndStatsByGrid(_grid);// ZratajHracStats();
            }
            if(quickToolActive==8){
                if(POSSIBLE_IN_STORAGE.includes(_grid.building_type) || HasUpgrade(77)){
                    _toolUsed=PutIntoStorage(_grid,_grid.building_type);
                }
            }
            if(quickToolActive==9){
                if(!_grid.shipyard && !_grid.mesto){
                    _toolUsed=TryRemoveStreet(_grid.x,_grid.y,0,1);
                }
            }
            if(quickToolActive=='r' && BUILDINGS_BY_KEYS[quickToolType2]){
                if(_grid.building_type == quickToolType2){
                    _toolUsed=RemoveBuilding(_grid.x,_grid.y,BUILDINGS_BY_KEYS[quickToolType2].id,1);
                }
            }
            if(quickToolActive=='b' && quickToolType2 == 'ship_big' && _grid.ship){
                BUILDINGS_BY_KEYS[quickToolType2].works_even_with_building=1;
                SendShipHome(_grid.x,_grid.y,1);
                _toolUsed=BuildBuilding(_x,_y,BUILDINGS_BY_KEYS[quickToolType2].id);
                BUILDINGS_BY_KEYS[quickToolType2].works_even_with_building=0;
            }else if(quickToolActive=='b' && BUILDINGS_BY_KEYS[quickToolType2]){
                if(quickToolType2 == 'deep_water_notsaved' && (_grid.shipyard||_grid.water_generator||_grid.oil_rig||_grid.tanker||_grid.ship_big||_grid.event_ship||_grid.mangrove)){
                    BUILDINGS_BY_KEYS[quickToolType2].works_even_with_building=1;
                    _toolUsed=BuildBuilding(_x,_y,BUILDINGS_BY_KEYS[quickToolType2].id);
                    BUILDINGS_BY_KEYS[quickToolType2].works_even_with_building=0;
                }else if(quickToolType2 == 'revitalise_scorched_notsaved' && (_grid.sand||_grid.desert)){
                    _toolUsed=BuildBuilding(_x,_y,BUILDINGS_BY_KEYS['revitalise_notsaved'].id);
                }else if(quickToolType2 == 'revitalise_notsaved' && (_grid.scorched)){
                    _toolUsed=BuildBuilding(_x,_y,BUILDINGS_BY_KEYS['revitalise_scorched_notsaved'].id);
                }else if(quickToolType2 == 'flat_mountain_notsaved' && _grid.hill){
                    if(!_toolUsed)_toolUsed=TryFlattenHill(_x,_y,1);
                }else{
                    if(BUILDINGS_BY_KEYS[quickToolType2].can_put_into_storage && _grid[quickToolType2]){ //ze ho das naspat do storage
                        _toolUsed = PutIntoStorage(_grid,quickToolType2);

                    }else if(BUILDINGS_BY_KEYS[quickToolType2].can_replace && BUILDINGS_BY_KEYS[quickToolType2].can_replace.includes(_grid.building_type) && BUILDINGS_BY_KEYS[quickToolType2].grid_key != _grid.building_type){
                        BUILDINGS_BY_KEYS[quickToolType2].works_even_with_building=1;
                        // console.log('tu',quickToolType2)

                        let _previousBuilding = _grid.building_type;
                        let _wasInStorage=hrac.storage[quickToolType2];
                        _toolUsed=BuildBuilding(_x,_y,BUILDINGS_BY_KEYS[quickToolType2].id,1);
                        // console.log(_previousBuilding)
                        if(_toolUsed){
                            if(_grid.storage_container){
                                delete(_grid.storage_container);
                                for(_n of GetGridNeighbours(_grid)){
                                    if(_n && _n.storage_container){
                                        StorageContainerGraphicChange(_n);
                                    }
                                }
                            }else
                            for(let _key of BUILDINGS_BY_KEYS[quickToolType2].can_replace)if(_previousBuilding == _key){
                                if(_key=='farm'){
                                    DestroyAll(_grid.x,_grid.y,1);                                
                                }else{
                                    if(!_wasInStorage){

                                        if(BUILDINGS_BY_KEYS[_previousBuilding] && BUILDINGS_BY_KEYS[_previousBuilding].cost?.gems && BUILDINGS_BY_KEYS[quickToolType2].cost?.gems && BUILDINGS_BY_KEYS[_previousBuilding].cost.gems < BUILDINGS_BY_KEYS[quickToolType2].cost.gems){
                                            let _dif = BUILDINGS_BY_KEYS[_previousBuilding].cost.gems; //vlastne len cena tej predoslej sa mi vrati
                                            AddMat(_dif,'gems',1)
                                        }
                                    }
                                    delete(_grid[_key]);
                                }
                            }
                        }
                        if(HasUpgrade(77) && _previousBuilding && _previousBuilding!= 'ship' && _previousBuilding!= 'sensor_tower' && _previousBuilding!= 'mesto' && BUILDINGS_BY_KEYS[_previousBuilding] && BUILDINGS_BY_KEYS[_previousBuilding].cost && !BUILDINGS_BY_KEYS[_previousBuilding].cost.gems){
                            IncrementInStorage(_previousBuilding);
                            
                        }

                        BUILDINGS_BY_KEYS[quickToolType2].works_even_with_building=0;
                    }else{
                        _toolUsed=BuildBuilding(_x,_y,BUILDINGS_BY_KEYS[quickToolType2].id,BUILDINGS_BY_KEYS[quickToolType2].no_quick_confirm);
                    }
                }
            }
            if(quickToolActive==11){
                _toolUsed=TryClearSwamp(_x,_y,0);
            }
            if(quickToolActive==12){
                _toolUsed=TryClearSwamp(_x,_y,1);
            }
            if(quickToolActive==13){
                if(_grid.farmfield || _grid.farmfield2){
                    DestroyAll(_grid.x,_grid.y);   
                    _toolUsed=true; 
                }
            }
            if(quickToolActive==14){
                _toolUsed=SalvageShipWreck(_x,_y);
            }
            if(quickToolActive==15){
                _toolUsed=SalvageBrokenPower(_x,_y)
            }
        }
    }
    if(!_toolUsed){
        if(popupsVisible && popupsVisible.areYouSurePopup){
            //no warning
        }else{
            if(_grid.uranium_cloud){
                AddFloatingTextToGrid(_grid,GetText('Uranium cloud present'),'red');
            }
            if(!autoTapPainting){
                WrongQuickToolUsage();
            }else{
                _grid.last_clicked_dur=0;
            }
            // if(quickToolType2 != 'deep_water_notsaved'){
            //     PlaySound('ee');
            // }
        }
    }
}

let quickToolTO=0;
function WrongQuickToolUsage(){
    if(gebi('quick_tool_container')){
        //WrongSound();
        gebi('quick_tool_container').style.transition='none';
        gebi('quick_tool_container').style.backgroundColor='var(--red)';
        gebi('quick_tool_container').style.transform = 'scale(3)';
        if(quickToolTO)clearTimeout(quickToolTO);
        quickToolTO = setTimeout(() => {
            gebi('quick_tool_container').style.transition='0.7s';
            gebi('quick_tool_container').style.backgroundColor=GetQuickToolActiveColor();
            gebi('quick_tool_container').style.color='var(--dark-color)';
            gebi('quick_tool_container').style.transform = 'scale(1)';
        }, 50);
    }
}


function GetQuickToolDiv(){
    if(quickToolVisible){
        let _out='<div id="quick_tool_div" ontouchend="ToggleQuickTool();" ><div>';
        let _icon='';
        if(HasUpgrade(93)){
            if(quickToolIsMultiTool){
                _icon+=GetIconImage('multitool',70);
            }
            // if([6,11,12,14].includes(quickToolVisible)){
            //     _icon+=GetIconImage('multitool',70);
            // }
            // if(quickToolVisible=='b' && ['remove_rubble_notsaved','revitalise_notsaved','remove_broken_city_notsaved'].includes(quickToolType2)){
            //     _icon+=GetIconImage('multitool',70);
            // }
        }

        if(!_icon && quickToolVisible==1){
            _icon+=GetMultiTilesImages(['grass','streets/street_t'+quickToolType2+'_8'],70,'');
        }
        if(!_icon && quickToolVisible==2){
            _icon+=GetTileImage('tree'+quickToolType2,70,'quick_tool_icon');
        }
        if(!_icon && quickToolVisible==3){
            _icon+=GetIconImage('flatten',70);
        }
        if(!_icon && quickToolVisible==4 || quickToolVisible==5){
            _icon+=GetTileImage('water',70,'quick_tool_icon');
            _icon+=GetTileImage('ship',70,'quick_tool_icon');
        }
        if(!_icon && quickToolVisible==6){
            _icon+=GetTileImage('water',70,'quick_tool_icon');
            _icon+=GetTileImage('water_rocks',70,'quick_tool_icon');
            _icon+=GetTileImage('ui/remove_cross',70,'quick_tool_icon');
        }
        if(!_icon && quickToolVisible==7){
            _icon+=GetIconImage('axe',70);
        }
        if(!_icon && quickToolVisible==8){
            if(BUILDINGS_BY_KEYS[quickToolType2] && BUILDINGS_BY_KEYS[quickToolType2].storage_icons){
                _icon+=GetMultiTilesImages(BUILDINGS_BY_KEYS[quickToolType2].storage_icons,70,'');
            }else{
                _icon+=GetIconImage('into_storage',70);
            }
        }
        if(!_icon && quickToolVisible==9){
            _icon+=GetIconImage('buldoser',70);
        }
        if(!_icon && quickToolVisible=='b' && BUILDINGS_BY_KEYS[quickToolType2]){
            if(BUILDINGS_BY_KEYS[quickToolType2].show_tile_in_build_grid){
                if(Array.isArray(BUILDINGS_BY_KEYS[quickToolType2].show_tile_in_build_grid)){
                    for(let _image of BUILDINGS_BY_KEYS[quickToolType2].show_tile_in_build_grid){
                        _icon+=GetTileImage(_image,70,'quick_tool_icon')
                    }
                }else{
                    _icon+=GetTileImage(BUILDINGS_BY_KEYS[quickToolType2].show_tile_in_build_grid,70,'quick_tool_icon')
                }    
            }
            _icon+=GetTileImage(BUILDINGS_BY_KEYS[quickToolType2].image,70,'quick_tool_icon');
        }
        if(!_icon && quickToolVisible=='r' && BUILDINGS_BY_KEYS[quickToolType2]){
            _icon+=GetTileImage(BUILDINGS_BY_KEYS[quickToolType2].image,70,'quick_tool_icon');
            _icon+=GetTileImage('ui/remove_cross',70,'quick_tool_icon');
        }
        if(!_icon && quickToolVisible==10){
            _icon+=GetIconImage('deep_water',70);
        }
        if(!_icon && quickToolVisible==11){
            _icon+=GetIconImage('clay',70);
        }
        if(!_icon && quickToolVisible==12){
            _icon+=GetIconImage('buldoser',70);
        }
        if(!_icon && quickToolVisible==13){
            _icon+=GetTileImage('farmfield',70,'quick_tool_icon');
            _icon+=GetTileImage('ui/buldoser',70,'quick_tool_icon');
        }
        if(!_icon && quickToolVisible==14){
            _icon+=GetIconImage('salvage',70);
        }
        if(!_icon && quickToolVisible==15){
            _icon+=GetTileImage('broken_power',70,'quick_tool_icon');
            _icon+=GetTileImage('ui/remove_cross',70,'quick_tool_icon');        }
        
        _out+=_icon+'</div>';//2x to tu je

        if(quickToolActive){
            _out+=GetTextCAPS('ACTIVE');
        }else{
            _out+=GetTextCAPS('QUICK TOOL');
        }

        _out+='</div>';
        return _out;
    }
    return '';
}

function GetQuickToolActiveColor(){
    return '#fc0';
}

function RefreshQuickToolContainer(){
    if(quickToolVisible){
        SetInner('quick_tool_container',GetQuickToolDiv());
        
        if(hrac.nastavenia.leftHanded==2){
            SetX('quick_tool_container',10);
        }else{
            SetX('quick_tool_container',window.innerWidth-85);
        }
        if(quickToolActive){
            gebi('quick_tool_container').style.backgroundColor=GetQuickToolActiveColor();
            gebi('quick_tool_container').style.color='var(--dark-color)';
        }else{
            gebi('quick_tool_container').style.backgroundColor='var(--dark-color)';
            gebi('quick_tool_container').style.color='var(--light-color-2)';
        }
    }else{
        gebi('quick_tool_container').style.backgroundColor='var(--dark-color)';
        gebi('quick_tool_container').style.color='var(--light-color-2)';
        if(hrac.nastavenia.leftHanded==2){
            SetX('quick_tool_container',-85);
        }else{
            
            SetX('quick_tool_container',window.innerWidth+5);
        }
    }
}


function AdjustQuickToolY(){
    if(IsGridMenuVisible()){
        let _rect = GetRect('bottomGridMenuPopup_okno');
        if(_rect){
            SetY('quick_tool_container',GetWindowHeight() - 170 - _rect.height);
        }
    }else{
        SetY('quick_tool_container',GetWindowHeight() - 180-BOTTOM_PADDING);
    }
};


function TryShowQuickTool(tool,_type2){
    if(quickToolActive){
        
    }else{
        CloseGridMenu();
        ShowQuickTool(tool,_type2);
    }
}


const ad_watch_time_max=7000;
const MAX_ADS_PER_DAY=8;
const MAX_ADS_PER_DAY2=30;
const ADS_SUPER_CLICKERS=20;
const GEMS_IN_ADS=10;
let ad_watch_time=0;
let no_ad_in_turns=90;
let player_needs_gold=false;
let lastAdType=0;


function TryRemoveOldAd(){
    if(isAdCurrentlyWatched){
        return false;
    }
    if(isNaN(hrac.stats.ads_last_ad_start_date)){ //fix 20.10.2024 - remove later
        hrac.stats.ads_last_ad_start_date=new Date()*1;
    }
    let _sinceAdCreationMiliSeconds = (new Date()*1 - hrac.stats.ads_last_ad_start_date);

    if(_sinceAdCreationMiliSeconds > 15*60*1000){ //15*60*1000 = 15 minutes
        hrac.stats.ads_discarded_today++;
        hrac.currentAdId=0;
        no_ad_in_turns=20;
        RefreshAdButton();
    }
}

function IsRewardAdVisible(){
    return (hrac.currentAdId && rewardAdIsReady);
}

function TryGenerateAd(){
    if(hrac.stats.ads_discarded_today > 75) return false;
    if(hrac.stats.ads_watched_today > MAX_ADS_PER_DAY2) return false;
    if(hrac.currentAdId){
        if(tickCount%30==0){
            TryRemoveOldAd();
        }
        return false;
    } 
    if(tickCount%30==0){ //EACH SECOND
        if(!hrac.had_gold_ad_today && player_needs_gold){
            if(!rewardAdIsReady) return false;
            no_ad_in_turns=0; 
            hrac.currentAdId=6;
            RefreshAdButton();
            hrac.stats.ads_discarded_today++;
            hrac.had_gold_ad_today=1;
            player_needs_gold=false;
            return false;

        }
        if(no_ad_in_turns>0){
            no_ad_in_turns-=1;
            // console.log(no_ad_in_turns)
            return false;
        }
        if(hrac.enhanced_clicker){
            return false;
        }
        if(!hrac.ad_tutorial_done && (popupsVisible['basicPopup'] || popupsVisible['bottomMenuPopup'])){
            return false;
        }
        if(hrac.stats.towns_connected<3) return false;
        if(!rewardAdIsReady) return false;

        if(KnowsSuperClickers()){
            hrac.currentAdId=MyRand(1,7);
            if(hrac.stats.ads_watched_today > MAX_ADS_PER_DAY*0.5){
                hrac.currentAdId=GetRandomItemFromArray([1,2,5,6,7]);
            }
        }else{
            hrac.currentAdId=MyRand(1,2);    
        }
        if(lastAdType == hrac.currentAdId){
            hrac.currentAdId = 5;
            if(lastAdType == hrac.currentAdId){
                hrac.currentAdId = 2;
            }
        }
        if(hrac.stats.ads_watched_today<=0 && hrac.stats.ads_discarded_today<2 && HasLevel(5)){
            hrac.currentAdId=3;
        }
        lastAdType = hrac.currentAdId;
        RefreshAdButton();
        TryShowAdTutorial();

        hrac.stats.ads_last_ad_start_date = new Date()*1;
        hrac.stats.ads_discarded_today++;//uz tu aby hraci neabusovali refresh - stale neni uplne vsade osetrene ale aspon nauvod takto
    }
}

function GetAdRewardDescription(){
    let _out='';
    let _ad=GetAdObj(hrac.currentAdId);
    let _desc = GetText(_ad.description).replaceAll('{gold_number}',PMat(GoldForAd(),1));
    if(_ad.number1)_desc=_desc.replaceAll('{number1}',PCislo(_ad.number1));
    if(_ad.number2)_desc=_desc.replaceAll('{number2}',PCislo(_ad.number2));
    if(_ad.res_type)_desc=_desc.replaceAll('{resource}',Bold(PMat(_ad.res_count,_ad.res_type)));
    _out+=BR+_desc+BR;
    return _out;
}

function ShowPreAdMenu(){
    if(hrac.currentAdId){
        
        if(AD_tutorial_visible){
            hrac.ad_tutorial_done=1;
            AD_tutorial_visible=false;
            gebi('ad_img').style.zIndex = 0;
            ClosePopup('infoPopup');
            if(gebi('left_boxes_container')){
                gebi('left_boxes_container').style.zIndex = 'unset';
            }
            RefreshAdButton();
            
        }

        PlayTap();
        safeCaptureGameEvent('ad_menu_shown', { ad_id: hrac.currentAdId });
        let _out=GetAdRewardDescription();
        
        if(hrac.currentAdId==6){
            _out+=(CheckAndReturnUpgradeUpsale(11)?BR:'')+CheckAndReturnUpgradeUpsale(11,'CloseBasicPopup();');
        }

        _out+=BR+Button(GetText('Play AD'),'ShowAd(1);',{super_button:'teal'})+BRBR+Button(GetText('Discard'),'DiscardAd();',{sound:1})+BRBR;
        _out+=AdSkipperText(1);
        CloseBottomMenu();
        const imgUrl = getAssetUrl('public/images/effects/click_gem_bg.png');

        DoBasicPopup(_out,GetText('Reward AD')+BR+'<div class="glow-effect-reward-ad"><img src="' + imgUrl + '"></div>'+GetTileImage('ui/ad'+hrac.currentAdId,70,'ad-in-popup-label'),{centerised:1, max_width: GetSmallerPopupWidth()});
        HideAllFloatingTexts();
    }
}


function AdSkipperText(_cat){
    let _out='';
    if(hrac.ad_skippers>0){
        _out+=PIKA+FSize(18,GetText('or'))+PIKA+BRBR+Button(GetText('skip ad and claim reward'),'SkipAd('+_cat+');',{color:'green'})
        _out+=BRBR+GetText3('Add skippers left: ')+PMat(hrac.ad_skippers,'ad_skippers');
    }else if(HasLevel(AD_SKIP_LEVEL_REQ+1)){
        _out+=BR+Button(GetText('Buy AD-skippers'),'ShowAdSkipperBasicPacks();',{sound:1});
    }
    
    return _out;
}

let lastAdWasSkipped = false;
function SkipAd(_cat){
    if(hrac.ad_skippers>0){
        lastAdWasSkipped=true;
        CloseSecondaryPopup();
        hrac.ad_skippers--;
        hrac.stats.adSkippers_used++;
        if(_cat>10){
            hrac.stats.skipped_ads[_cat]++;
        }else{
            hrac.stats.skipped_ads[hrac.currentAdId]++;
        }
        lastAdCategory=_cat;
        ClaimAdReward();
        CloseBasicPopup();
    }
}

function DiscardAd(){
    safeCaptureGameEvent('ad_discarded',{ ad_id: hrac.currentAdId });
    // hrac.stats.ads_discarded_today++;
    no_ad_in_turns = 60*5;
    hrac.currentAdId=0;
    RefreshHeader();
    CloseBasicPopup();
    RefreshAdButton();
}

function GetEnahncedClickerAdIcon(){
    if(hrac.enhanced_clicker && hrac.enhanced_clicker.value == 5) return 2;
    if(hrac.enhanced_clicker && hrac.enhanced_clicker.value == 3) return 1;
    if(hrac.enhanced_clicker && hrac.enhanced_clicker.value == 2) return 5;
    return 5;
}

function RefreshAdButton(){
    
    let _y=25+headerHeight+TOP_PADDING;
    if(playerPackages && playerPackages.length){
        _y+=GetLeftBoxIconSize()+GetLeftBoxIconSpace();
    }

    
    if(IsRewardAdVisible()){
        let _out='<div id="ad_img_inner" ontouchstart="SliderLeftBoxStarted(event,this);" ontouchmove="SlidingleftBox(event,this);"  ontouchend="if(IsSlidedLeftBox(this))return false;ShowPreAdMenu();" class="ad-icon-div" style="width:'+GetLeftBoxIconSize()+'px;height:'+GetLeftBoxIconSize()+'px;" >'+GetTileImage('ui/ad'+hrac.currentAdId,GetLeftBoxIconSize(),0)+'</div>';
        if(AD_tutorial_visible){
            _out+='<div class="ad_arrow" >'+GetMultiTilesImages(['ui/upsalebut'],GetLeftBoxIconSize(),'')+'</div>';
        }
        SetWidth('ad_img',GetLeftBoxIconSize());
        SetHeight('ad_img',GetLeftBoxIconSize());

        SetInner('ad_img',_out);
        SetXY('ad_img',10,_y);
    }else{
        SetXY('ad_img',-100,_y);
    }
    
    if(hrac.claimedOfflineEarning){
        RefreshSpecialOfferLeftBox();
    }
}


function WatchOrSkipOut(_id){
    let _out=BRBR+Button(GetText('Play AD'),'ShowAd('+_id+');',{super_button:'teal'})
    if(hrac.ad_skippers>0){
        _out+=GetText('or')+BRBR+Button(GetText('skip ad and claim reward'),'SkipAd('+_id+');',{color:'green'})
        _out+=BR+GetText3('Add skippers left: ')+PCislo(hrac.ad_skippers);
    }
    return _out;
}

let isAdCurrentlyWatched=false;
let lastAdCategory=0;
function ShowAd(_adCat){
    lastAdWasSkipped=false;
    if(!rewardAdIsReady){
        InfoPopupText("AD is not ready, please try again later",1)        
        return false;
    }
    if(hrac.currentAdId || _adCat>=10){
        lastAdCategory = _adCat;
        CloseBottomMenu();
        CloseBasicPopup();
        CloseSecondaryPopup();
        showRewardAdTO = setTimeout(() => {
            ShowAdRewardMenu();
        }, 5000);
        if(IS_FLUTTER){
            if(!rewardAdIsReady){
                if(hrac.stats.ads_broken_today < 2){
                    hrac.stats.ads_broken_today++;
                    ShowAdRewardMenu();
                }
            }else{
                isAdCurrentlyWatched=true;
                rewardAdIsReady=false;
                hrac.stats.ads_watched_today++;
                if(_adCat>=10){
                    hrac.stats.ads_watched_total[_adCat]++;
                    safeCaptureGameEvent('ad_watching', { ad_id: _adCat });
                }else{
                    safeCaptureGameEvent('ad_watching', { ad_id: hrac.currentAdId });
                    hrac.stats.ads_watched_total[hrac.currentAdId]++;
                }
                sendToFlutter('{"event":"playRewarded"}');
            }
        }else{
            isAdCurrentlyWatched=true;
            safeCaptureGameEvent('ad_watching', { ad_id: hrac.currentAdId });
            hrac.stats.ads_watched_today++;
            if(_adCat>=10){
                hrac.stats.ads_watched_total[_adCat]++;
            }else{
                hrac.stats.ads_watched_total[hrac.currentAdId]++;
            }
            ad_watch_time=1;
            
            let _out=Center('Now you are watching a 30s reward ad'+BRBR+'<span id="ad_progress_span"></span>')+BRBR+Button('skip','CloseBasicPopup();ShowAdRewardMenu()');
            DoBasicPopup(_out,GetText('Reward AD'),{noclose:1});
        }
    }
}

function ProcessAd(){
    if(ad_watch_time){
        ad_watch_time+=SEC_FRACTAL;
        SetInner('ad_progress_span',(100*(ad_watch_time/ad_watch_time_max)).toFixed(1)+'%')
        if(ad_watch_time >= ad_watch_time_max){
            ad_watch_time=0;
            CloseBasicPopup();
            ShowAdRewardMenu();
            
        }
    }
}

let showRewardAdTO=0
function ShowAdRewardMenu(){
    if(showRewardAdTO){
        clearTimeout(showRewardAdTO);
    }
    if(!isAdCurrentlyWatched){
        return false;
    }
    let _out=Center(BR+GetText('Thank you')+BRBR+Button(GetText('Claim reward'),'ClaimAdReward();',{color:'green'})+BRBR);
    if(lastAdCategory==16){ //ta offline rewarda ide hned bez popupu
        ClaimAdReward();
    }else{
        DoPopupWithOptions({label: GetText('Reward AD'), text: _out, kde: 'rewardAdPopup', noclose:1, max_width: GetSmallerPopupWidth()});
    }
    safeCaptureGameEvent('ad_watched');
    PlaySound('tadaa2');
}




function ResetAdDelay(){
    no_ad_in_turns=300;
    if(hrac && hrac.stats && hrac.stats.ads_watched_today){
        if(hrac.stats.ads_watched_today > MAX_ADS_PER_DAY){
            no_ad_in_turns=900;   
        }
        if(hrac.stats.ads_watched_today > MAX_ADS_PER_DAY*2){
            no_ad_in_turns=1800;   
        }
    }
}

function ClaimAdReward(){
    ResetAdDelay();
    PlaySound('cash1');
    if(lastAdCategory==1){
        if(hrac.currentAdId==1){
            hrac.enhanced_clicker={
                value:3,
                amount:100,
            }
        }
        if(hrac.currentAdId==2){
            hrac.enhanced_clicker={
                value:5,
                amount:50,
            }
        }
        if(hrac.currentAdId==3){
            AddMat(GEMS_IN_ADS,'gems',0,1);
        }
        if(hrac.currentAdId==4){
            AddMat(ADS_SUPER_CLICKERS,'super_clickers',0,1,0,1);
        }
        if(hrac.currentAdId==5){
            hrac.enhanced_clicker={
                value:2,
                amount:200,
            }
        }
        if(hrac.currentAdId==6){
            AddMat(GoldForAd(),'gold',0,1);
        }
        if(hrac.currentAdId==7){
            AddRandomChest();
            AddRandomChest();
            AddRandomChest();
        }
        safeCaptureGameEvent('ad_reward_claimed',{ ad_id: hrac.currentAdId });
    
    }
    if(lastAdCategory==14){ // safe
        hrac.taken_safe_today++;
        
        AddMat(5,'gems',0,1);
        AddMat(safeGoldIndex*GoldForAd(),'gold',0,0);
        safeCaptureGameEvent('ad_reward_claimed',{ ad_id: lastAdCategory });
    }
    if(lastAdCategory==15){ // 3x income
        hrac.income_multiplier=3;
        hrac.income_multiplier_date=new Date()*1 + 60*AD_INCOME_MINUTES*1000;
        hrac.income_multiplier_date_start=new Date()*1;
        // if(testVersion)hrac.income_multiplier_date=new Date()*1 + 20*1000;
        hrac.income_multiplier_taken_total++;
        hrac.income_multiplier_taken_today++;
        safeCaptureGameEvent('ad_reward_claimed',{ ad_id: lastAdCategory });
        CloseBottomMenu();
    }
    if(lastAdCategory==16){ // %bonus from offline income PART 1
        hrac.offline_perc_bonus = GetOfflineAdBonusPerc();
        safeCaptureGameEvent('ad_reward_claimed',{ ad_id: lastAdCategory });
    }
    if(lastAdCategory==17){ // %special chest
        hrac.found_special_chest_today++;
        AddMat(10,'gems',0,2);
        AddMat(30,'super_clickers',0,1,0,1);
        AddMat(2*GoldForAd(),'gold',0,0);
        safeCaptureGameEvent('ad_reward_claimed',{ ad_id: lastAdCategory });
    }

    player_needs_gold=false;
    ad_watch_time=0;
    if(lastAdCategory<15){
        hrac.currentAdId=0;
    }
    anyActionDone++;

    if(!lastAdWasSkipped && lastAdCategory!=16){
        saveInTicks=2;
    }
    
    RefreshAdButton();
    RefreshHeader();
    CloseBasicPopup();
    ClosePopup('rewardAdPopup');
    isAdCurrentlyWatched=false;
    if(lastAdCategory==16){ // %bonus from offline income PART 2
        ShowOfflineEarnings(1);
    }

}

function GoldForAd(){
    return SimplifiedNumber(Mro(10000 + hrac.income*10 + 300*GetTownClickGold(myGridData[0][0])*(1+0.01*GetPlayerUpgradeValue(11)) ));
}










function GetAdObj(_id){
    return adTypes.find(a=>a &&a.id == _id);
}

let adTypes=[
    {
        id:1,
        description:'Watch an AD and get {number1}x clicking bonus for next {number2} clicks',
        number1: 3,
        number2: 100,
    },
    {
        id:2,
        description:'Watch an AD and get {number1}x clicking bonus for next {number2} clicks',
        number1: 5,
        number2: 50,
    },
    {
        id:3,
        description:'Watch an AD and get {resource}',
        res_count:GEMS_IN_ADS,
        res_type:2,
    },
    {
        id:4,
        description:'Watch an AD and get {resource}',
        res_count:ADS_SUPER_CLICKERS,
        res_type:6,
    },
    {
        id:5,
        description:'Watch an AD and get {number1}x clicking bonus for next {number2} clicks',
        number1: 2,
        number2: 200,
    },
    {
        id:6,
        description:'Watch an AD and get {gold_number}',
    },
    {
        id:7,
        description:'Spawns {number1} chests in map',
        number1: 3,
    },
];


const AD_INCOME_MINUTES=5;
const AD_INCOME_MULTIPLIER=3;
function ShowAdIncomeBoostPopup(){
    let _out='';
    if(!rewardAdIsReady){
        _out+=GetText('Reward AD is unavailable, try again later.');
        DoBasicPopup(_out,GetText('Information'),{centerised:1});
        return false;
    }
    hrac.tutorial.income_button++;
    _out+=GetText('{att1} times larger income of all resources for the next {att2} minutes',[AD_INCOME_MULTIPLIER,AD_INCOME_MINUTES]);
    _out+=BRBR+Button(GetText('Play AD'),'ShowAd(15);',{super_button:'teal'})+BR+AdSkipperText(15);
    
    
    DoBasicPopup(_out,GetText('Information'),{centerised:1});
}

function GetIncomeMultiplier(){
    if(!visitingFriend && hrac.income_multiplier_date > new Date()*1){
        return hrac.income_multiplier;
    }
    return 1;
}

function IsMultiIncomeReady(){
    return rewardAdIsReady && hrac.income_multiplier_taken_today < 3 && new Date()*1 - 2*60*60*1000 > hrac.income_multiplier_date;
}
function GetIncomeMultiplierButton(_superBut,_star){
    let _out='';
    if(IsMultiIncomeReady()){
        _out+=Button((_star?Bold(ColorSpan('green','*')+' '):'')+AD_INCOME_MULTIPLIER+'x '+GetText('income')+'!','ShowAdIncomeBoostPopup();',{color:_superBut?'':'basic',super_button:_superBut,class:!hrac?.tutorial?.income_button?'pulsableSmall2':''}); //3x income
    }
    return _out;
}








let AD_tutorial_visible=false;
function TryShowAdTutorial(){
    setTimeout(() => {
    // if(!testVersion)
        if(hrac.ad_tutorial_done || visitingFriend || popupsVisible['basicPopup'] || popupsVisible['bottomMenuPopup'] || AD_tutorial_visible){
            return false;
        }
    // if(!testVersion)
        if(ArraySum(hrac.stats.ads_watched_total)){ //neskor moze byt vymazane
            hrac.ad_tutorial_done=true;
            return false;
        }
        
            
        hrac.stats.ads_last_ad_start_date = new Date()*1 + 86400*1000; //nech to nezmizne pocas popupu
        if(!IsRewardAdVisible()){
            return false;
        }

        // return false; // DOCASNE lebo seems bugged
        AD_tutorial_visible = true;
        RefreshAdButton();
        // gebi('ad_img').style.zIndex = 99999;
        gebi('left_boxes_container').style.zIndex = 99999;
        SetX('upgrades_left_box',-100);
        SetX('buildings_left_box',-100);
        SetX('scb_div',-100);

        _options={};
        _options.text = GetText('Sometimes, you will get a pop-up that offers a special reward for watching an AD. Click on the highlighted icon to find out more!');
        _options.label = GetText('Information');
        _options.kde = 'infoPopup';
        _options.noclose = true;
        _options.centerised = true;
        _options.top_y = 170;
        if(playerPackages?.length){
            _options.top_y += 90;
        }
        DoPopupWithOptions(_options);
    }, 500);


}




const SUPPORT_EMAIL='support@postapotycoon.com';
let autoOfflineClaim=false;

function GetLinkOptionsHTML(currentUser) {
    let _out='';
    
    const linkedAccounts = currentUser?.linkedAccounts || [];
    
    linkedAccounts.forEach((link) => {
        if (link.isLinked) {
            _out+=BR+ColorSpan('green', link.provider.toUpperCase() +' - '+GetText('linked')+' '+GetIconImage('thumbsup',30,8));
        } else {
            _out+=Bold(GetText('Link Account'));
            _out+=BR+Button(link.provider.toUpperCase(), `LinkAccount()`);
        }
    });
    return _out;
}

function LinkAccount(options) {
    const withOverride = options?.withOverride;
    const withExist = options?.withExist;

    const event = {
        event: 'linkAccount',
        withOverride,
        withExist,
    };
    sendToFlutter(JSON.stringify(event));
    PleaseWaitPopup();
}

function GetSettingsInner(_activeTab){
    let _out='';
    _out+=InitTabInner('setting_tabs',[GetText('Game'),GetText('Settings'),GetText('Support'),GetText('Account')],_activeTab,'GetSettingsTab(','RefreshBottomPopupPosition();');
    
    return _out;

}

function SetSettingsTab(_activeTab){
    GetSettingsTab(_activeTab)
}


function GetSettingsTab(_activeTab){
    let _out='';
    let _showDebug = showExtraTestSettings>10;

    if(_activeTab==1){ //GAME
        _out+=FSize(12,GetText3('Game version: ')+FLUTTER_VERSION+'.'+GAME_VERSION+'.'+FRONTEND_VERSION);
        _out+=BRBR;
        _out+=Button(GetText('Scroll to main town'),'ScrollToMainCity(0,1);',{sound:1});
        if(HasLevel(COPPER_LEVEL_REQ)){
            _out+=Button(GetText('Select nearest structure: {att1}',GetText(BUILDINGS_BY_KEYS['sensor_tower'].name)),'SelectNearestSensorTower();',{sound:1});
        }
        if(!IS_FLUTTER){
            _out+=SPC+Button('Full screen','OpenFullscreen();CloseBottomMenu();');
        }
        if(HasLevel(2)){
            _out+=BRBR+Button(GetText('Full Map Screenshot'),'MakeScreenshot();');
        }
    

        _out+='<hr id="options_hr">';
        _out+='<label><input type="checkbox" '+(hrac.nastavenia.showIncome?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.showIncome=GCH(\'income_chb\');RefreshHeader();" id="income_chb">'+GetText('show income')+'</label>';
        // _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.offlineEarningAutoClaim?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.offlineEarningAutoClaim=GCH(\'offline_earn_chb\');" id="offline_earn_chb">'+GetText('auto claim offline earnings on game start')+'</label>';
        if(ExploredPollution()){
            _out+=BRBR+'<label ><input type="checkbox" '+(hrac.nastavenia.show_pollution_in_header?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.show_pollution_in_header=GCH(\'show_pollution_in_header_chb\');RefreshHeader();RefreshPackageY();RefreshAdButton();" id="show_pollution_in_header_chb">'+GetText('show pollution and power in header')+(showPollutionHeaderButton?GetTileImage('ui/upsalebut',20,'arrow_left pulsableBig'):'')+'</label>';
        }
        
        // _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.buildingsUnderlight?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.buildingsUnderlight=GCH(\'building_under_chb\');" id="building_under_chb">'+GetText('some buildings will have extra color - for better visualisation')+'</label>';
        _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.bigTownNumbers?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.bigTownNumbers=GCH(\'bigTownNumbers_chb\');ShowBottomMenu();" id="bigTownNumbers_chb">'+GetText('big town numbers when zoomed out')+'</label>';
        _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.restoration_info?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.restoration_info=GCH(\'restoration_info_chb\');ShowBottomMenu();" id="restoration_info_chb">'+GetText('Better restoration info')+'</label>';
        
        if(HasLevel(11)){
            _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.show_clay?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.show_clay=GCH(\'show_clay_chb\');TownLabelRefresh(1);" id="show_clay_chb">'+GetText('Show clay in goods overview')+'</label>';
        }
        if(HasLevel(5)){
            _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.displayMainTownLabel?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.displayMainTownLabel=GCH(\'displayMainTownLabel_chb\');TownLabelRefresh(1);" id="displayMainTownLabel_chb">'+GetText('always show main town label')+'</label>';
            _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.gem_purchase_confirmation?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.gem_purchase_confirmation=GCH(\'gem_purchase_confirmation_chb\');ShowBottomMenu();" id="gem_purchase_confirmation_chb">'+GetText("Don't ask for confirmation when buying buildings for gems.")+'</label>';
        }
        if(HasLevel(GRID_VIEW_LEVEL)){
            _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.default_grid_view?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;isActionGridView=hrac.nastavenia.default_grid_view=GCH(\'default_grid_view_chb\');ShowBottomMenu();" id="default_grid_view_chb">'+GetText('Default menu is in grid')+'</label>';
            _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.smallerGridMenu?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.smallerGridMenu=GCH(\'smallerGridMenu_chb\');ShowBottomMenu();" id="smallerGridMenu_chb">'+GetText('smaller grid menu')+'</label>';
        }
        // _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.leftHanded?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.leftHanded=GCH(\'leftHanded_chb\');" id="leftHanded_chb">'+GetText('left handed (buttons are oriented to the left)')+'</label>';
        if(HasUpgrade(59)){
            _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.super_gardening?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.super_gardening=GCH(\'super_gardening_chb\');TownLabelRefresh(1);" id="super_gardening_chb">'+GetText('Gardening will also remove hills and all destroyed buildings')+'</label>';
        }
        if(HasUpgrade(93)){
            _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.auto_multitool?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.auto_multitool=GCH(\'auto_multitool_chb\');TownLabelRefresh(1);" id="auto_multitool_chb">'+GetText('Multitool is always active')+'</label>';
        }
        if(HasUpgrade(35)){
            _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.hide_chests_on_big_zoom?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.hide_chests_on_big_zoom=GCH(\'hide_chests_on_big_zoom_chb\');TownLabelRefresh(1);" id="hide_chests_on_big_zoom_chb">'+GetText('Hide chests on extreme zoom out')+'</label>';
        }
        _out+=BRBR+GetText3('Restoration bar position:')+'<select onchange="anyActionDone++;hrac.nastavenia.bar_position=GV(\'sb_bar_position\');" id="sb_bar_position">';
        _out+='<option value="1" '+(hrac.nastavenia.bar_position==1?'selected="selected"':'')+'>'+GetText('left')+'</option>';
        _out+='<option value="2" '+(hrac.nastavenia.bar_position==2?'selected="selected"':'')+'>'+GetText('up')+'</option>';
        _out+='<option value="3" '+(hrac.nastavenia.bar_position==3?'selected="selected"':'')+'>'+GetText('right')+'</option>';
        _out+='</select>';
    }





    if(_activeTab==2){ //SETTINGS
        _out+='<label><input type="checkbox" '+(hrac.nastavenia.music?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.music=GCH(\'music_chb\');ShowBottomMenu();SetFlutterMusic();" id="music_chb">'+GetText('game music')+'</label>';
        _out+='<div class="slidecontainer">';
        _out+='<input type="range" min="1" max="100" value="'+hrac.nastavenia.music_volume+'" onchange="anyActionDone++;SetVolume(this,1);" class="slider" id="music_volume">';
        _out+='</div>';
        _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.sound?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.sound=GCH(\'sound_chb\');ShowBottomMenu();SetFlutterSound();" id="sound_chb">'+GetText('game sounds')+'</label>';
        _out+='<div class="slidecontainer">';
        _out+='<input type="range" min="1" max="100" value="'+hrac.nastavenia.sound_volume+'" onchange="anyActionDone++;SetVolume(this,2);" class="slider" id="sound_volume">';
        _out+='</div>';
        
        _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.show_save_notify?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.show_save_notify=GCH(\'show_save_notify_chb\');ShowBottomMenu();" id="show_save_notify_chb">'+GetText('show save notification at the bottom')+'</label>';
        _out+=BRBR+'<label><input type="checkbox" '+(hrac.nastavenia.biggerBottomMenu?'CHECKED="CHECKED"':'')+' onchange="anyActionDone++;hrac.nastavenia.biggerBottomMenu=GCH(\'bigger_bottom_menu_chb\');DeclickSubmenu();ShowBottomMenu();" id="bigger_bottom_menu_chb">'+GetText('higher bottom button bar')+'</label>';


        _out+=BRBR+GetText3('Menu orientation:')+'<select onchange="anyActionDone++;hrac.nastavenia.leftHanded=GV(\'sb_left_handedp\');ShowBottomMenu();SetSettingsTab(2);" id="sb_left_handedp">';
        _out+='<option value="0" '+(hrac.nastavenia.leftHanded==0?'selected="selected"':'')+'>'+GetText('middle')+'</option>';
        if(window.innerWidth>MAX_WIDTH+10){
            _out+='<option value="1" '+(hrac.nastavenia.leftHanded==1?'selected="selected"':'')+'>'+GetText('right')+'</option>';
        }
        _out+='<option value="2" '+(hrac.nastavenia.leftHanded==2?'selected="selected"':'')+'>'+GetText('left')+'</option>';
        _out+='</select>';
    
        _out+=BRBR+GetText3('Language:')+'<select onchange="anyActionDone++;SetLanguage();" id="sb_language">';
        if(LANGUAGES){
    
            LANGUAGES.sort((a,b)=> {
                if (a.name < b.name) {
                  return -1;
                }
                if (a.name > b.name) {
                  return 1;
                }
                return 0;
              });
    
            for(let i in LANGUAGES){
                if(LANGUAGES[i]?.percent>=70 || hrac.lang == LANGUAGES[i].code || _showDebug){
                    _out+='<option value="'+LANGUAGES[i].code+'" '+(hrac.lang==LANGUAGES[i].code?'selected="selected"':'')+'>'+LANGUAGES[i].name+(_showDebug?' :: '+LANGUAGES[i].percent+'%':'')+'</option>';
                }
            }
        }
        _out+='</select>';


        _out+=BRBR+GetText3('Country:')+'<select onchange="anyActionDone++;SetCountry();" id="sb_country" style="max-width:150px;">';
        if(COUNTRIES){
            for(let i in COUNTRIES){
                _out+='<option value="'+COUNTRIES[i].code+'" '+(currentUser?.attributes?.country==COUNTRIES[i].code?'selected="selected"':'')+'>'+COUNTRIES[i].name+'</option>';
            }
        }
        _out+='</select>';


        _out+=BRBR+GetText3('Details / performance:')+'<select onchange="anyActionDone++;SetDetails();" id="sb_details" style="max-width:150px;">';
        _out+='<option value="3" '+(hrac.nastavenia.details == 3?'selected="selected"':'')+'>'+GetText("High - higher frame rate")+'</option>';
        _out+='<option value="2" '+(hrac.nastavenia.details == 2?'selected="selected"':'')+'>'+GetText('Medium details')+'</option>';
        _out+='<option value="1" '+(hrac.nastavenia.details == 1?'selected="selected"':'')+'>'+GetText("Low - saves battery")+'</option>';
        _out+='</select>';


        _out+=BRBR;
    }

    if(_activeTab==3){ //SUPPORT
        _out+=BR+'<span onclick="navigator.clipboard.writeText(\''+SUPPORT_EMAIL+'\');AddFloatingTextToMousePos(\''+GetText('copied to memory')+'\');">'+GetText3('Support email: ')+Bold(SUPPORT_EMAIL)+'</span>';

        _out+=BRBR+Button(GetTextCAPS('fan page'),'',{link: 'https://www.facebook.com/profile.php?id=61566931872422'});
        if(new Date()*1 > 1733997108339 || showExtraTestSettings>10){
            _out+=BRBR+Button('DISCORD','',{link: 'https://discord.gg/KpXZPWz4KQ', color: 'teal'});
        }
        // _out+=BRBR+'<a class="button caps" target="_blank" href="https://www.facebook.com/profile.php?id=61566931872422"><div class="button-bottom-line" style="background-color:#B751BC;"></div>'+GetText('fan page')+'</a>';

        
    }

    if(_activeTab==4){ //ACCOUNT
        if(hrac.name){
            _out+=GetText('Player name')+': '+Bold(hrac.name);
        }
        if(hrac.stats.allowNameChange){
            _out+=BR+GetText('New player name')+': <input type="text" value="" onfocus="NameChangePopup();" maxlength="24" id="setting_name_input" placeholder="'+GetText('New player name')+'" >';
            // _out+=SPC+Button(GetText('Save User Name'),'SaveUserToDB();');
        }else{
            let _email = hrac.email;
            if(_email){
                if(_email.indexOf('powerplaymanager')>=0)_email='';
            }
            if(!_email){
                _out+=BR+GetText('E-mail')+': <input type="text" value="'+(_email?_email:'')+'" onfocus="EnterInputMode();" maxlength="64" id="setting_email_input" onchange="ChangeEmail();" placeholder="'+GetText('E-mail')+'" > '+GetText('type in your email if you want to be able to restore account if you lose phone.');
            }else{
                _out+=BR+GetText('E-mail')+': '+_email;

            }
        }
        _out+=BRBR;
        if(USER_ID){
            _out+=FSize(12,GetText('User id')+': <span ontouchend="CopyUserId();" onmousedown="CopyUserId();">'+Bold(USER_ID)+' '+FSize(10,'('+GetText("click to copy")+')')+'</span>');
        }
        if(IS_FLUTTER){
            _out+=BR + GetLinkOptionsHTML(currentUser);
        }

        if(canShowPrivacyOption){
            _out+=HR;
            _out+=Button(GetText('Privacy Options'),'ShowFlutterPrivacyOptions();');
        }
        
        _out+=BRBR;
        
        if(hrac.lang == 'cz' || hrac.lang=='sk'){
            _out+= Button("terms of service",'',{link:'https://www.powerplay.studio/sk/obchodne-podmienky'});
            _out+= Button("privacy policy",'',{link:'https://www.powerplay.studio/sk/ochrana-osobnych-udajov'});

            // _out+= '<a class="button caps" href="https://www.powerplay.studio/sk/obchodne-podmienky" target="_blank">'+GetText("terms of service")+'</a>';
            // _out+= SPC+'<a class="button caps" href="https://www.powerplay.studio/sk/ochrana-osobnych-udajov" target="_blank">'+GetText("privacy policy")+'</a>';
        }else{
            _out+= Button("terms of service",'',{link:'https://www.powerplay.studio/terms-of-service'});
            _out+= Button("privacy policy",'',{link:'https://www.powerplay.studio/privacy-policy'});
            
            // _out+= '<a class="button caps" href="https://www.powerplay.studio/terms-of-service" target="_blank">'+GetText("terms of service")+'</a>';
            // _out+= SPC+'<a class="button caps" href="https://www.powerplay.studio/privacy-policy" target="_blank">'+GetText("privacy policy")+'</a>';
        }
        _out+= Button(GetText("Game Rules"),'GameRulesPopup();',);
        _out+=BRBR;
        _out+=HR;
        _out+='<div style="text-align:right;">';
        _out+=Button(GetText('Delete account'),'ResetGame();',{color:'red'})+BRBR+'<div onclick="showExtraTestSettings++; if(showExtraTestSettings>10){enabledNeighbourCircle=0;ClickBottomMenu(4,1);}">'+ColorSpan('red',GetText('Warning, this will delete your game progress and your account!'))+'</div>';
        _out+='</div>';
    }



    if(_showDebug){
        _out+=HR;
        _out+=BR;

        // _out+=Button('back button TEST','backButtonFired();backButtonFired();')+BRBR;
        if(testVersion){
            _out+=Button('Save Game','ForceSave();');
        }
        _out+=Button('like game','like_discarded=false; tryShowLikePopup=true; enabledSaving2=0; CloseBottomMenu();');
        _out+=Button('test button','hrac.stats.bought_starter_packs=[];');
        _out+=Button('toggle render info','calculation_infos=!calculation_infos;');
        _out+=Button('toggle FPS','ToggleFPS();');
        _out+=Button('toggle DRAW','enabledDraw=!enabledDraw;');
        _out+=BR+'experimentalDraw is '+experimentalDraw;
        _out+=Button('toggle experimentalDraw','experimentalDraw=!experimentalDraw;');
        _out+=BR
        
        _out+=Button('refresh ad test','RefreshAdButton();');
        _out+=Button('reset SP popup','hrac.last_starter_offer_popup_date=0;');
        _out+=Button('reset SOP popup','hrac.last_special_offer_popup_date=0;');
        _out+=Button('reset recent sp','localStorage.setItem(\'recent_sp\',\'[]\');');
        _out+=Button('nova budova LeftBox','TryGenerateBuildingLeftBox(1);enabledSaving2=0;',{color:'red'});
        _out+=Button('frajky reset all upgrades','ResetAllUpgrades();',{color:'red'});
        _out+=Button(GetText('Restart app'),'RestartApp();');
        _out+=BRBR;
        _out+='screen width: '+window.innerWidth;
        _out+=BR+'zoom: '+zoomScale.toFixed(3);
        _out+=BR+(canvas_optimised?'yes, has second canvas':'');
        _out+=BR+'IS_IOS? : '+(IS_IOS?'YES':'no');
        _out+=BR;
        _out+=(connectionLost?1:0)+':';
        _out+=BR+'restoration offer bonus: '+hrac.restoration_offer_bonus+BR;
        _out+=(gamePaused?1:0)+':';
        _out+=saveErrors;
        
        if(!rewardAdIsReady){
            _out+=BR+'Flutter ad is not ready';
            
        }
        _out+=BR+(rewardAdIsReady?'FAReady':'FAnotready');
        _out+=BR+'month:'+GetDateMonth();
        _out+=BR+'day:'+GetDateDay();
        _out+=BR+'cislo datum do konca eventu:'+GetEndOfEventDateNum();
        _out+=BR+'duracia v mikrosekundach:'+(GetEndOfEventDateNum()-(new Date()*1))+' = '+(new Date(GetEndOfEventDateNum())) ;

        _out+=BR+'countOfOptimisedBlocks:'+countOfOptimisedBlocks;
        _out+=BR+'daysAfterRegistration:'+hrac.stats.daysAfterRegistration+' mod1: '+(hrac.stats.daysAfterRegistration%1);
        _out+=BR+'OPTIM_GRID_STEP:'+OPTIM_GRID_STEP;
        _out+=BR+'NAIT:'+no_ad_in_turns;
        _out+=BR+'EC:'+(hrac.enhanced_clicker?hrac.enhanced_clicker:0);
        _out+=BR+'ADT:'+hrac.stats.ads_discarded_today;
        _out+=BR+'CAI:'+hrac.currentAdId;
        _out+=Button('toggle CPU','InitCanvas('+(useCPU?false:true)+',false); CloseBottomMenu();');
        _out+=BR+'useCPU:'+useCPU;
        _out+=BR+'failed ad loads:'+countOfFlutterAdLoadfails;
        _out+=BR+'ads watched today: '+hrac.stats.ads_watched_today;
        _out+=BR+'testNumOptimizedGridDraws: '+PCislo(testNumOptimizedGridDraws);
        _out+=BR+'drawErrors: '+PCislo(drawErrors);
        for(let _e of errors){
            _out+=HR+_e[0]+BR+_e[1]+BR+_e[2]+BR+_e[3]+BR+_e[4]+BR;
        }
        
        // _out+=Button('RESET game progress','Restart();')+ColorSpan('red','Warning, this will delete your game progress!');
        // _out+=Button('back button TEST','backButtonFired();backButtonFired();')+BRBR;
        _out+=Button('RESET game progress','Restart();')+ColorSpan('red','Warning, this will reset your game and will add some boost!');
        _out+=BRBR;
    }else{
       
        
    }


    

    if(showPollutionHeaderButton){
        showPollutionHeaderButton=0;
        setTimeout(() => {
            if(gebi('options_hr')){
                let _rect = GetRect('options_hr');
                let _rect2 = GetRect('bottomMenuPopup_okno_in_2');
                gebi('bottomMenuPopup_okno_in_2').style.overflowY='auto';
                gebi('bottomMenuPopup_okno_in_2').scrollTop = _rect.top - _rect2.top;
            }
        }, 350);
    }

    return _out;
}

function ResetAllUpgrades(){
    enabledSaving2=0;
    // hrac.upgrades=[];
    for(let i in UPGRADES_BY_ID){
        hrac.upgrades[i]=0;
    }
    ClickBottomMenu(2);
    // CloseBottomMenu();
}

function CopyUserId(){
    navigator.clipboard.writeText(USER_ID);
    AddFloatingTextToMousePos(GetText('copied to memory'));
}

function Gttli(_t){
    return '<li>'+GetText(_t)+'</li>';
}

function GameRulesPopup(){
    let _out='';

    _out+=GetText("rule1");
    _out+='<ul>';
    _out+=Gttli("rule2");
    _out+=Gttli("rule3");
    _out+=Gttli("rule4");
    _out+=Gttli("rule5");
    _out+=Gttli("rule6");
    _out+=Gttli("rule7");
    _out+=Gttli("rule8");
    _out+='</ul>';

    _out+=GetText("rule9");
    _out+='<ul>';
    _out+=Gttli("rule10");
    _out+=Gttli("rule11");
    _out+=Gttli("rule12");
    _out+=Gttli("rule13");
    _out+=Gttli("rule14");
    _out+=Gttli("rule15");
    _out+=Gttli("rule16");
    _out+=Gttli("rule17");
    _out+=Gttli("rule18");
    _out+='</ul>';

    DoBasicPopup(_out,GetText('Game Rules'),{});
}


function SetDetails(){
    hrac.nastavenia.details = GV('sb_details')*1;
    experimentalDraw = false;
    if(hrac.nastavenia.details==1){
        experimentalDraw = true;
    }
}

function SetCountry(){
    PleaseWaitPopup();
    const _country = GV('sb_country');
    console.log(_country)
    updateUser({country: _country})
    .then(()=>{
        if(currentUser?.attributes){
            currentUser.attributes.country = _country;
        }
        CloseLoadingPopup();
    })
    .catch((err) => {
        console.error(err);
        DoBasicPopup(GetText('Something went wrong. Please try again later.'),GetText('Information'),{centerised:true});
        CloseLoadingPopup();
    });
}

function SetLanguage(){
    PleaseWaitPopup();
    const _lang = GV('sb_language');
    if(_lang){
        hrac.lang = _lang;
        updateUser({lang: _lang})
        .then(()=>{
            SetLanguage2(_lang)
        })
        .catch((err) => {
            console.error(err);
            DoBasicPopup(GetText('Something went wrong. Please try again later.'),GetText('Information'),{centerised:true});
            CloseLoadingPopup();
        });
        sendToFlutter({"event": "setLanguage", "language": _lang});
    }
}

async function SetLanguage2(_lang){
    hrac.lang = _lang;
    CloseBottomMenu();
    localeString = await getTranslationsCall(hrac.lang?hrac.lang:'en');
    ShowBottomMenu();
    RefreshHeader();
    CloseLoadingPopup();

}


let showExtraTestSettings=0;
let showPollutionHeaderButton=0;
let calculation_infos=false;
let calculation_info_index=0;
let blockCalculations=0;
let blockRedraws=0;

function ForceSave(){
    enabledSaving2=1; 
    CloseBottomMenu();
    saveInTicks=2;
    anyActionDone=1;
    doSaveNotify=1;
    // SaveGame(1);    
}


// function ChangeName(){
//     hrac.name = gebi('setting_name_input').value.replaceAll('"','').replaceAll('`','').replaceAll("'",'').replaceAll("  ",' ').trim();
// }
let nameChangeTO=0;
function NameChangePopup(){
    CloseBottomMenu();
    let _out='';
    _out+='';

    _out+=BR+GetText('New player name')+': <input type="text" value="" maxlength="24" id="setting_name_input" placeholder="'+GetText('New player name')+'" >';

    _out+=BRBR+Button(GetText('cancel'),'CloseBottomMenu(); PlaySound(\'dialog_close\'); clearTimeout(nameChangeTO);',{color:'red'})+SPC+Button(GetText('Save User Name'),'clearTimeout(nameChangeTO); SaveUserToDB();',{color:'blue'});

    let _options={
        kde:'bottomMenuPopup',
        // refresh_id: 'bm_4',
        at_bottom:1,
        centerised:true,
        closefun:'',
        noclose:1,
        label:GetText('New player name')
    }
    _options.text = _out;

    DoPopupWithOptions(_options);
    setTimeout(() => {
        EnterInputMode();
    }, 150);
    nameChangeTO=setTimeout(() => {
        if(gebi('setting_name_input'))gebi('setting_name_input').focus();
    }, 750);
}
function SaveUserToDB(){
    let _newName= gebi('setting_name_input').value.replaceAll('"','').replaceAll('`','').replaceAll("'",'').replaceAll("  ",' ').trim();
    if(_newName == ''){
        WarningPopup(GetText('Set your Username first, please.'));
        return false;
    }

    // buyNameChangeCall({name: _newName})
    updateUser({name: _newName})
    .then(()=>{
        hrac.stats.allowNameChange=0;
        hrac.name=_newName;
        CloseBottomMenu();
    })
    .catch((err) => {
        if (err instanceof ApiError) {
            if (err.code === 'USER_NAME_ALREADY_TAKEN') {
                DoBasicPopup(BR+GetText('Name already exists. Please choose another one.'),GetText('Information'),{centerised:1});
                return;
            }
        }
        console.error(err);
        DoBasicPopup(GetText('Something went wrong. Please try again later.'),GetText('Information'),{centerised:true});
    });
}

function ChangeEmail(){
    hrac.email = gebi('setting_email_input').value.replaceAll('"','').replaceAll('`','').replaceAll("'",'').replaceAll("  ",' ').trim();
}


function EnterInputMode(){
    if(!IsJablko()){
        SetY('bottomGridMenuPopup_okno',80);
        SetY('bottomMenuPopup_okno',80);
    }
    allGoodsVisible=0;
    RefreshHeader();
}

function MakeScreenshot(){
    if(!gamePaused){


        gamePaused=1;
        CloseBottomMenu();
        PleaseWaitPopup();
            
        setTimeout(async () => {
            
            let _zoom = zoomScale;
            await Draw(0,1);
            zoomScale = _zoom;
            let _imageURI =  canvas.toDataURL('png');
            
            // console.log(_base64Image)
            CloseLoadingPopup();
            if(IS_FLUTTER){
                let _base64Image = _imageURI.split(',')[1];
                sendToFlutter('{ "event": "downloadImage","base64Image": "'+_base64Image+'"}');
                CloseBasicPopup();
            }else{
                let _out=Center(GetText('Screenshot done! Download it from link below.'))+BRBR;
                _out+=Center('<a onclick="CloseBasicPopup();" href="'+_imageURI+'" download="PostApoMap_'+GetPlayerLevel()+'_'+hrac.stats.clears+'.png">'+GetText('Download')+'</a> ')+BRBR;
                DoBasicPopup(_out,GetText('Screenshot'));

            }


            ResetCanvasSize();
                       
            gamePaused=0;
        }, 350);
    }
}

// let last_volume_change_time=Date.now();
function SetVolume(_this,_type){
    if(_type==1){
        hrac.nastavenia.music_volume = _this.value*1;
        sendToFlutter('{ "event": "setMusicVolume","volume": '+(hrac.nastavenia.music_volume)+' }');
    }
    if(_type==2){
        hrac.nastavenia.sound_volume = _this.value*1;
        sendToFlutter('{ "event": "setSoundVolume","volume": '+(hrac.nastavenia.sound_volume)+' }');
        // if(Date.now() - last_volume_change_time > 250){
        //     last_volume_change_time = Date.now();
        //     PlaySound('tap');
        // }
        PlaySound('tap');
    }
}




let showFPS=false;
function ToggleFPS(){
    showFPS=!showFPS; 
    if(showFPS)ShowJS('fps_container');
    else HideDiv('fps_container');
    AdjustFPSwindow(); 
    CloseBottomMenu();
    framesSinceLast=0;
    framesDate=new Date();
}

function AdjustFPSwindow(){
    if(showFPS){

        if(IsGridMenuVisible()){
            let _rect = GetRect('bottomGridMenuPopup_okno');
            if(_rect){
                SetY('fps_container',GetWindowHeight() - 110 - _rect.height);
            }
        }else{
            SetY('fps_container',GetWindowHeight() - 110-BOTTOM_PADDING);
        }
    }
}

let framesSinceLast=0;
let framesDate=0;
function CalculateFPS(){
    if(showFPS){
        framesSinceLast++;
        if(tickCount && tickCount%30==0){
            if(framesDate>0){

                AdjustFPSwindow();
                
                let _dif = new Date() - framesDate;
                let _fps = framesSinceLast* (1000/_dif);
                SetInner('fps_container','FPS: '+_fps.toFixed(1));
                // SetInner('fps_container','FPS: '+_dif);
                
            }

            framesSinceLast=0;
            framesDate = new Date();
        }
    }
}


/**
 * Called from flutter
 * @param {*} name, status of linking ('linked' | 'linkedWithReload' | 'linkedWithConflict' | 'failed')
 * @param {*} conflictedUserId, userId of user that is already linked to this account
 */
async function linkingResult(name, conflictedUserId) {
    try {
        await safeCaptureGameEvent('linking_result', { name, conflictedUserId });

        switch(name) {
            case 'linked': {
                currentUser = await getMyself();
                
                CloseBottomMenu();
                CloseLoadingPopup();
                DoBasicPopup(GetText('You were linked successfully!'),GetText('Information'),{centerised:true});
                break;
            }
            case 'linkedWithReload': {
                // flutter called this when linking was successful and we are going to reload the page
                CloseBottomMenu();
                CloseLoadingPopup();
                break;
            }
            case 'linkedWithConflict': {
                // flutter called this when there is conflicted user, we are going to show options
                if (!conflictedUserId) {
                    DoBasicPopup(ColorSpan('red',GetText('Linking failed!')),GetText('Information'),{centerised:true});
                    return;
                }
                const [actualUser, conflictedUser] = await Promise.all([
                    getUserGameData(currentUser.id),
                    getUserGameData(conflictedUserId),
                ]);

                let _out=GetText('We have 2 accounts connected to you.');
                _out+=BR+GetText('Choose which one you want to link / use:');
                _out+=BRBR+Bold(GetText3('Current:'));

                // _out+=BR+GetText('Player name')+':'+actualUser.name;
                _out+=BR+GetText3('Player level:')+PCislo(actualUser.gameData.town_best_level);
                _out+=BR+GetText3('Cleared area:')+PCislo(actualUser.gameData.clears);
                _out+=BR+GetText3('Income:')+PCislo(Mro(actualUser.gameData.income));
                _out+=BR+Button(GetText('use:')+' '+Bold(actualUser.name),'LinkAccount({withExist: false,withOverride: true});');
                
                _out+=BRBR+Bold(GetText3('Linked:'));
                _out+=BR+GetText3('Player level:')+PCislo(conflictedUser.gameData.town_best_level);
                _out+=BR+GetText3('Cleared area:')+PCislo(conflictedUser.gameData.clears);
                _out+=BR+GetText3('Income:')+PCislo(Mro(conflictedUser.gameData.income));
                _out+=BR+Button(GetText('use:')+' '+Bold(conflictedUser.name),'LinkAccount({withExist: true,withOverride: false});');
                // _out+=BR+GetText3('Income:')+PCislo(conflictedUser.gameData.income);
                _out+=BR+Bold(ColorSpan('var(--red)',GetText('Warning: you will lose the other account.')));
                
                DoBasicPopup(_out,GetText('Information'),{centerised:1});

                CloseLoadingPopup();
                break;
            }
            case 'failed': {
                // flutter called this when linking failed, or user cancelled linking
                CloseLoadingPopup();
                DoBasicPopup(ColorSpan('red',GetText('Linking failed!')),GetText('Information'),{centerised:true});
                break;
            }
            default: {
                CloseLoadingPopup();
                throw new Error(`Unknown linking result name: ${name}`);
            }
        }

    } catch (err) {
        await safeCaptureGameEvent('linking_result_error', { name, conflictedUserId, error: err.message, stack: err.stack });
    }
}
